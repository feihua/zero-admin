// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	address "zero-admin/front-api/internal/handler/address"
	auth "zero-admin/front-api/internal/handler/auth"
	cart "zero-admin/front-api/internal/handler/cart"
	category "zero-admin/front-api/internal/handler/category"
	collect "zero-admin/front-api/internal/handler/collect"
	home "zero-admin/front-api/internal/handler/home"
	order "zero-admin/front-api/internal/handler/order"
	product "zero-admin/front-api/internal/handler/product"
	"zero-admin/front-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: address.AddressListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/save",
				Handler: address.AddressSaveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/delete",
				Handler: address.AddressDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail",
				Handler: address.AddressDetailHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/address"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/wxMiniAuth",
				Handler: auth.WxMiniAuthHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/index/:userId",
				Handler: cart.CartListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/add",
				Handler: cart.CartAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/fastadd",
				Handler: cart.CartFastAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/checked",
				Handler: cart.CartCheckedHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/checkout",
				Handler: cart.CartCheckOutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/delete",
				Handler: cart.CartDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/update",
				Handler: cart.CartUpdateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/cart"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/getfirstcategory",
				Handler: category.GetFirstCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getsecondcategory",
				Handler: category.GetSecondCategoryHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/catalog"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: collect.CollectListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/addordelete",
				Handler: collect.AddordeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/collect"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/home/index",
				Handler: home.HomeIndexHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: order.OrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: order.OrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/cancel",
				Handler: order.OrderCancelHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/refund",
				Handler: order.OrderRefundHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/confirm",
				Handler: order.OrderConfirmHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/delete",
				Handler: order.OrderDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/goods",
				Handler: order.OrderGoodsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/comment",
				Handler: order.OrderCommentHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/detail",
				Handler: product.GoodsDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/category",
				Handler: product.GoodsCategoryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/goods"),
	)
}
