// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4

package handler

import (
	"net/http"

	home "github.com/feihua/zero-admin/api/front/internal/handler/home"
	memberaddress "github.com/feihua/zero-admin/api/front/internal/handler/member/address"
	memberattention "github.com/feihua/zero-admin/api/front/internal/handler/member/attention"
	membercollection "github.com/feihua/zero-admin/api/front/internal/handler/member/collection"
	membercoupon "github.com/feihua/zero-admin/api/front/internal/handler/member/coupon"
	memberhistory "github.com/feihua/zero-admin/api/front/internal/handler/member/history"
	membermember "github.com/feihua/zero-admin/api/front/internal/handler/member/member"
	ordercart "github.com/feihua/zero-admin/api/front/internal/handler/order/cart"
	orderorder "github.com/feihua/zero-admin/api/front/internal/handler/order/order"
	orderpay "github.com/feihua/zero-admin/api/front/internal/handler/order/pay"
	productbrand "github.com/feihua/zero-admin/api/front/internal/handler/product/brand"
	productcategory "github.com/feihua/zero-admin/api/front/internal/handler/product/category"
	productproduct "github.com/feihua/zero-admin/api/front/internal/handler/product/product"
	"github.com/feihua/zero-admin/api/front/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/index",
				Handler: home.IndexHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/home"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addAddress",
				Handler: memberaddress.AddAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteAddress",
				Handler: memberaddress.DeleteAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/querAddressDetail",
				Handler: memberaddress.QueryAddressDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryAddressList",
				Handler: memberaddress.QueryAddressListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateAddress",
				Handler: memberaddress.UpdateAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateAddressStatus",
				Handler: memberaddress.UpdateAddressStatusHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addAttention",
				Handler: memberattention.AddAttentionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/clearAttention",
				Handler: memberattention.ClearAttentionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteAttention",
				Handler: memberattention.DeleteAttentionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryAttentionList",
				Handler: memberattention.QueryAttentionListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addtCollection",
				Handler: membercollection.AddCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/clearCollection",
				Handler: membercollection.ClearCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteCollection",
				Handler: membercollection.DeleteCollectionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCollectionList",
				Handler: membercollection.QueryCollectionListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addCoupon",
				Handler: membercoupon.AddCouponHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCouponList",
				Handler: membercoupon.QueryCouponListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCouponListByCart",
				Handler: membercoupon.QueryCouponListByCartHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member/coupon"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addReadHistory",
				Handler: memberhistory.AddReadHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/clearReadHistory",
				Handler: memberhistory.ClearReadHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteReadHistory",
				Handler: memberhistory.DeleteReadHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryReadHistoryList",
				Handler: memberhistory.QueryReadHistoryListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: membermember.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: membermember.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: membermember.InfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateMember",
				Handler: membermember.UpdateMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updatePassword",
				Handler: membermember.UpdatePasswordHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/member"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addCart",
				Handler: ordercart.AddCartItemHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/clear",
				Handler: ordercart.ClearCarItemHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deleteCartItem",
				Handler: ordercart.DeleteCartItemHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCarItemList",
				Handler: ordercart.QueryCarItemListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryCartItemDetail",
				Handler: ordercart.QueryCartItemDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/queryPromotionList",
				Handler: ordercart.QueryPromotionListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateCartItemAttr",
				Handler: ordercart.UpdateCartItemAttrHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateCartItemQuantity",
				Handler: ordercart.UpdateCartItemQuantityHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/cancelUserOrder",
				Handler: orderorder.CancelUserOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/confirmReceiveOrder",
				Handler: orderorder.ConfirmReceiveOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deleteOrder",
				Handler: orderorder.DeleteOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/generateConfirmOrder",
				Handler: orderorder.GenerateConfirmOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/generateOrder",
				Handler: orderorder.GenerateOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryOrderDetail",
				Handler: orderorder.QueryOrderDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryOrderList",
				Handler: orderorder.QueryOrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/returnApply",
				Handler: orderorder.ReturnApplyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orderPay",
				Handler: orderpay.OrderPayHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orderPayQuery/:orderId",
				Handler: orderpay.OrderPayQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/order"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/notify",
				Handler: orderpay.NotifyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/pay"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/queryBrandList",
				Handler: productbrand.QueryBrandListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/queryProductCateList",
				Handler: productcategory.QueryProductCateListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/queryProductDetail",
				Handler: productproduct.QueryProductDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/queryProductList",
				Handler: productproduct.QueryProductListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/product"),
	)
}
