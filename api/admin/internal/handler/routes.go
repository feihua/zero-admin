// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2

package handler

import (
	"net/http"

	cmsprefrence_area "github.com/feihua/zero-admin/api/admin/internal/handler/cms/prefrence_area"
	cmssubject "github.com/feihua/zero-admin/api/admin/internal/handler/cms/subject"
	cmssubject_category "github.com/feihua/zero-admin/api/admin/internal/handler/cms/subject_category"
	omscompany_address "github.com/feihua/zero-admin/api/admin/internal/handler/oms/company_address"
	omsorder_main "github.com/feihua/zero-admin/api/admin/internal/handler/oms/order_main"
	omsorder_return "github.com/feihua/zero-admin/api/admin/internal/handler/oms/order_return"
	omsorder_setting "github.com/feihua/zero-admin/api/admin/internal/handler/oms/order_setting"
	omsreturn_reason "github.com/feihua/zero-admin/api/admin/internal/handler/oms/return_reason"
	pmsproduct_attribute "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_attribute"
	pmsproduct_attribute_group "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_attribute_group"
	pmsproduct_brand "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_brand"
	pmsproduct_category "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_category"
	pmsproduct_sku "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_sku"
	pmsproduct_spec "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_spec"
	pmsproduct_spec_value "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_spec_value"
	pmsproduct_spu "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_spu"
	smscoupon "github.com/feihua/zero-admin/api/admin/internal/handler/sms/coupon"
	smscoupon_record "github.com/feihua/zero-admin/api/admin/internal/handler/sms/coupon_record"
	smscoupon_scope "github.com/feihua/zero-admin/api/admin/internal/handler/sms/coupon_scope"
	smscoupon_type "github.com/feihua/zero-admin/api/admin/internal/handler/sms/coupon_type"
	smshome_advertise "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_advertise"
	smshome_brand "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_brand"
	smshome_new_product "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_new_product"
	smshome_recommend_product "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_recommend_product"
	smshome_recommend_subject "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_recommend_subject"
	smsseckill_activity "github.com/feihua/zero-admin/api/admin/internal/handler/sms/seckill_activity"
	smsseckill_product "github.com/feihua/zero-admin/api/admin/internal/handler/sms/seckill_product"
	smsseckill_reservation "github.com/feihua/zero-admin/api/admin/internal/handler/sms/seckill_reservation"
	smsseckill_session "github.com/feihua/zero-admin/api/admin/internal/handler/sms/seckill_session"
	sysdept "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dept"
	sysdict_item "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dict_item"
	sysdict_type "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dict_type"
	syslog "github.com/feihua/zero-admin/api/admin/internal/handler/sys/log"
	sysmenu "github.com/feihua/zero-admin/api/admin/internal/handler/sys/menu"
	syspost "github.com/feihua/zero-admin/api/admin/internal/handler/sys/post"
	sysrole "github.com/feihua/zero-admin/api/admin/internal/handler/sys/role"
	syssys_notice "github.com/feihua/zero-admin/api/admin/internal/handler/sys/sys_notice"
	sysupload "github.com/feihua/zero-admin/api/admin/internal/handler/sys/upload"
	sysuser "github.com/feihua/zero-admin/api/admin/internal/handler/sys/user"
	umsmember "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member"
	umsmember_address "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_address"
	umsmember_consume_setting "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_consume_setting"
	umsmember_growth "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_growth"
	umsmember_level "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_level"
	umsmember_points "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_points"
	umsmember_rule_setting "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_rule_setting"
	umsmember_sign "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_sign"
	umsmember_statistics "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_statistics"
	umsmember_tag "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_tag"
	umsmember_task "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_task"
	"github.com/feihua/zero-admin/api/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addPreferredArea",
					Handler: cmsprefrence_area.AddPreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deletePreferredArea",
					Handler: cmsprefrence_area.DeletePreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPreferredAreaDetail",
					Handler: cmsprefrence_area.QueryPreferredAreaDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPreferredAreaList",
					Handler: cmsprefrence_area.QueryPreferredAreaListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePreferredArea",
					Handler: cmsprefrence_area.UpdatePreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePreferredAreaStatus",
					Handler: cmsprefrence_area.UpdatePreferredAreaStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/prefrenceArea"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSubject",
					Handler: cmssubject.AddSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSubject",
					Handler: cmssubject.DeleteSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectDetail",
					Handler: cmssubject.QuerySubjectDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectList",
					Handler: cmssubject.QuerySubjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubject",
					Handler: cmssubject.UpdateSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubjectStatus",
					Handler: cmssubject.UpdateSubjectStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/subject"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSubjectCategory",
					Handler: cmssubject_category.AddSubjectCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSubjectCategory",
					Handler: cmssubject_category.DeleteSubjectCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectCategoryDetail",
					Handler: cmssubject_category.QuerySubjectCategoryDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectCategoryList",
					Handler: cmssubject_category.QuerySubjectCategoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubjectCategory",
					Handler: cmssubject_category.UpdateSubjectCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubjectCategoryStatus",
					Handler: cmssubject_category.UpdateSubjectCategoryStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/subjectCategory"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCompanyAddress",
					Handler: omscompany_address.AddCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCompanyAddress",
					Handler: omscompany_address.DeleteCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCompanyAddressDetail",
					Handler: omscompany_address.QueryCompanyAddressDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCompanyAddressList",
					Handler: omscompany_address.QueryCompanyAddressListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddress",
					Handler: omscompany_address.UpdateCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddressReceiveStatus",
					Handler: omscompany_address.UpdateCompanyAddressReceiveStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddressSendStatus",
					Handler: omscompany_address.UpdateCompanyAddressSendStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/companyAddress"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/closeOrder",
					Handler: omsorder_main.CloseOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderMain",
					Handler: omsorder_main.DeleteOrderMainHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delivery",
					Handler: omsorder_main.DeliveryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderMainDetail",
					Handler: omsorder_main.QueryOrderMainDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderMainList",
					Handler: omsorder_main.QueryOrderMainListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMoneyInfo",
					Handler: omsorder_main.UpdateMoneyInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNote",
					Handler: omsorder_main.UpdateNoteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderMain",
					Handler: omsorder_main.UpdateOrderMainHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/order"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnDetail",
					Handler: omsorder_return.QueryOrderReturnDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnList",
					Handler: omsorder_return.QueryOrderReturnListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderReturn",
					Handler: omsorder_return.UpdateOrderReturnHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/orderReturn"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addOrderSetting",
					Handler: omsorder_setting.AddOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderSetting",
					Handler: omsorder_setting.DeleteOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderSettingDetail",
					Handler: omsorder_setting.QueryOrderSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderSettingList",
					Handler: omsorder_setting.QueryOrderSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSetting",
					Handler: omsorder_setting.UpdateOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSettingIsDefault",
					Handler: omsorder_setting.UpdateOrderSettingIsDefaultHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSettingStatus",
					Handler: omsorder_setting.UpdateOrderSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/setting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addReturnReason",
					Handler: omsreturn_reason.AddOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteReturnReason",
					Handler: omsreturn_reason.DeleteOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryReturnReasonDetail",
					Handler: omsreturn_reason.QueryOrderReturnReasonDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryReturnReasonList",
					Handler: omsreturn_reason.QueryOrderReturnReasonListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateReturnReason",
					Handler: omsreturn_reason.UpdateOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateReturnReasonStatus",
					Handler: omsreturn_reason.UpdateOrderReturnReasonStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/returnReason"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addAttribute",
					Handler: pmsproduct_attribute.AddProductAttributeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteAttribute",
					Handler: pmsproduct_attribute.DeleteProductAttributeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryAttributeDetail",
					Handler: pmsproduct_attribute.QueryProductAttributeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryAttributeList",
					Handler: pmsproduct_attribute.QueryProductAttributeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateAttribute",
					Handler: pmsproduct_attribute.UpdateProductAttributeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateAttributeStatus",
					Handler: pmsproduct_attribute.UpdateProductAttributeStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/attribute"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addAttributeGroup",
					Handler: pmsproduct_attribute_group.AddProductAttributeGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteAttributeGroup",
					Handler: pmsproduct_attribute_group.DeleteProductAttributeGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryAttributeGroupDetail",
					Handler: pmsproduct_attribute_group.QueryProductAttributeGroupDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryAttributeGroupList",
					Handler: pmsproduct_attribute_group.QueryProductAttributeGroupListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateAttributeGroup",
					Handler: pmsproduct_attribute_group.UpdateProductAttributeGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateAttributeGroupStatus",
					Handler: pmsproduct_attribute_group.UpdateProductAttributeGroupStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/attributeGroup"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductBrand",
					Handler: pmsproduct_brand.AddProductBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductBrand",
					Handler: pmsproduct_brand.DeleteProductBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductBrandDetail",
					Handler: pmsproduct_brand.QueryProductBrandDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductBrandList",
					Handler: pmsproduct_brand.QueryProductBrandListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductBrand",
					Handler: pmsproduct_brand.UpdateProductBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductBrandRecommendStatus",
					Handler: pmsproduct_brand.UpdateProductBrandRecommendStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductBrandStatus",
					Handler: pmsproduct_brand.UpdateProductBrandStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/brand"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductCategory",
					Handler: pmsproduct_category.AddProductCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductCategory",
					Handler: pmsproduct_category.DeleteProductCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductCategoryDetail",
					Handler: pmsproduct_category.QueryProductCategoryDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductCategoryList",
					Handler: pmsproduct_category.QueryProductCategoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductCategory",
					Handler: pmsproduct_category.UpdateProductCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductCategoryNavStatus",
					Handler: pmsproduct_category.UpdateProductCategoryNavStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductCategoryStatus",
					Handler: pmsproduct_category.UpdateProductCategoryStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/category"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductSku",
					Handler: pmsproduct_sku.AddProductSkuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductSku",
					Handler: pmsproduct_sku.DeleteProductSkuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductSkuDetail",
					Handler: pmsproduct_sku.QueryProductSkuDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductSkuList",
					Handler: pmsproduct_sku.QueryProductSkuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductSku",
					Handler: pmsproduct_sku.UpdateProductSkuHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSpec",
					Handler: pmsproduct_spec.AddProductSpecHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSpec",
					Handler: pmsproduct_spec.DeleteProductSpecHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySpecDetail",
					Handler: pmsproduct_spec.QueryProductSpecDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySpecList",
					Handler: pmsproduct_spec.QueryProductSpecListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSpec",
					Handler: pmsproduct_spec.UpdateProductSpecHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSpecStatus",
					Handler: pmsproduct_spec.UpdateProductSpecStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/productSpec"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSpecValue",
					Handler: pmsproduct_spec_value.AddProductSpecValueHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSpecValue",
					Handler: pmsproduct_spec_value.DeleteProductSpecValueHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySpecValueDetail",
					Handler: pmsproduct_spec_value.QueryProductSpecValueDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySpecValueList",
					Handler: pmsproduct_spec_value.QueryProductSpecValueListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSpecValue",
					Handler: pmsproduct_spec_value.UpdateProductSpecValueHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSpecValueStatus",
					Handler: pmsproduct_spec_value.UpdateProductSpecValueStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/productSpecValue"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductSpu",
					Handler: pmsproduct_spu.AddProductSpuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductSpu",
					Handler: pmsproduct_spu.DeleteProductSpuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductSpuDetail",
					Handler: pmsproduct_spu.QueryProductSpuDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductSpuList",
					Handler: pmsproduct_spu.QueryProductSpuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDeleteStatus",
					Handler: pmsproduct_spu.UpdateDeleteStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewStatus",
					Handler: pmsproduct_spu.UpdateNewStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductSpu",
					Handler: pmsproduct_spu.UpdateProductSpuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePublishStatus",
					Handler: pmsproduct_spu.UpdatePublishStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendStatus",
					Handler: pmsproduct_spu.UpdateRecommendStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateVerifyStatus",
					Handler: pmsproduct_spu.UpdateVerifyStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCoupon",
					Handler: smscoupon.AddCouponHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCoupon",
					Handler: smscoupon.DeleteCouponHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponDetail",
					Handler: smscoupon.QueryCouponDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponList",
					Handler: smscoupon.QueryCouponListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCoupon",
					Handler: smscoupon.UpdateCouponHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCouponStatus",
					Handler: smscoupon.UpdateCouponStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/coupon"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponRecordList",
					Handler: smscoupon_record.QueryCouponRecordListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/couponRecord"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCouponScope",
					Handler: smscoupon_scope.AddCouponScopeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCouponScope",
					Handler: smscoupon_scope.DeleteCouponScopeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponScopeDetail",
					Handler: smscoupon_scope.QueryCouponScopeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponScopeList",
					Handler: smscoupon_scope.QueryCouponScopeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCouponScope",
					Handler: smscoupon_scope.UpdateCouponScopeHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/couponScope"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCouponType",
					Handler: smscoupon_type.AddCouponTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCouponType",
					Handler: smscoupon_type.DeleteCouponTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponTypeDetail",
					Handler: smscoupon_type.QueryCouponTypeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponTypeList",
					Handler: smscoupon_type.QueryCouponTypeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCouponType",
					Handler: smscoupon_type.UpdateCouponTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCouponTypeStatus",
					Handler: smscoupon_type.UpdateCouponTypeStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/couponType"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeAdvertise",
					Handler: smshome_advertise.AddHomeAdvertiseHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeAdvertise",
					Handler: smshome_advertise.DeleteHomeAdvertiseHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeAdvertiseDetail",
					Handler: smshome_advertise.QueryHomeAdvertiseDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeAdvertiseList",
					Handler: smshome_advertise.QueryHomeAdvertiseListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeAdvertise",
					Handler: smshome_advertise.UpdateHomeAdvertiseHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeAdvertiseStatus",
					Handler: smshome_advertise.UpdateHomeAdvertiseStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeAdvertise"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeBrand",
					Handler: smshome_brand.AddHomeBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeBrand",
					Handler: smshome_brand.DeleteHomeBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeBrandDetail",
					Handler: smshome_brand.QueryHomeBrandDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeBrandList",
					Handler: smshome_brand.QueryHomeBrandListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeBrandSort",
					Handler: smshome_brand.UpdateHomeBrandHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeBrand"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeNewProduct",
					Handler: smshome_new_product.AddHomeNewProductHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeNewProduct",
					Handler: smshome_new_product.DeleteHomeNewProductHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeNewProductList",
					Handler: smshome_new_product.QueryHomeNewProductListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewProductSort",
					Handler: smshome_new_product.UpdateNewProductSortHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeNewProduct"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeRecommendProduct",
					Handler: smshome_recommend_product.HomeRecommendProductAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeRecommendProduct",
					Handler: smshome_recommend_product.HomeRecommendProductDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeRecommendProductList",
					Handler: smshome_recommend_product.HomeRecommendProductListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendProductSort",
					Handler: smshome_recommend_product.UpdateRecommendProductSortHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeRecommendProduct"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeRecommendSubject",
					Handler: smshome_recommend_subject.HomeRecommendSubjectAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeRecommendSubject",
					Handler: smshome_recommend_subject.HomeRecommendSubjectDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeRecommendSubjectList",
					Handler: smshome_recommend_subject.HomeRecommendSubjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendSubjectSort",
					Handler: smshome_recommend_subject.UpdateRecommendSubjectSortHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeRecommendSubject"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSeckillActivity",
					Handler: smsseckill_activity.AddSeckillActivityHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSeckillActivity",
					Handler: smsseckill_activity.DeleteSeckillActivityHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillActivityDetail",
					Handler: smsseckill_activity.QuerySeckillActivityDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillActivityList",
					Handler: smsseckill_activity.QuerySeckillActivityListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSeckillActivity",
					Handler: smsseckill_activity.UpdateSeckillActivityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSeckillActivityStatus",
					Handler: smsseckill_activity.UpdateSeckillActivityStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/seckillActivity"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSeckillProduct",
					Handler: smsseckill_product.AddSeckillProductHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSeckillProduct",
					Handler: smsseckill_product.DeleteSeckillProductHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillProductDetail",
					Handler: smsseckill_product.QuerySeckillProductDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillProductList",
					Handler: smsseckill_product.QuerySeckillProductListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSeckillProduct",
					Handler: smsseckill_product.UpdateSeckillProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSeckillProductStatus",
					Handler: smsseckill_product.UpdateSeckillProductStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/seckillProduct"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillReservationDetail",
					Handler: smsseckill_reservation.QuerySeckillReservationDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillReservationList",
					Handler: smsseckill_reservation.QuerySeckillReservationListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/seckillReservation"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSeckillSession",
					Handler: smsseckill_session.AddSeckillSessionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSeckillSession",
					Handler: smsseckill_session.DeleteSeckillSessionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillSessionDetail",
					Handler: smsseckill_session.QuerySeckillSessionDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySeckillSessionList",
					Handler: smsseckill_session.QuerySeckillSessionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSeckillSession",
					Handler: smsseckill_session.UpdateSeckillSessionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSeckillSessionStatus",
					Handler: smsseckill_session.UpdateSeckillSessionStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/seckillSession"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDept",
					Handler: sysdept.AddDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDept",
					Handler: sysdept.DeleteDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptDetail",
					Handler: sysdept.QueryDeptDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptList",
					Handler: sysdept.QueryDeptListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDept",
					Handler: sysdept.UpdateDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDeptStatus",
					Handler: sysdept.UpdateDeptStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dept"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictItem",
					Handler: sysdict_item.AddDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictItem",
					Handler: sysdict_item.DeleteDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemDetail",
					Handler: sysdict_item.QueryDictItemDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemList",
					Handler: sysdict_item.QueryDictItemListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItem",
					Handler: sysdict_item.UpdateDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItemStatus",
					Handler: sysdict_item.UpdateDictItemStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictItem"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictType",
					Handler: sysdict_type.AddDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictType",
					Handler: sysdict_type.DeleteDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeDetail",
					Handler: sysdict_type.QueryDictTypeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeList",
					Handler: sysdict_type.QueryDictTypeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictType",
					Handler: sysdict_type.UpdateDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictTypeStatus",
					Handler: sysdict_type.UpdateDictTypeStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictType"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteLoginLog",
					Handler: syslog.DeleteLoginLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogDetail",
					Handler: syslog.QueryLoginLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogList",
					Handler: syslog.QueryLoginLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteOperateLog",
					Handler: syslog.DeleteOperateLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogDetail",
					Handler: syslog.QueryOperateLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogList",
					Handler: syslog.QueryOperateLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMenu",
					Handler: sysmenu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMenu",
					Handler: sysmenu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuDetail",
					Handler: sysmenu.QueryMenuDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuList",
					Handler: sysmenu.QueryMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenu",
					Handler: sysmenu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenuStatus",
					Handler: sysmenu.UpdateMenuStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addPost",
					Handler: syspost.AddPostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deletePost",
					Handler: syspost.DeletePostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostDetail",
					Handler: syspost.QueryPostDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostList",
					Handler: syspost.QueryPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePost",
					Handler: syspost.UpdatePostHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePostStatus",
					Handler: syspost.UpdatePostStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/post"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addRole",
					Handler: sysrole.AddRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cancelAuthorization",
					Handler: sysrole.CancelAuthorizationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteRole",
					Handler: sysrole.DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleDetail",
					Handler: sysrole.QueryRoleDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleList",
					Handler: sysrole.QueryRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleMenuList",
					Handler: sysrole.QueryRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleUserList",
					Handler: sysrole.QueryRoleUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRole",
					Handler: sysrole.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleMenuList",
					Handler: sysrole.UpdateRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleStatus",
					Handler: sysrole.UpdateRoleStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addNotice",
					Handler: syssys_notice.AddNoticeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteNotice",
					Handler: syssys_notice.DeleteNoticeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryNoticeDetail",
					Handler: syssys_notice.QueryNoticeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryNoticeList",
					Handler: syssys_notice.QueryNoticeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNotice",
					Handler: syssys_notice.UpdateNoticeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNoticeStatus",
					Handler: syssys_notice.UpdateNoticeStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/notice"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: sysupload.UploadHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addUser",
					Handler: sysuser.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteUser",
					Handler: sysuser.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: sysuser.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptAndPostList",
					Handler: sysuser.QueryDeptAndPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserDetail",
					Handler: sysuser.QueryUserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserList",
					Handler: sysuser.QueryUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserRoleList",
					Handler: sysuser.QueryUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reSetPassword",
					Handler: sysuser.ReSetPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUser",
					Handler: sysuser.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserRoleList",
					Handler: sysuser.UpdateUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserStatus",
					Handler: sysuser.UpdateUserStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 注册
				Method:  http.MethodPost,
				Path:    "/api/sys/user/login",
				Handler: sysuser.UserLoginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteMember",
					Handler: umsmember.DeleteMemberInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberDetail",
					Handler: umsmember.QueryMemberInfoDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberList",
					Handler: umsmember.QueryMemberInfoListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLoginLogList",
					Handler: umsmember.QueryMemberLoginLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMember",
					Handler: umsmember.UpdateMemberInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberStatus",
					Handler: umsmember.UpdateMemberInfoStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/member"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberAddressList",
					Handler: umsmember_address.QueryMemberAddressListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberConsumeSetting",
					Handler: umsmember_consume_setting.AddMemberConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberConsumeSetting",
					Handler: umsmember_consume_setting.DeleteMemberConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberConsumeSettingDetail",
					Handler: umsmember_consume_setting.QueryMemberConsumeSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberConsumeSettingList",
					Handler: umsmember_consume_setting.QueryMemberConsumeSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCouponStatus",
					Handler: umsmember_consume_setting.UpdateCouponStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberConsumeSetting",
					Handler: umsmember_consume_setting.UpdateMemberConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateStatus",
					Handler: umsmember_consume_setting.UpdateStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/consumeSetting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberGrowthLogDetail",
					Handler: umsmember_growth.QueryMemberGrowthLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberGrowthLogList",
					Handler: umsmember_growth.QueryMemberGrowthLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/growthLog"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberLevel",
					Handler: umsmember_level.AddMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberLevel",
					Handler: umsmember_level.DeleteMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLevelDetail",
					Handler: umsmember_level.QueryMemberLevelDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLevelList",
					Handler: umsmember_level.QueryMemberLevelListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberLevel",
					Handler: umsmember_level.UpdateMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberLevelStatus",
					Handler: umsmember_level.UpdateMemberLevelStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/level"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberPointsLogDetail",
					Handler: umsmember_points.QueryMemberPointsLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberPointsLogList",
					Handler: umsmember_points.QueryMemberPointsLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/pointsLog"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberRuleSetting",
					Handler: umsmember_rule_setting.AddMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberRuleSetting",
					Handler: umsmember_rule_setting.DeleteMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberRuleSettingDetail",
					Handler: umsmember_rule_setting.QueryMemberRuleSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberRuleSettingList",
					Handler: umsmember_rule_setting.QueryMemberRuleSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberRuleSetting",
					Handler: umsmember_rule_setting.UpdateMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberRuleSettingStatus",
					Handler: umsmember_rule_setting.UpdateMemberRuleSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/ruleSetting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberSignLogDetail",
					Handler: umsmember_sign.QueryMemberSignLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberSignLogList",
					Handler: umsmember_sign.QueryMemberSignLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/sign"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberStatisticsInfoDetail",
					Handler: umsmember_statistics.QueryMemberStatisticsInfoDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberStatisticsInfoList",
					Handler: umsmember_statistics.QueryMemberStatisticsInfoListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/statistics"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberTag",
					Handler: umsmember_tag.AddMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberTag",
					Handler: umsmember_tag.DeleteMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTagDetail",
					Handler: umsmember_tag.QueryMemberTagDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTagList",
					Handler: umsmember_tag.QueryMemberTagListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTag",
					Handler: umsmember_tag.UpdateMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTagStatus",
					Handler: umsmember_tag.UpdateMemberTagStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/tag"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberTask",
					Handler: umsmember_task.AddMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberTask",
					Handler: umsmember_task.DeleteMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTaskDetail",
					Handler: umsmember_task.QueryMemberTaskDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTaskList",
					Handler: umsmember_task.QueryMemberTaskListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTask",
					Handler: umsmember_task.UpdateMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTaskStatus",
					Handler: umsmember_task.UpdateMemberTaskStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/task"),
	)
}
