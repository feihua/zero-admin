// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: search.proto

package search_client

import (
	"context"

	"github.com/feihua/zero-admin/rpc/search/search"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateReq         = search.CreateReq
	CreateResp        = search.CreateResp
	DeleteReq         = search.DeleteReq
	DeleteResp        = search.DeleteResp
	ProductAttr       = search.ProductAttr
	ProductData       = search.ProductData
	RecommendReq      = search.RecommendReq
	RecommendResp     = search.RecommendResp
	SearchRelatedReq  = search.SearchRelatedReq
	SearchRelatedResp = search.SearchRelatedResp
	SearchReq         = search.SearchReq
	SearchResp        = search.SearchResp
	SearchSimpleReq   = search.SearchSimpleReq

	Search interface {
		// 创建商品
		Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
		// 根据id集合删除商品
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
		// 简单搜索-根据关键字通过名称或副标题查询商品
		SearchSimple(ctx context.Context, in *SearchSimpleReq, opts ...grpc.CallOption) (*SearchResp, error)
		// 综合搜索、筛选、排序-根据关键字通过名称或副标题复合查询商品
		Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
		// 根据商品id推荐商品
		Recommend(ctx context.Context, in *RecommendReq, opts ...grpc.CallOption) (*SearchResp, error)
		// 获取搜索的相关品牌、分类及筛选属性
		SearchRelated(ctx context.Context, in *SearchRelatedReq, opts ...grpc.CallOption) (*SearchRelatedResp, error)
	}

	defaultSearch struct {
		cli zrpc.Client
	}
)

func NewSearch(cli zrpc.Client) Search {
	return &defaultSearch{
		cli: cli,
	}
}

// 创建商品
func (m *defaultSearch) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

// 根据id集合删除商品
func (m *defaultSearch) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

// 简单搜索-根据关键字通过名称或副标题查询商品
func (m *defaultSearch) SearchSimple(ctx context.Context, in *SearchSimpleReq, opts ...grpc.CallOption) (*SearchResp, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.SearchSimple(ctx, in, opts...)
}

// 综合搜索、筛选、排序-根据关键字通过名称或副标题复合查询商品
func (m *defaultSearch) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.Search(ctx, in, opts...)
}

// 根据商品id推荐商品
func (m *defaultSearch) Recommend(ctx context.Context, in *RecommendReq, opts ...grpc.CallOption) (*SearchResp, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.Recommend(ctx, in, opts...)
}

// 获取搜索的相关品牌、分类及筛选属性
func (m *defaultSearch) SearchRelated(ctx context.Context, in *SearchRelatedReq, opts ...grpc.CallOption) (*SearchRelatedResp, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.SearchRelated(ctx, in, opts...)
}
