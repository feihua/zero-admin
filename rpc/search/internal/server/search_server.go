// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: search.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/search/internal/logic"
	"github.com/feihua/zero-admin/rpc/search/internal/svc"
	"github.com/feihua/zero-admin/rpc/search/search"
)

type SearchServer struct {
	svcCtx *svc.ServiceContext
	search.UnimplementedSearchServer
}

func NewSearchServer(svcCtx *svc.ServiceContext) *SearchServer {
	return &SearchServer{
		svcCtx: svcCtx,
	}
}

// 创建商品
func (s *SearchServer) Create(ctx context.Context, in *search.CreateReq) (*search.CreateResp, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

// 根据id集合删除商品
func (s *SearchServer) Delete(ctx context.Context, in *search.DeleteReq) (*search.DeleteResp, error) {
	l := logic.NewDeleteLogic(ctx, s.svcCtx)
	return l.Delete(in)
}

// 简单搜索-根据关键字通过名称或副标题查询商品
func (s *SearchServer) SearchSimple(ctx context.Context, in *search.SearchSimpleReq) (*search.SearchResp, error) {
	l := logic.NewSearchSimpleLogic(ctx, s.svcCtx)
	return l.SearchSimple(in)
}

// 综合搜索、筛选、排序-根据关键字通过名称或副标题复合查询商品
func (s *SearchServer) Search(ctx context.Context, in *search.SearchReq) (*search.SearchResp, error) {
	l := logic.NewSearchLogic(ctx, s.svcCtx)
	return l.Search(in)
}

// 根据商品id推荐商品
func (s *SearchServer) Recommend(ctx context.Context, in *search.RecommendReq) (*search.SearchResp, error) {
	l := logic.NewRecommendLogic(ctx, s.svcCtx)
	return l.Recommend(in)
}

// 获取搜索的相关品牌、分类及筛选属性
func (s *SearchServer) SearchRelated(ctx context.Context, in *search.SearchRelatedReq) (*search.SearchRelatedResp, error) {
	l := logic.NewSearchRelatedLogic(ctx, s.svcCtx)
	return l.SearchRelated(in)
}
