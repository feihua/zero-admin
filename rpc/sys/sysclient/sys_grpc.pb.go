// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/sys/sys.proto

package sysclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeptService_AddDept_FullMethodName          = "/sysclient.DeptService/AddDept"
	DeptService_DeleteDept_FullMethodName       = "/sysclient.DeptService/DeleteDept"
	DeptService_UpdateDept_FullMethodName       = "/sysclient.DeptService/UpdateDept"
	DeptService_UpdateDeptStatus_FullMethodName = "/sysclient.DeptService/UpdateDeptStatus"
	DeptService_QueryDeptDetail_FullMethodName  = "/sysclient.DeptService/QueryDeptDetail"
	DeptService_QueryDeptList_FullMethodName    = "/sysclient.DeptService/QueryDeptList"
)

// DeptServiceClient is the client API for DeptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeptServiceClient interface {
	// 添加部门
	AddDept(ctx context.Context, in *AddDeptReq, opts ...grpc.CallOption) (*AddDeptResp, error)
	// 删除部门
	DeleteDept(ctx context.Context, in *DeleteDeptReq, opts ...grpc.CallOption) (*DeleteDeptResp, error)
	// 更新部门
	UpdateDept(ctx context.Context, in *UpdateDeptReq, opts ...grpc.CallOption) (*UpdateDeptResp, error)
	// 更新部门状态
	UpdateDeptStatus(ctx context.Context, in *UpdateDeptStatusReq, opts ...grpc.CallOption) (*UpdateDeptStatusResp, error)
	// 查询部门详情
	QueryDeptDetail(ctx context.Context, in *QueryDeptDetailReq, opts ...grpc.CallOption) (*QueryDeptDetailResp, error)
	// 查询部门列表
	QueryDeptList(ctx context.Context, in *QueryDeptListReq, opts ...grpc.CallOption) (*QueryDeptListResp, error)
}

type deptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeptServiceClient(cc grpc.ClientConnInterface) DeptServiceClient {
	return &deptServiceClient{cc}
}

func (c *deptServiceClient) AddDept(ctx context.Context, in *AddDeptReq, opts ...grpc.CallOption) (*AddDeptResp, error) {
	out := new(AddDeptResp)
	err := c.cc.Invoke(ctx, DeptService_AddDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) DeleteDept(ctx context.Context, in *DeleteDeptReq, opts ...grpc.CallOption) (*DeleteDeptResp, error) {
	out := new(DeleteDeptResp)
	err := c.cc.Invoke(ctx, DeptService_DeleteDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) UpdateDept(ctx context.Context, in *UpdateDeptReq, opts ...grpc.CallOption) (*UpdateDeptResp, error) {
	out := new(UpdateDeptResp)
	err := c.cc.Invoke(ctx, DeptService_UpdateDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) UpdateDeptStatus(ctx context.Context, in *UpdateDeptStatusReq, opts ...grpc.CallOption) (*UpdateDeptStatusResp, error) {
	out := new(UpdateDeptStatusResp)
	err := c.cc.Invoke(ctx, DeptService_UpdateDeptStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) QueryDeptDetail(ctx context.Context, in *QueryDeptDetailReq, opts ...grpc.CallOption) (*QueryDeptDetailResp, error) {
	out := new(QueryDeptDetailResp)
	err := c.cc.Invoke(ctx, DeptService_QueryDeptDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deptServiceClient) QueryDeptList(ctx context.Context, in *QueryDeptListReq, opts ...grpc.CallOption) (*QueryDeptListResp, error) {
	out := new(QueryDeptListResp)
	err := c.cc.Invoke(ctx, DeptService_QueryDeptList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeptServiceServer is the server API for DeptService service.
// All implementations must embed UnimplementedDeptServiceServer
// for forward compatibility
type DeptServiceServer interface {
	// 添加部门
	AddDept(context.Context, *AddDeptReq) (*AddDeptResp, error)
	// 删除部门
	DeleteDept(context.Context, *DeleteDeptReq) (*DeleteDeptResp, error)
	// 更新部门
	UpdateDept(context.Context, *UpdateDeptReq) (*UpdateDeptResp, error)
	// 更新部门状态
	UpdateDeptStatus(context.Context, *UpdateDeptStatusReq) (*UpdateDeptStatusResp, error)
	// 查询部门详情
	QueryDeptDetail(context.Context, *QueryDeptDetailReq) (*QueryDeptDetailResp, error)
	// 查询部门列表
	QueryDeptList(context.Context, *QueryDeptListReq) (*QueryDeptListResp, error)
	mustEmbedUnimplementedDeptServiceServer()
}

// UnimplementedDeptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeptServiceServer struct {
}

func (UnimplementedDeptServiceServer) AddDept(context.Context, *AddDeptReq) (*AddDeptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDept not implemented")
}
func (UnimplementedDeptServiceServer) DeleteDept(context.Context, *DeleteDeptReq) (*DeleteDeptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDept not implemented")
}
func (UnimplementedDeptServiceServer) UpdateDept(context.Context, *UpdateDeptReq) (*UpdateDeptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDept not implemented")
}
func (UnimplementedDeptServiceServer) UpdateDeptStatus(context.Context, *UpdateDeptStatusReq) (*UpdateDeptStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeptStatus not implemented")
}
func (UnimplementedDeptServiceServer) QueryDeptDetail(context.Context, *QueryDeptDetailReq) (*QueryDeptDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeptDetail not implemented")
}
func (UnimplementedDeptServiceServer) QueryDeptList(context.Context, *QueryDeptListReq) (*QueryDeptListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeptList not implemented")
}
func (UnimplementedDeptServiceServer) mustEmbedUnimplementedDeptServiceServer() {}

// UnsafeDeptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeptServiceServer will
// result in compilation errors.
type UnsafeDeptServiceServer interface {
	mustEmbedUnimplementedDeptServiceServer()
}

func RegisterDeptServiceServer(s grpc.ServiceRegistrar, srv DeptServiceServer) {
	s.RegisterService(&DeptService_ServiceDesc, srv)
}

func _DeptService_AddDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).AddDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptService_AddDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).AddDept(ctx, req.(*AddDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_DeleteDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).DeleteDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptService_DeleteDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).DeleteDept(ctx, req.(*DeleteDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_UpdateDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).UpdateDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptService_UpdateDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).UpdateDept(ctx, req.(*UpdateDeptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_UpdateDeptStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeptStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).UpdateDeptStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptService_UpdateDeptStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).UpdateDeptStatus(ctx, req.(*UpdateDeptStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_QueryDeptDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeptDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).QueryDeptDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptService_QueryDeptDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).QueryDeptDetail(ctx, req.(*QueryDeptDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeptService_QueryDeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeptServiceServer).QueryDeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeptService_QueryDeptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeptServiceServer).QueryDeptList(ctx, req.(*QueryDeptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeptService_ServiceDesc is the grpc.ServiceDesc for DeptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.DeptService",
	HandlerType: (*DeptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDept",
			Handler:    _DeptService_AddDept_Handler,
		},
		{
			MethodName: "DeleteDept",
			Handler:    _DeptService_DeleteDept_Handler,
		},
		{
			MethodName: "UpdateDept",
			Handler:    _DeptService_UpdateDept_Handler,
		},
		{
			MethodName: "UpdateDeptStatus",
			Handler:    _DeptService_UpdateDeptStatus_Handler,
		},
		{
			MethodName: "QueryDeptDetail",
			Handler:    _DeptService_QueryDeptDetail_Handler,
		},
		{
			MethodName: "QueryDeptList",
			Handler:    _DeptService_QueryDeptList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	DictItemService_AddDictItem_FullMethodName          = "/sysclient.DictItemService/AddDictItem"
	DictItemService_DeleteDictItem_FullMethodName       = "/sysclient.DictItemService/DeleteDictItem"
	DictItemService_UpdateDictItem_FullMethodName       = "/sysclient.DictItemService/UpdateDictItem"
	DictItemService_UpdateDictItemStatus_FullMethodName = "/sysclient.DictItemService/UpdateDictItemStatus"
	DictItemService_QueryDictItemDetail_FullMethodName  = "/sysclient.DictItemService/QueryDictItemDetail"
	DictItemService_QueryDictItemList_FullMethodName    = "/sysclient.DictItemService/QueryDictItemList"
)

// DictItemServiceClient is the client API for DictItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictItemServiceClient interface {
	// 添加字典数据
	AddDictItem(ctx context.Context, in *AddDictItemReq, opts ...grpc.CallOption) (*AddDictItemResp, error)
	// 删除字典数据
	DeleteDictItem(ctx context.Context, in *DeleteDictItemReq, opts ...grpc.CallOption) (*DeleteDictItemResp, error)
	// 更新字典数据
	UpdateDictItem(ctx context.Context, in *UpdateDictItemReq, opts ...grpc.CallOption) (*UpdateDictItemResp, error)
	// 更新字典数据状态
	UpdateDictItemStatus(ctx context.Context, in *UpdateDictItemStatusReq, opts ...grpc.CallOption) (*UpdateDictItemStatusResp, error)
	// 查询字典数据详情
	QueryDictItemDetail(ctx context.Context, in *QueryDictItemDetailReq, opts ...grpc.CallOption) (*QueryDictItemDetailResp, error)
	// 查询字典数据列表
	QueryDictItemList(ctx context.Context, in *QueryDictItemListReq, opts ...grpc.CallOption) (*QueryDictItemListResp, error)
}

type dictItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictItemServiceClient(cc grpc.ClientConnInterface) DictItemServiceClient {
	return &dictItemServiceClient{cc}
}

func (c *dictItemServiceClient) AddDictItem(ctx context.Context, in *AddDictItemReq, opts ...grpc.CallOption) (*AddDictItemResp, error) {
	out := new(AddDictItemResp)
	err := c.cc.Invoke(ctx, DictItemService_AddDictItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictItemServiceClient) DeleteDictItem(ctx context.Context, in *DeleteDictItemReq, opts ...grpc.CallOption) (*DeleteDictItemResp, error) {
	out := new(DeleteDictItemResp)
	err := c.cc.Invoke(ctx, DictItemService_DeleteDictItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictItemServiceClient) UpdateDictItem(ctx context.Context, in *UpdateDictItemReq, opts ...grpc.CallOption) (*UpdateDictItemResp, error) {
	out := new(UpdateDictItemResp)
	err := c.cc.Invoke(ctx, DictItemService_UpdateDictItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictItemServiceClient) UpdateDictItemStatus(ctx context.Context, in *UpdateDictItemStatusReq, opts ...grpc.CallOption) (*UpdateDictItemStatusResp, error) {
	out := new(UpdateDictItemStatusResp)
	err := c.cc.Invoke(ctx, DictItemService_UpdateDictItemStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictItemServiceClient) QueryDictItemDetail(ctx context.Context, in *QueryDictItemDetailReq, opts ...grpc.CallOption) (*QueryDictItemDetailResp, error) {
	out := new(QueryDictItemDetailResp)
	err := c.cc.Invoke(ctx, DictItemService_QueryDictItemDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictItemServiceClient) QueryDictItemList(ctx context.Context, in *QueryDictItemListReq, opts ...grpc.CallOption) (*QueryDictItemListResp, error) {
	out := new(QueryDictItemListResp)
	err := c.cc.Invoke(ctx, DictItemService_QueryDictItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictItemServiceServer is the server API for DictItemService service.
// All implementations must embed UnimplementedDictItemServiceServer
// for forward compatibility
type DictItemServiceServer interface {
	// 添加字典数据
	AddDictItem(context.Context, *AddDictItemReq) (*AddDictItemResp, error)
	// 删除字典数据
	DeleteDictItem(context.Context, *DeleteDictItemReq) (*DeleteDictItemResp, error)
	// 更新字典数据
	UpdateDictItem(context.Context, *UpdateDictItemReq) (*UpdateDictItemResp, error)
	// 更新字典数据状态
	UpdateDictItemStatus(context.Context, *UpdateDictItemStatusReq) (*UpdateDictItemStatusResp, error)
	// 查询字典数据详情
	QueryDictItemDetail(context.Context, *QueryDictItemDetailReq) (*QueryDictItemDetailResp, error)
	// 查询字典数据列表
	QueryDictItemList(context.Context, *QueryDictItemListReq) (*QueryDictItemListResp, error)
	mustEmbedUnimplementedDictItemServiceServer()
}

// UnimplementedDictItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDictItemServiceServer struct {
}

func (UnimplementedDictItemServiceServer) AddDictItem(context.Context, *AddDictItemReq) (*AddDictItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDictItem not implemented")
}
func (UnimplementedDictItemServiceServer) DeleteDictItem(context.Context, *DeleteDictItemReq) (*DeleteDictItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictItem not implemented")
}
func (UnimplementedDictItemServiceServer) UpdateDictItem(context.Context, *UpdateDictItemReq) (*UpdateDictItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictItem not implemented")
}
func (UnimplementedDictItemServiceServer) UpdateDictItemStatus(context.Context, *UpdateDictItemStatusReq) (*UpdateDictItemStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictItemStatus not implemented")
}
func (UnimplementedDictItemServiceServer) QueryDictItemDetail(context.Context, *QueryDictItemDetailReq) (*QueryDictItemDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDictItemDetail not implemented")
}
func (UnimplementedDictItemServiceServer) QueryDictItemList(context.Context, *QueryDictItemListReq) (*QueryDictItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDictItemList not implemented")
}
func (UnimplementedDictItemServiceServer) mustEmbedUnimplementedDictItemServiceServer() {}

// UnsafeDictItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictItemServiceServer will
// result in compilation errors.
type UnsafeDictItemServiceServer interface {
	mustEmbedUnimplementedDictItemServiceServer()
}

func RegisterDictItemServiceServer(s grpc.ServiceRegistrar, srv DictItemServiceServer) {
	s.RegisterService(&DictItemService_ServiceDesc, srv)
}

func _DictItemService_AddDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDictItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictItemServiceServer).AddDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictItemService_AddDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictItemServiceServer).AddDictItem(ctx, req.(*AddDictItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictItemService_DeleteDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictItemServiceServer).DeleteDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictItemService_DeleteDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictItemServiceServer).DeleteDictItem(ctx, req.(*DeleteDictItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictItemService_UpdateDictItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictItemServiceServer).UpdateDictItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictItemService_UpdateDictItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictItemServiceServer).UpdateDictItem(ctx, req.(*UpdateDictItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictItemService_UpdateDictItemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictItemStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictItemServiceServer).UpdateDictItemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictItemService_UpdateDictItemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictItemServiceServer).UpdateDictItemStatus(ctx, req.(*UpdateDictItemStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictItemService_QueryDictItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDictItemDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictItemServiceServer).QueryDictItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictItemService_QueryDictItemDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictItemServiceServer).QueryDictItemDetail(ctx, req.(*QueryDictItemDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictItemService_QueryDictItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDictItemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictItemServiceServer).QueryDictItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictItemService_QueryDictItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictItemServiceServer).QueryDictItemList(ctx, req.(*QueryDictItemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DictItemService_ServiceDesc is the grpc.ServiceDesc for DictItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.DictItemService",
	HandlerType: (*DictItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDictItem",
			Handler:    _DictItemService_AddDictItem_Handler,
		},
		{
			MethodName: "DeleteDictItem",
			Handler:    _DictItemService_DeleteDictItem_Handler,
		},
		{
			MethodName: "UpdateDictItem",
			Handler:    _DictItemService_UpdateDictItem_Handler,
		},
		{
			MethodName: "UpdateDictItemStatus",
			Handler:    _DictItemService_UpdateDictItemStatus_Handler,
		},
		{
			MethodName: "QueryDictItemDetail",
			Handler:    _DictItemService_QueryDictItemDetail_Handler,
		},
		{
			MethodName: "QueryDictItemList",
			Handler:    _DictItemService_QueryDictItemList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	DictTypeService_AddDictType_FullMethodName          = "/sysclient.DictTypeService/AddDictType"
	DictTypeService_DeleteDictType_FullMethodName       = "/sysclient.DictTypeService/DeleteDictType"
	DictTypeService_UpdateDictType_FullMethodName       = "/sysclient.DictTypeService/UpdateDictType"
	DictTypeService_UpdateDictTypeStatus_FullMethodName = "/sysclient.DictTypeService/UpdateDictTypeStatus"
	DictTypeService_QueryDictTypeDetail_FullMethodName  = "/sysclient.DictTypeService/QueryDictTypeDetail"
	DictTypeService_QueryDictTypeList_FullMethodName    = "/sysclient.DictTypeService/QueryDictTypeList"
)

// DictTypeServiceClient is the client API for DictTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictTypeServiceClient interface {
	// 添加字典类型
	AddDictType(ctx context.Context, in *AddDictTypeReq, opts ...grpc.CallOption) (*AddDictTypeResp, error)
	// 删除字典类型
	DeleteDictType(ctx context.Context, in *DeleteDictTypeReq, opts ...grpc.CallOption) (*DeleteDictTypeResp, error)
	// 更新字典类型
	UpdateDictType(ctx context.Context, in *UpdateDictTypeReq, opts ...grpc.CallOption) (*UpdateDictTypeResp, error)
	// 更新字典类型状态
	UpdateDictTypeStatus(ctx context.Context, in *UpdateDictTypeStatusReq, opts ...grpc.CallOption) (*UpdateDictTypeStatusResp, error)
	// 查询字典类型详情
	QueryDictTypeDetail(ctx context.Context, in *QueryDictTypeDetailReq, opts ...grpc.CallOption) (*QueryDictTypeDetailResp, error)
	// 查询字典类型列表
	QueryDictTypeList(ctx context.Context, in *QueryDictTypeListReq, opts ...grpc.CallOption) (*QueryDictTypeListResp, error)
}

type dictTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictTypeServiceClient(cc grpc.ClientConnInterface) DictTypeServiceClient {
	return &dictTypeServiceClient{cc}
}

func (c *dictTypeServiceClient) AddDictType(ctx context.Context, in *AddDictTypeReq, opts ...grpc.CallOption) (*AddDictTypeResp, error) {
	out := new(AddDictTypeResp)
	err := c.cc.Invoke(ctx, DictTypeService_AddDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) DeleteDictType(ctx context.Context, in *DeleteDictTypeReq, opts ...grpc.CallOption) (*DeleteDictTypeResp, error) {
	out := new(DeleteDictTypeResp)
	err := c.cc.Invoke(ctx, DictTypeService_DeleteDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) UpdateDictType(ctx context.Context, in *UpdateDictTypeReq, opts ...grpc.CallOption) (*UpdateDictTypeResp, error) {
	out := new(UpdateDictTypeResp)
	err := c.cc.Invoke(ctx, DictTypeService_UpdateDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) UpdateDictTypeStatus(ctx context.Context, in *UpdateDictTypeStatusReq, opts ...grpc.CallOption) (*UpdateDictTypeStatusResp, error) {
	out := new(UpdateDictTypeStatusResp)
	err := c.cc.Invoke(ctx, DictTypeService_UpdateDictTypeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) QueryDictTypeDetail(ctx context.Context, in *QueryDictTypeDetailReq, opts ...grpc.CallOption) (*QueryDictTypeDetailResp, error) {
	out := new(QueryDictTypeDetailResp)
	err := c.cc.Invoke(ctx, DictTypeService_QueryDictTypeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictTypeServiceClient) QueryDictTypeList(ctx context.Context, in *QueryDictTypeListReq, opts ...grpc.CallOption) (*QueryDictTypeListResp, error) {
	out := new(QueryDictTypeListResp)
	err := c.cc.Invoke(ctx, DictTypeService_QueryDictTypeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictTypeServiceServer is the server API for DictTypeService service.
// All implementations must embed UnimplementedDictTypeServiceServer
// for forward compatibility
type DictTypeServiceServer interface {
	// 添加字典类型
	AddDictType(context.Context, *AddDictTypeReq) (*AddDictTypeResp, error)
	// 删除字典类型
	DeleteDictType(context.Context, *DeleteDictTypeReq) (*DeleteDictTypeResp, error)
	// 更新字典类型
	UpdateDictType(context.Context, *UpdateDictTypeReq) (*UpdateDictTypeResp, error)
	// 更新字典类型状态
	UpdateDictTypeStatus(context.Context, *UpdateDictTypeStatusReq) (*UpdateDictTypeStatusResp, error)
	// 查询字典类型详情
	QueryDictTypeDetail(context.Context, *QueryDictTypeDetailReq) (*QueryDictTypeDetailResp, error)
	// 查询字典类型列表
	QueryDictTypeList(context.Context, *QueryDictTypeListReq) (*QueryDictTypeListResp, error)
	mustEmbedUnimplementedDictTypeServiceServer()
}

// UnimplementedDictTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDictTypeServiceServer struct {
}

func (UnimplementedDictTypeServiceServer) AddDictType(context.Context, *AddDictTypeReq) (*AddDictTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDictType not implemented")
}
func (UnimplementedDictTypeServiceServer) DeleteDictType(context.Context, *DeleteDictTypeReq) (*DeleteDictTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictType not implemented")
}
func (UnimplementedDictTypeServiceServer) UpdateDictType(context.Context, *UpdateDictTypeReq) (*UpdateDictTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictType not implemented")
}
func (UnimplementedDictTypeServiceServer) UpdateDictTypeStatus(context.Context, *UpdateDictTypeStatusReq) (*UpdateDictTypeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictTypeStatus not implemented")
}
func (UnimplementedDictTypeServiceServer) QueryDictTypeDetail(context.Context, *QueryDictTypeDetailReq) (*QueryDictTypeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDictTypeDetail not implemented")
}
func (UnimplementedDictTypeServiceServer) QueryDictTypeList(context.Context, *QueryDictTypeListReq) (*QueryDictTypeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDictTypeList not implemented")
}
func (UnimplementedDictTypeServiceServer) mustEmbedUnimplementedDictTypeServiceServer() {}

// UnsafeDictTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictTypeServiceServer will
// result in compilation errors.
type UnsafeDictTypeServiceServer interface {
	mustEmbedUnimplementedDictTypeServiceServer()
}

func RegisterDictTypeServiceServer(s grpc.ServiceRegistrar, srv DictTypeServiceServer) {
	s.RegisterService(&DictTypeService_ServiceDesc, srv)
}

func _DictTypeService_AddDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDictTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).AddDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_AddDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).AddDictType(ctx, req.(*AddDictTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_DeleteDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).DeleteDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_DeleteDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).DeleteDictType(ctx, req.(*DeleteDictTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_UpdateDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).UpdateDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_UpdateDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).UpdateDictType(ctx, req.(*UpdateDictTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_UpdateDictTypeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictTypeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).UpdateDictTypeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_UpdateDictTypeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).UpdateDictTypeStatus(ctx, req.(*UpdateDictTypeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_QueryDictTypeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDictTypeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).QueryDictTypeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_QueryDictTypeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).QueryDictTypeDetail(ctx, req.(*QueryDictTypeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictTypeService_QueryDictTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDictTypeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictTypeServiceServer).QueryDictTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictTypeService_QueryDictTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictTypeServiceServer).QueryDictTypeList(ctx, req.(*QueryDictTypeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DictTypeService_ServiceDesc is the grpc.ServiceDesc for DictTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.DictTypeService",
	HandlerType: (*DictTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDictType",
			Handler:    _DictTypeService_AddDictType_Handler,
		},
		{
			MethodName: "DeleteDictType",
			Handler:    _DictTypeService_DeleteDictType_Handler,
		},
		{
			MethodName: "UpdateDictType",
			Handler:    _DictTypeService_UpdateDictType_Handler,
		},
		{
			MethodName: "UpdateDictTypeStatus",
			Handler:    _DictTypeService_UpdateDictTypeStatus_Handler,
		},
		{
			MethodName: "QueryDictTypeDetail",
			Handler:    _DictTypeService_QueryDictTypeDetail_Handler,
		},
		{
			MethodName: "QueryDictTypeList",
			Handler:    _DictTypeService_QueryDictTypeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	LoginLogService_DeleteLoginLog_FullMethodName      = "/sysclient.LoginLogService/DeleteLoginLog"
	LoginLogService_QueryLoginLogDetail_FullMethodName = "/sysclient.LoginLogService/QueryLoginLogDetail"
	LoginLogService_QueryLoginLogList_FullMethodName   = "/sysclient.LoginLogService/QueryLoginLogList"
)

// LoginLogServiceClient is the client API for LoginLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginLogServiceClient interface {
	// 删除系统登录日志
	DeleteLoginLog(ctx context.Context, in *DeleteLoginLogReq, opts ...grpc.CallOption) (*DeleteLoginLogResp, error)
	// 查询系统登录日志详情
	QueryLoginLogDetail(ctx context.Context, in *QueryLoginLogDetailReq, opts ...grpc.CallOption) (*QueryLoginLogDetailResp, error)
	// 查询系统登录日志列表
	QueryLoginLogList(ctx context.Context, in *QueryLoginLogListReq, opts ...grpc.CallOption) (*QueryLoginLogListResp, error)
}

type loginLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginLogServiceClient(cc grpc.ClientConnInterface) LoginLogServiceClient {
	return &loginLogServiceClient{cc}
}

func (c *loginLogServiceClient) DeleteLoginLog(ctx context.Context, in *DeleteLoginLogReq, opts ...grpc.CallOption) (*DeleteLoginLogResp, error) {
	out := new(DeleteLoginLogResp)
	err := c.cc.Invoke(ctx, LoginLogService_DeleteLoginLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginLogServiceClient) QueryLoginLogDetail(ctx context.Context, in *QueryLoginLogDetailReq, opts ...grpc.CallOption) (*QueryLoginLogDetailResp, error) {
	out := new(QueryLoginLogDetailResp)
	err := c.cc.Invoke(ctx, LoginLogService_QueryLoginLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginLogServiceClient) QueryLoginLogList(ctx context.Context, in *QueryLoginLogListReq, opts ...grpc.CallOption) (*QueryLoginLogListResp, error) {
	out := new(QueryLoginLogListResp)
	err := c.cc.Invoke(ctx, LoginLogService_QueryLoginLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginLogServiceServer is the server API for LoginLogService service.
// All implementations must embed UnimplementedLoginLogServiceServer
// for forward compatibility
type LoginLogServiceServer interface {
	// 删除系统登录日志
	DeleteLoginLog(context.Context, *DeleteLoginLogReq) (*DeleteLoginLogResp, error)
	// 查询系统登录日志详情
	QueryLoginLogDetail(context.Context, *QueryLoginLogDetailReq) (*QueryLoginLogDetailResp, error)
	// 查询系统登录日志列表
	QueryLoginLogList(context.Context, *QueryLoginLogListReq) (*QueryLoginLogListResp, error)
	mustEmbedUnimplementedLoginLogServiceServer()
}

// UnimplementedLoginLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoginLogServiceServer struct {
}

func (UnimplementedLoginLogServiceServer) DeleteLoginLog(context.Context, *DeleteLoginLogReq) (*DeleteLoginLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginLog not implemented")
}
func (UnimplementedLoginLogServiceServer) QueryLoginLogDetail(context.Context, *QueryLoginLogDetailReq) (*QueryLoginLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLoginLogDetail not implemented")
}
func (UnimplementedLoginLogServiceServer) QueryLoginLogList(context.Context, *QueryLoginLogListReq) (*QueryLoginLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLoginLogList not implemented")
}
func (UnimplementedLoginLogServiceServer) mustEmbedUnimplementedLoginLogServiceServer() {}

// UnsafeLoginLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginLogServiceServer will
// result in compilation errors.
type UnsafeLoginLogServiceServer interface {
	mustEmbedUnimplementedLoginLogServiceServer()
}

func RegisterLoginLogServiceServer(s grpc.ServiceRegistrar, srv LoginLogServiceServer) {
	s.RegisterService(&LoginLogService_ServiceDesc, srv)
}

func _LoginLogService_DeleteLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginLogServiceServer).DeleteLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginLogService_DeleteLoginLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginLogServiceServer).DeleteLoginLog(ctx, req.(*DeleteLoginLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginLogService_QueryLoginLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoginLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginLogServiceServer).QueryLoginLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginLogService_QueryLoginLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginLogServiceServer).QueryLoginLogDetail(ctx, req.(*QueryLoginLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginLogService_QueryLoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLoginLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginLogServiceServer).QueryLoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginLogService_QueryLoginLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginLogServiceServer).QueryLoginLogList(ctx, req.(*QueryLoginLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginLogService_ServiceDesc is the grpc.ServiceDesc for LoginLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.LoginLogService",
	HandlerType: (*LoginLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteLoginLog",
			Handler:    _LoginLogService_DeleteLoginLog_Handler,
		},
		{
			MethodName: "QueryLoginLogDetail",
			Handler:    _LoginLogService_QueryLoginLogDetail_Handler,
		},
		{
			MethodName: "QueryLoginLogList",
			Handler:    _LoginLogService_QueryLoginLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	MenuService_AddMenu_FullMethodName               = "/sysclient.MenuService/AddMenu"
	MenuService_DeleteMenu_FullMethodName            = "/sysclient.MenuService/DeleteMenu"
	MenuService_UpdateMenu_FullMethodName            = "/sysclient.MenuService/UpdateMenu"
	MenuService_UpdateMenuStatus_FullMethodName      = "/sysclient.MenuService/UpdateMenuStatus"
	MenuService_QueryMenuDetail_FullMethodName       = "/sysclient.MenuService/QueryMenuDetail"
	MenuService_QueryMenuList_FullMethodName         = "/sysclient.MenuService/QueryMenuList"
	MenuService_QueryMenuResourceList_FullMethodName = "/sysclient.MenuService/QueryMenuResourceList"
)

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuServiceClient interface {
	// 添加菜单信息表
	AddMenu(ctx context.Context, in *AddMenuReq, opts ...grpc.CallOption) (*AddMenuResp, error)
	// 删除菜单信息表
	DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error)
	// 更新菜单信息表
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error)
	// 更新菜单信息表状态
	UpdateMenuStatus(ctx context.Context, in *UpdateMenuStatusReq, opts ...grpc.CallOption) (*UpdateMenuStatusResp, error)
	// 查询菜单信息表详情
	QueryMenuDetail(ctx context.Context, in *QueryMenuDetailReq, opts ...grpc.CallOption) (*QueryMenuDetailResp, error)
	// 查询菜单信息表列表
	QueryMenuList(ctx context.Context, in *QueryMenuListReq, opts ...grpc.CallOption) (*QueryMenuListResp, error)
	QueryMenuResourceList(ctx context.Context, in *QueryMenuListReq, opts ...grpc.CallOption) (*QueryMenuListResp, error)
}

type menuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuServiceClient(cc grpc.ClientConnInterface) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) AddMenu(ctx context.Context, in *AddMenuReq, opts ...grpc.CallOption) (*AddMenuResp, error) {
	out := new(AddMenuResp)
	err := c.cc.Invoke(ctx, MenuService_AddMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error) {
	out := new(DeleteMenuResp)
	err := c.cc.Invoke(ctx, MenuService_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error) {
	out := new(UpdateMenuResp)
	err := c.cc.Invoke(ctx, MenuService_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateMenuStatus(ctx context.Context, in *UpdateMenuStatusReq, opts ...grpc.CallOption) (*UpdateMenuStatusResp, error) {
	out := new(UpdateMenuStatusResp)
	err := c.cc.Invoke(ctx, MenuService_UpdateMenuStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) QueryMenuDetail(ctx context.Context, in *QueryMenuDetailReq, opts ...grpc.CallOption) (*QueryMenuDetailResp, error) {
	out := new(QueryMenuDetailResp)
	err := c.cc.Invoke(ctx, MenuService_QueryMenuDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) QueryMenuList(ctx context.Context, in *QueryMenuListReq, opts ...grpc.CallOption) (*QueryMenuListResp, error) {
	out := new(QueryMenuListResp)
	err := c.cc.Invoke(ctx, MenuService_QueryMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) QueryMenuResourceList(ctx context.Context, in *QueryMenuListReq, opts ...grpc.CallOption) (*QueryMenuListResp, error) {
	out := new(QueryMenuListResp)
	err := c.cc.Invoke(ctx, MenuService_QueryMenuResourceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
// All implementations must embed UnimplementedMenuServiceServer
// for forward compatibility
type MenuServiceServer interface {
	// 添加菜单信息表
	AddMenu(context.Context, *AddMenuReq) (*AddMenuResp, error)
	// 删除菜单信息表
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error)
	// 更新菜单信息表
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error)
	// 更新菜单信息表状态
	UpdateMenuStatus(context.Context, *UpdateMenuStatusReq) (*UpdateMenuStatusResp, error)
	// 查询菜单信息表详情
	QueryMenuDetail(context.Context, *QueryMenuDetailReq) (*QueryMenuDetailResp, error)
	// 查询菜单信息表列表
	QueryMenuList(context.Context, *QueryMenuListReq) (*QueryMenuListResp, error)
	QueryMenuResourceList(context.Context, *QueryMenuListReq) (*QueryMenuListResp, error)
	mustEmbedUnimplementedMenuServiceServer()
}

// UnimplementedMenuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMenuServiceServer struct {
}

func (UnimplementedMenuServiceServer) AddMenu(context.Context, *AddMenuReq) (*AddMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenu not implemented")
}
func (UnimplementedMenuServiceServer) DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedMenuServiceServer) UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedMenuServiceServer) UpdateMenuStatus(context.Context, *UpdateMenuStatusReq) (*UpdateMenuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuStatus not implemented")
}
func (UnimplementedMenuServiceServer) QueryMenuDetail(context.Context, *QueryMenuDetailReq) (*QueryMenuDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMenuDetail not implemented")
}
func (UnimplementedMenuServiceServer) QueryMenuList(context.Context, *QueryMenuListReq) (*QueryMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMenuList not implemented")
}
func (UnimplementedMenuServiceServer) QueryMenuResourceList(context.Context, *QueryMenuListReq) (*QueryMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMenuResourceList not implemented")
}
func (UnimplementedMenuServiceServer) mustEmbedUnimplementedMenuServiceServer() {}

// UnsafeMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServiceServer will
// result in compilation errors.
type UnsafeMenuServiceServer interface {
	mustEmbedUnimplementedMenuServiceServer()
}

func RegisterMenuServiceServer(s grpc.ServiceRegistrar, srv MenuServiceServer) {
	s.RegisterService(&MenuService_ServiceDesc, srv)
}

func _MenuService_AddMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).AddMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_AddMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).AddMenu(ctx, req.(*AddMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).DeleteMenu(ctx, req.(*DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateMenuStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateMenuStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_UpdateMenuStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateMenuStatus(ctx, req.(*UpdateMenuStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_QueryMenuDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMenuDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).QueryMenuDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_QueryMenuDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).QueryMenuDetail(ctx, req.(*QueryMenuDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_QueryMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).QueryMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_QueryMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).QueryMenuList(ctx, req.(*QueryMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_QueryMenuResourceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).QueryMenuResourceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuService_QueryMenuResourceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).QueryMenuResourceList(ctx, req.(*QueryMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuService_ServiceDesc is the grpc.ServiceDesc for MenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMenu",
			Handler:    _MenuService_AddMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _MenuService_DeleteMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _MenuService_UpdateMenu_Handler,
		},
		{
			MethodName: "UpdateMenuStatus",
			Handler:    _MenuService_UpdateMenuStatus_Handler,
		},
		{
			MethodName: "QueryMenuDetail",
			Handler:    _MenuService_QueryMenuDetail_Handler,
		},
		{
			MethodName: "QueryMenuList",
			Handler:    _MenuService_QueryMenuList_Handler,
		},
		{
			MethodName: "QueryMenuResourceList",
			Handler:    _MenuService_QueryMenuResourceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	NoticeService_AddNotice_FullMethodName          = "/sysclient.NoticeService/AddNotice"
	NoticeService_DeleteNotice_FullMethodName       = "/sysclient.NoticeService/DeleteNotice"
	NoticeService_UpdateNotice_FullMethodName       = "/sysclient.NoticeService/UpdateNotice"
	NoticeService_UpdateNoticeStatus_FullMethodName = "/sysclient.NoticeService/UpdateNoticeStatus"
	NoticeService_QueryNoticeDetail_FullMethodName  = "/sysclient.NoticeService/QueryNoticeDetail"
	NoticeService_QueryNoticeList_FullMethodName    = "/sysclient.NoticeService/QueryNoticeList"
)

// NoticeServiceClient is the client API for NoticeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoticeServiceClient interface {
	// 添加通知公告表
	AddNotice(ctx context.Context, in *AddNoticeReq, opts ...grpc.CallOption) (*AddNoticeResp, error)
	// 删除通知公告表
	DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error)
	// 更新通知公告表
	UpdateNotice(ctx context.Context, in *UpdateNoticeReq, opts ...grpc.CallOption) (*UpdateNoticeResp, error)
	// 更新通知公告表状态
	UpdateNoticeStatus(ctx context.Context, in *UpdateNoticeStatusReq, opts ...grpc.CallOption) (*UpdateNoticeStatusResp, error)
	// 查询通知公告表详情
	QueryNoticeDetail(ctx context.Context, in *QueryNoticeDetailReq, opts ...grpc.CallOption) (*QueryNoticeDetailResp, error)
	// 分页查询通知公告表列表
	QueryNoticeList(ctx context.Context, in *QueryNoticeListReq, opts ...grpc.CallOption) (*QueryNoticeListResp, error)
}

type noticeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeServiceClient(cc grpc.ClientConnInterface) NoticeServiceClient {
	return &noticeServiceClient{cc}
}

func (c *noticeServiceClient) AddNotice(ctx context.Context, in *AddNoticeReq, opts ...grpc.CallOption) (*AddNoticeResp, error) {
	out := new(AddNoticeResp)
	err := c.cc.Invoke(ctx, NoticeService_AddNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) DeleteNotice(ctx context.Context, in *DeleteNoticeReq, opts ...grpc.CallOption) (*DeleteNoticeResp, error) {
	out := new(DeleteNoticeResp)
	err := c.cc.Invoke(ctx, NoticeService_DeleteNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) UpdateNotice(ctx context.Context, in *UpdateNoticeReq, opts ...grpc.CallOption) (*UpdateNoticeResp, error) {
	out := new(UpdateNoticeResp)
	err := c.cc.Invoke(ctx, NoticeService_UpdateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) UpdateNoticeStatus(ctx context.Context, in *UpdateNoticeStatusReq, opts ...grpc.CallOption) (*UpdateNoticeStatusResp, error) {
	out := new(UpdateNoticeStatusResp)
	err := c.cc.Invoke(ctx, NoticeService_UpdateNoticeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) QueryNoticeDetail(ctx context.Context, in *QueryNoticeDetailReq, opts ...grpc.CallOption) (*QueryNoticeDetailResp, error) {
	out := new(QueryNoticeDetailResp)
	err := c.cc.Invoke(ctx, NoticeService_QueryNoticeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) QueryNoticeList(ctx context.Context, in *QueryNoticeListReq, opts ...grpc.CallOption) (*QueryNoticeListResp, error) {
	out := new(QueryNoticeListResp)
	err := c.cc.Invoke(ctx, NoticeService_QueryNoticeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServiceServer is the server API for NoticeService service.
// All implementations must embed UnimplementedNoticeServiceServer
// for forward compatibility
type NoticeServiceServer interface {
	// 添加通知公告表
	AddNotice(context.Context, *AddNoticeReq) (*AddNoticeResp, error)
	// 删除通知公告表
	DeleteNotice(context.Context, *DeleteNoticeReq) (*DeleteNoticeResp, error)
	// 更新通知公告表
	UpdateNotice(context.Context, *UpdateNoticeReq) (*UpdateNoticeResp, error)
	// 更新通知公告表状态
	UpdateNoticeStatus(context.Context, *UpdateNoticeStatusReq) (*UpdateNoticeStatusResp, error)
	// 查询通知公告表详情
	QueryNoticeDetail(context.Context, *QueryNoticeDetailReq) (*QueryNoticeDetailResp, error)
	// 分页查询通知公告表列表
	QueryNoticeList(context.Context, *QueryNoticeListReq) (*QueryNoticeListResp, error)
	mustEmbedUnimplementedNoticeServiceServer()
}

// UnimplementedNoticeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoticeServiceServer struct {
}

func (UnimplementedNoticeServiceServer) AddNotice(context.Context, *AddNoticeReq) (*AddNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotice not implemented")
}
func (UnimplementedNoticeServiceServer) DeleteNotice(context.Context, *DeleteNoticeReq) (*DeleteNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedNoticeServiceServer) UpdateNotice(context.Context, *UpdateNoticeReq) (*UpdateNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedNoticeServiceServer) UpdateNoticeStatus(context.Context, *UpdateNoticeStatusReq) (*UpdateNoticeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoticeStatus not implemented")
}
func (UnimplementedNoticeServiceServer) QueryNoticeDetail(context.Context, *QueryNoticeDetailReq) (*QueryNoticeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNoticeDetail not implemented")
}
func (UnimplementedNoticeServiceServer) QueryNoticeList(context.Context, *QueryNoticeListReq) (*QueryNoticeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNoticeList not implemented")
}
func (UnimplementedNoticeServiceServer) mustEmbedUnimplementedNoticeServiceServer() {}

// UnsafeNoticeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoticeServiceServer will
// result in compilation errors.
type UnsafeNoticeServiceServer interface {
	mustEmbedUnimplementedNoticeServiceServer()
}

func RegisterNoticeServiceServer(s grpc.ServiceRegistrar, srv NoticeServiceServer) {
	s.RegisterService(&NoticeService_ServiceDesc, srv)
}

func _NoticeService_AddNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).AddNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoticeService_AddNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).AddNotice(ctx, req.(*AddNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoticeService_DeleteNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).DeleteNotice(ctx, req.(*DeleteNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoticeService_UpdateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).UpdateNotice(ctx, req.(*UpdateNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_UpdateNoticeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).UpdateNoticeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoticeService_UpdateNoticeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).UpdateNoticeStatus(ctx, req.(*UpdateNoticeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_QueryNoticeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNoticeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).QueryNoticeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoticeService_QueryNoticeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).QueryNoticeDetail(ctx, req.(*QueryNoticeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_QueryNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNoticeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).QueryNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoticeService_QueryNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).QueryNoticeList(ctx, req.(*QueryNoticeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NoticeService_ServiceDesc is the grpc.ServiceDesc for NoticeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoticeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.NoticeService",
	HandlerType: (*NoticeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNotice",
			Handler:    _NoticeService_AddNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _NoticeService_DeleteNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _NoticeService_UpdateNotice_Handler,
		},
		{
			MethodName: "UpdateNoticeStatus",
			Handler:    _NoticeService_UpdateNoticeStatus_Handler,
		},
		{
			MethodName: "QueryNoticeDetail",
			Handler:    _NoticeService_QueryNoticeDetail_Handler,
		},
		{
			MethodName: "QueryNoticeList",
			Handler:    _NoticeService_QueryNoticeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	OperateLogService_AddOperateLog_FullMethodName         = "/sysclient.OperateLogService/AddOperateLog"
	OperateLogService_DeleteOperateLog_FullMethodName      = "/sysclient.OperateLogService/DeleteOperateLog"
	OperateLogService_QueryOperateLogDetail_FullMethodName = "/sysclient.OperateLogService/QueryOperateLogDetail"
	OperateLogService_QueryOperateLogList_FullMethodName   = "/sysclient.OperateLogService/QueryOperateLogList"
)

// OperateLogServiceClient is the client API for OperateLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperateLogServiceClient interface {
	// 添加系统操作日志
	AddOperateLog(ctx context.Context, in *AddOperateLogReq, opts ...grpc.CallOption) (*AddOperateLogResp, error)
	// 删除系统操作日志
	DeleteOperateLog(ctx context.Context, in *DeleteOperateLogReq, opts ...grpc.CallOption) (*DeleteOperateLogResp, error)
	// 查询系统操作日志详情
	QueryOperateLogDetail(ctx context.Context, in *QueryOperateLogDetailReq, opts ...grpc.CallOption) (*QueryOperateLogDetailResp, error)
	// 查询系统操作日志列表
	QueryOperateLogList(ctx context.Context, in *QueryOperateLogListReq, opts ...grpc.CallOption) (*QueryOperateLogListResp, error)
}

type operateLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperateLogServiceClient(cc grpc.ClientConnInterface) OperateLogServiceClient {
	return &operateLogServiceClient{cc}
}

func (c *operateLogServiceClient) AddOperateLog(ctx context.Context, in *AddOperateLogReq, opts ...grpc.CallOption) (*AddOperateLogResp, error) {
	out := new(AddOperateLogResp)
	err := c.cc.Invoke(ctx, OperateLogService_AddOperateLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateLogServiceClient) DeleteOperateLog(ctx context.Context, in *DeleteOperateLogReq, opts ...grpc.CallOption) (*DeleteOperateLogResp, error) {
	out := new(DeleteOperateLogResp)
	err := c.cc.Invoke(ctx, OperateLogService_DeleteOperateLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateLogServiceClient) QueryOperateLogDetail(ctx context.Context, in *QueryOperateLogDetailReq, opts ...grpc.CallOption) (*QueryOperateLogDetailResp, error) {
	out := new(QueryOperateLogDetailResp)
	err := c.cc.Invoke(ctx, OperateLogService_QueryOperateLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operateLogServiceClient) QueryOperateLogList(ctx context.Context, in *QueryOperateLogListReq, opts ...grpc.CallOption) (*QueryOperateLogListResp, error) {
	out := new(QueryOperateLogListResp)
	err := c.cc.Invoke(ctx, OperateLogService_QueryOperateLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperateLogServiceServer is the server API for OperateLogService service.
// All implementations must embed UnimplementedOperateLogServiceServer
// for forward compatibility
type OperateLogServiceServer interface {
	// 添加系统操作日志
	AddOperateLog(context.Context, *AddOperateLogReq) (*AddOperateLogResp, error)
	// 删除系统操作日志
	DeleteOperateLog(context.Context, *DeleteOperateLogReq) (*DeleteOperateLogResp, error)
	// 查询系统操作日志详情
	QueryOperateLogDetail(context.Context, *QueryOperateLogDetailReq) (*QueryOperateLogDetailResp, error)
	// 查询系统操作日志列表
	QueryOperateLogList(context.Context, *QueryOperateLogListReq) (*QueryOperateLogListResp, error)
	mustEmbedUnimplementedOperateLogServiceServer()
}

// UnimplementedOperateLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOperateLogServiceServer struct {
}

func (UnimplementedOperateLogServiceServer) AddOperateLog(context.Context, *AddOperateLogReq) (*AddOperateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperateLog not implemented")
}
func (UnimplementedOperateLogServiceServer) DeleteOperateLog(context.Context, *DeleteOperateLogReq) (*DeleteOperateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperateLog not implemented")
}
func (UnimplementedOperateLogServiceServer) QueryOperateLogDetail(context.Context, *QueryOperateLogDetailReq) (*QueryOperateLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperateLogDetail not implemented")
}
func (UnimplementedOperateLogServiceServer) QueryOperateLogList(context.Context, *QueryOperateLogListReq) (*QueryOperateLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperateLogList not implemented")
}
func (UnimplementedOperateLogServiceServer) mustEmbedUnimplementedOperateLogServiceServer() {}

// UnsafeOperateLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperateLogServiceServer will
// result in compilation errors.
type UnsafeOperateLogServiceServer interface {
	mustEmbedUnimplementedOperateLogServiceServer()
}

func RegisterOperateLogServiceServer(s grpc.ServiceRegistrar, srv OperateLogServiceServer) {
	s.RegisterService(&OperateLogService_ServiceDesc, srv)
}

func _OperateLogService_AddOperateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateLogServiceServer).AddOperateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateLogService_AddOperateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateLogServiceServer).AddOperateLog(ctx, req.(*AddOperateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateLogService_DeleteOperateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateLogServiceServer).DeleteOperateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateLogService_DeleteOperateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateLogServiceServer).DeleteOperateLog(ctx, req.(*DeleteOperateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateLogService_QueryOperateLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperateLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateLogServiceServer).QueryOperateLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateLogService_QueryOperateLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateLogServiceServer).QueryOperateLogDetail(ctx, req.(*QueryOperateLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperateLogService_QueryOperateLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperateLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateLogServiceServer).QueryOperateLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperateLogService_QueryOperateLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateLogServiceServer).QueryOperateLogList(ctx, req.(*QueryOperateLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OperateLogService_ServiceDesc is the grpc.ServiceDesc for OperateLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperateLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.OperateLogService",
	HandlerType: (*OperateLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOperateLog",
			Handler:    _OperateLogService_AddOperateLog_Handler,
		},
		{
			MethodName: "DeleteOperateLog",
			Handler:    _OperateLogService_DeleteOperateLog_Handler,
		},
		{
			MethodName: "QueryOperateLogDetail",
			Handler:    _OperateLogService_QueryOperateLogDetail_Handler,
		},
		{
			MethodName: "QueryOperateLogList",
			Handler:    _OperateLogService_QueryOperateLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	PostService_AddPost_FullMethodName          = "/sysclient.PostService/AddPost"
	PostService_DeletePost_FullMethodName       = "/sysclient.PostService/DeletePost"
	PostService_UpdatePost_FullMethodName       = "/sysclient.PostService/UpdatePost"
	PostService_UpdatePostStatus_FullMethodName = "/sysclient.PostService/UpdatePostStatus"
	PostService_QueryPostDetail_FullMethodName  = "/sysclient.PostService/QueryPostDetail"
	PostService_QueryPostList_FullMethodName    = "/sysclient.PostService/QueryPostList"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	// 添加岗位信息
	AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*AddPostResp, error)
	// 删除岗位信息
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error)
	// 更新岗位信息
	UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error)
	// 更新岗位信息状态
	UpdatePostStatus(ctx context.Context, in *UpdatePostStatusReq, opts ...grpc.CallOption) (*UpdatePostStatusResp, error)
	// 查询岗位信息详情
	QueryPostDetail(ctx context.Context, in *QueryPostDetailReq, opts ...grpc.CallOption) (*QueryPostDetailResp, error)
	// 查询岗位信息列表
	QueryPostList(ctx context.Context, in *QueryPostListReq, opts ...grpc.CallOption) (*QueryPostListResp, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) AddPost(ctx context.Context, in *AddPostReq, opts ...grpc.CallOption) (*AddPostResp, error) {
	out := new(AddPostResp)
	err := c.cc.Invoke(ctx, PostService_AddPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error) {
	out := new(DeletePostResp)
	err := c.cc.Invoke(ctx, PostService_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error) {
	out := new(UpdatePostResp)
	err := c.cc.Invoke(ctx, PostService_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdatePostStatus(ctx context.Context, in *UpdatePostStatusReq, opts ...grpc.CallOption) (*UpdatePostStatusResp, error) {
	out := new(UpdatePostStatusResp)
	err := c.cc.Invoke(ctx, PostService_UpdatePostStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) QueryPostDetail(ctx context.Context, in *QueryPostDetailReq, opts ...grpc.CallOption) (*QueryPostDetailResp, error) {
	out := new(QueryPostDetailResp)
	err := c.cc.Invoke(ctx, PostService_QueryPostDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) QueryPostList(ctx context.Context, in *QueryPostListReq, opts ...grpc.CallOption) (*QueryPostListResp, error) {
	out := new(QueryPostListResp)
	err := c.cc.Invoke(ctx, PostService_QueryPostList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	// 添加岗位信息
	AddPost(context.Context, *AddPostReq) (*AddPostResp, error)
	// 删除岗位信息
	DeletePost(context.Context, *DeletePostReq) (*DeletePostResp, error)
	// 更新岗位信息
	UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResp, error)
	// 更新岗位信息状态
	UpdatePostStatus(context.Context, *UpdatePostStatusReq) (*UpdatePostStatusResp, error)
	// 查询岗位信息详情
	QueryPostDetail(context.Context, *QueryPostDetailReq) (*QueryPostDetailResp, error)
	// 查询岗位信息列表
	QueryPostList(context.Context, *QueryPostListReq) (*QueryPostListResp, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) AddPost(context.Context, *AddPostReq) (*AddPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (UnimplementedPostServiceServer) DeletePost(context.Context, *DeletePostReq) (*DeletePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostServiceServer) UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostServiceServer) UpdatePostStatus(context.Context, *UpdatePostStatusReq) (*UpdatePostStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostStatus not implemented")
}
func (UnimplementedPostServiceServer) QueryPostDetail(context.Context, *QueryPostDetailReq) (*QueryPostDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPostDetail not implemented")
}
func (UnimplementedPostServiceServer) QueryPostList(context.Context, *QueryPostListReq) (*QueryPostListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPostList not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_AddPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).AddPost(ctx, req.(*AddPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdatePost(ctx, req.(*UpdatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdatePostStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdatePostStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdatePostStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdatePostStatus(ctx, req.(*UpdatePostStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_QueryPostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPostDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).QueryPostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_QueryPostDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).QueryPostDetail(ctx, req.(*QueryPostDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_QueryPostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPostListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).QueryPostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_QueryPostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).QueryPostList(ctx, req.(*QueryPostListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPost",
			Handler:    _PostService_AddPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostService_DeletePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostService_UpdatePost_Handler,
		},
		{
			MethodName: "UpdatePostStatus",
			Handler:    _PostService_UpdatePostStatus_Handler,
		},
		{
			MethodName: "QueryPostDetail",
			Handler:    _PostService_QueryPostDetail_Handler,
		},
		{
			MethodName: "QueryPostList",
			Handler:    _PostService_QueryPostList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	RoleService_AddRole_FullMethodName             = "/sysclient.RoleService/AddRole"
	RoleService_DeleteRole_FullMethodName          = "/sysclient.RoleService/DeleteRole"
	RoleService_UpdateRole_FullMethodName          = "/sysclient.RoleService/UpdateRole"
	RoleService_UpdateRoleStatus_FullMethodName    = "/sysclient.RoleService/UpdateRoleStatus"
	RoleService_QueryRoleDetail_FullMethodName     = "/sysclient.RoleService/QueryRoleDetail"
	RoleService_QueryRoleList_FullMethodName       = "/sysclient.RoleService/QueryRoleList"
	RoleService_QueryRoleMenuList_FullMethodName   = "/sysclient.RoleService/QueryRoleMenuList"
	RoleService_UpdateMenuRoleList_FullMethodName  = "/sysclient.RoleService/UpdateMenuRoleList"
	RoleService_QueryRoleUserList_FullMethodName   = "/sysclient.RoleService/QueryRoleUserList"
	RoleService_CancelAuthorization_FullMethodName = "/sysclient.RoleService/CancelAuthorization"
)

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	// 添加角色信息
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error)
	// 删除角色信息
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error)
	// 更新角色信息
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	// 更新角色信息状态
	UpdateRoleStatus(ctx context.Context, in *UpdateRoleStatusReq, opts ...grpc.CallOption) (*UpdateRoleStatusResp, error)
	// 查询角色信息详情
	QueryRoleDetail(ctx context.Context, in *QueryRoleDetailReq, opts ...grpc.CallOption) (*QueryRoleDetailResp, error)
	// 查询角色信息列表
	QueryRoleList(ctx context.Context, in *QueryRoleListReq, opts ...grpc.CallOption) (*QueryRoleListResp, error)
	// 查询角色与菜单的关联
	QueryRoleMenuList(ctx context.Context, in *QueryRoleMenuListReq, opts ...grpc.CallOption) (*QueryRoleMenuListResp, error)
	// 更新角色与菜单的关联
	UpdateMenuRoleList(ctx context.Context, in *UpdateRoleMenuReq, opts ...grpc.CallOption) (*UpdateRoleMenuResp, error)
	// 查询角色的用户关联
	QueryRoleUserList(ctx context.Context, in *QueryRoleUserListReq, opts ...grpc.CallOption) (*QueryRoleUserListResp, error)
	// 取消授权/确认授权
	CancelAuthorization(ctx context.Context, in *CancelAuthorizationReq, opts ...grpc.CallOption) (*CancelAuthorizationResp, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error) {
	out := new(AddRoleResp)
	err := c.cc.Invoke(ctx, RoleService_AddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error) {
	out := new(DeleteRoleResp)
	err := c.cc.Invoke(ctx, RoleService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, RoleService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRoleStatus(ctx context.Context, in *UpdateRoleStatusReq, opts ...grpc.CallOption) (*UpdateRoleStatusResp, error) {
	out := new(UpdateRoleStatusResp)
	err := c.cc.Invoke(ctx, RoleService_UpdateRoleStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) QueryRoleDetail(ctx context.Context, in *QueryRoleDetailReq, opts ...grpc.CallOption) (*QueryRoleDetailResp, error) {
	out := new(QueryRoleDetailResp)
	err := c.cc.Invoke(ctx, RoleService_QueryRoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) QueryRoleList(ctx context.Context, in *QueryRoleListReq, opts ...grpc.CallOption) (*QueryRoleListResp, error) {
	out := new(QueryRoleListResp)
	err := c.cc.Invoke(ctx, RoleService_QueryRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) QueryRoleMenuList(ctx context.Context, in *QueryRoleMenuListReq, opts ...grpc.CallOption) (*QueryRoleMenuListResp, error) {
	out := new(QueryRoleMenuListResp)
	err := c.cc.Invoke(ctx, RoleService_QueryRoleMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateMenuRoleList(ctx context.Context, in *UpdateRoleMenuReq, opts ...grpc.CallOption) (*UpdateRoleMenuResp, error) {
	out := new(UpdateRoleMenuResp)
	err := c.cc.Invoke(ctx, RoleService_UpdateMenuRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) QueryRoleUserList(ctx context.Context, in *QueryRoleUserListReq, opts ...grpc.CallOption) (*QueryRoleUserListResp, error) {
	out := new(QueryRoleUserListResp)
	err := c.cc.Invoke(ctx, RoleService_QueryRoleUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) CancelAuthorization(ctx context.Context, in *CancelAuthorizationReq, opts ...grpc.CallOption) (*CancelAuthorizationResp, error) {
	out := new(CancelAuthorizationResp)
	err := c.cc.Invoke(ctx, RoleService_CancelAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	// 添加角色信息
	AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error)
	// 删除角色信息
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error)
	// 更新角色信息
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	// 更新角色信息状态
	UpdateRoleStatus(context.Context, *UpdateRoleStatusReq) (*UpdateRoleStatusResp, error)
	// 查询角色信息详情
	QueryRoleDetail(context.Context, *QueryRoleDetailReq) (*QueryRoleDetailResp, error)
	// 查询角色信息列表
	QueryRoleList(context.Context, *QueryRoleListReq) (*QueryRoleListResp, error)
	// 查询角色与菜单的关联
	QueryRoleMenuList(context.Context, *QueryRoleMenuListReq) (*QueryRoleMenuListResp, error)
	// 更新角色与菜单的关联
	UpdateMenuRoleList(context.Context, *UpdateRoleMenuReq) (*UpdateRoleMenuResp, error)
	// 查询角色的用户关联
	QueryRoleUserList(context.Context, *QueryRoleUserListReq) (*QueryRoleUserListResp, error)
	// 取消授权/确认授权
	CancelAuthorization(context.Context, *CancelAuthorizationReq) (*CancelAuthorizationResp, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRoleStatus(context.Context, *UpdateRoleStatusReq) (*UpdateRoleStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleStatus not implemented")
}
func (UnimplementedRoleServiceServer) QueryRoleDetail(context.Context, *QueryRoleDetailReq) (*QueryRoleDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoleDetail not implemented")
}
func (UnimplementedRoleServiceServer) QueryRoleList(context.Context, *QueryRoleListReq) (*QueryRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoleList not implemented")
}
func (UnimplementedRoleServiceServer) QueryRoleMenuList(context.Context, *QueryRoleMenuListReq) (*QueryRoleMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoleMenuList not implemented")
}
func (UnimplementedRoleServiceServer) UpdateMenuRoleList(context.Context, *UpdateRoleMenuReq) (*UpdateRoleMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuRoleList not implemented")
}
func (UnimplementedRoleServiceServer) QueryRoleUserList(context.Context, *QueryRoleUserListReq) (*QueryRoleUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoleUserList not implemented")
}
func (UnimplementedRoleServiceServer) CancelAuthorization(context.Context, *CancelAuthorizationReq) (*CancelAuthorizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAuthorization not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_UpdateRoleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRoleStatus(ctx, req.(*UpdateRoleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_QueryRoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoleDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).QueryRoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_QueryRoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).QueryRoleDetail(ctx, req.(*QueryRoleDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_QueryRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).QueryRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_QueryRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).QueryRoleList(ctx, req.(*QueryRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_QueryRoleMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoleMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).QueryRoleMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_QueryRoleMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).QueryRoleMenuList(ctx, req.(*QueryRoleMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateMenuRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateMenuRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_UpdateMenuRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateMenuRoleList(ctx, req.(*UpdateRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_QueryRoleUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoleUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).QueryRoleUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_QueryRoleUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).QueryRoleUserList(ctx, req.(*QueryRoleUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_CancelAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CancelAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleService_CancelAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CancelAuthorization(ctx, req.(*CancelAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRole",
			Handler:    _RoleService_AddRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateRoleStatus",
			Handler:    _RoleService_UpdateRoleStatus_Handler,
		},
		{
			MethodName: "QueryRoleDetail",
			Handler:    _RoleService_QueryRoleDetail_Handler,
		},
		{
			MethodName: "QueryRoleList",
			Handler:    _RoleService_QueryRoleList_Handler,
		},
		{
			MethodName: "QueryRoleMenuList",
			Handler:    _RoleService_QueryRoleMenuList_Handler,
		},
		{
			MethodName: "UpdateMenuRoleList",
			Handler:    _RoleService_UpdateMenuRoleList_Handler,
		},
		{
			MethodName: "QueryRoleUserList",
			Handler:    _RoleService_QueryRoleUserList_Handler,
		},
		{
			MethodName: "CancelAuthorization",
			Handler:    _RoleService_CancelAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}

const (
	UserService_AddUser_FullMethodName              = "/sysclient.UserService/AddUser"
	UserService_DeleteUser_FullMethodName           = "/sysclient.UserService/DeleteUser"
	UserService_UpdateUser_FullMethodName           = "/sysclient.UserService/UpdateUser"
	UserService_UpdateUserStatus_FullMethodName     = "/sysclient.UserService/UpdateUserStatus"
	UserService_QueryUserDetail_FullMethodName      = "/sysclient.UserService/QueryUserDetail"
	UserService_QueryUserList_FullMethodName        = "/sysclient.UserService/QueryUserList"
	UserService_Login_FullMethodName                = "/sysclient.UserService/Login"
	UserService_UserInfo_FullMethodName             = "/sysclient.UserService/UserInfo"
	UserService_ReSetPassword_FullMethodName        = "/sysclient.UserService/ReSetPassword"
	UserService_QueryUserRoleList_FullMethodName    = "/sysclient.UserService/QueryUserRoleList"
	UserService_UpdateUserRoleList_FullMethodName   = "/sysclient.UserService/UpdateUserRoleList"
	UserService_QueryDeptAndPostList_FullMethodName = "/sysclient.UserService/QueryDeptAndPostList"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 添加用户信息
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	// 删除用户信息
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	// 更新用户信息
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 更新用户信息状态
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*UpdateUserStatusResp, error)
	// 查询用户信息详情
	QueryUserDetail(ctx context.Context, in *QueryUserDetailReq, opts ...grpc.CallOption) (*QueryUserDetailResp, error)
	// 查询用户信息列表
	QueryUserList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error)
	// 用户登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 获取用户个人信息
	UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	// 重置用户密码
	ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*ReSetPasswordResp, error)
	// 查询用户与角色的关联
	QueryUserRoleList(ctx context.Context, in *QueryUserRoleListReq, opts ...grpc.CallOption) (*QueryUserRoleListResp, error)
	// 更新用户与角色的关联
	UpdateUserRoleList(ctx context.Context, in *UpdateUserRoleListReq, opts ...grpc.CallOption) (*UpdateUserRoleListResp, error)
	// 查询所有部门和岗位
	QueryDeptAndPostList(ctx context.Context, in *QueryDeptAndPostListReq, opts ...grpc.CallOption) (*QueryDeptAndPostListResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, UserService_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusReq, opts ...grpc.CallOption) (*UpdateUserStatusResp, error) {
	out := new(UpdateUserStatusResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryUserDetail(ctx context.Context, in *QueryUserDetailReq, opts ...grpc.CallOption) (*QueryUserDetailResp, error) {
	out := new(QueryUserDetailResp)
	err := c.cc.Invoke(ctx, UserService_QueryUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryUserList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error) {
	out := new(QueryUserListResp)
	err := c.cc.Invoke(ctx, UserService_QueryUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, UserService_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*ReSetPasswordResp, error) {
	out := new(ReSetPasswordResp)
	err := c.cc.Invoke(ctx, UserService_ReSetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryUserRoleList(ctx context.Context, in *QueryUserRoleListReq, opts ...grpc.CallOption) (*QueryUserRoleListResp, error) {
	out := new(QueryUserRoleListResp)
	err := c.cc.Invoke(ctx, UserService_QueryUserRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserRoleList(ctx context.Context, in *UpdateUserRoleListReq, opts ...grpc.CallOption) (*UpdateUserRoleListResp, error) {
	out := new(UpdateUserRoleListResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryDeptAndPostList(ctx context.Context, in *QueryDeptAndPostListReq, opts ...grpc.CallOption) (*QueryDeptAndPostListResp, error) {
	out := new(QueryDeptAndPostListResp)
	err := c.cc.Invoke(ctx, UserService_QueryDeptAndPostList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// 添加用户信息
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	// 删除用户信息
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	// 更新用户信息
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	// 更新用户信息状态
	UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*UpdateUserStatusResp, error)
	// 查询用户信息详情
	QueryUserDetail(context.Context, *QueryUserDetailReq) (*QueryUserDetailResp, error)
	// 查询用户信息列表
	QueryUserList(context.Context, *QueryUserListReq) (*QueryUserListResp, error)
	// 用户登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 获取用户个人信息
	UserInfo(context.Context, *InfoReq) (*InfoResp, error)
	// 重置用户密码
	ReSetPassword(context.Context, *ReSetPasswordReq) (*ReSetPasswordResp, error)
	// 查询用户与角色的关联
	QueryUserRoleList(context.Context, *QueryUserRoleListReq) (*QueryUserRoleListResp, error)
	// 更新用户与角色的关联
	UpdateUserRoleList(context.Context, *UpdateUserRoleListReq) (*UpdateUserRoleListResp, error)
	// 查询所有部门和岗位
	QueryDeptAndPostList(context.Context, *QueryDeptAndPostListReq) (*QueryDeptAndPostListResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserStatus(context.Context, *UpdateUserStatusReq) (*UpdateUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedUserServiceServer) QueryUserDetail(context.Context, *QueryUserDetailReq) (*QueryUserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserDetail not implemented")
}
func (UnimplementedUserServiceServer) QueryUserList(context.Context, *QueryUserListReq) (*QueryUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserList not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) UserInfo(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServiceServer) ReSetPassword(context.Context, *ReSetPasswordReq) (*ReSetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSetPassword not implemented")
}
func (UnimplementedUserServiceServer) QueryUserRoleList(context.Context, *QueryUserRoleListReq) (*QueryUserRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserRoleList not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserRoleList(context.Context, *UpdateUserRoleListReq) (*UpdateUserRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRoleList not implemented")
}
func (UnimplementedUserServiceServer) QueryDeptAndPostList(context.Context, *QueryDeptAndPostListReq) (*QueryDeptAndPostListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeptAndPostList not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUserDetail(ctx, req.(*QueryUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUserList(ctx, req.(*QueryUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInfo(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReSetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReSetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReSetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ReSetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReSetPassword(ctx, req.(*ReSetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryUserRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUserRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryUserRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUserRoleList(ctx, req.(*QueryUserRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserRoleList(ctx, req.(*UpdateUserRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryDeptAndPostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeptAndPostListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryDeptAndPostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryDeptAndPostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryDeptAndPostList(ctx, req.(*QueryDeptAndPostListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "QueryUserDetail",
			Handler:    _UserService_QueryUserDetail_Handler,
		},
		{
			MethodName: "QueryUserList",
			Handler:    _UserService_QueryUserList_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _UserService_UserInfo_Handler,
		},
		{
			MethodName: "ReSetPassword",
			Handler:    _UserService_ReSetPassword_Handler,
		},
		{
			MethodName: "QueryUserRoleList",
			Handler:    _UserService_QueryUserRoleList_Handler,
		},
		{
			MethodName: "UpdateUserRoleList",
			Handler:    _UserService_UpdateUserRoleList_Handler,
		},
		{
			MethodName: "QueryDeptAndPostList",
			Handler:    _UserService_QueryDeptAndPostList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sys/sys.proto",
}
