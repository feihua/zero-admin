// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2
// Source: sys.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/sys/internal/logic/userservice"
	"github.com/feihua/zero-admin/rpc/sys/internal/svc"
	"github.com/feihua/zero-admin/rpc/sys/sysclient"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	sysclient.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// 添加用户信息
func (s *UserServiceServer) AddUser(ctx context.Context, in *sysclient.AddUserReq) (*sysclient.AddUserResp, error) {
	l := userservicelogic.NewAddUserLogic(ctx, s.svcCtx)
	return l.AddUser(in)
}

// 删除用户信息
func (s *UserServiceServer) DeleteUser(ctx context.Context, in *sysclient.DeleteUserReq) (*sysclient.DeleteUserResp, error) {
	l := userservicelogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

// 更新用户信息
func (s *UserServiceServer) UpdateUser(ctx context.Context, in *sysclient.UpdateUserReq) (*sysclient.UpdateUserResp, error) {
	l := userservicelogic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

// 更新用户信息状态
func (s *UserServiceServer) UpdateUserStatus(ctx context.Context, in *sysclient.UpdateUserStatusReq) (*sysclient.UpdateUserStatusResp, error) {
	l := userservicelogic.NewUpdateUserStatusLogic(ctx, s.svcCtx)
	return l.UpdateUserStatus(in)
}

// 查询用户信息详情
func (s *UserServiceServer) QueryUserDetail(ctx context.Context, in *sysclient.QueryUserDetailReq) (*sysclient.QueryUserDetailResp, error) {
	l := userservicelogic.NewQueryUserDetailLogic(ctx, s.svcCtx)
	return l.QueryUserDetail(in)
}

// 查询用户信息列表
func (s *UserServiceServer) QueryUserList(ctx context.Context, in *sysclient.QueryUserListReq) (*sysclient.QueryUserListResp, error) {
	l := userservicelogic.NewQueryUserListLogic(ctx, s.svcCtx)
	return l.QueryUserList(in)
}

// 用户登录
func (s *UserServiceServer) Login(ctx context.Context, in *sysclient.LoginReq) (*sysclient.LoginResp, error) {
	l := userservicelogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 获取用户个人信息
func (s *UserServiceServer) UserInfo(ctx context.Context, in *sysclient.InfoReq) (*sysclient.InfoResp, error) {
	l := userservicelogic.NewUserInfoLogic(ctx, s.svcCtx)
	return l.UserInfo(in)
}

// 重置用户密码
func (s *UserServiceServer) ReSetPassword(ctx context.Context, in *sysclient.ReSetPasswordReq) (*sysclient.ReSetPasswordResp, error) {
	l := userservicelogic.NewReSetPasswordLogic(ctx, s.svcCtx)
	return l.ReSetPassword(in)
}

// 查询用户与角色的关联
func (s *UserServiceServer) QueryUserRoleList(ctx context.Context, in *sysclient.QueryUserRoleListReq) (*sysclient.QueryUserRoleListResp, error) {
	l := userservicelogic.NewQueryUserRoleListLogic(ctx, s.svcCtx)
	return l.QueryUserRoleList(in)
}

// 更新用户与角色的关联
func (s *UserServiceServer) UpdateUserRoleList(ctx context.Context, in *sysclient.UpdateUserRoleListReq) (*sysclient.UpdateUserRoleListResp, error) {
	l := userservicelogic.NewUpdateUserRoleListLogic(ctx, s.svcCtx)
	return l.UpdateUserRoleList(in)
}

// 查询所有部门和岗位
func (s *UserServiceServer) QueryDeptAndPostList(ctx context.Context, in *sysclient.QueryDeptAndPostListReq) (*sysclient.QueryDeptAndPostListResp, error) {
	l := userservicelogic.NewQueryDeptAndPostListLogic(ctx, s.svcCtx)
	return l.QueryDeptAndPostList(in)
}
