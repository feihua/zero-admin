// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2
// Source: sys.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/sys/internal/logic/noticeservice"
	"github.com/feihua/zero-admin/rpc/sys/internal/svc"
	"github.com/feihua/zero-admin/rpc/sys/sysclient"
)

type NoticeServiceServer struct {
	svcCtx *svc.ServiceContext
	sysclient.UnimplementedNoticeServiceServer
}

func NewNoticeServiceServer(svcCtx *svc.ServiceContext) *NoticeServiceServer {
	return &NoticeServiceServer{
		svcCtx: svcCtx,
	}
}

// 添加通知公告表
func (s *NoticeServiceServer) AddNotice(ctx context.Context, in *sysclient.AddNoticeReq) (*sysclient.AddNoticeResp, error) {
	l := noticeservicelogic.NewAddNoticeLogic(ctx, s.svcCtx)
	return l.AddNotice(in)
}

// 删除通知公告表
func (s *NoticeServiceServer) DeleteNotice(ctx context.Context, in *sysclient.DeleteNoticeReq) (*sysclient.DeleteNoticeResp, error) {
	l := noticeservicelogic.NewDeleteNoticeLogic(ctx, s.svcCtx)
	return l.DeleteNotice(in)
}

// 更新通知公告表
func (s *NoticeServiceServer) UpdateNotice(ctx context.Context, in *sysclient.UpdateNoticeReq) (*sysclient.UpdateNoticeResp, error) {
	l := noticeservicelogic.NewUpdateNoticeLogic(ctx, s.svcCtx)
	return l.UpdateNotice(in)
}

// 更新通知公告表状态
func (s *NoticeServiceServer) UpdateNoticeStatus(ctx context.Context, in *sysclient.UpdateNoticeStatusReq) (*sysclient.UpdateNoticeStatusResp, error) {
	l := noticeservicelogic.NewUpdateNoticeStatusLogic(ctx, s.svcCtx)
	return l.UpdateNoticeStatus(in)
}

// 查询通知公告表详情
func (s *NoticeServiceServer) QueryNoticeDetail(ctx context.Context, in *sysclient.QueryNoticeDetailReq) (*sysclient.QueryNoticeDetailResp, error) {
	l := noticeservicelogic.NewQueryNoticeDetailLogic(ctx, s.svcCtx)
	return l.QueryNoticeDetail(in)
}

// 分页查询通知公告表列表
func (s *NoticeServiceServer) QueryNoticeList(ctx context.Context, in *sysclient.QueryNoticeListReq) (*sysclient.QueryNoticeListResp, error) {
	l := noticeservicelogic.NewQueryNoticeListLogic(ctx, s.svcCtx)
	return l.QueryNoticeList(in)
}
