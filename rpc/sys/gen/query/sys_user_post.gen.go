// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sys/gen/model"
)

func newSysUserPost(db *gorm.DB, opts ...gen.DOOption) sysUserPost {
	_sysUserPost := sysUserPost{}

	_sysUserPost.sysUserPostDo.UseDB(db, opts...)
	_sysUserPost.sysUserPostDo.UseModel(&model.SysUserPost{})

	tableName := _sysUserPost.sysUserPostDo.TableName()
	_sysUserPost.ALL = field.NewAsterisk(tableName)
	_sysUserPost.ID = field.NewInt64(tableName, "id")
	_sysUserPost.UserID = field.NewInt64(tableName, "user_id")
	_sysUserPost.PostID = field.NewInt64(tableName, "post_id")

	_sysUserPost.fillFieldMap()

	return _sysUserPost
}

// sysUserPost 用户岗位关联表
type sysUserPost struct {
	sysUserPostDo sysUserPostDo

	ALL    field.Asterisk
	ID     field.Int64 // 编号
	UserID field.Int64 // 用户Id
	PostID field.Int64 // 岗位Id

	fieldMap map[string]field.Expr
}

func (s sysUserPost) Table(newTableName string) *sysUserPost {
	s.sysUserPostDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUserPost) As(alias string) *sysUserPost {
	s.sysUserPostDo.DO = *(s.sysUserPostDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUserPost) updateTableName(table string) *sysUserPost {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.PostID = field.NewInt64(table, "post_id")

	s.fillFieldMap()

	return s
}

func (s *sysUserPost) WithContext(ctx context.Context) ISysUserPostDo {
	return s.sysUserPostDo.WithContext(ctx)
}

func (s sysUserPost) TableName() string { return s.sysUserPostDo.TableName() }

func (s sysUserPost) Alias() string { return s.sysUserPostDo.Alias() }

func (s sysUserPost) Columns(cols ...field.Expr) gen.Columns { return s.sysUserPostDo.Columns(cols...) }

func (s *sysUserPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUserPost) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["post_id"] = s.PostID
}

func (s sysUserPost) clone(db *gorm.DB) sysUserPost {
	s.sysUserPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysUserPost) replaceDB(db *gorm.DB) sysUserPost {
	s.sysUserPostDo.ReplaceDB(db)
	return s
}

type sysUserPostDo struct{ gen.DO }

type ISysUserPostDo interface {
	gen.SubQuery
	Debug() ISysUserPostDo
	WithContext(ctx context.Context) ISysUserPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysUserPostDo
	WriteDB() ISysUserPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysUserPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysUserPostDo
	Not(conds ...gen.Condition) ISysUserPostDo
	Or(conds ...gen.Condition) ISysUserPostDo
	Select(conds ...field.Expr) ISysUserPostDo
	Where(conds ...gen.Condition) ISysUserPostDo
	Order(conds ...field.Expr) ISysUserPostDo
	Distinct(cols ...field.Expr) ISysUserPostDo
	Omit(cols ...field.Expr) ISysUserPostDo
	Join(table schema.Tabler, on ...field.Expr) ISysUserPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysUserPostDo
	Group(cols ...field.Expr) ISysUserPostDo
	Having(conds ...gen.Condition) ISysUserPostDo
	Limit(limit int) ISysUserPostDo
	Offset(offset int) ISysUserPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserPostDo
	Unscoped() ISysUserPostDo
	Create(values ...*model.SysUserPost) error
	CreateInBatches(values []*model.SysUserPost, batchSize int) error
	Save(values ...*model.SysUserPost) error
	First() (*model.SysUserPost, error)
	Take() (*model.SysUserPost, error)
	Last() (*model.SysUserPost, error)
	Find() ([]*model.SysUserPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserPost, err error)
	FindInBatches(result *[]*model.SysUserPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysUserPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysUserPostDo
	Assign(attrs ...field.AssignExpr) ISysUserPostDo
	Joins(fields ...field.RelationField) ISysUserPostDo
	Preload(fields ...field.RelationField) ISysUserPostDo
	FirstOrInit() (*model.SysUserPost, error)
	FirstOrCreate() (*model.SysUserPost, error)
	FindByPage(offset int, limit int) (result []*model.SysUserPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysUserPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysUserPostDo) Debug() ISysUserPostDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUserPostDo) WithContext(ctx context.Context) ISysUserPostDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUserPostDo) ReadDB() ISysUserPostDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUserPostDo) WriteDB() ISysUserPostDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUserPostDo) Session(config *gorm.Session) ISysUserPostDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysUserPostDo) Clauses(conds ...clause.Expression) ISysUserPostDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUserPostDo) Returning(value interface{}, columns ...string) ISysUserPostDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUserPostDo) Not(conds ...gen.Condition) ISysUserPostDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUserPostDo) Or(conds ...gen.Condition) ISysUserPostDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUserPostDo) Select(conds ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUserPostDo) Where(conds ...gen.Condition) ISysUserPostDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUserPostDo) Order(conds ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUserPostDo) Distinct(cols ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUserPostDo) Omit(cols ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUserPostDo) Join(table schema.Tabler, on ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUserPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUserPostDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUserPostDo) Group(cols ...field.Expr) ISysUserPostDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUserPostDo) Having(conds ...gen.Condition) ISysUserPostDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUserPostDo) Limit(limit int) ISysUserPostDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUserPostDo) Offset(offset int) ISysUserPostDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUserPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserPostDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUserPostDo) Unscoped() ISysUserPostDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUserPostDo) Create(values ...*model.SysUserPost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUserPostDo) CreateInBatches(values []*model.SysUserPost, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUserPostDo) Save(values ...*model.SysUserPost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUserPostDo) First() (*model.SysUserPost, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserPost), nil
	}
}

func (s sysUserPostDo) Take() (*model.SysUserPost, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserPost), nil
	}
}

func (s sysUserPostDo) Last() (*model.SysUserPost, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserPost), nil
	}
}

func (s sysUserPostDo) Find() ([]*model.SysUserPost, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysUserPost), err
}

func (s sysUserPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserPost, err error) {
	buf := make([]*model.SysUserPost, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUserPostDo) FindInBatches(result *[]*model.SysUserPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUserPostDo) Attrs(attrs ...field.AssignExpr) ISysUserPostDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUserPostDo) Assign(attrs ...field.AssignExpr) ISysUserPostDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUserPostDo) Joins(fields ...field.RelationField) ISysUserPostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUserPostDo) Preload(fields ...field.RelationField) ISysUserPostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUserPostDo) FirstOrInit() (*model.SysUserPost, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserPost), nil
	}
}

func (s sysUserPostDo) FirstOrCreate() (*model.SysUserPost, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserPost), nil
	}
}

func (s sysUserPostDo) FindByPage(offset int, limit int) (result []*model.SysUserPost, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUserPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUserPostDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUserPostDo) Delete(models ...*model.SysUserPost) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUserPostDo) withDO(do gen.Dao) *sysUserPostDo {
	s.DO = *do.(*gen.DO)
	return s
}
