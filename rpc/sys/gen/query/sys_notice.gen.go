// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sys/gen/model"
)

func newSysNotice(db *gorm.DB, opts ...gen.DOOption) sysNotice {
	_sysNotice := sysNotice{}

	_sysNotice.sysNoticeDo.UseDB(db, opts...)
	_sysNotice.sysNoticeDo.UseModel(&model.SysNotice{})

	tableName := _sysNotice.sysNoticeDo.TableName()
	_sysNotice.ALL = field.NewAsterisk(tableName)
	_sysNotice.ID = field.NewInt64(tableName, "id")
	_sysNotice.NoticeTitle = field.NewString(tableName, "notice_title")
	_sysNotice.NoticeType = field.NewInt32(tableName, "notice_type")
	_sysNotice.NoticeContent = field.NewString(tableName, "notice_content")
	_sysNotice.Status = field.NewInt32(tableName, "status")
	_sysNotice.Remark = field.NewString(tableName, "remark")
	_sysNotice.CreateBy = field.NewString(tableName, "create_by")
	_sysNotice.CreateTime = field.NewTime(tableName, "create_time")
	_sysNotice.UpdateBy = field.NewString(tableName, "update_by")
	_sysNotice.UpdateTime = field.NewTime(tableName, "update_time")

	_sysNotice.fillFieldMap()

	return _sysNotice
}

// sysNotice 通知公告表
type sysNotice struct {
	sysNoticeDo sysNoticeDo

	ALL           field.Asterisk
	ID            field.Int64  // 公告ID
	NoticeTitle   field.String // 公告标题
	NoticeType    field.Int32  // 公告类型（1:通知,2:公告）
	NoticeContent field.String // 公告内容
	Status        field.Int32  // 公告状态（0:关闭,1:正常 ）
	Remark        field.String // 备注
	CreateBy      field.String // 创建者
	CreateTime    field.Time   // 创建时间
	UpdateBy      field.String // 更新者
	UpdateTime    field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s sysNotice) Table(newTableName string) *sysNotice {
	s.sysNoticeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysNotice) As(alias string) *sysNotice {
	s.sysNoticeDo.DO = *(s.sysNoticeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysNotice) updateTableName(table string) *sysNotice {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.NoticeTitle = field.NewString(table, "notice_title")
	s.NoticeType = field.NewInt32(table, "notice_type")
	s.NoticeContent = field.NewString(table, "notice_content")
	s.Status = field.NewInt32(table, "status")
	s.Remark = field.NewString(table, "remark")
	s.CreateBy = field.NewString(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewString(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *sysNotice) WithContext(ctx context.Context) ISysNoticeDo {
	return s.sysNoticeDo.WithContext(ctx)
}

func (s sysNotice) TableName() string { return s.sysNoticeDo.TableName() }

func (s sysNotice) Alias() string { return s.sysNoticeDo.Alias() }

func (s sysNotice) Columns(cols ...field.Expr) gen.Columns { return s.sysNoticeDo.Columns(cols...) }

func (s *sysNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysNotice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["notice_title"] = s.NoticeTitle
	s.fieldMap["notice_type"] = s.NoticeType
	s.fieldMap["notice_content"] = s.NoticeContent
	s.fieldMap["status"] = s.Status
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s sysNotice) clone(db *gorm.DB) sysNotice {
	s.sysNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysNotice) replaceDB(db *gorm.DB) sysNotice {
	s.sysNoticeDo.ReplaceDB(db)
	return s
}

type sysNoticeDo struct{ gen.DO }

type ISysNoticeDo interface {
	gen.SubQuery
	Debug() ISysNoticeDo
	WithContext(ctx context.Context) ISysNoticeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysNoticeDo
	WriteDB() ISysNoticeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysNoticeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysNoticeDo
	Not(conds ...gen.Condition) ISysNoticeDo
	Or(conds ...gen.Condition) ISysNoticeDo
	Select(conds ...field.Expr) ISysNoticeDo
	Where(conds ...gen.Condition) ISysNoticeDo
	Order(conds ...field.Expr) ISysNoticeDo
	Distinct(cols ...field.Expr) ISysNoticeDo
	Omit(cols ...field.Expr) ISysNoticeDo
	Join(table schema.Tabler, on ...field.Expr) ISysNoticeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysNoticeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysNoticeDo
	Group(cols ...field.Expr) ISysNoticeDo
	Having(conds ...gen.Condition) ISysNoticeDo
	Limit(limit int) ISysNoticeDo
	Offset(offset int) ISysNoticeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysNoticeDo
	Unscoped() ISysNoticeDo
	Create(values ...*model.SysNotice) error
	CreateInBatches(values []*model.SysNotice, batchSize int) error
	Save(values ...*model.SysNotice) error
	First() (*model.SysNotice, error)
	Take() (*model.SysNotice, error)
	Last() (*model.SysNotice, error)
	Find() ([]*model.SysNotice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysNotice, err error)
	FindInBatches(result *[]*model.SysNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysNotice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysNoticeDo
	Assign(attrs ...field.AssignExpr) ISysNoticeDo
	Joins(fields ...field.RelationField) ISysNoticeDo
	Preload(fields ...field.RelationField) ISysNoticeDo
	FirstOrInit() (*model.SysNotice, error)
	FirstOrCreate() (*model.SysNotice, error)
	FindByPage(offset int, limit int) (result []*model.SysNotice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysNoticeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysNoticeDo) Debug() ISysNoticeDo {
	return s.withDO(s.DO.Debug())
}

func (s sysNoticeDo) WithContext(ctx context.Context) ISysNoticeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysNoticeDo) ReadDB() ISysNoticeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysNoticeDo) WriteDB() ISysNoticeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysNoticeDo) Session(config *gorm.Session) ISysNoticeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysNoticeDo) Clauses(conds ...clause.Expression) ISysNoticeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysNoticeDo) Returning(value interface{}, columns ...string) ISysNoticeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysNoticeDo) Not(conds ...gen.Condition) ISysNoticeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysNoticeDo) Or(conds ...gen.Condition) ISysNoticeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysNoticeDo) Select(conds ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysNoticeDo) Where(conds ...gen.Condition) ISysNoticeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysNoticeDo) Order(conds ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysNoticeDo) Distinct(cols ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysNoticeDo) Omit(cols ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysNoticeDo) Join(table schema.Tabler, on ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysNoticeDo) Group(cols ...field.Expr) ISysNoticeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysNoticeDo) Having(conds ...gen.Condition) ISysNoticeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysNoticeDo) Limit(limit int) ISysNoticeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysNoticeDo) Offset(offset int) ISysNoticeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysNoticeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysNoticeDo) Unscoped() ISysNoticeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysNoticeDo) Create(values ...*model.SysNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysNoticeDo) CreateInBatches(values []*model.SysNotice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysNoticeDo) Save(values ...*model.SysNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysNoticeDo) First() (*model.SysNotice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) Take() (*model.SysNotice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) Last() (*model.SysNotice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) Find() ([]*model.SysNotice, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysNotice), err
}

func (s sysNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysNotice, err error) {
	buf := make([]*model.SysNotice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysNoticeDo) FindInBatches(result *[]*model.SysNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysNoticeDo) Attrs(attrs ...field.AssignExpr) ISysNoticeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysNoticeDo) Assign(attrs ...field.AssignExpr) ISysNoticeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysNoticeDo) Joins(fields ...field.RelationField) ISysNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysNoticeDo) Preload(fields ...field.RelationField) ISysNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysNoticeDo) FirstOrInit() (*model.SysNotice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) FirstOrCreate() (*model.SysNotice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) FindByPage(offset int, limit int) (result []*model.SysNotice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysNoticeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysNoticeDo) Delete(models ...*model.SysNotice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysNoticeDo) withDO(do gen.Dao) *sysNoticeDo {
	s.DO = *do.(*gen.DO)
	return s
}
