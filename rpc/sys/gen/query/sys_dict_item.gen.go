// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sys/gen/model"
)

func newSysDictItem(db *gorm.DB, opts ...gen.DOOption) sysDictItem {
	_sysDictItem := sysDictItem{}

	_sysDictItem.sysDictItemDo.UseDB(db, opts...)
	_sysDictItem.sysDictItemDo.UseModel(&model.SysDictItem{})

	tableName := _sysDictItem.sysDictItemDo.TableName()
	_sysDictItem.ALL = field.NewAsterisk(tableName)
	_sysDictItem.ID = field.NewInt64(tableName, "id")
	_sysDictItem.DictSort = field.NewInt32(tableName, "dict_sort")
	_sysDictItem.DictLabel = field.NewString(tableName, "dict_label")
	_sysDictItem.DictValue = field.NewString(tableName, "dict_value")
	_sysDictItem.DictType = field.NewString(tableName, "dict_type")
	_sysDictItem.CSSClass = field.NewString(tableName, "css_class")
	_sysDictItem.ListClass = field.NewString(tableName, "list_class")
	_sysDictItem.IsDefault = field.NewString(tableName, "is_default")
	_sysDictItem.Status = field.NewInt32(tableName, "status")
	_sysDictItem.Remark = field.NewString(tableName, "remark")
	_sysDictItem.CreateBy = field.NewString(tableName, "create_by")
	_sysDictItem.CreateTime = field.NewTime(tableName, "create_time")
	_sysDictItem.UpdateBy = field.NewString(tableName, "update_by")
	_sysDictItem.UpdateTime = field.NewTime(tableName, "update_time")

	_sysDictItem.fillFieldMap()

	return _sysDictItem
}

// sysDictItem 字典数据表
type sysDictItem struct {
	sysDictItemDo sysDictItemDo

	ALL        field.Asterisk
	ID         field.Int64  // 字典数据id
	DictSort   field.Int32  // 字典排序
	DictLabel  field.String // 字典标签
	DictValue  field.String // 字典键值
	DictType   field.String // 字典类型
	CSSClass   field.String // 样式属性（其他样式扩展）
	ListClass  field.String // 表格回显样式
	IsDefault  field.String // 是否默认（Y是 N否）
	Status     field.Int32  // 状态（0：停用，1:正常）
	Remark     field.String // 备注
	CreateBy   field.String // 创建者
	CreateTime field.Time   // 创建时间
	UpdateBy   field.String // 更新者
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s sysDictItem) Table(newTableName string) *sysDictItem {
	s.sysDictItemDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDictItem) As(alias string) *sysDictItem {
	s.sysDictItemDo.DO = *(s.sysDictItemDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDictItem) updateTableName(table string) *sysDictItem {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.DictSort = field.NewInt32(table, "dict_sort")
	s.DictLabel = field.NewString(table, "dict_label")
	s.DictValue = field.NewString(table, "dict_value")
	s.DictType = field.NewString(table, "dict_type")
	s.CSSClass = field.NewString(table, "css_class")
	s.ListClass = field.NewString(table, "list_class")
	s.IsDefault = field.NewString(table, "is_default")
	s.Status = field.NewInt32(table, "status")
	s.Remark = field.NewString(table, "remark")
	s.CreateBy = field.NewString(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewString(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *sysDictItem) WithContext(ctx context.Context) ISysDictItemDo {
	return s.sysDictItemDo.WithContext(ctx)
}

func (s sysDictItem) TableName() string { return s.sysDictItemDo.TableName() }

func (s sysDictItem) Alias() string { return s.sysDictItemDo.Alias() }

func (s sysDictItem) Columns(cols ...field.Expr) gen.Columns { return s.sysDictItemDo.Columns(cols...) }

func (s *sysDictItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDictItem) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["dict_sort"] = s.DictSort
	s.fieldMap["dict_label"] = s.DictLabel
	s.fieldMap["dict_value"] = s.DictValue
	s.fieldMap["dict_type"] = s.DictType
	s.fieldMap["css_class"] = s.CSSClass
	s.fieldMap["list_class"] = s.ListClass
	s.fieldMap["is_default"] = s.IsDefault
	s.fieldMap["status"] = s.Status
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s sysDictItem) clone(db *gorm.DB) sysDictItem {
	s.sysDictItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDictItem) replaceDB(db *gorm.DB) sysDictItem {
	s.sysDictItemDo.ReplaceDB(db)
	return s
}

type sysDictItemDo struct{ gen.DO }

type ISysDictItemDo interface {
	gen.SubQuery
	Debug() ISysDictItemDo
	WithContext(ctx context.Context) ISysDictItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysDictItemDo
	WriteDB() ISysDictItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysDictItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysDictItemDo
	Not(conds ...gen.Condition) ISysDictItemDo
	Or(conds ...gen.Condition) ISysDictItemDo
	Select(conds ...field.Expr) ISysDictItemDo
	Where(conds ...gen.Condition) ISysDictItemDo
	Order(conds ...field.Expr) ISysDictItemDo
	Distinct(cols ...field.Expr) ISysDictItemDo
	Omit(cols ...field.Expr) ISysDictItemDo
	Join(table schema.Tabler, on ...field.Expr) ISysDictItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysDictItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysDictItemDo
	Group(cols ...field.Expr) ISysDictItemDo
	Having(conds ...gen.Condition) ISysDictItemDo
	Limit(limit int) ISysDictItemDo
	Offset(offset int) ISysDictItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDictItemDo
	Unscoped() ISysDictItemDo
	Create(values ...*model.SysDictItem) error
	CreateInBatches(values []*model.SysDictItem, batchSize int) error
	Save(values ...*model.SysDictItem) error
	First() (*model.SysDictItem, error)
	Take() (*model.SysDictItem, error)
	Last() (*model.SysDictItem, error)
	Find() ([]*model.SysDictItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDictItem, err error)
	FindInBatches(result *[]*model.SysDictItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysDictItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysDictItemDo
	Assign(attrs ...field.AssignExpr) ISysDictItemDo
	Joins(fields ...field.RelationField) ISysDictItemDo
	Preload(fields ...field.RelationField) ISysDictItemDo
	FirstOrInit() (*model.SysDictItem, error)
	FirstOrCreate() (*model.SysDictItem, error)
	FindByPage(offset int, limit int) (result []*model.SysDictItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysDictItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysDictItemDo) Debug() ISysDictItemDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDictItemDo) WithContext(ctx context.Context) ISysDictItemDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDictItemDo) ReadDB() ISysDictItemDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDictItemDo) WriteDB() ISysDictItemDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDictItemDo) Session(config *gorm.Session) ISysDictItemDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDictItemDo) Clauses(conds ...clause.Expression) ISysDictItemDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDictItemDo) Returning(value interface{}, columns ...string) ISysDictItemDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDictItemDo) Not(conds ...gen.Condition) ISysDictItemDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDictItemDo) Or(conds ...gen.Condition) ISysDictItemDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDictItemDo) Select(conds ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDictItemDo) Where(conds ...gen.Condition) ISysDictItemDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDictItemDo) Order(conds ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDictItemDo) Distinct(cols ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDictItemDo) Omit(cols ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDictItemDo) Join(table schema.Tabler, on ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDictItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDictItemDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDictItemDo) Group(cols ...field.Expr) ISysDictItemDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDictItemDo) Having(conds ...gen.Condition) ISysDictItemDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDictItemDo) Limit(limit int) ISysDictItemDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDictItemDo) Offset(offset int) ISysDictItemDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDictItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDictItemDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDictItemDo) Unscoped() ISysDictItemDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDictItemDo) Create(values ...*model.SysDictItem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDictItemDo) CreateInBatches(values []*model.SysDictItem, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDictItemDo) Save(values ...*model.SysDictItem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDictItemDo) First() (*model.SysDictItem, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictItem), nil
	}
}

func (s sysDictItemDo) Take() (*model.SysDictItem, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictItem), nil
	}
}

func (s sysDictItemDo) Last() (*model.SysDictItem, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictItem), nil
	}
}

func (s sysDictItemDo) Find() ([]*model.SysDictItem, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDictItem), err
}

func (s sysDictItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDictItem, err error) {
	buf := make([]*model.SysDictItem, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDictItemDo) FindInBatches(result *[]*model.SysDictItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDictItemDo) Attrs(attrs ...field.AssignExpr) ISysDictItemDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDictItemDo) Assign(attrs ...field.AssignExpr) ISysDictItemDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDictItemDo) Joins(fields ...field.RelationField) ISysDictItemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDictItemDo) Preload(fields ...field.RelationField) ISysDictItemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDictItemDo) FirstOrInit() (*model.SysDictItem, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictItem), nil
	}
}

func (s sysDictItemDo) FirstOrCreate() (*model.SysDictItem, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictItem), nil
	}
}

func (s sysDictItemDo) FindByPage(offset int, limit int) (result []*model.SysDictItem, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDictItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDictItemDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDictItemDo) Delete(models ...*model.SysDictItem) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDictItemDo) withDO(do gen.Dao) *sysDictItemDo {
	s.DO = *do.(*gen.DO)
	return s
}
