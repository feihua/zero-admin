// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: ums.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/ums/internal/logic/memberinfoservice"
	"github.com/feihua/zero-admin/rpc/ums/internal/svc"
	"github.com/feihua/zero-admin/rpc/ums/umsclient"
)

type MemberInfoServiceServer struct {
	svcCtx *svc.ServiceContext
	umsclient.UnimplementedMemberInfoServiceServer
}

func NewMemberInfoServiceServer(svcCtx *svc.ServiceContext) *MemberInfoServiceServer {
	return &MemberInfoServiceServer{
		svcCtx: svcCtx,
	}
}

// 注册会员信息
func (s *MemberInfoServiceServer) Register(ctx context.Context, in *umsclient.RegisterReq) (*umsclient.RegisterResp, error) {
	l := memberinfoservicelogic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 删除会员信息
func (s *MemberInfoServiceServer) DeleteMemberInfo(ctx context.Context, in *umsclient.DeleteMemberInfoReq) (*umsclient.DeleteMemberInfoResp, error) {
	l := memberinfoservicelogic.NewDeleteMemberInfoLogic(ctx, s.svcCtx)
	return l.DeleteMemberInfo(in)
}

// 更新会员信息
func (s *MemberInfoServiceServer) UpdateMemberInfo(ctx context.Context, in *umsclient.UpdateMemberInfoReq) (*umsclient.UpdateMemberInfoResp, error) {
	l := memberinfoservicelogic.NewUpdateMemberInfoLogic(ctx, s.svcCtx)
	return l.UpdateMemberInfo(in)
}

// 更新会员信息状态
func (s *MemberInfoServiceServer) UpdateMemberInfoStatus(ctx context.Context, in *umsclient.UpdateMemberInfoStatusReq) (*umsclient.UpdateMemberInfoStatusResp, error) {
	l := memberinfoservicelogic.NewUpdateMemberInfoStatusLogic(ctx, s.svcCtx)
	return l.UpdateMemberInfoStatus(in)
}

// 查询会员信息详情
func (s *MemberInfoServiceServer) QueryMemberInfoDetail(ctx context.Context, in *umsclient.QueryMemberInfoDetailReq) (*umsclient.QueryMemberInfoDetailResp, error) {
	l := memberinfoservicelogic.NewQueryMemberInfoDetailLogic(ctx, s.svcCtx)
	return l.QueryMemberInfoDetail(in)
}

// 查询会员信息列表
func (s *MemberInfoServiceServer) QueryMemberInfoList(ctx context.Context, in *umsclient.QueryMemberInfoListReq) (*umsclient.QueryMemberInfoListResp, error) {
	l := memberinfoservicelogic.NewQueryMemberInfoListLogic(ctx, s.svcCtx)
	return l.QueryMemberInfoList(in)
}

// 会员登录
func (s *MemberInfoServiceServer) Login(ctx context.Context, in *umsclient.LoginReq) (*umsclient.LoginResp, error) {
	l := memberinfoservicelogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 更新会员积分
func (s *MemberInfoServiceServer) UpdateMemberPoints(ctx context.Context, in *umsclient.UpdateMemberPointsReq) (*umsclient.UpdateMemberPointsResp, error) {
	l := memberinfoservicelogic.NewUpdateMemberPointsLogic(ctx, s.svcCtx)
	return l.UpdateMemberPoints(in)
}

// 更新会员首次登录状态
func (s *MemberInfoServiceServer) UpdateFirstLoginStatus(ctx context.Context, in *umsclient.UpdateFirstLoginStatusReq) (*umsclient.UpdateMemberInfoResp, error) {
	l := memberinfoservicelogic.NewUpdateFirstLoginStatusLogic(ctx, s.svcCtx)
	return l.UpdateFirstLoginStatus(in)
}
