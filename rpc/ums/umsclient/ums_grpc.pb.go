// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/ums/ums.proto

package umsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MemberAddressService_AddMemberAddress_FullMethodName          = "/umsclient.MemberAddressService/AddMemberAddress"
	MemberAddressService_DeleteMemberAddress_FullMethodName       = "/umsclient.MemberAddressService/DeleteMemberAddress"
	MemberAddressService_UpdateMemberAddress_FullMethodName       = "/umsclient.MemberAddressService/UpdateMemberAddress"
	MemberAddressService_UpdateMemberAddressStatus_FullMethodName = "/umsclient.MemberAddressService/UpdateMemberAddressStatus"
	MemberAddressService_QueryMemberAddressDetail_FullMethodName  = "/umsclient.MemberAddressService/QueryMemberAddressDetail"
	MemberAddressService_QueryMemberAddressList_FullMethodName    = "/umsclient.MemberAddressService/QueryMemberAddressList"
)

// MemberAddressServiceClient is the client API for MemberAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberAddressServiceClient interface {
	// 添加会员收货地址
	AddMemberAddress(ctx context.Context, in *AddMemberAddressReq, opts ...grpc.CallOption) (*AddMemberAddressResp, error)
	// 删除会员收货地址
	DeleteMemberAddress(ctx context.Context, in *DeleteMemberAddressReq, opts ...grpc.CallOption) (*DeleteMemberAddressResp, error)
	// 更新会员收货地址
	UpdateMemberAddress(ctx context.Context, in *UpdateMemberAddressReq, opts ...grpc.CallOption) (*UpdateMemberAddressResp, error)
	// 更新会员默认的收货地址
	UpdateMemberAddressStatus(ctx context.Context, in *UpdateMemberAddressStatusReq, opts ...grpc.CallOption) (*UpdateMemberAddressStatusResp, error)
	// 查询会员收货地址详情
	QueryMemberAddressDetail(ctx context.Context, in *QueryMemberAddressDetailReq, opts ...grpc.CallOption) (*QueryMemberAddressDetailResp, error)
	// 查询会员收货地址列表
	QueryMemberAddressList(ctx context.Context, in *QueryMemberAddressListReq, opts ...grpc.CallOption) (*QueryMemberAddressListResp, error)
}

type memberAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberAddressServiceClient(cc grpc.ClientConnInterface) MemberAddressServiceClient {
	return &memberAddressServiceClient{cc}
}

func (c *memberAddressServiceClient) AddMemberAddress(ctx context.Context, in *AddMemberAddressReq, opts ...grpc.CallOption) (*AddMemberAddressResp, error) {
	out := new(AddMemberAddressResp)
	err := c.cc.Invoke(ctx, MemberAddressService_AddMemberAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberAddressServiceClient) DeleteMemberAddress(ctx context.Context, in *DeleteMemberAddressReq, opts ...grpc.CallOption) (*DeleteMemberAddressResp, error) {
	out := new(DeleteMemberAddressResp)
	err := c.cc.Invoke(ctx, MemberAddressService_DeleteMemberAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberAddressServiceClient) UpdateMemberAddress(ctx context.Context, in *UpdateMemberAddressReq, opts ...grpc.CallOption) (*UpdateMemberAddressResp, error) {
	out := new(UpdateMemberAddressResp)
	err := c.cc.Invoke(ctx, MemberAddressService_UpdateMemberAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberAddressServiceClient) UpdateMemberAddressStatus(ctx context.Context, in *UpdateMemberAddressStatusReq, opts ...grpc.CallOption) (*UpdateMemberAddressStatusResp, error) {
	out := new(UpdateMemberAddressStatusResp)
	err := c.cc.Invoke(ctx, MemberAddressService_UpdateMemberAddressStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberAddressServiceClient) QueryMemberAddressDetail(ctx context.Context, in *QueryMemberAddressDetailReq, opts ...grpc.CallOption) (*QueryMemberAddressDetailResp, error) {
	out := new(QueryMemberAddressDetailResp)
	err := c.cc.Invoke(ctx, MemberAddressService_QueryMemberAddressDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberAddressServiceClient) QueryMemberAddressList(ctx context.Context, in *QueryMemberAddressListReq, opts ...grpc.CallOption) (*QueryMemberAddressListResp, error) {
	out := new(QueryMemberAddressListResp)
	err := c.cc.Invoke(ctx, MemberAddressService_QueryMemberAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberAddressServiceServer is the server API for MemberAddressService service.
// All implementations must embed UnimplementedMemberAddressServiceServer
// for forward compatibility
type MemberAddressServiceServer interface {
	// 添加会员收货地址
	AddMemberAddress(context.Context, *AddMemberAddressReq) (*AddMemberAddressResp, error)
	// 删除会员收货地址
	DeleteMemberAddress(context.Context, *DeleteMemberAddressReq) (*DeleteMemberAddressResp, error)
	// 更新会员收货地址
	UpdateMemberAddress(context.Context, *UpdateMemberAddressReq) (*UpdateMemberAddressResp, error)
	// 更新会员默认的收货地址
	UpdateMemberAddressStatus(context.Context, *UpdateMemberAddressStatusReq) (*UpdateMemberAddressStatusResp, error)
	// 查询会员收货地址详情
	QueryMemberAddressDetail(context.Context, *QueryMemberAddressDetailReq) (*QueryMemberAddressDetailResp, error)
	// 查询会员收货地址列表
	QueryMemberAddressList(context.Context, *QueryMemberAddressListReq) (*QueryMemberAddressListResp, error)
	mustEmbedUnimplementedMemberAddressServiceServer()
}

// UnimplementedMemberAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberAddressServiceServer struct {
}

func (UnimplementedMemberAddressServiceServer) AddMemberAddress(context.Context, *AddMemberAddressReq) (*AddMemberAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberAddress not implemented")
}
func (UnimplementedMemberAddressServiceServer) DeleteMemberAddress(context.Context, *DeleteMemberAddressReq) (*DeleteMemberAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberAddress not implemented")
}
func (UnimplementedMemberAddressServiceServer) UpdateMemberAddress(context.Context, *UpdateMemberAddressReq) (*UpdateMemberAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberAddress not implemented")
}
func (UnimplementedMemberAddressServiceServer) UpdateMemberAddressStatus(context.Context, *UpdateMemberAddressStatusReq) (*UpdateMemberAddressStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberAddressStatus not implemented")
}
func (UnimplementedMemberAddressServiceServer) QueryMemberAddressDetail(context.Context, *QueryMemberAddressDetailReq) (*QueryMemberAddressDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberAddressDetail not implemented")
}
func (UnimplementedMemberAddressServiceServer) QueryMemberAddressList(context.Context, *QueryMemberAddressListReq) (*QueryMemberAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberAddressList not implemented")
}
func (UnimplementedMemberAddressServiceServer) mustEmbedUnimplementedMemberAddressServiceServer() {}

// UnsafeMemberAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberAddressServiceServer will
// result in compilation errors.
type UnsafeMemberAddressServiceServer interface {
	mustEmbedUnimplementedMemberAddressServiceServer()
}

func RegisterMemberAddressServiceServer(s grpc.ServiceRegistrar, srv MemberAddressServiceServer) {
	s.RegisterService(&MemberAddressService_ServiceDesc, srv)
}

func _MemberAddressService_AddMemberAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberAddressServiceServer).AddMemberAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberAddressService_AddMemberAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberAddressServiceServer).AddMemberAddress(ctx, req.(*AddMemberAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberAddressService_DeleteMemberAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberAddressServiceServer).DeleteMemberAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberAddressService_DeleteMemberAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberAddressServiceServer).DeleteMemberAddress(ctx, req.(*DeleteMemberAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberAddressService_UpdateMemberAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberAddressServiceServer).UpdateMemberAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberAddressService_UpdateMemberAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberAddressServiceServer).UpdateMemberAddress(ctx, req.(*UpdateMemberAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberAddressService_UpdateMemberAddressStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberAddressStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberAddressServiceServer).UpdateMemberAddressStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberAddressService_UpdateMemberAddressStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberAddressServiceServer).UpdateMemberAddressStatus(ctx, req.(*UpdateMemberAddressStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberAddressService_QueryMemberAddressDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberAddressDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberAddressServiceServer).QueryMemberAddressDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberAddressService_QueryMemberAddressDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberAddressServiceServer).QueryMemberAddressDetail(ctx, req.(*QueryMemberAddressDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberAddressService_QueryMemberAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberAddressServiceServer).QueryMemberAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberAddressService_QueryMemberAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberAddressServiceServer).QueryMemberAddressList(ctx, req.(*QueryMemberAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberAddressService_ServiceDesc is the grpc.ServiceDesc for MemberAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberAddressService",
	HandlerType: (*MemberAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberAddress",
			Handler:    _MemberAddressService_AddMemberAddress_Handler,
		},
		{
			MethodName: "DeleteMemberAddress",
			Handler:    _MemberAddressService_DeleteMemberAddress_Handler,
		},
		{
			MethodName: "UpdateMemberAddress",
			Handler:    _MemberAddressService_UpdateMemberAddress_Handler,
		},
		{
			MethodName: "UpdateMemberAddressStatus",
			Handler:    _MemberAddressService_UpdateMemberAddressStatus_Handler,
		},
		{
			MethodName: "QueryMemberAddressDetail",
			Handler:    _MemberAddressService_QueryMemberAddressDetail_Handler,
		},
		{
			MethodName: "QueryMemberAddressList",
			Handler:    _MemberAddressService_QueryMemberAddressList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberBrandAttentionService_AddMemberBrandAttention_FullMethodName         = "/umsclient.MemberBrandAttentionService/AddMemberBrandAttention"
	MemberBrandAttentionService_DeleteMemberBrandAttention_FullMethodName      = "/umsclient.MemberBrandAttentionService/DeleteMemberBrandAttention"
	MemberBrandAttentionService_QueryMemberBrandAttentionDetail_FullMethodName = "/umsclient.MemberBrandAttentionService/QueryMemberBrandAttentionDetail"
	MemberBrandAttentionService_QueryMemberBrandAttentionList_FullMethodName   = "/umsclient.MemberBrandAttentionService/QueryMemberBrandAttentionList"
)

// MemberBrandAttentionServiceClient is the client API for MemberBrandAttentionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberBrandAttentionServiceClient interface {
	// 添加会员关注品牌
	AddMemberBrandAttention(ctx context.Context, in *AddMemberBrandAttentionReq, opts ...grpc.CallOption) (*AddMemberBrandAttentionResp, error)
	// 取消品牌关注/清空当前用户品牌关注列表
	DeleteMemberBrandAttention(ctx context.Context, in *DeleteMemberBrandAttentionReq, opts ...grpc.CallOption) (*DeleteMemberBrandAttentionResp, error)
	// 查询会员关注品牌详情
	QueryMemberBrandAttentionDetail(ctx context.Context, in *QueryMemberBrandAttentionDetailReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionDetailResp, error)
	// 查询会员关注品牌列表
	QueryMemberBrandAttentionList(ctx context.Context, in *QueryMemberBrandAttentionListReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionListResp, error)
}

type memberBrandAttentionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberBrandAttentionServiceClient(cc grpc.ClientConnInterface) MemberBrandAttentionServiceClient {
	return &memberBrandAttentionServiceClient{cc}
}

func (c *memberBrandAttentionServiceClient) AddMemberBrandAttention(ctx context.Context, in *AddMemberBrandAttentionReq, opts ...grpc.CallOption) (*AddMemberBrandAttentionResp, error) {
	out := new(AddMemberBrandAttentionResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_AddMemberBrandAttention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberBrandAttentionServiceClient) DeleteMemberBrandAttention(ctx context.Context, in *DeleteMemberBrandAttentionReq, opts ...grpc.CallOption) (*DeleteMemberBrandAttentionResp, error) {
	out := new(DeleteMemberBrandAttentionResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_DeleteMemberBrandAttention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberBrandAttentionServiceClient) QueryMemberBrandAttentionDetail(ctx context.Context, in *QueryMemberBrandAttentionDetailReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionDetailResp, error) {
	out := new(QueryMemberBrandAttentionDetailResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_QueryMemberBrandAttentionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberBrandAttentionServiceClient) QueryMemberBrandAttentionList(ctx context.Context, in *QueryMemberBrandAttentionListReq, opts ...grpc.CallOption) (*QueryMemberBrandAttentionListResp, error) {
	out := new(QueryMemberBrandAttentionListResp)
	err := c.cc.Invoke(ctx, MemberBrandAttentionService_QueryMemberBrandAttentionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberBrandAttentionServiceServer is the server API for MemberBrandAttentionService service.
// All implementations must embed UnimplementedMemberBrandAttentionServiceServer
// for forward compatibility
type MemberBrandAttentionServiceServer interface {
	// 添加会员关注品牌
	AddMemberBrandAttention(context.Context, *AddMemberBrandAttentionReq) (*AddMemberBrandAttentionResp, error)
	// 取消品牌关注/清空当前用户品牌关注列表
	DeleteMemberBrandAttention(context.Context, *DeleteMemberBrandAttentionReq) (*DeleteMemberBrandAttentionResp, error)
	// 查询会员关注品牌详情
	QueryMemberBrandAttentionDetail(context.Context, *QueryMemberBrandAttentionDetailReq) (*QueryMemberBrandAttentionDetailResp, error)
	// 查询会员关注品牌列表
	QueryMemberBrandAttentionList(context.Context, *QueryMemberBrandAttentionListReq) (*QueryMemberBrandAttentionListResp, error)
	mustEmbedUnimplementedMemberBrandAttentionServiceServer()
}

// UnimplementedMemberBrandAttentionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberBrandAttentionServiceServer struct {
}

func (UnimplementedMemberBrandAttentionServiceServer) AddMemberBrandAttention(context.Context, *AddMemberBrandAttentionReq) (*AddMemberBrandAttentionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberBrandAttention not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) DeleteMemberBrandAttention(context.Context, *DeleteMemberBrandAttentionReq) (*DeleteMemberBrandAttentionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberBrandAttention not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) QueryMemberBrandAttentionDetail(context.Context, *QueryMemberBrandAttentionDetailReq) (*QueryMemberBrandAttentionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberBrandAttentionDetail not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) QueryMemberBrandAttentionList(context.Context, *QueryMemberBrandAttentionListReq) (*QueryMemberBrandAttentionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberBrandAttentionList not implemented")
}
func (UnimplementedMemberBrandAttentionServiceServer) mustEmbedUnimplementedMemberBrandAttentionServiceServer() {
}

// UnsafeMemberBrandAttentionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberBrandAttentionServiceServer will
// result in compilation errors.
type UnsafeMemberBrandAttentionServiceServer interface {
	mustEmbedUnimplementedMemberBrandAttentionServiceServer()
}

func RegisterMemberBrandAttentionServiceServer(s grpc.ServiceRegistrar, srv MemberBrandAttentionServiceServer) {
	s.RegisterService(&MemberBrandAttentionService_ServiceDesc, srv)
}

func _MemberBrandAttentionService_AddMemberBrandAttention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberBrandAttentionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).AddMemberBrandAttention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_AddMemberBrandAttention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).AddMemberBrandAttention(ctx, req.(*AddMemberBrandAttentionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberBrandAttentionService_DeleteMemberBrandAttention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberBrandAttentionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).DeleteMemberBrandAttention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_DeleteMemberBrandAttention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).DeleteMemberBrandAttention(ctx, req.(*DeleteMemberBrandAttentionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberBrandAttentionService_QueryMemberBrandAttentionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberBrandAttentionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_QueryMemberBrandAttentionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionDetail(ctx, req.(*QueryMemberBrandAttentionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberBrandAttentionService_QueryMemberBrandAttentionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberBrandAttentionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberBrandAttentionService_QueryMemberBrandAttentionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberBrandAttentionServiceServer).QueryMemberBrandAttentionList(ctx, req.(*QueryMemberBrandAttentionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberBrandAttentionService_ServiceDesc is the grpc.ServiceDesc for MemberBrandAttentionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberBrandAttentionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberBrandAttentionService",
	HandlerType: (*MemberBrandAttentionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberBrandAttention",
			Handler:    _MemberBrandAttentionService_AddMemberBrandAttention_Handler,
		},
		{
			MethodName: "DeleteMemberBrandAttention",
			Handler:    _MemberBrandAttentionService_DeleteMemberBrandAttention_Handler,
		},
		{
			MethodName: "QueryMemberBrandAttentionDetail",
			Handler:    _MemberBrandAttentionService_QueryMemberBrandAttentionDetail_Handler,
		},
		{
			MethodName: "QueryMemberBrandAttentionList",
			Handler:    _MemberBrandAttentionService_QueryMemberBrandAttentionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberConsumeSettingService_AddMemberConsumeSetting_FullMethodName         = "/umsclient.MemberConsumeSettingService/AddMemberConsumeSetting"
	MemberConsumeSettingService_DeleteMemberConsumeSetting_FullMethodName      = "/umsclient.MemberConsumeSettingService/DeleteMemberConsumeSetting"
	MemberConsumeSettingService_UpdateMemberConsumeSetting_FullMethodName      = "/umsclient.MemberConsumeSettingService/UpdateMemberConsumeSetting"
	MemberConsumeSettingService_UpdateStatus_FullMethodName                    = "/umsclient.MemberConsumeSettingService/UpdateStatus"
	MemberConsumeSettingService_UpdateCouponStatus_FullMethodName              = "/umsclient.MemberConsumeSettingService/UpdateCouponStatus"
	MemberConsumeSettingService_QueryMemberConsumeSettingDetail_FullMethodName = "/umsclient.MemberConsumeSettingService/QueryMemberConsumeSettingDetail"
	MemberConsumeSettingService_QueryMemberConsumeSettingList_FullMethodName   = "/umsclient.MemberConsumeSettingService/QueryMemberConsumeSettingList"
)

// MemberConsumeSettingServiceClient is the client API for MemberConsumeSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberConsumeSettingServiceClient interface {
	// 添加积分消费设置
	AddMemberConsumeSetting(ctx context.Context, in *AddMemberConsumeSettingReq, opts ...grpc.CallOption) (*AddMemberConsumeSettingResp, error)
	// 删除积分消费设置
	DeleteMemberConsumeSetting(ctx context.Context, in *DeleteMemberConsumeSettingReq, opts ...grpc.CallOption) (*DeleteMemberConsumeSettingResp, error)
	// 更新积分消费设置
	UpdateMemberConsumeSetting(ctx context.Context, in *UpdateMemberConsumeSettingReq, opts ...grpc.CallOption) (*UpdateMemberConsumeSettingResp, error)
	// 更新积分消费设置状态
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateMemberConsumeSettingStatusResp, error)
	// 更新是否可以和优惠券同用
	UpdateCouponStatus(ctx context.Context, in *UpdateCouponStatusReq, opts ...grpc.CallOption) (*UpdateMemberConsumeSettingStatusResp, error)
	// 查询积分消费设置详情
	QueryMemberConsumeSettingDetail(ctx context.Context, in *QueryMemberConsumeSettingDetailReq, opts ...grpc.CallOption) (*QueryMemberConsumeSettingDetailResp, error)
	// 查询积分消费设置列表
	QueryMemberConsumeSettingList(ctx context.Context, in *QueryMemberConsumeSettingListReq, opts ...grpc.CallOption) (*QueryMemberConsumeSettingListResp, error)
}

type memberConsumeSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberConsumeSettingServiceClient(cc grpc.ClientConnInterface) MemberConsumeSettingServiceClient {
	return &memberConsumeSettingServiceClient{cc}
}

func (c *memberConsumeSettingServiceClient) AddMemberConsumeSetting(ctx context.Context, in *AddMemberConsumeSettingReq, opts ...grpc.CallOption) (*AddMemberConsumeSettingResp, error) {
	out := new(AddMemberConsumeSettingResp)
	err := c.cc.Invoke(ctx, MemberConsumeSettingService_AddMemberConsumeSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberConsumeSettingServiceClient) DeleteMemberConsumeSetting(ctx context.Context, in *DeleteMemberConsumeSettingReq, opts ...grpc.CallOption) (*DeleteMemberConsumeSettingResp, error) {
	out := new(DeleteMemberConsumeSettingResp)
	err := c.cc.Invoke(ctx, MemberConsumeSettingService_DeleteMemberConsumeSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberConsumeSettingServiceClient) UpdateMemberConsumeSetting(ctx context.Context, in *UpdateMemberConsumeSettingReq, opts ...grpc.CallOption) (*UpdateMemberConsumeSettingResp, error) {
	out := new(UpdateMemberConsumeSettingResp)
	err := c.cc.Invoke(ctx, MemberConsumeSettingService_UpdateMemberConsumeSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberConsumeSettingServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateMemberConsumeSettingStatusResp, error) {
	out := new(UpdateMemberConsumeSettingStatusResp)
	err := c.cc.Invoke(ctx, MemberConsumeSettingService_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberConsumeSettingServiceClient) UpdateCouponStatus(ctx context.Context, in *UpdateCouponStatusReq, opts ...grpc.CallOption) (*UpdateMemberConsumeSettingStatusResp, error) {
	out := new(UpdateMemberConsumeSettingStatusResp)
	err := c.cc.Invoke(ctx, MemberConsumeSettingService_UpdateCouponStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberConsumeSettingServiceClient) QueryMemberConsumeSettingDetail(ctx context.Context, in *QueryMemberConsumeSettingDetailReq, opts ...grpc.CallOption) (*QueryMemberConsumeSettingDetailResp, error) {
	out := new(QueryMemberConsumeSettingDetailResp)
	err := c.cc.Invoke(ctx, MemberConsumeSettingService_QueryMemberConsumeSettingDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberConsumeSettingServiceClient) QueryMemberConsumeSettingList(ctx context.Context, in *QueryMemberConsumeSettingListReq, opts ...grpc.CallOption) (*QueryMemberConsumeSettingListResp, error) {
	out := new(QueryMemberConsumeSettingListResp)
	err := c.cc.Invoke(ctx, MemberConsumeSettingService_QueryMemberConsumeSettingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberConsumeSettingServiceServer is the server API for MemberConsumeSettingService service.
// All implementations must embed UnimplementedMemberConsumeSettingServiceServer
// for forward compatibility
type MemberConsumeSettingServiceServer interface {
	// 添加积分消费设置
	AddMemberConsumeSetting(context.Context, *AddMemberConsumeSettingReq) (*AddMemberConsumeSettingResp, error)
	// 删除积分消费设置
	DeleteMemberConsumeSetting(context.Context, *DeleteMemberConsumeSettingReq) (*DeleteMemberConsumeSettingResp, error)
	// 更新积分消费设置
	UpdateMemberConsumeSetting(context.Context, *UpdateMemberConsumeSettingReq) (*UpdateMemberConsumeSettingResp, error)
	// 更新积分消费设置状态
	UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateMemberConsumeSettingStatusResp, error)
	// 更新是否可以和优惠券同用
	UpdateCouponStatus(context.Context, *UpdateCouponStatusReq) (*UpdateMemberConsumeSettingStatusResp, error)
	// 查询积分消费设置详情
	QueryMemberConsumeSettingDetail(context.Context, *QueryMemberConsumeSettingDetailReq) (*QueryMemberConsumeSettingDetailResp, error)
	// 查询积分消费设置列表
	QueryMemberConsumeSettingList(context.Context, *QueryMemberConsumeSettingListReq) (*QueryMemberConsumeSettingListResp, error)
	mustEmbedUnimplementedMemberConsumeSettingServiceServer()
}

// UnimplementedMemberConsumeSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberConsumeSettingServiceServer struct {
}

func (UnimplementedMemberConsumeSettingServiceServer) AddMemberConsumeSetting(context.Context, *AddMemberConsumeSettingReq) (*AddMemberConsumeSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberConsumeSetting not implemented")
}
func (UnimplementedMemberConsumeSettingServiceServer) DeleteMemberConsumeSetting(context.Context, *DeleteMemberConsumeSettingReq) (*DeleteMemberConsumeSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberConsumeSetting not implemented")
}
func (UnimplementedMemberConsumeSettingServiceServer) UpdateMemberConsumeSetting(context.Context, *UpdateMemberConsumeSettingReq) (*UpdateMemberConsumeSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberConsumeSetting not implemented")
}
func (UnimplementedMemberConsumeSettingServiceServer) UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateMemberConsumeSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedMemberConsumeSettingServiceServer) UpdateCouponStatus(context.Context, *UpdateCouponStatusReq) (*UpdateMemberConsumeSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponStatus not implemented")
}
func (UnimplementedMemberConsumeSettingServiceServer) QueryMemberConsumeSettingDetail(context.Context, *QueryMemberConsumeSettingDetailReq) (*QueryMemberConsumeSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberConsumeSettingDetail not implemented")
}
func (UnimplementedMemberConsumeSettingServiceServer) QueryMemberConsumeSettingList(context.Context, *QueryMemberConsumeSettingListReq) (*QueryMemberConsumeSettingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberConsumeSettingList not implemented")
}
func (UnimplementedMemberConsumeSettingServiceServer) mustEmbedUnimplementedMemberConsumeSettingServiceServer() {
}

// UnsafeMemberConsumeSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberConsumeSettingServiceServer will
// result in compilation errors.
type UnsafeMemberConsumeSettingServiceServer interface {
	mustEmbedUnimplementedMemberConsumeSettingServiceServer()
}

func RegisterMemberConsumeSettingServiceServer(s grpc.ServiceRegistrar, srv MemberConsumeSettingServiceServer) {
	s.RegisterService(&MemberConsumeSettingService_ServiceDesc, srv)
}

func _MemberConsumeSettingService_AddMemberConsumeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberConsumeSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberConsumeSettingServiceServer).AddMemberConsumeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberConsumeSettingService_AddMemberConsumeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberConsumeSettingServiceServer).AddMemberConsumeSetting(ctx, req.(*AddMemberConsumeSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberConsumeSettingService_DeleteMemberConsumeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberConsumeSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberConsumeSettingServiceServer).DeleteMemberConsumeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberConsumeSettingService_DeleteMemberConsumeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberConsumeSettingServiceServer).DeleteMemberConsumeSetting(ctx, req.(*DeleteMemberConsumeSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberConsumeSettingService_UpdateMemberConsumeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberConsumeSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberConsumeSettingServiceServer).UpdateMemberConsumeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberConsumeSettingService_UpdateMemberConsumeSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberConsumeSettingServiceServer).UpdateMemberConsumeSetting(ctx, req.(*UpdateMemberConsumeSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberConsumeSettingService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberConsumeSettingServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberConsumeSettingService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberConsumeSettingServiceServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberConsumeSettingService_UpdateCouponStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberConsumeSettingServiceServer).UpdateCouponStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberConsumeSettingService_UpdateCouponStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberConsumeSettingServiceServer).UpdateCouponStatus(ctx, req.(*UpdateCouponStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberConsumeSettingService_QueryMemberConsumeSettingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberConsumeSettingDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberConsumeSettingServiceServer).QueryMemberConsumeSettingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberConsumeSettingService_QueryMemberConsumeSettingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberConsumeSettingServiceServer).QueryMemberConsumeSettingDetail(ctx, req.(*QueryMemberConsumeSettingDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberConsumeSettingService_QueryMemberConsumeSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberConsumeSettingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberConsumeSettingServiceServer).QueryMemberConsumeSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberConsumeSettingService_QueryMemberConsumeSettingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberConsumeSettingServiceServer).QueryMemberConsumeSettingList(ctx, req.(*QueryMemberConsumeSettingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberConsumeSettingService_ServiceDesc is the grpc.ServiceDesc for MemberConsumeSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberConsumeSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberConsumeSettingService",
	HandlerType: (*MemberConsumeSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberConsumeSetting",
			Handler:    _MemberConsumeSettingService_AddMemberConsumeSetting_Handler,
		},
		{
			MethodName: "DeleteMemberConsumeSetting",
			Handler:    _MemberConsumeSettingService_DeleteMemberConsumeSetting_Handler,
		},
		{
			MethodName: "UpdateMemberConsumeSetting",
			Handler:    _MemberConsumeSettingService_UpdateMemberConsumeSetting_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _MemberConsumeSettingService_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdateCouponStatus",
			Handler:    _MemberConsumeSettingService_UpdateCouponStatus_Handler,
		},
		{
			MethodName: "QueryMemberConsumeSettingDetail",
			Handler:    _MemberConsumeSettingService_QueryMemberConsumeSettingDetail_Handler,
		},
		{
			MethodName: "QueryMemberConsumeSettingList",
			Handler:    _MemberConsumeSettingService_QueryMemberConsumeSettingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberGrowthLogService_AddMemberGrowthLog_FullMethodName         = "/umsclient.MemberGrowthLogService/AddMemberGrowthLog"
	MemberGrowthLogService_QueryMemberGrowthLogDetail_FullMethodName = "/umsclient.MemberGrowthLogService/QueryMemberGrowthLogDetail"
	MemberGrowthLogService_QueryMemberGrowthLogList_FullMethodName   = "/umsclient.MemberGrowthLogService/QueryMemberGrowthLogList"
)

// MemberGrowthLogServiceClient is the client API for MemberGrowthLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberGrowthLogServiceClient interface {
	// 添加会员成长值记录
	AddMemberGrowthLog(ctx context.Context, in *AddMemberGrowthLogReq, opts ...grpc.CallOption) (*AddMemberGrowthLogResp, error)
	// 查询会员成长值记录详情
	QueryMemberGrowthLogDetail(ctx context.Context, in *QueryMemberGrowthLogDetailReq, opts ...grpc.CallOption) (*QueryMemberGrowthLogDetailResp, error)
	// 查询会员成长值记录列表
	QueryMemberGrowthLogList(ctx context.Context, in *QueryMemberGrowthLogListReq, opts ...grpc.CallOption) (*QueryMemberGrowthLogListResp, error)
}

type memberGrowthLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberGrowthLogServiceClient(cc grpc.ClientConnInterface) MemberGrowthLogServiceClient {
	return &memberGrowthLogServiceClient{cc}
}

func (c *memberGrowthLogServiceClient) AddMemberGrowthLog(ctx context.Context, in *AddMemberGrowthLogReq, opts ...grpc.CallOption) (*AddMemberGrowthLogResp, error) {
	out := new(AddMemberGrowthLogResp)
	err := c.cc.Invoke(ctx, MemberGrowthLogService_AddMemberGrowthLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberGrowthLogServiceClient) QueryMemberGrowthLogDetail(ctx context.Context, in *QueryMemberGrowthLogDetailReq, opts ...grpc.CallOption) (*QueryMemberGrowthLogDetailResp, error) {
	out := new(QueryMemberGrowthLogDetailResp)
	err := c.cc.Invoke(ctx, MemberGrowthLogService_QueryMemberGrowthLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberGrowthLogServiceClient) QueryMemberGrowthLogList(ctx context.Context, in *QueryMemberGrowthLogListReq, opts ...grpc.CallOption) (*QueryMemberGrowthLogListResp, error) {
	out := new(QueryMemberGrowthLogListResp)
	err := c.cc.Invoke(ctx, MemberGrowthLogService_QueryMemberGrowthLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberGrowthLogServiceServer is the server API for MemberGrowthLogService service.
// All implementations must embed UnimplementedMemberGrowthLogServiceServer
// for forward compatibility
type MemberGrowthLogServiceServer interface {
	// 添加会员成长值记录
	AddMemberGrowthLog(context.Context, *AddMemberGrowthLogReq) (*AddMemberGrowthLogResp, error)
	// 查询会员成长值记录详情
	QueryMemberGrowthLogDetail(context.Context, *QueryMemberGrowthLogDetailReq) (*QueryMemberGrowthLogDetailResp, error)
	// 查询会员成长值记录列表
	QueryMemberGrowthLogList(context.Context, *QueryMemberGrowthLogListReq) (*QueryMemberGrowthLogListResp, error)
	mustEmbedUnimplementedMemberGrowthLogServiceServer()
}

// UnimplementedMemberGrowthLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberGrowthLogServiceServer struct {
}

func (UnimplementedMemberGrowthLogServiceServer) AddMemberGrowthLog(context.Context, *AddMemberGrowthLogReq) (*AddMemberGrowthLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberGrowthLog not implemented")
}
func (UnimplementedMemberGrowthLogServiceServer) QueryMemberGrowthLogDetail(context.Context, *QueryMemberGrowthLogDetailReq) (*QueryMemberGrowthLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberGrowthLogDetail not implemented")
}
func (UnimplementedMemberGrowthLogServiceServer) QueryMemberGrowthLogList(context.Context, *QueryMemberGrowthLogListReq) (*QueryMemberGrowthLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberGrowthLogList not implemented")
}
func (UnimplementedMemberGrowthLogServiceServer) mustEmbedUnimplementedMemberGrowthLogServiceServer() {
}

// UnsafeMemberGrowthLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberGrowthLogServiceServer will
// result in compilation errors.
type UnsafeMemberGrowthLogServiceServer interface {
	mustEmbedUnimplementedMemberGrowthLogServiceServer()
}

func RegisterMemberGrowthLogServiceServer(s grpc.ServiceRegistrar, srv MemberGrowthLogServiceServer) {
	s.RegisterService(&MemberGrowthLogService_ServiceDesc, srv)
}

func _MemberGrowthLogService_AddMemberGrowthLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberGrowthLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberGrowthLogServiceServer).AddMemberGrowthLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberGrowthLogService_AddMemberGrowthLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberGrowthLogServiceServer).AddMemberGrowthLog(ctx, req.(*AddMemberGrowthLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberGrowthLogService_QueryMemberGrowthLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberGrowthLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberGrowthLogServiceServer).QueryMemberGrowthLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberGrowthLogService_QueryMemberGrowthLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberGrowthLogServiceServer).QueryMemberGrowthLogDetail(ctx, req.(*QueryMemberGrowthLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberGrowthLogService_QueryMemberGrowthLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberGrowthLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberGrowthLogServiceServer).QueryMemberGrowthLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberGrowthLogService_QueryMemberGrowthLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberGrowthLogServiceServer).QueryMemberGrowthLogList(ctx, req.(*QueryMemberGrowthLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberGrowthLogService_ServiceDesc is the grpc.ServiceDesc for MemberGrowthLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberGrowthLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberGrowthLogService",
	HandlerType: (*MemberGrowthLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberGrowthLog",
			Handler:    _MemberGrowthLogService_AddMemberGrowthLog_Handler,
		},
		{
			MethodName: "QueryMemberGrowthLogDetail",
			Handler:    _MemberGrowthLogService_QueryMemberGrowthLogDetail_Handler,
		},
		{
			MethodName: "QueryMemberGrowthLogList",
			Handler:    _MemberGrowthLogService_QueryMemberGrowthLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberInfoService_Register_FullMethodName               = "/umsclient.MemberInfoService/Register"
	MemberInfoService_DeleteMemberInfo_FullMethodName       = "/umsclient.MemberInfoService/DeleteMemberInfo"
	MemberInfoService_UpdateMemberInfo_FullMethodName       = "/umsclient.MemberInfoService/UpdateMemberInfo"
	MemberInfoService_UpdateMemberInfoStatus_FullMethodName = "/umsclient.MemberInfoService/UpdateMemberInfoStatus"
	MemberInfoService_QueryMemberInfoDetail_FullMethodName  = "/umsclient.MemberInfoService/QueryMemberInfoDetail"
	MemberInfoService_QueryMemberInfoList_FullMethodName    = "/umsclient.MemberInfoService/QueryMemberInfoList"
	MemberInfoService_Login_FullMethodName                  = "/umsclient.MemberInfoService/Login"
	MemberInfoService_UpdateMemberPoints_FullMethodName     = "/umsclient.MemberInfoService/UpdateMemberPoints"
	MemberInfoService_UpdateFirstLoginStatus_FullMethodName = "/umsclient.MemberInfoService/UpdateFirstLoginStatus"
)

// MemberInfoServiceClient is the client API for MemberInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberInfoServiceClient interface {
	// 注册会员信息
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	// 删除会员信息
	DeleteMemberInfo(ctx context.Context, in *DeleteMemberInfoReq, opts ...grpc.CallOption) (*DeleteMemberInfoResp, error)
	// 更新会员信息
	UpdateMemberInfo(ctx context.Context, in *UpdateMemberInfoReq, opts ...grpc.CallOption) (*UpdateMemberInfoResp, error)
	// 更新会员信息状态
	UpdateMemberInfoStatus(ctx context.Context, in *UpdateMemberInfoStatusReq, opts ...grpc.CallOption) (*UpdateMemberInfoStatusResp, error)
	// 查询会员信息详情
	QueryMemberInfoDetail(ctx context.Context, in *QueryMemberInfoDetailReq, opts ...grpc.CallOption) (*QueryMemberInfoDetailResp, error)
	// 查询会员信息列表
	QueryMemberInfoList(ctx context.Context, in *QueryMemberInfoListReq, opts ...grpc.CallOption) (*QueryMemberInfoListResp, error)
	// 会员登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 更新会员积分
	UpdateMemberPoints(ctx context.Context, in *UpdateMemberPointsReq, opts ...grpc.CallOption) (*UpdateMemberPointsResp, error)
	// 更新会员首次登录状态
	UpdateFirstLoginStatus(ctx context.Context, in *UpdateFirstLoginStatusReq, opts ...grpc.CallOption) (*UpdateMemberInfoResp, error)
}

type memberInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberInfoServiceClient(cc grpc.ClientConnInterface) MemberInfoServiceClient {
	return &memberInfoServiceClient{cc}
}

func (c *memberInfoServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, MemberInfoService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) DeleteMemberInfo(ctx context.Context, in *DeleteMemberInfoReq, opts ...grpc.CallOption) (*DeleteMemberInfoResp, error) {
	out := new(DeleteMemberInfoResp)
	err := c.cc.Invoke(ctx, MemberInfoService_DeleteMemberInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) UpdateMemberInfo(ctx context.Context, in *UpdateMemberInfoReq, opts ...grpc.CallOption) (*UpdateMemberInfoResp, error) {
	out := new(UpdateMemberInfoResp)
	err := c.cc.Invoke(ctx, MemberInfoService_UpdateMemberInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) UpdateMemberInfoStatus(ctx context.Context, in *UpdateMemberInfoStatusReq, opts ...grpc.CallOption) (*UpdateMemberInfoStatusResp, error) {
	out := new(UpdateMemberInfoStatusResp)
	err := c.cc.Invoke(ctx, MemberInfoService_UpdateMemberInfoStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) QueryMemberInfoDetail(ctx context.Context, in *QueryMemberInfoDetailReq, opts ...grpc.CallOption) (*QueryMemberInfoDetailResp, error) {
	out := new(QueryMemberInfoDetailResp)
	err := c.cc.Invoke(ctx, MemberInfoService_QueryMemberInfoDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) QueryMemberInfoList(ctx context.Context, in *QueryMemberInfoListReq, opts ...grpc.CallOption) (*QueryMemberInfoListResp, error) {
	out := new(QueryMemberInfoListResp)
	err := c.cc.Invoke(ctx, MemberInfoService_QueryMemberInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, MemberInfoService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) UpdateMemberPoints(ctx context.Context, in *UpdateMemberPointsReq, opts ...grpc.CallOption) (*UpdateMemberPointsResp, error) {
	out := new(UpdateMemberPointsResp)
	err := c.cc.Invoke(ctx, MemberInfoService_UpdateMemberPoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInfoServiceClient) UpdateFirstLoginStatus(ctx context.Context, in *UpdateFirstLoginStatusReq, opts ...grpc.CallOption) (*UpdateMemberInfoResp, error) {
	out := new(UpdateMemberInfoResp)
	err := c.cc.Invoke(ctx, MemberInfoService_UpdateFirstLoginStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberInfoServiceServer is the server API for MemberInfoService service.
// All implementations must embed UnimplementedMemberInfoServiceServer
// for forward compatibility
type MemberInfoServiceServer interface {
	// 注册会员信息
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	// 删除会员信息
	DeleteMemberInfo(context.Context, *DeleteMemberInfoReq) (*DeleteMemberInfoResp, error)
	// 更新会员信息
	UpdateMemberInfo(context.Context, *UpdateMemberInfoReq) (*UpdateMemberInfoResp, error)
	// 更新会员信息状态
	UpdateMemberInfoStatus(context.Context, *UpdateMemberInfoStatusReq) (*UpdateMemberInfoStatusResp, error)
	// 查询会员信息详情
	QueryMemberInfoDetail(context.Context, *QueryMemberInfoDetailReq) (*QueryMemberInfoDetailResp, error)
	// 查询会员信息列表
	QueryMemberInfoList(context.Context, *QueryMemberInfoListReq) (*QueryMemberInfoListResp, error)
	// 会员登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 更新会员积分
	UpdateMemberPoints(context.Context, *UpdateMemberPointsReq) (*UpdateMemberPointsResp, error)
	// 更新会员首次登录状态
	UpdateFirstLoginStatus(context.Context, *UpdateFirstLoginStatusReq) (*UpdateMemberInfoResp, error)
	mustEmbedUnimplementedMemberInfoServiceServer()
}

// UnimplementedMemberInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberInfoServiceServer struct {
}

func (UnimplementedMemberInfoServiceServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMemberInfoServiceServer) DeleteMemberInfo(context.Context, *DeleteMemberInfoReq) (*DeleteMemberInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberInfo not implemented")
}
func (UnimplementedMemberInfoServiceServer) UpdateMemberInfo(context.Context, *UpdateMemberInfoReq) (*UpdateMemberInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberInfo not implemented")
}
func (UnimplementedMemberInfoServiceServer) UpdateMemberInfoStatus(context.Context, *UpdateMemberInfoStatusReq) (*UpdateMemberInfoStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberInfoStatus not implemented")
}
func (UnimplementedMemberInfoServiceServer) QueryMemberInfoDetail(context.Context, *QueryMemberInfoDetailReq) (*QueryMemberInfoDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberInfoDetail not implemented")
}
func (UnimplementedMemberInfoServiceServer) QueryMemberInfoList(context.Context, *QueryMemberInfoListReq) (*QueryMemberInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberInfoList not implemented")
}
func (UnimplementedMemberInfoServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMemberInfoServiceServer) UpdateMemberPoints(context.Context, *UpdateMemberPointsReq) (*UpdateMemberPointsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberPoints not implemented")
}
func (UnimplementedMemberInfoServiceServer) UpdateFirstLoginStatus(context.Context, *UpdateFirstLoginStatusReq) (*UpdateMemberInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirstLoginStatus not implemented")
}
func (UnimplementedMemberInfoServiceServer) mustEmbedUnimplementedMemberInfoServiceServer() {}

// UnsafeMemberInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberInfoServiceServer will
// result in compilation errors.
type UnsafeMemberInfoServiceServer interface {
	mustEmbedUnimplementedMemberInfoServiceServer()
}

func RegisterMemberInfoServiceServer(s grpc.ServiceRegistrar, srv MemberInfoServiceServer) {
	s.RegisterService(&MemberInfoService_ServiceDesc, srv)
}

func _MemberInfoService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_DeleteMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).DeleteMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_DeleteMemberInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).DeleteMemberInfo(ctx, req.(*DeleteMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_UpdateMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).UpdateMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_UpdateMemberInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).UpdateMemberInfo(ctx, req.(*UpdateMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_UpdateMemberInfoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberInfoStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).UpdateMemberInfoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_UpdateMemberInfoStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).UpdateMemberInfoStatus(ctx, req.(*UpdateMemberInfoStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_QueryMemberInfoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberInfoDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).QueryMemberInfoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_QueryMemberInfoDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).QueryMemberInfoDetail(ctx, req.(*QueryMemberInfoDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_QueryMemberInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).QueryMemberInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_QueryMemberInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).QueryMemberInfoList(ctx, req.(*QueryMemberInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_UpdateMemberPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).UpdateMemberPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_UpdateMemberPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).UpdateMemberPoints(ctx, req.(*UpdateMemberPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberInfoService_UpdateFirstLoginStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirstLoginStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberInfoServiceServer).UpdateFirstLoginStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberInfoService_UpdateFirstLoginStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberInfoServiceServer).UpdateFirstLoginStatus(ctx, req.(*UpdateFirstLoginStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberInfoService_ServiceDesc is the grpc.ServiceDesc for MemberInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberInfoService",
	HandlerType: (*MemberInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MemberInfoService_Register_Handler,
		},
		{
			MethodName: "DeleteMemberInfo",
			Handler:    _MemberInfoService_DeleteMemberInfo_Handler,
		},
		{
			MethodName: "UpdateMemberInfo",
			Handler:    _MemberInfoService_UpdateMemberInfo_Handler,
		},
		{
			MethodName: "UpdateMemberInfoStatus",
			Handler:    _MemberInfoService_UpdateMemberInfoStatus_Handler,
		},
		{
			MethodName: "QueryMemberInfoDetail",
			Handler:    _MemberInfoService_QueryMemberInfoDetail_Handler,
		},
		{
			MethodName: "QueryMemberInfoList",
			Handler:    _MemberInfoService_QueryMemberInfoList_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MemberInfoService_Login_Handler,
		},
		{
			MethodName: "UpdateMemberPoints",
			Handler:    _MemberInfoService_UpdateMemberPoints_Handler,
		},
		{
			MethodName: "UpdateFirstLoginStatus",
			Handler:    _MemberInfoService_UpdateFirstLoginStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberLevelService_AddMemberLevel_FullMethodName          = "/umsclient.MemberLevelService/AddMemberLevel"
	MemberLevelService_DeleteMemberLevel_FullMethodName       = "/umsclient.MemberLevelService/DeleteMemberLevel"
	MemberLevelService_UpdateMemberLevel_FullMethodName       = "/umsclient.MemberLevelService/UpdateMemberLevel"
	MemberLevelService_UpdateMemberLevelStatus_FullMethodName = "/umsclient.MemberLevelService/UpdateMemberLevelStatus"
	MemberLevelService_QueryMemberLevelDetail_FullMethodName  = "/umsclient.MemberLevelService/QueryMemberLevelDetail"
	MemberLevelService_QueryMemberLevelList_FullMethodName    = "/umsclient.MemberLevelService/QueryMemberLevelList"
)

// MemberLevelServiceClient is the client API for MemberLevelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberLevelServiceClient interface {
	// 添加会员等级
	AddMemberLevel(ctx context.Context, in *AddMemberLevelReq, opts ...grpc.CallOption) (*AddMemberLevelResp, error)
	// 删除会员等级
	DeleteMemberLevel(ctx context.Context, in *DeleteMemberLevelReq, opts ...grpc.CallOption) (*DeleteMemberLevelResp, error)
	// 更新会员等级
	UpdateMemberLevel(ctx context.Context, in *UpdateMemberLevelReq, opts ...grpc.CallOption) (*UpdateMemberLevelResp, error)
	// 更新会员等级状态
	UpdateMemberLevelStatus(ctx context.Context, in *UpdateMemberLevelStatusReq, opts ...grpc.CallOption) (*UpdateMemberLevelStatusResp, error)
	// 查询会员等级详情
	QueryMemberLevelDetail(ctx context.Context, in *QueryMemberLevelDetailReq, opts ...grpc.CallOption) (*QueryMemberLevelDetailResp, error)
	// 查询会员等级列表
	QueryMemberLevelList(ctx context.Context, in *QueryMemberLevelListReq, opts ...grpc.CallOption) (*QueryMemberLevelListResp, error)
}

type memberLevelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberLevelServiceClient(cc grpc.ClientConnInterface) MemberLevelServiceClient {
	return &memberLevelServiceClient{cc}
}

func (c *memberLevelServiceClient) AddMemberLevel(ctx context.Context, in *AddMemberLevelReq, opts ...grpc.CallOption) (*AddMemberLevelResp, error) {
	out := new(AddMemberLevelResp)
	err := c.cc.Invoke(ctx, MemberLevelService_AddMemberLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) DeleteMemberLevel(ctx context.Context, in *DeleteMemberLevelReq, opts ...grpc.CallOption) (*DeleteMemberLevelResp, error) {
	out := new(DeleteMemberLevelResp)
	err := c.cc.Invoke(ctx, MemberLevelService_DeleteMemberLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) UpdateMemberLevel(ctx context.Context, in *UpdateMemberLevelReq, opts ...grpc.CallOption) (*UpdateMemberLevelResp, error) {
	out := new(UpdateMemberLevelResp)
	err := c.cc.Invoke(ctx, MemberLevelService_UpdateMemberLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) UpdateMemberLevelStatus(ctx context.Context, in *UpdateMemberLevelStatusReq, opts ...grpc.CallOption) (*UpdateMemberLevelStatusResp, error) {
	out := new(UpdateMemberLevelStatusResp)
	err := c.cc.Invoke(ctx, MemberLevelService_UpdateMemberLevelStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) QueryMemberLevelDetail(ctx context.Context, in *QueryMemberLevelDetailReq, opts ...grpc.CallOption) (*QueryMemberLevelDetailResp, error) {
	out := new(QueryMemberLevelDetailResp)
	err := c.cc.Invoke(ctx, MemberLevelService_QueryMemberLevelDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLevelServiceClient) QueryMemberLevelList(ctx context.Context, in *QueryMemberLevelListReq, opts ...grpc.CallOption) (*QueryMemberLevelListResp, error) {
	out := new(QueryMemberLevelListResp)
	err := c.cc.Invoke(ctx, MemberLevelService_QueryMemberLevelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberLevelServiceServer is the server API for MemberLevelService service.
// All implementations must embed UnimplementedMemberLevelServiceServer
// for forward compatibility
type MemberLevelServiceServer interface {
	// 添加会员等级
	AddMemberLevel(context.Context, *AddMemberLevelReq) (*AddMemberLevelResp, error)
	// 删除会员等级
	DeleteMemberLevel(context.Context, *DeleteMemberLevelReq) (*DeleteMemberLevelResp, error)
	// 更新会员等级
	UpdateMemberLevel(context.Context, *UpdateMemberLevelReq) (*UpdateMemberLevelResp, error)
	// 更新会员等级状态
	UpdateMemberLevelStatus(context.Context, *UpdateMemberLevelStatusReq) (*UpdateMemberLevelStatusResp, error)
	// 查询会员等级详情
	QueryMemberLevelDetail(context.Context, *QueryMemberLevelDetailReq) (*QueryMemberLevelDetailResp, error)
	// 查询会员等级列表
	QueryMemberLevelList(context.Context, *QueryMemberLevelListReq) (*QueryMemberLevelListResp, error)
	mustEmbedUnimplementedMemberLevelServiceServer()
}

// UnimplementedMemberLevelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberLevelServiceServer struct {
}

func (UnimplementedMemberLevelServiceServer) AddMemberLevel(context.Context, *AddMemberLevelReq) (*AddMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberLevel not implemented")
}
func (UnimplementedMemberLevelServiceServer) DeleteMemberLevel(context.Context, *DeleteMemberLevelReq) (*DeleteMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberLevel not implemented")
}
func (UnimplementedMemberLevelServiceServer) UpdateMemberLevel(context.Context, *UpdateMemberLevelReq) (*UpdateMemberLevelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberLevel not implemented")
}
func (UnimplementedMemberLevelServiceServer) UpdateMemberLevelStatus(context.Context, *UpdateMemberLevelStatusReq) (*UpdateMemberLevelStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberLevelStatus not implemented")
}
func (UnimplementedMemberLevelServiceServer) QueryMemberLevelDetail(context.Context, *QueryMemberLevelDetailReq) (*QueryMemberLevelDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLevelDetail not implemented")
}
func (UnimplementedMemberLevelServiceServer) QueryMemberLevelList(context.Context, *QueryMemberLevelListReq) (*QueryMemberLevelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLevelList not implemented")
}
func (UnimplementedMemberLevelServiceServer) mustEmbedUnimplementedMemberLevelServiceServer() {}

// UnsafeMemberLevelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberLevelServiceServer will
// result in compilation errors.
type UnsafeMemberLevelServiceServer interface {
	mustEmbedUnimplementedMemberLevelServiceServer()
}

func RegisterMemberLevelServiceServer(s grpc.ServiceRegistrar, srv MemberLevelServiceServer) {
	s.RegisterService(&MemberLevelService_ServiceDesc, srv)
}

func _MemberLevelService_AddMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).AddMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_AddMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).AddMemberLevel(ctx, req.(*AddMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_DeleteMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).DeleteMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_DeleteMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).DeleteMemberLevel(ctx, req.(*DeleteMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_UpdateMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberLevelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).UpdateMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_UpdateMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).UpdateMemberLevel(ctx, req.(*UpdateMemberLevelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_UpdateMemberLevelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberLevelStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).UpdateMemberLevelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_UpdateMemberLevelStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).UpdateMemberLevelStatus(ctx, req.(*UpdateMemberLevelStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_QueryMemberLevelDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLevelDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).QueryMemberLevelDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_QueryMemberLevelDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).QueryMemberLevelDetail(ctx, req.(*QueryMemberLevelDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLevelService_QueryMemberLevelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLevelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLevelServiceServer).QueryMemberLevelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLevelService_QueryMemberLevelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLevelServiceServer).QueryMemberLevelList(ctx, req.(*QueryMemberLevelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberLevelService_ServiceDesc is the grpc.ServiceDesc for MemberLevelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberLevelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberLevelService",
	HandlerType: (*MemberLevelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberLevel",
			Handler:    _MemberLevelService_AddMemberLevel_Handler,
		},
		{
			MethodName: "DeleteMemberLevel",
			Handler:    _MemberLevelService_DeleteMemberLevel_Handler,
		},
		{
			MethodName: "UpdateMemberLevel",
			Handler:    _MemberLevelService_UpdateMemberLevel_Handler,
		},
		{
			MethodName: "UpdateMemberLevelStatus",
			Handler:    _MemberLevelService_UpdateMemberLevelStatus_Handler,
		},
		{
			MethodName: "QueryMemberLevelDetail",
			Handler:    _MemberLevelService_QueryMemberLevelDetail_Handler,
		},
		{
			MethodName: "QueryMemberLevelList",
			Handler:    _MemberLevelService_QueryMemberLevelList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberLoginLogService_DeleteMemberLoginLog_FullMethodName    = "/umsclient.MemberLoginLogService/DeleteMemberLoginLog"
	MemberLoginLogService_QueryMemberLoginLogList_FullMethodName = "/umsclient.MemberLoginLogService/QueryMemberLoginLogList"
)

// MemberLoginLogServiceClient is the client API for MemberLoginLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberLoginLogServiceClient interface {
	// 删除会员登录记录
	DeleteMemberLoginLog(ctx context.Context, in *DeleteMemberLoginLogReq, opts ...grpc.CallOption) (*DeleteMemberLoginLogResp, error)
	// 查询会员登录记录列表
	QueryMemberLoginLogList(ctx context.Context, in *QueryMemberLoginLogListReq, opts ...grpc.CallOption) (*QueryMemberLoginLogListResp, error)
}

type memberLoginLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberLoginLogServiceClient(cc grpc.ClientConnInterface) MemberLoginLogServiceClient {
	return &memberLoginLogServiceClient{cc}
}

func (c *memberLoginLogServiceClient) DeleteMemberLoginLog(ctx context.Context, in *DeleteMemberLoginLogReq, opts ...grpc.CallOption) (*DeleteMemberLoginLogResp, error) {
	out := new(DeleteMemberLoginLogResp)
	err := c.cc.Invoke(ctx, MemberLoginLogService_DeleteMemberLoginLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberLoginLogServiceClient) QueryMemberLoginLogList(ctx context.Context, in *QueryMemberLoginLogListReq, opts ...grpc.CallOption) (*QueryMemberLoginLogListResp, error) {
	out := new(QueryMemberLoginLogListResp)
	err := c.cc.Invoke(ctx, MemberLoginLogService_QueryMemberLoginLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberLoginLogServiceServer is the server API for MemberLoginLogService service.
// All implementations must embed UnimplementedMemberLoginLogServiceServer
// for forward compatibility
type MemberLoginLogServiceServer interface {
	// 删除会员登录记录
	DeleteMemberLoginLog(context.Context, *DeleteMemberLoginLogReq) (*DeleteMemberLoginLogResp, error)
	// 查询会员登录记录列表
	QueryMemberLoginLogList(context.Context, *QueryMemberLoginLogListReq) (*QueryMemberLoginLogListResp, error)
	mustEmbedUnimplementedMemberLoginLogServiceServer()
}

// UnimplementedMemberLoginLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberLoginLogServiceServer struct {
}

func (UnimplementedMemberLoginLogServiceServer) DeleteMemberLoginLog(context.Context, *DeleteMemberLoginLogReq) (*DeleteMemberLoginLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberLoginLog not implemented")
}
func (UnimplementedMemberLoginLogServiceServer) QueryMemberLoginLogList(context.Context, *QueryMemberLoginLogListReq) (*QueryMemberLoginLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberLoginLogList not implemented")
}
func (UnimplementedMemberLoginLogServiceServer) mustEmbedUnimplementedMemberLoginLogServiceServer() {}

// UnsafeMemberLoginLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberLoginLogServiceServer will
// result in compilation errors.
type UnsafeMemberLoginLogServiceServer interface {
	mustEmbedUnimplementedMemberLoginLogServiceServer()
}

func RegisterMemberLoginLogServiceServer(s grpc.ServiceRegistrar, srv MemberLoginLogServiceServer) {
	s.RegisterService(&MemberLoginLogService_ServiceDesc, srv)
}

func _MemberLoginLogService_DeleteMemberLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberLoginLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLoginLogServiceServer).DeleteMemberLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLoginLogService_DeleteMemberLoginLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLoginLogServiceServer).DeleteMemberLoginLog(ctx, req.(*DeleteMemberLoginLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberLoginLogService_QueryMemberLoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberLoginLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberLoginLogServiceServer).QueryMemberLoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberLoginLogService_QueryMemberLoginLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberLoginLogServiceServer).QueryMemberLoginLogList(ctx, req.(*QueryMemberLoginLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberLoginLogService_ServiceDesc is the grpc.ServiceDesc for MemberLoginLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberLoginLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberLoginLogService",
	HandlerType: (*MemberLoginLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMemberLoginLog",
			Handler:    _MemberLoginLogService_DeleteMemberLoginLog_Handler,
		},
		{
			MethodName: "QueryMemberLoginLogList",
			Handler:    _MemberLoginLogService_QueryMemberLoginLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberPointsLogService_AddMemberPointsLog_FullMethodName         = "/umsclient.MemberPointsLogService/AddMemberPointsLog"
	MemberPointsLogService_QueryMemberPointsLogDetail_FullMethodName = "/umsclient.MemberPointsLogService/QueryMemberPointsLogDetail"
	MemberPointsLogService_QueryMemberPointsLogList_FullMethodName   = "/umsclient.MemberPointsLogService/QueryMemberPointsLogList"
)

// MemberPointsLogServiceClient is the client API for MemberPointsLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberPointsLogServiceClient interface {
	// 添加会员积分记录
	AddMemberPointsLog(ctx context.Context, in *AddMemberPointsLogReq, opts ...grpc.CallOption) (*AddMemberPointsLogResp, error)
	// 查询会员积分记录详情
	QueryMemberPointsLogDetail(ctx context.Context, in *QueryMemberPointsLogDetailReq, opts ...grpc.CallOption) (*QueryMemberPointsLogDetailResp, error)
	// 查询会员积分记录列表
	QueryMemberPointsLogList(ctx context.Context, in *QueryMemberPointsLogListReq, opts ...grpc.CallOption) (*QueryMemberPointsLogListResp, error)
}

type memberPointsLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberPointsLogServiceClient(cc grpc.ClientConnInterface) MemberPointsLogServiceClient {
	return &memberPointsLogServiceClient{cc}
}

func (c *memberPointsLogServiceClient) AddMemberPointsLog(ctx context.Context, in *AddMemberPointsLogReq, opts ...grpc.CallOption) (*AddMemberPointsLogResp, error) {
	out := new(AddMemberPointsLogResp)
	err := c.cc.Invoke(ctx, MemberPointsLogService_AddMemberPointsLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPointsLogServiceClient) QueryMemberPointsLogDetail(ctx context.Context, in *QueryMemberPointsLogDetailReq, opts ...grpc.CallOption) (*QueryMemberPointsLogDetailResp, error) {
	out := new(QueryMemberPointsLogDetailResp)
	err := c.cc.Invoke(ctx, MemberPointsLogService_QueryMemberPointsLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPointsLogServiceClient) QueryMemberPointsLogList(ctx context.Context, in *QueryMemberPointsLogListReq, opts ...grpc.CallOption) (*QueryMemberPointsLogListResp, error) {
	out := new(QueryMemberPointsLogListResp)
	err := c.cc.Invoke(ctx, MemberPointsLogService_QueryMemberPointsLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberPointsLogServiceServer is the server API for MemberPointsLogService service.
// All implementations must embed UnimplementedMemberPointsLogServiceServer
// for forward compatibility
type MemberPointsLogServiceServer interface {
	// 添加会员积分记录
	AddMemberPointsLog(context.Context, *AddMemberPointsLogReq) (*AddMemberPointsLogResp, error)
	// 查询会员积分记录详情
	QueryMemberPointsLogDetail(context.Context, *QueryMemberPointsLogDetailReq) (*QueryMemberPointsLogDetailResp, error)
	// 查询会员积分记录列表
	QueryMemberPointsLogList(context.Context, *QueryMemberPointsLogListReq) (*QueryMemberPointsLogListResp, error)
	mustEmbedUnimplementedMemberPointsLogServiceServer()
}

// UnimplementedMemberPointsLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberPointsLogServiceServer struct {
}

func (UnimplementedMemberPointsLogServiceServer) AddMemberPointsLog(context.Context, *AddMemberPointsLogReq) (*AddMemberPointsLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberPointsLog not implemented")
}
func (UnimplementedMemberPointsLogServiceServer) QueryMemberPointsLogDetail(context.Context, *QueryMemberPointsLogDetailReq) (*QueryMemberPointsLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberPointsLogDetail not implemented")
}
func (UnimplementedMemberPointsLogServiceServer) QueryMemberPointsLogList(context.Context, *QueryMemberPointsLogListReq) (*QueryMemberPointsLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberPointsLogList not implemented")
}
func (UnimplementedMemberPointsLogServiceServer) mustEmbedUnimplementedMemberPointsLogServiceServer() {
}

// UnsafeMemberPointsLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberPointsLogServiceServer will
// result in compilation errors.
type UnsafeMemberPointsLogServiceServer interface {
	mustEmbedUnimplementedMemberPointsLogServiceServer()
}

func RegisterMemberPointsLogServiceServer(s grpc.ServiceRegistrar, srv MemberPointsLogServiceServer) {
	s.RegisterService(&MemberPointsLogService_ServiceDesc, srv)
}

func _MemberPointsLogService_AddMemberPointsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberPointsLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberPointsLogServiceServer).AddMemberPointsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberPointsLogService_AddMemberPointsLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberPointsLogServiceServer).AddMemberPointsLog(ctx, req.(*AddMemberPointsLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberPointsLogService_QueryMemberPointsLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberPointsLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberPointsLogServiceServer).QueryMemberPointsLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberPointsLogService_QueryMemberPointsLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberPointsLogServiceServer).QueryMemberPointsLogDetail(ctx, req.(*QueryMemberPointsLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberPointsLogService_QueryMemberPointsLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberPointsLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberPointsLogServiceServer).QueryMemberPointsLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberPointsLogService_QueryMemberPointsLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberPointsLogServiceServer).QueryMemberPointsLogList(ctx, req.(*QueryMemberPointsLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberPointsLogService_ServiceDesc is the grpc.ServiceDesc for MemberPointsLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberPointsLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberPointsLogService",
	HandlerType: (*MemberPointsLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberPointsLog",
			Handler:    _MemberPointsLogService_AddMemberPointsLog_Handler,
		},
		{
			MethodName: "QueryMemberPointsLogDetail",
			Handler:    _MemberPointsLogService_QueryMemberPointsLogDetail_Handler,
		},
		{
			MethodName: "QueryMemberPointsLogList",
			Handler:    _MemberPointsLogService_QueryMemberPointsLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberProductCategoryRelationService_AddMemberProductCategoryRelation_FullMethodName       = "/umsclient.MemberProductCategoryRelationService/AddMemberProductCategoryRelation"
	MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_FullMethodName = "/umsclient.MemberProductCategoryRelationService/QueryMemberProductCategoryRelationList"
)

// MemberProductCategoryRelationServiceClient is the client API for MemberProductCategoryRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberProductCategoryRelationServiceClient interface {
	// 添加会员与产品分类关系表（用户喜欢的分类）
	AddMemberProductCategoryRelation(ctx context.Context, in *AddMemberProductCategoryRelationReq, opts ...grpc.CallOption) (*AddMemberProductCategoryRelationResp, error)
	// 查询会员与产品分类关系表（用户喜欢的分类）列表
	QueryMemberProductCategoryRelationList(ctx context.Context, in *QueryMemberProductCategoryRelationListReq, opts ...grpc.CallOption) (*QueryMemberProductCategoryRelationListResp, error)
}

type memberProductCategoryRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberProductCategoryRelationServiceClient(cc grpc.ClientConnInterface) MemberProductCategoryRelationServiceClient {
	return &memberProductCategoryRelationServiceClient{cc}
}

func (c *memberProductCategoryRelationServiceClient) AddMemberProductCategoryRelation(ctx context.Context, in *AddMemberProductCategoryRelationReq, opts ...grpc.CallOption) (*AddMemberProductCategoryRelationResp, error) {
	out := new(AddMemberProductCategoryRelationResp)
	err := c.cc.Invoke(ctx, MemberProductCategoryRelationService_AddMemberProductCategoryRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCategoryRelationServiceClient) QueryMemberProductCategoryRelationList(ctx context.Context, in *QueryMemberProductCategoryRelationListReq, opts ...grpc.CallOption) (*QueryMemberProductCategoryRelationListResp, error) {
	out := new(QueryMemberProductCategoryRelationListResp)
	err := c.cc.Invoke(ctx, MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberProductCategoryRelationServiceServer is the server API for MemberProductCategoryRelationService service.
// All implementations must embed UnimplementedMemberProductCategoryRelationServiceServer
// for forward compatibility
type MemberProductCategoryRelationServiceServer interface {
	// 添加会员与产品分类关系表（用户喜欢的分类）
	AddMemberProductCategoryRelation(context.Context, *AddMemberProductCategoryRelationReq) (*AddMemberProductCategoryRelationResp, error)
	// 查询会员与产品分类关系表（用户喜欢的分类）列表
	QueryMemberProductCategoryRelationList(context.Context, *QueryMemberProductCategoryRelationListReq) (*QueryMemberProductCategoryRelationListResp, error)
	mustEmbedUnimplementedMemberProductCategoryRelationServiceServer()
}

// UnimplementedMemberProductCategoryRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberProductCategoryRelationServiceServer struct {
}

func (UnimplementedMemberProductCategoryRelationServiceServer) AddMemberProductCategoryRelation(context.Context, *AddMemberProductCategoryRelationReq) (*AddMemberProductCategoryRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberProductCategoryRelation not implemented")
}
func (UnimplementedMemberProductCategoryRelationServiceServer) QueryMemberProductCategoryRelationList(context.Context, *QueryMemberProductCategoryRelationListReq) (*QueryMemberProductCategoryRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberProductCategoryRelationList not implemented")
}
func (UnimplementedMemberProductCategoryRelationServiceServer) mustEmbedUnimplementedMemberProductCategoryRelationServiceServer() {
}

// UnsafeMemberProductCategoryRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberProductCategoryRelationServiceServer will
// result in compilation errors.
type UnsafeMemberProductCategoryRelationServiceServer interface {
	mustEmbedUnimplementedMemberProductCategoryRelationServiceServer()
}

func RegisterMemberProductCategoryRelationServiceServer(s grpc.ServiceRegistrar, srv MemberProductCategoryRelationServiceServer) {
	s.RegisterService(&MemberProductCategoryRelationService_ServiceDesc, srv)
}

func _MemberProductCategoryRelationService_AddMemberProductCategoryRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberProductCategoryRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCategoryRelationServiceServer).AddMemberProductCategoryRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCategoryRelationService_AddMemberProductCategoryRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCategoryRelationServiceServer).AddMemberProductCategoryRelation(ctx, req.(*AddMemberProductCategoryRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberProductCategoryRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCategoryRelationServiceServer).QueryMemberProductCategoryRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCategoryRelationServiceServer).QueryMemberProductCategoryRelationList(ctx, req.(*QueryMemberProductCategoryRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberProductCategoryRelationService_ServiceDesc is the grpc.ServiceDesc for MemberProductCategoryRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberProductCategoryRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberProductCategoryRelationService",
	HandlerType: (*MemberProductCategoryRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberProductCategoryRelation",
			Handler:    _MemberProductCategoryRelationService_AddMemberProductCategoryRelation_Handler,
		},
		{
			MethodName: "QueryMemberProductCategoryRelationList",
			Handler:    _MemberProductCategoryRelationService_QueryMemberProductCategoryRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberProductCollectionService_AddMemberProductCollection_FullMethodName         = "/umsclient.MemberProductCollectionService/AddMemberProductCollection"
	MemberProductCollectionService_DeleteMemberProductCollection_FullMethodName      = "/umsclient.MemberProductCollectionService/DeleteMemberProductCollection"
	MemberProductCollectionService_QueryMemberProductCollectionDetail_FullMethodName = "/umsclient.MemberProductCollectionService/QueryMemberProductCollectionDetail"
	MemberProductCollectionService_QueryMemberProductCollectionList_FullMethodName   = "/umsclient.MemberProductCollectionService/QueryMemberProductCollectionList"
)

// MemberProductCollectionServiceClient is the client API for MemberProductCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberProductCollectionServiceClient interface {
	// 添加用户收藏的商品
	AddMemberProductCollection(ctx context.Context, in *AddMemberProductCollectionReq, opts ...grpc.CallOption) (*AddMemberProductCollectionResp, error)
	// 删除商品收藏/清空当前用户商品收藏列表
	DeleteMemberProductCollection(ctx context.Context, in *DeleteMemberProductCollectionReq, opts ...grpc.CallOption) (*DeleteMemberProductCollectionResp, error)
	// 查询用户收藏的商品详情
	QueryMemberProductCollectionDetail(ctx context.Context, in *QueryMemberProductCollectionDetailReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionDetailResp, error)
	// 查询用户收藏的商品列表
	QueryMemberProductCollectionList(ctx context.Context, in *QueryMemberProductCollectionListReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionListResp, error)
}

type memberProductCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberProductCollectionServiceClient(cc grpc.ClientConnInterface) MemberProductCollectionServiceClient {
	return &memberProductCollectionServiceClient{cc}
}

func (c *memberProductCollectionServiceClient) AddMemberProductCollection(ctx context.Context, in *AddMemberProductCollectionReq, opts ...grpc.CallOption) (*AddMemberProductCollectionResp, error) {
	out := new(AddMemberProductCollectionResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_AddMemberProductCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCollectionServiceClient) DeleteMemberProductCollection(ctx context.Context, in *DeleteMemberProductCollectionReq, opts ...grpc.CallOption) (*DeleteMemberProductCollectionResp, error) {
	out := new(DeleteMemberProductCollectionResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_DeleteMemberProductCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCollectionServiceClient) QueryMemberProductCollectionDetail(ctx context.Context, in *QueryMemberProductCollectionDetailReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionDetailResp, error) {
	out := new(QueryMemberProductCollectionDetailResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_QueryMemberProductCollectionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberProductCollectionServiceClient) QueryMemberProductCollectionList(ctx context.Context, in *QueryMemberProductCollectionListReq, opts ...grpc.CallOption) (*QueryMemberProductCollectionListResp, error) {
	out := new(QueryMemberProductCollectionListResp)
	err := c.cc.Invoke(ctx, MemberProductCollectionService_QueryMemberProductCollectionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberProductCollectionServiceServer is the server API for MemberProductCollectionService service.
// All implementations must embed UnimplementedMemberProductCollectionServiceServer
// for forward compatibility
type MemberProductCollectionServiceServer interface {
	// 添加用户收藏的商品
	AddMemberProductCollection(context.Context, *AddMemberProductCollectionReq) (*AddMemberProductCollectionResp, error)
	// 删除商品收藏/清空当前用户商品收藏列表
	DeleteMemberProductCollection(context.Context, *DeleteMemberProductCollectionReq) (*DeleteMemberProductCollectionResp, error)
	// 查询用户收藏的商品详情
	QueryMemberProductCollectionDetail(context.Context, *QueryMemberProductCollectionDetailReq) (*QueryMemberProductCollectionDetailResp, error)
	// 查询用户收藏的商品列表
	QueryMemberProductCollectionList(context.Context, *QueryMemberProductCollectionListReq) (*QueryMemberProductCollectionListResp, error)
	mustEmbedUnimplementedMemberProductCollectionServiceServer()
}

// UnimplementedMemberProductCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberProductCollectionServiceServer struct {
}

func (UnimplementedMemberProductCollectionServiceServer) AddMemberProductCollection(context.Context, *AddMemberProductCollectionReq) (*AddMemberProductCollectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberProductCollection not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) DeleteMemberProductCollection(context.Context, *DeleteMemberProductCollectionReq) (*DeleteMemberProductCollectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberProductCollection not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) QueryMemberProductCollectionDetail(context.Context, *QueryMemberProductCollectionDetailReq) (*QueryMemberProductCollectionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberProductCollectionDetail not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) QueryMemberProductCollectionList(context.Context, *QueryMemberProductCollectionListReq) (*QueryMemberProductCollectionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberProductCollectionList not implemented")
}
func (UnimplementedMemberProductCollectionServiceServer) mustEmbedUnimplementedMemberProductCollectionServiceServer() {
}

// UnsafeMemberProductCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberProductCollectionServiceServer will
// result in compilation errors.
type UnsafeMemberProductCollectionServiceServer interface {
	mustEmbedUnimplementedMemberProductCollectionServiceServer()
}

func RegisterMemberProductCollectionServiceServer(s grpc.ServiceRegistrar, srv MemberProductCollectionServiceServer) {
	s.RegisterService(&MemberProductCollectionService_ServiceDesc, srv)
}

func _MemberProductCollectionService_AddMemberProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberProductCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).AddMemberProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_AddMemberProductCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).AddMemberProductCollection(ctx, req.(*AddMemberProductCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCollectionService_DeleteMemberProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberProductCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).DeleteMemberProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_DeleteMemberProductCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).DeleteMemberProductCollection(ctx, req.(*DeleteMemberProductCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCollectionService_QueryMemberProductCollectionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberProductCollectionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_QueryMemberProductCollectionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionDetail(ctx, req.(*QueryMemberProductCollectionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberProductCollectionService_QueryMemberProductCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberProductCollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberProductCollectionService_QueryMemberProductCollectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberProductCollectionServiceServer).QueryMemberProductCollectionList(ctx, req.(*QueryMemberProductCollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberProductCollectionService_ServiceDesc is the grpc.ServiceDesc for MemberProductCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberProductCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberProductCollectionService",
	HandlerType: (*MemberProductCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberProductCollection",
			Handler:    _MemberProductCollectionService_AddMemberProductCollection_Handler,
		},
		{
			MethodName: "DeleteMemberProductCollection",
			Handler:    _MemberProductCollectionService_DeleteMemberProductCollection_Handler,
		},
		{
			MethodName: "QueryMemberProductCollectionDetail",
			Handler:    _MemberProductCollectionService_QueryMemberProductCollectionDetail_Handler,
		},
		{
			MethodName: "QueryMemberProductCollectionList",
			Handler:    _MemberProductCollectionService_QueryMemberProductCollectionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberReadHistoryService_AddMemberReadHistory_FullMethodName         = "/umsclient.MemberReadHistoryService/AddMemberReadHistory"
	MemberReadHistoryService_DeleteMemberReadHistory_FullMethodName      = "/umsclient.MemberReadHistoryService/DeleteMemberReadHistory"
	MemberReadHistoryService_QueryMemberReadHistoryDetail_FullMethodName = "/umsclient.MemberReadHistoryService/QueryMemberReadHistoryDetail"
	MemberReadHistoryService_QueryMemberReadHistoryList_FullMethodName   = "/umsclient.MemberReadHistoryService/QueryMemberReadHistoryList"
)

// MemberReadHistoryServiceClient is the client API for MemberReadHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberReadHistoryServiceClient interface {
	// 添加用户商品浏览历史记录
	AddMemberReadHistory(ctx context.Context, in *AddMemberReadHistoryReq, opts ...grpc.CallOption) (*AddMemberReadHistoryResp, error)
	// 清空浏览记录/删除浏览记录
	DeleteMemberReadHistory(ctx context.Context, in *DeleteMemberReadHistoryReq, opts ...grpc.CallOption) (*DeleteMemberReadHistoryResp, error)
	// 查询用户商品浏览历史记录详情
	QueryMemberReadHistoryDetail(ctx context.Context, in *QueryMemberReadHistoryDetailReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryDetailResp, error)
	// 查询用户商品浏览历史记录列表
	QueryMemberReadHistoryList(ctx context.Context, in *QueryMemberReadHistoryListReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryListResp, error)
}

type memberReadHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberReadHistoryServiceClient(cc grpc.ClientConnInterface) MemberReadHistoryServiceClient {
	return &memberReadHistoryServiceClient{cc}
}

func (c *memberReadHistoryServiceClient) AddMemberReadHistory(ctx context.Context, in *AddMemberReadHistoryReq, opts ...grpc.CallOption) (*AddMemberReadHistoryResp, error) {
	out := new(AddMemberReadHistoryResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_AddMemberReadHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReadHistoryServiceClient) DeleteMemberReadHistory(ctx context.Context, in *DeleteMemberReadHistoryReq, opts ...grpc.CallOption) (*DeleteMemberReadHistoryResp, error) {
	out := new(DeleteMemberReadHistoryResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_DeleteMemberReadHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReadHistoryServiceClient) QueryMemberReadHistoryDetail(ctx context.Context, in *QueryMemberReadHistoryDetailReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryDetailResp, error) {
	out := new(QueryMemberReadHistoryDetailResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_QueryMemberReadHistoryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberReadHistoryServiceClient) QueryMemberReadHistoryList(ctx context.Context, in *QueryMemberReadHistoryListReq, opts ...grpc.CallOption) (*QueryMemberReadHistoryListResp, error) {
	out := new(QueryMemberReadHistoryListResp)
	err := c.cc.Invoke(ctx, MemberReadHistoryService_QueryMemberReadHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberReadHistoryServiceServer is the server API for MemberReadHistoryService service.
// All implementations must embed UnimplementedMemberReadHistoryServiceServer
// for forward compatibility
type MemberReadHistoryServiceServer interface {
	// 添加用户商品浏览历史记录
	AddMemberReadHistory(context.Context, *AddMemberReadHistoryReq) (*AddMemberReadHistoryResp, error)
	// 清空浏览记录/删除浏览记录
	DeleteMemberReadHistory(context.Context, *DeleteMemberReadHistoryReq) (*DeleteMemberReadHistoryResp, error)
	// 查询用户商品浏览历史记录详情
	QueryMemberReadHistoryDetail(context.Context, *QueryMemberReadHistoryDetailReq) (*QueryMemberReadHistoryDetailResp, error)
	// 查询用户商品浏览历史记录列表
	QueryMemberReadHistoryList(context.Context, *QueryMemberReadHistoryListReq) (*QueryMemberReadHistoryListResp, error)
	mustEmbedUnimplementedMemberReadHistoryServiceServer()
}

// UnimplementedMemberReadHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberReadHistoryServiceServer struct {
}

func (UnimplementedMemberReadHistoryServiceServer) AddMemberReadHistory(context.Context, *AddMemberReadHistoryReq) (*AddMemberReadHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberReadHistory not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) DeleteMemberReadHistory(context.Context, *DeleteMemberReadHistoryReq) (*DeleteMemberReadHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberReadHistory not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) QueryMemberReadHistoryDetail(context.Context, *QueryMemberReadHistoryDetailReq) (*QueryMemberReadHistoryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberReadHistoryDetail not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) QueryMemberReadHistoryList(context.Context, *QueryMemberReadHistoryListReq) (*QueryMemberReadHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberReadHistoryList not implemented")
}
func (UnimplementedMemberReadHistoryServiceServer) mustEmbedUnimplementedMemberReadHistoryServiceServer() {
}

// UnsafeMemberReadHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberReadHistoryServiceServer will
// result in compilation errors.
type UnsafeMemberReadHistoryServiceServer interface {
	mustEmbedUnimplementedMemberReadHistoryServiceServer()
}

func RegisterMemberReadHistoryServiceServer(s grpc.ServiceRegistrar, srv MemberReadHistoryServiceServer) {
	s.RegisterService(&MemberReadHistoryService_ServiceDesc, srv)
}

func _MemberReadHistoryService_AddMemberReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReadHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).AddMemberReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_AddMemberReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).AddMemberReadHistory(ctx, req.(*AddMemberReadHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReadHistoryService_DeleteMemberReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberReadHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).DeleteMemberReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_DeleteMemberReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).DeleteMemberReadHistory(ctx, req.(*DeleteMemberReadHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReadHistoryService_QueryMemberReadHistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberReadHistoryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_QueryMemberReadHistoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryDetail(ctx, req.(*QueryMemberReadHistoryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberReadHistoryService_QueryMemberReadHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberReadHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberReadHistoryService_QueryMemberReadHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberReadHistoryServiceServer).QueryMemberReadHistoryList(ctx, req.(*QueryMemberReadHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberReadHistoryService_ServiceDesc is the grpc.ServiceDesc for MemberReadHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberReadHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberReadHistoryService",
	HandlerType: (*MemberReadHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberReadHistory",
			Handler:    _MemberReadHistoryService_AddMemberReadHistory_Handler,
		},
		{
			MethodName: "DeleteMemberReadHistory",
			Handler:    _MemberReadHistoryService_DeleteMemberReadHistory_Handler,
		},
		{
			MethodName: "QueryMemberReadHistoryDetail",
			Handler:    _MemberReadHistoryService_QueryMemberReadHistoryDetail_Handler,
		},
		{
			MethodName: "QueryMemberReadHistoryList",
			Handler:    _MemberReadHistoryService_QueryMemberReadHistoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberRuleSettingService_AddMemberRuleSetting_FullMethodName          = "/umsclient.MemberRuleSettingService/AddMemberRuleSetting"
	MemberRuleSettingService_DeleteMemberRuleSetting_FullMethodName       = "/umsclient.MemberRuleSettingService/DeleteMemberRuleSetting"
	MemberRuleSettingService_UpdateMemberRuleSetting_FullMethodName       = "/umsclient.MemberRuleSettingService/UpdateMemberRuleSetting"
	MemberRuleSettingService_UpdateMemberRuleSettingStatus_FullMethodName = "/umsclient.MemberRuleSettingService/UpdateMemberRuleSettingStatus"
	MemberRuleSettingService_QueryMemberRuleSettingDetail_FullMethodName  = "/umsclient.MemberRuleSettingService/QueryMemberRuleSettingDetail"
	MemberRuleSettingService_QueryMemberRuleSettingList_FullMethodName    = "/umsclient.MemberRuleSettingService/QueryMemberRuleSettingList"
)

// MemberRuleSettingServiceClient is the client API for MemberRuleSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberRuleSettingServiceClient interface {
	// 添加会员积分成长规则
	AddMemberRuleSetting(ctx context.Context, in *AddMemberRuleSettingReq, opts ...grpc.CallOption) (*AddMemberRuleSettingResp, error)
	// 删除会员积分成长规则
	DeleteMemberRuleSetting(ctx context.Context, in *DeleteMemberRuleSettingReq, opts ...grpc.CallOption) (*DeleteMemberRuleSettingResp, error)
	// 更新会员积分成长规则
	UpdateMemberRuleSetting(ctx context.Context, in *UpdateMemberRuleSettingReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingResp, error)
	// 更新会员积分成长规则状态
	UpdateMemberRuleSettingStatus(ctx context.Context, in *UpdateMemberRuleSettingStatusReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingStatusResp, error)
	// 查询会员积分成长规则详情
	QueryMemberRuleSettingDetail(ctx context.Context, in *QueryMemberRuleSettingDetailReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingDetailResp, error)
	// 查询会员积分成长规则列表
	QueryMemberRuleSettingList(ctx context.Context, in *QueryMemberRuleSettingListReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingListResp, error)
}

type memberRuleSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberRuleSettingServiceClient(cc grpc.ClientConnInterface) MemberRuleSettingServiceClient {
	return &memberRuleSettingServiceClient{cc}
}

func (c *memberRuleSettingServiceClient) AddMemberRuleSetting(ctx context.Context, in *AddMemberRuleSettingReq, opts ...grpc.CallOption) (*AddMemberRuleSettingResp, error) {
	out := new(AddMemberRuleSettingResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_AddMemberRuleSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) DeleteMemberRuleSetting(ctx context.Context, in *DeleteMemberRuleSettingReq, opts ...grpc.CallOption) (*DeleteMemberRuleSettingResp, error) {
	out := new(DeleteMemberRuleSettingResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_DeleteMemberRuleSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) UpdateMemberRuleSetting(ctx context.Context, in *UpdateMemberRuleSettingReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingResp, error) {
	out := new(UpdateMemberRuleSettingResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_UpdateMemberRuleSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) UpdateMemberRuleSettingStatus(ctx context.Context, in *UpdateMemberRuleSettingStatusReq, opts ...grpc.CallOption) (*UpdateMemberRuleSettingStatusResp, error) {
	out := new(UpdateMemberRuleSettingStatusResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_UpdateMemberRuleSettingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) QueryMemberRuleSettingDetail(ctx context.Context, in *QueryMemberRuleSettingDetailReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingDetailResp, error) {
	out := new(QueryMemberRuleSettingDetailResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_QueryMemberRuleSettingDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberRuleSettingServiceClient) QueryMemberRuleSettingList(ctx context.Context, in *QueryMemberRuleSettingListReq, opts ...grpc.CallOption) (*QueryMemberRuleSettingListResp, error) {
	out := new(QueryMemberRuleSettingListResp)
	err := c.cc.Invoke(ctx, MemberRuleSettingService_QueryMemberRuleSettingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberRuleSettingServiceServer is the server API for MemberRuleSettingService service.
// All implementations must embed UnimplementedMemberRuleSettingServiceServer
// for forward compatibility
type MemberRuleSettingServiceServer interface {
	// 添加会员积分成长规则
	AddMemberRuleSetting(context.Context, *AddMemberRuleSettingReq) (*AddMemberRuleSettingResp, error)
	// 删除会员积分成长规则
	DeleteMemberRuleSetting(context.Context, *DeleteMemberRuleSettingReq) (*DeleteMemberRuleSettingResp, error)
	// 更新会员积分成长规则
	UpdateMemberRuleSetting(context.Context, *UpdateMemberRuleSettingReq) (*UpdateMemberRuleSettingResp, error)
	// 更新会员积分成长规则状态
	UpdateMemberRuleSettingStatus(context.Context, *UpdateMemberRuleSettingStatusReq) (*UpdateMemberRuleSettingStatusResp, error)
	// 查询会员积分成长规则详情
	QueryMemberRuleSettingDetail(context.Context, *QueryMemberRuleSettingDetailReq) (*QueryMemberRuleSettingDetailResp, error)
	// 查询会员积分成长规则列表
	QueryMemberRuleSettingList(context.Context, *QueryMemberRuleSettingListReq) (*QueryMemberRuleSettingListResp, error)
	mustEmbedUnimplementedMemberRuleSettingServiceServer()
}

// UnimplementedMemberRuleSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberRuleSettingServiceServer struct {
}

func (UnimplementedMemberRuleSettingServiceServer) AddMemberRuleSetting(context.Context, *AddMemberRuleSettingReq) (*AddMemberRuleSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberRuleSetting not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) DeleteMemberRuleSetting(context.Context, *DeleteMemberRuleSettingReq) (*DeleteMemberRuleSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberRuleSetting not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) UpdateMemberRuleSetting(context.Context, *UpdateMemberRuleSettingReq) (*UpdateMemberRuleSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRuleSetting not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) UpdateMemberRuleSettingStatus(context.Context, *UpdateMemberRuleSettingStatusReq) (*UpdateMemberRuleSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRuleSettingStatus not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) QueryMemberRuleSettingDetail(context.Context, *QueryMemberRuleSettingDetailReq) (*QueryMemberRuleSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberRuleSettingDetail not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) QueryMemberRuleSettingList(context.Context, *QueryMemberRuleSettingListReq) (*QueryMemberRuleSettingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberRuleSettingList not implemented")
}
func (UnimplementedMemberRuleSettingServiceServer) mustEmbedUnimplementedMemberRuleSettingServiceServer() {
}

// UnsafeMemberRuleSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberRuleSettingServiceServer will
// result in compilation errors.
type UnsafeMemberRuleSettingServiceServer interface {
	mustEmbedUnimplementedMemberRuleSettingServiceServer()
}

func RegisterMemberRuleSettingServiceServer(s grpc.ServiceRegistrar, srv MemberRuleSettingServiceServer) {
	s.RegisterService(&MemberRuleSettingService_ServiceDesc, srv)
}

func _MemberRuleSettingService_AddMemberRuleSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRuleSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).AddMemberRuleSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_AddMemberRuleSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).AddMemberRuleSetting(ctx, req.(*AddMemberRuleSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_DeleteMemberRuleSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRuleSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).DeleteMemberRuleSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_DeleteMemberRuleSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).DeleteMemberRuleSetting(ctx, req.(*DeleteMemberRuleSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_UpdateMemberRuleSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRuleSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_UpdateMemberRuleSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSetting(ctx, req.(*UpdateMemberRuleSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_UpdateMemberRuleSettingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRuleSettingStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSettingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_UpdateMemberRuleSettingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).UpdateMemberRuleSettingStatus(ctx, req.(*UpdateMemberRuleSettingStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_QueryMemberRuleSettingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberRuleSettingDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_QueryMemberRuleSettingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingDetail(ctx, req.(*QueryMemberRuleSettingDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberRuleSettingService_QueryMemberRuleSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberRuleSettingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberRuleSettingService_QueryMemberRuleSettingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberRuleSettingServiceServer).QueryMemberRuleSettingList(ctx, req.(*QueryMemberRuleSettingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberRuleSettingService_ServiceDesc is the grpc.ServiceDesc for MemberRuleSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberRuleSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberRuleSettingService",
	HandlerType: (*MemberRuleSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberRuleSetting",
			Handler:    _MemberRuleSettingService_AddMemberRuleSetting_Handler,
		},
		{
			MethodName: "DeleteMemberRuleSetting",
			Handler:    _MemberRuleSettingService_DeleteMemberRuleSetting_Handler,
		},
		{
			MethodName: "UpdateMemberRuleSetting",
			Handler:    _MemberRuleSettingService_UpdateMemberRuleSetting_Handler,
		},
		{
			MethodName: "UpdateMemberRuleSettingStatus",
			Handler:    _MemberRuleSettingService_UpdateMemberRuleSettingStatus_Handler,
		},
		{
			MethodName: "QueryMemberRuleSettingDetail",
			Handler:    _MemberRuleSettingService_QueryMemberRuleSettingDetail_Handler,
		},
		{
			MethodName: "QueryMemberRuleSettingList",
			Handler:    _MemberRuleSettingService_QueryMemberRuleSettingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberSignLogService_AddMemberSignLog_FullMethodName         = "/umsclient.MemberSignLogService/AddMemberSignLog"
	MemberSignLogService_QueryMemberSignLogDetail_FullMethodName = "/umsclient.MemberSignLogService/QueryMemberSignLogDetail"
	MemberSignLogService_QueryMemberSignLogList_FullMethodName   = "/umsclient.MemberSignLogService/QueryMemberSignLogList"
)

// MemberSignLogServiceClient is the client API for MemberSignLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberSignLogServiceClient interface {
	// 添加会员签到记录
	AddMemberSignLog(ctx context.Context, in *AddMemberSignLogReq, opts ...grpc.CallOption) (*AddMemberSignLogResp, error)
	// 查询会员签到记录详情
	QueryMemberSignLogDetail(ctx context.Context, in *QueryMemberSignLogDetailReq, opts ...grpc.CallOption) (*QueryMemberSignLogDetailResp, error)
	// 查询会员签到记录列表
	QueryMemberSignLogList(ctx context.Context, in *QueryMemberSignLogListReq, opts ...grpc.CallOption) (*QueryMemberSignLogListResp, error)
}

type memberSignLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberSignLogServiceClient(cc grpc.ClientConnInterface) MemberSignLogServiceClient {
	return &memberSignLogServiceClient{cc}
}

func (c *memberSignLogServiceClient) AddMemberSignLog(ctx context.Context, in *AddMemberSignLogReq, opts ...grpc.CallOption) (*AddMemberSignLogResp, error) {
	out := new(AddMemberSignLogResp)
	err := c.cc.Invoke(ctx, MemberSignLogService_AddMemberSignLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberSignLogServiceClient) QueryMemberSignLogDetail(ctx context.Context, in *QueryMemberSignLogDetailReq, opts ...grpc.CallOption) (*QueryMemberSignLogDetailResp, error) {
	out := new(QueryMemberSignLogDetailResp)
	err := c.cc.Invoke(ctx, MemberSignLogService_QueryMemberSignLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberSignLogServiceClient) QueryMemberSignLogList(ctx context.Context, in *QueryMemberSignLogListReq, opts ...grpc.CallOption) (*QueryMemberSignLogListResp, error) {
	out := new(QueryMemberSignLogListResp)
	err := c.cc.Invoke(ctx, MemberSignLogService_QueryMemberSignLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberSignLogServiceServer is the server API for MemberSignLogService service.
// All implementations must embed UnimplementedMemberSignLogServiceServer
// for forward compatibility
type MemberSignLogServiceServer interface {
	// 添加会员签到记录
	AddMemberSignLog(context.Context, *AddMemberSignLogReq) (*AddMemberSignLogResp, error)
	// 查询会员签到记录详情
	QueryMemberSignLogDetail(context.Context, *QueryMemberSignLogDetailReq) (*QueryMemberSignLogDetailResp, error)
	// 查询会员签到记录列表
	QueryMemberSignLogList(context.Context, *QueryMemberSignLogListReq) (*QueryMemberSignLogListResp, error)
	mustEmbedUnimplementedMemberSignLogServiceServer()
}

// UnimplementedMemberSignLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberSignLogServiceServer struct {
}

func (UnimplementedMemberSignLogServiceServer) AddMemberSignLog(context.Context, *AddMemberSignLogReq) (*AddMemberSignLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberSignLog not implemented")
}
func (UnimplementedMemberSignLogServiceServer) QueryMemberSignLogDetail(context.Context, *QueryMemberSignLogDetailReq) (*QueryMemberSignLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberSignLogDetail not implemented")
}
func (UnimplementedMemberSignLogServiceServer) QueryMemberSignLogList(context.Context, *QueryMemberSignLogListReq) (*QueryMemberSignLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberSignLogList not implemented")
}
func (UnimplementedMemberSignLogServiceServer) mustEmbedUnimplementedMemberSignLogServiceServer() {}

// UnsafeMemberSignLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberSignLogServiceServer will
// result in compilation errors.
type UnsafeMemberSignLogServiceServer interface {
	mustEmbedUnimplementedMemberSignLogServiceServer()
}

func RegisterMemberSignLogServiceServer(s grpc.ServiceRegistrar, srv MemberSignLogServiceServer) {
	s.RegisterService(&MemberSignLogService_ServiceDesc, srv)
}

func _MemberSignLogService_AddMemberSignLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberSignLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberSignLogServiceServer).AddMemberSignLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberSignLogService_AddMemberSignLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberSignLogServiceServer).AddMemberSignLog(ctx, req.(*AddMemberSignLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberSignLogService_QueryMemberSignLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberSignLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberSignLogServiceServer).QueryMemberSignLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberSignLogService_QueryMemberSignLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberSignLogServiceServer).QueryMemberSignLogDetail(ctx, req.(*QueryMemberSignLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberSignLogService_QueryMemberSignLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberSignLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberSignLogServiceServer).QueryMemberSignLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberSignLogService_QueryMemberSignLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberSignLogServiceServer).QueryMemberSignLogList(ctx, req.(*QueryMemberSignLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberSignLogService_ServiceDesc is the grpc.ServiceDesc for MemberSignLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberSignLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberSignLogService",
	HandlerType: (*MemberSignLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberSignLog",
			Handler:    _MemberSignLogService_AddMemberSignLog_Handler,
		},
		{
			MethodName: "QueryMemberSignLogDetail",
			Handler:    _MemberSignLogService_QueryMemberSignLogDetail_Handler,
		},
		{
			MethodName: "QueryMemberSignLogList",
			Handler:    _MemberSignLogService_QueryMemberSignLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberStatisticsInfoService_AddMemberStatisticsInfo_FullMethodName         = "/umsclient.MemberStatisticsInfoService/AddMemberStatisticsInfo"
	MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_FullMethodName = "/umsclient.MemberStatisticsInfoService/QueryMemberStatisticsInfoDetail"
	MemberStatisticsInfoService_QueryMemberStatisticsInfoList_FullMethodName   = "/umsclient.MemberStatisticsInfoService/QueryMemberStatisticsInfoList"
)

// MemberStatisticsInfoServiceClient is the client API for MemberStatisticsInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberStatisticsInfoServiceClient interface {
	// 添加会员统计信息
	AddMemberStatisticsInfo(ctx context.Context, in *AddMemberStatisticsInfoReq, opts ...grpc.CallOption) (*AddMemberStatisticsInfoResp, error)
	// 查询会员统计信息详情
	QueryMemberStatisticsInfoDetail(ctx context.Context, in *QueryMemberStatisticsInfoDetailReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoDetailResp, error)
	// 查询会员统计信息列表
	QueryMemberStatisticsInfoList(ctx context.Context, in *QueryMemberStatisticsInfoListReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoListResp, error)
}

type memberStatisticsInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberStatisticsInfoServiceClient(cc grpc.ClientConnInterface) MemberStatisticsInfoServiceClient {
	return &memberStatisticsInfoServiceClient{cc}
}

func (c *memberStatisticsInfoServiceClient) AddMemberStatisticsInfo(ctx context.Context, in *AddMemberStatisticsInfoReq, opts ...grpc.CallOption) (*AddMemberStatisticsInfoResp, error) {
	out := new(AddMemberStatisticsInfoResp)
	err := c.cc.Invoke(ctx, MemberStatisticsInfoService_AddMemberStatisticsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberStatisticsInfoServiceClient) QueryMemberStatisticsInfoDetail(ctx context.Context, in *QueryMemberStatisticsInfoDetailReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoDetailResp, error) {
	out := new(QueryMemberStatisticsInfoDetailResp)
	err := c.cc.Invoke(ctx, MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberStatisticsInfoServiceClient) QueryMemberStatisticsInfoList(ctx context.Context, in *QueryMemberStatisticsInfoListReq, opts ...grpc.CallOption) (*QueryMemberStatisticsInfoListResp, error) {
	out := new(QueryMemberStatisticsInfoListResp)
	err := c.cc.Invoke(ctx, MemberStatisticsInfoService_QueryMemberStatisticsInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberStatisticsInfoServiceServer is the server API for MemberStatisticsInfoService service.
// All implementations must embed UnimplementedMemberStatisticsInfoServiceServer
// for forward compatibility
type MemberStatisticsInfoServiceServer interface {
	// 添加会员统计信息
	AddMemberStatisticsInfo(context.Context, *AddMemberStatisticsInfoReq) (*AddMemberStatisticsInfoResp, error)
	// 查询会员统计信息详情
	QueryMemberStatisticsInfoDetail(context.Context, *QueryMemberStatisticsInfoDetailReq) (*QueryMemberStatisticsInfoDetailResp, error)
	// 查询会员统计信息列表
	QueryMemberStatisticsInfoList(context.Context, *QueryMemberStatisticsInfoListReq) (*QueryMemberStatisticsInfoListResp, error)
	mustEmbedUnimplementedMemberStatisticsInfoServiceServer()
}

// UnimplementedMemberStatisticsInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberStatisticsInfoServiceServer struct {
}

func (UnimplementedMemberStatisticsInfoServiceServer) AddMemberStatisticsInfo(context.Context, *AddMemberStatisticsInfoReq) (*AddMemberStatisticsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberStatisticsInfo not implemented")
}
func (UnimplementedMemberStatisticsInfoServiceServer) QueryMemberStatisticsInfoDetail(context.Context, *QueryMemberStatisticsInfoDetailReq) (*QueryMemberStatisticsInfoDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberStatisticsInfoDetail not implemented")
}
func (UnimplementedMemberStatisticsInfoServiceServer) QueryMemberStatisticsInfoList(context.Context, *QueryMemberStatisticsInfoListReq) (*QueryMemberStatisticsInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberStatisticsInfoList not implemented")
}
func (UnimplementedMemberStatisticsInfoServiceServer) mustEmbedUnimplementedMemberStatisticsInfoServiceServer() {
}

// UnsafeMemberStatisticsInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberStatisticsInfoServiceServer will
// result in compilation errors.
type UnsafeMemberStatisticsInfoServiceServer interface {
	mustEmbedUnimplementedMemberStatisticsInfoServiceServer()
}

func RegisterMemberStatisticsInfoServiceServer(s grpc.ServiceRegistrar, srv MemberStatisticsInfoServiceServer) {
	s.RegisterService(&MemberStatisticsInfoService_ServiceDesc, srv)
}

func _MemberStatisticsInfoService_AddMemberStatisticsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberStatisticsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberStatisticsInfoServiceServer).AddMemberStatisticsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberStatisticsInfoService_AddMemberStatisticsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberStatisticsInfoServiceServer).AddMemberStatisticsInfo(ctx, req.(*AddMemberStatisticsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberStatisticsInfoDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoDetail(ctx, req.(*QueryMemberStatisticsInfoDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberStatisticsInfoService_QueryMemberStatisticsInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberStatisticsInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberStatisticsInfoService_QueryMemberStatisticsInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberStatisticsInfoServiceServer).QueryMemberStatisticsInfoList(ctx, req.(*QueryMemberStatisticsInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberStatisticsInfoService_ServiceDesc is the grpc.ServiceDesc for MemberStatisticsInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberStatisticsInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberStatisticsInfoService",
	HandlerType: (*MemberStatisticsInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberStatisticsInfo",
			Handler:    _MemberStatisticsInfoService_AddMemberStatisticsInfo_Handler,
		},
		{
			MethodName: "QueryMemberStatisticsInfoDetail",
			Handler:    _MemberStatisticsInfoService_QueryMemberStatisticsInfoDetail_Handler,
		},
		{
			MethodName: "QueryMemberStatisticsInfoList",
			Handler:    _MemberStatisticsInfoService_QueryMemberStatisticsInfoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberTagService_AddMemberTag_FullMethodName          = "/umsclient.MemberTagService/AddMemberTag"
	MemberTagService_DeleteMemberTag_FullMethodName       = "/umsclient.MemberTagService/DeleteMemberTag"
	MemberTagService_UpdateMemberTag_FullMethodName       = "/umsclient.MemberTagService/UpdateMemberTag"
	MemberTagService_UpdateMemberTagStatus_FullMethodName = "/umsclient.MemberTagService/UpdateMemberTagStatus"
	MemberTagService_QueryMemberTagDetail_FullMethodName  = "/umsclient.MemberTagService/QueryMemberTagDetail"
	MemberTagService_QueryMemberTagList_FullMethodName    = "/umsclient.MemberTagService/QueryMemberTagList"
)

// MemberTagServiceClient is the client API for MemberTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberTagServiceClient interface {
	// 添加用户标签
	AddMemberTag(ctx context.Context, in *AddMemberTagReq, opts ...grpc.CallOption) (*AddMemberTagResp, error)
	// 删除用户标签
	DeleteMemberTag(ctx context.Context, in *DeleteMemberTagReq, opts ...grpc.CallOption) (*DeleteMemberTagResp, error)
	// 更新用户标签
	UpdateMemberTag(ctx context.Context, in *UpdateMemberTagReq, opts ...grpc.CallOption) (*UpdateMemberTagResp, error)
	// 更新用户标签状态
	UpdateMemberTagStatus(ctx context.Context, in *UpdateMemberTagStatusReq, opts ...grpc.CallOption) (*UpdateMemberTagStatusResp, error)
	// 查询用户标签详情
	QueryMemberTagDetail(ctx context.Context, in *QueryMemberTagDetailReq, opts ...grpc.CallOption) (*QueryMemberTagDetailResp, error)
	// 查询用户标签列表
	QueryMemberTagList(ctx context.Context, in *QueryMemberTagListReq, opts ...grpc.CallOption) (*QueryMemberTagListResp, error)
}

type memberTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberTagServiceClient(cc grpc.ClientConnInterface) MemberTagServiceClient {
	return &memberTagServiceClient{cc}
}

func (c *memberTagServiceClient) AddMemberTag(ctx context.Context, in *AddMemberTagReq, opts ...grpc.CallOption) (*AddMemberTagResp, error) {
	out := new(AddMemberTagResp)
	err := c.cc.Invoke(ctx, MemberTagService_AddMemberTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) DeleteMemberTag(ctx context.Context, in *DeleteMemberTagReq, opts ...grpc.CallOption) (*DeleteMemberTagResp, error) {
	out := new(DeleteMemberTagResp)
	err := c.cc.Invoke(ctx, MemberTagService_DeleteMemberTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) UpdateMemberTag(ctx context.Context, in *UpdateMemberTagReq, opts ...grpc.CallOption) (*UpdateMemberTagResp, error) {
	out := new(UpdateMemberTagResp)
	err := c.cc.Invoke(ctx, MemberTagService_UpdateMemberTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) UpdateMemberTagStatus(ctx context.Context, in *UpdateMemberTagStatusReq, opts ...grpc.CallOption) (*UpdateMemberTagStatusResp, error) {
	out := new(UpdateMemberTagStatusResp)
	err := c.cc.Invoke(ctx, MemberTagService_UpdateMemberTagStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) QueryMemberTagDetail(ctx context.Context, in *QueryMemberTagDetailReq, opts ...grpc.CallOption) (*QueryMemberTagDetailResp, error) {
	out := new(QueryMemberTagDetailResp)
	err := c.cc.Invoke(ctx, MemberTagService_QueryMemberTagDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagServiceClient) QueryMemberTagList(ctx context.Context, in *QueryMemberTagListReq, opts ...grpc.CallOption) (*QueryMemberTagListResp, error) {
	out := new(QueryMemberTagListResp)
	err := c.cc.Invoke(ctx, MemberTagService_QueryMemberTagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberTagServiceServer is the server API for MemberTagService service.
// All implementations must embed UnimplementedMemberTagServiceServer
// for forward compatibility
type MemberTagServiceServer interface {
	// 添加用户标签
	AddMemberTag(context.Context, *AddMemberTagReq) (*AddMemberTagResp, error)
	// 删除用户标签
	DeleteMemberTag(context.Context, *DeleteMemberTagReq) (*DeleteMemberTagResp, error)
	// 更新用户标签
	UpdateMemberTag(context.Context, *UpdateMemberTagReq) (*UpdateMemberTagResp, error)
	// 更新用户标签状态
	UpdateMemberTagStatus(context.Context, *UpdateMemberTagStatusReq) (*UpdateMemberTagStatusResp, error)
	// 查询用户标签详情
	QueryMemberTagDetail(context.Context, *QueryMemberTagDetailReq) (*QueryMemberTagDetailResp, error)
	// 查询用户标签列表
	QueryMemberTagList(context.Context, *QueryMemberTagListReq) (*QueryMemberTagListResp, error)
	mustEmbedUnimplementedMemberTagServiceServer()
}

// UnimplementedMemberTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberTagServiceServer struct {
}

func (UnimplementedMemberTagServiceServer) AddMemberTag(context.Context, *AddMemberTagReq) (*AddMemberTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberTag not implemented")
}
func (UnimplementedMemberTagServiceServer) DeleteMemberTag(context.Context, *DeleteMemberTagReq) (*DeleteMemberTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberTag not implemented")
}
func (UnimplementedMemberTagServiceServer) UpdateMemberTag(context.Context, *UpdateMemberTagReq) (*UpdateMemberTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTag not implemented")
}
func (UnimplementedMemberTagServiceServer) UpdateMemberTagStatus(context.Context, *UpdateMemberTagStatusReq) (*UpdateMemberTagStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTagStatus not implemented")
}
func (UnimplementedMemberTagServiceServer) QueryMemberTagDetail(context.Context, *QueryMemberTagDetailReq) (*QueryMemberTagDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTagDetail not implemented")
}
func (UnimplementedMemberTagServiceServer) QueryMemberTagList(context.Context, *QueryMemberTagListReq) (*QueryMemberTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTagList not implemented")
}
func (UnimplementedMemberTagServiceServer) mustEmbedUnimplementedMemberTagServiceServer() {}

// UnsafeMemberTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberTagServiceServer will
// result in compilation errors.
type UnsafeMemberTagServiceServer interface {
	mustEmbedUnimplementedMemberTagServiceServer()
}

func RegisterMemberTagServiceServer(s grpc.ServiceRegistrar, srv MemberTagServiceServer) {
	s.RegisterService(&MemberTagService_ServiceDesc, srv)
}

func _MemberTagService_AddMemberTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).AddMemberTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_AddMemberTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).AddMemberTag(ctx, req.(*AddMemberTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_DeleteMemberTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).DeleteMemberTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_DeleteMemberTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).DeleteMemberTag(ctx, req.(*DeleteMemberTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_UpdateMemberTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).UpdateMemberTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_UpdateMemberTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).UpdateMemberTag(ctx, req.(*UpdateMemberTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_UpdateMemberTagStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTagStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).UpdateMemberTagStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_UpdateMemberTagStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).UpdateMemberTagStatus(ctx, req.(*UpdateMemberTagStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_QueryMemberTagDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTagDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).QueryMemberTagDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_QueryMemberTagDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).QueryMemberTagDetail(ctx, req.(*QueryMemberTagDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagService_QueryMemberTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagServiceServer).QueryMemberTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagService_QueryMemberTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagServiceServer).QueryMemberTagList(ctx, req.(*QueryMemberTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberTagService_ServiceDesc is the grpc.ServiceDesc for MemberTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberTagService",
	HandlerType: (*MemberTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberTag",
			Handler:    _MemberTagService_AddMemberTag_Handler,
		},
		{
			MethodName: "DeleteMemberTag",
			Handler:    _MemberTagService_DeleteMemberTag_Handler,
		},
		{
			MethodName: "UpdateMemberTag",
			Handler:    _MemberTagService_UpdateMemberTag_Handler,
		},
		{
			MethodName: "UpdateMemberTagStatus",
			Handler:    _MemberTagService_UpdateMemberTagStatus_Handler,
		},
		{
			MethodName: "QueryMemberTagDetail",
			Handler:    _MemberTagService_QueryMemberTagDetail_Handler,
		},
		{
			MethodName: "QueryMemberTagList",
			Handler:    _MemberTagService_QueryMemberTagList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberTagRelationService_AddMemberTagRelation_FullMethodName         = "/umsclient.MemberTagRelationService/AddMemberTagRelation"
	MemberTagRelationService_QueryMemberTagRelationDetail_FullMethodName = "/umsclient.MemberTagRelationService/QueryMemberTagRelationDetail"
	MemberTagRelationService_QueryMemberTagRelationList_FullMethodName   = "/umsclient.MemberTagRelationService/QueryMemberTagRelationList"
)

// MemberTagRelationServiceClient is the client API for MemberTagRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberTagRelationServiceClient interface {
	// 添加会员标签关联
	AddMemberTagRelation(ctx context.Context, in *AddMemberTagRelationReq, opts ...grpc.CallOption) (*AddMemberTagRelationResp, error)
	// 查询会员标签关联详情
	QueryMemberTagRelationDetail(ctx context.Context, in *QueryMemberTagRelationDetailReq, opts ...grpc.CallOption) (*QueryMemberTagRelationDetailResp, error)
	// 查询会员标签关联列表
	QueryMemberTagRelationList(ctx context.Context, in *QueryMemberTagRelationListReq, opts ...grpc.CallOption) (*QueryMemberTagRelationListResp, error)
}

type memberTagRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberTagRelationServiceClient(cc grpc.ClientConnInterface) MemberTagRelationServiceClient {
	return &memberTagRelationServiceClient{cc}
}

func (c *memberTagRelationServiceClient) AddMemberTagRelation(ctx context.Context, in *AddMemberTagRelationReq, opts ...grpc.CallOption) (*AddMemberTagRelationResp, error) {
	out := new(AddMemberTagRelationResp)
	err := c.cc.Invoke(ctx, MemberTagRelationService_AddMemberTagRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagRelationServiceClient) QueryMemberTagRelationDetail(ctx context.Context, in *QueryMemberTagRelationDetailReq, opts ...grpc.CallOption) (*QueryMemberTagRelationDetailResp, error) {
	out := new(QueryMemberTagRelationDetailResp)
	err := c.cc.Invoke(ctx, MemberTagRelationService_QueryMemberTagRelationDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTagRelationServiceClient) QueryMemberTagRelationList(ctx context.Context, in *QueryMemberTagRelationListReq, opts ...grpc.CallOption) (*QueryMemberTagRelationListResp, error) {
	out := new(QueryMemberTagRelationListResp)
	err := c.cc.Invoke(ctx, MemberTagRelationService_QueryMemberTagRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberTagRelationServiceServer is the server API for MemberTagRelationService service.
// All implementations must embed UnimplementedMemberTagRelationServiceServer
// for forward compatibility
type MemberTagRelationServiceServer interface {
	// 添加会员标签关联
	AddMemberTagRelation(context.Context, *AddMemberTagRelationReq) (*AddMemberTagRelationResp, error)
	// 查询会员标签关联详情
	QueryMemberTagRelationDetail(context.Context, *QueryMemberTagRelationDetailReq) (*QueryMemberTagRelationDetailResp, error)
	// 查询会员标签关联列表
	QueryMemberTagRelationList(context.Context, *QueryMemberTagRelationListReq) (*QueryMemberTagRelationListResp, error)
	mustEmbedUnimplementedMemberTagRelationServiceServer()
}

// UnimplementedMemberTagRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberTagRelationServiceServer struct {
}

func (UnimplementedMemberTagRelationServiceServer) AddMemberTagRelation(context.Context, *AddMemberTagRelationReq) (*AddMemberTagRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberTagRelation not implemented")
}
func (UnimplementedMemberTagRelationServiceServer) QueryMemberTagRelationDetail(context.Context, *QueryMemberTagRelationDetailReq) (*QueryMemberTagRelationDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTagRelationDetail not implemented")
}
func (UnimplementedMemberTagRelationServiceServer) QueryMemberTagRelationList(context.Context, *QueryMemberTagRelationListReq) (*QueryMemberTagRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTagRelationList not implemented")
}
func (UnimplementedMemberTagRelationServiceServer) mustEmbedUnimplementedMemberTagRelationServiceServer() {
}

// UnsafeMemberTagRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberTagRelationServiceServer will
// result in compilation errors.
type UnsafeMemberTagRelationServiceServer interface {
	mustEmbedUnimplementedMemberTagRelationServiceServer()
}

func RegisterMemberTagRelationServiceServer(s grpc.ServiceRegistrar, srv MemberTagRelationServiceServer) {
	s.RegisterService(&MemberTagRelationService_ServiceDesc, srv)
}

func _MemberTagRelationService_AddMemberTagRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberTagRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagRelationServiceServer).AddMemberTagRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagRelationService_AddMemberTagRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagRelationServiceServer).AddMemberTagRelation(ctx, req.(*AddMemberTagRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagRelationService_QueryMemberTagRelationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTagRelationDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagRelationServiceServer).QueryMemberTagRelationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagRelationService_QueryMemberTagRelationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagRelationServiceServer).QueryMemberTagRelationDetail(ctx, req.(*QueryMemberTagRelationDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTagRelationService_QueryMemberTagRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTagRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTagRelationServiceServer).QueryMemberTagRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTagRelationService_QueryMemberTagRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTagRelationServiceServer).QueryMemberTagRelationList(ctx, req.(*QueryMemberTagRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberTagRelationService_ServiceDesc is the grpc.ServiceDesc for MemberTagRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberTagRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberTagRelationService",
	HandlerType: (*MemberTagRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberTagRelation",
			Handler:    _MemberTagRelationService_AddMemberTagRelation_Handler,
		},
		{
			MethodName: "QueryMemberTagRelationDetail",
			Handler:    _MemberTagRelationService_QueryMemberTagRelationDetail_Handler,
		},
		{
			MethodName: "QueryMemberTagRelationList",
			Handler:    _MemberTagRelationService_QueryMemberTagRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberTaskService_AddMemberTask_FullMethodName          = "/umsclient.MemberTaskService/AddMemberTask"
	MemberTaskService_DeleteMemberTask_FullMethodName       = "/umsclient.MemberTaskService/DeleteMemberTask"
	MemberTaskService_UpdateMemberTask_FullMethodName       = "/umsclient.MemberTaskService/UpdateMemberTask"
	MemberTaskService_UpdateMemberTaskStatus_FullMethodName = "/umsclient.MemberTaskService/UpdateMemberTaskStatus"
	MemberTaskService_QueryMemberTaskDetail_FullMethodName  = "/umsclient.MemberTaskService/QueryMemberTaskDetail"
	MemberTaskService_QueryMemberTaskList_FullMethodName    = "/umsclient.MemberTaskService/QueryMemberTaskList"
)

// MemberTaskServiceClient is the client API for MemberTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberTaskServiceClient interface {
	// 添加会员任务
	AddMemberTask(ctx context.Context, in *AddMemberTaskReq, opts ...grpc.CallOption) (*AddMemberTaskResp, error)
	// 删除会员任务
	DeleteMemberTask(ctx context.Context, in *DeleteMemberTaskReq, opts ...grpc.CallOption) (*DeleteMemberTaskResp, error)
	// 更新会员任务
	UpdateMemberTask(ctx context.Context, in *UpdateMemberTaskReq, opts ...grpc.CallOption) (*UpdateMemberTaskResp, error)
	// 更新会员任务状态
	UpdateMemberTaskStatus(ctx context.Context, in *UpdateMemberTaskStatusReq, opts ...grpc.CallOption) (*UpdateMemberTaskStatusResp, error)
	// 查询会员任务详情
	QueryMemberTaskDetail(ctx context.Context, in *QueryMemberTaskDetailReq, opts ...grpc.CallOption) (*QueryMemberTaskDetailResp, error)
	// 查询会员任务列表
	QueryMemberTaskList(ctx context.Context, in *QueryMemberTaskListReq, opts ...grpc.CallOption) (*QueryMemberTaskListResp, error)
}

type memberTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberTaskServiceClient(cc grpc.ClientConnInterface) MemberTaskServiceClient {
	return &memberTaskServiceClient{cc}
}

func (c *memberTaskServiceClient) AddMemberTask(ctx context.Context, in *AddMemberTaskReq, opts ...grpc.CallOption) (*AddMemberTaskResp, error) {
	out := new(AddMemberTaskResp)
	err := c.cc.Invoke(ctx, MemberTaskService_AddMemberTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) DeleteMemberTask(ctx context.Context, in *DeleteMemberTaskReq, opts ...grpc.CallOption) (*DeleteMemberTaskResp, error) {
	out := new(DeleteMemberTaskResp)
	err := c.cc.Invoke(ctx, MemberTaskService_DeleteMemberTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) UpdateMemberTask(ctx context.Context, in *UpdateMemberTaskReq, opts ...grpc.CallOption) (*UpdateMemberTaskResp, error) {
	out := new(UpdateMemberTaskResp)
	err := c.cc.Invoke(ctx, MemberTaskService_UpdateMemberTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) UpdateMemberTaskStatus(ctx context.Context, in *UpdateMemberTaskStatusReq, opts ...grpc.CallOption) (*UpdateMemberTaskStatusResp, error) {
	out := new(UpdateMemberTaskStatusResp)
	err := c.cc.Invoke(ctx, MemberTaskService_UpdateMemberTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) QueryMemberTaskDetail(ctx context.Context, in *QueryMemberTaskDetailReq, opts ...grpc.CallOption) (*QueryMemberTaskDetailResp, error) {
	out := new(QueryMemberTaskDetailResp)
	err := c.cc.Invoke(ctx, MemberTaskService_QueryMemberTaskDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskServiceClient) QueryMemberTaskList(ctx context.Context, in *QueryMemberTaskListReq, opts ...grpc.CallOption) (*QueryMemberTaskListResp, error) {
	out := new(QueryMemberTaskListResp)
	err := c.cc.Invoke(ctx, MemberTaskService_QueryMemberTaskList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberTaskServiceServer is the server API for MemberTaskService service.
// All implementations must embed UnimplementedMemberTaskServiceServer
// for forward compatibility
type MemberTaskServiceServer interface {
	// 添加会员任务
	AddMemberTask(context.Context, *AddMemberTaskReq) (*AddMemberTaskResp, error)
	// 删除会员任务
	DeleteMemberTask(context.Context, *DeleteMemberTaskReq) (*DeleteMemberTaskResp, error)
	// 更新会员任务
	UpdateMemberTask(context.Context, *UpdateMemberTaskReq) (*UpdateMemberTaskResp, error)
	// 更新会员任务状态
	UpdateMemberTaskStatus(context.Context, *UpdateMemberTaskStatusReq) (*UpdateMemberTaskStatusResp, error)
	// 查询会员任务详情
	QueryMemberTaskDetail(context.Context, *QueryMemberTaskDetailReq) (*QueryMemberTaskDetailResp, error)
	// 查询会员任务列表
	QueryMemberTaskList(context.Context, *QueryMemberTaskListReq) (*QueryMemberTaskListResp, error)
	mustEmbedUnimplementedMemberTaskServiceServer()
}

// UnimplementedMemberTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberTaskServiceServer struct {
}

func (UnimplementedMemberTaskServiceServer) AddMemberTask(context.Context, *AddMemberTaskReq) (*AddMemberTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberTask not implemented")
}
func (UnimplementedMemberTaskServiceServer) DeleteMemberTask(context.Context, *DeleteMemberTaskReq) (*DeleteMemberTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberTask not implemented")
}
func (UnimplementedMemberTaskServiceServer) UpdateMemberTask(context.Context, *UpdateMemberTaskReq) (*UpdateMemberTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTask not implemented")
}
func (UnimplementedMemberTaskServiceServer) UpdateMemberTaskStatus(context.Context, *UpdateMemberTaskStatusReq) (*UpdateMemberTaskStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberTaskStatus not implemented")
}
func (UnimplementedMemberTaskServiceServer) QueryMemberTaskDetail(context.Context, *QueryMemberTaskDetailReq) (*QueryMemberTaskDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTaskDetail not implemented")
}
func (UnimplementedMemberTaskServiceServer) QueryMemberTaskList(context.Context, *QueryMemberTaskListReq) (*QueryMemberTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTaskList not implemented")
}
func (UnimplementedMemberTaskServiceServer) mustEmbedUnimplementedMemberTaskServiceServer() {}

// UnsafeMemberTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberTaskServiceServer will
// result in compilation errors.
type UnsafeMemberTaskServiceServer interface {
	mustEmbedUnimplementedMemberTaskServiceServer()
}

func RegisterMemberTaskServiceServer(s grpc.ServiceRegistrar, srv MemberTaskServiceServer) {
	s.RegisterService(&MemberTaskService_ServiceDesc, srv)
}

func _MemberTaskService_AddMemberTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).AddMemberTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_AddMemberTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).AddMemberTask(ctx, req.(*AddMemberTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_DeleteMemberTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).DeleteMemberTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_DeleteMemberTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).DeleteMemberTask(ctx, req.(*DeleteMemberTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_UpdateMemberTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).UpdateMemberTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_UpdateMemberTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).UpdateMemberTask(ctx, req.(*UpdateMemberTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_UpdateMemberTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberTaskStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).UpdateMemberTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_UpdateMemberTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).UpdateMemberTaskStatus(ctx, req.(*UpdateMemberTaskStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_QueryMemberTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTaskDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).QueryMemberTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_QueryMemberTaskDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).QueryMemberTaskDetail(ctx, req.(*QueryMemberTaskDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskService_QueryMemberTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskServiceServer).QueryMemberTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskService_QueryMemberTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskServiceServer).QueryMemberTaskList(ctx, req.(*QueryMemberTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberTaskService_ServiceDesc is the grpc.ServiceDesc for MemberTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberTaskService",
	HandlerType: (*MemberTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberTask",
			Handler:    _MemberTaskService_AddMemberTask_Handler,
		},
		{
			MethodName: "DeleteMemberTask",
			Handler:    _MemberTaskService_DeleteMemberTask_Handler,
		},
		{
			MethodName: "UpdateMemberTask",
			Handler:    _MemberTaskService_UpdateMemberTask_Handler,
		},
		{
			MethodName: "UpdateMemberTaskStatus",
			Handler:    _MemberTaskService_UpdateMemberTaskStatus_Handler,
		},
		{
			MethodName: "QueryMemberTaskDetail",
			Handler:    _MemberTaskService_QueryMemberTaskDetail_Handler,
		},
		{
			MethodName: "QueryMemberTaskList",
			Handler:    _MemberTaskService_QueryMemberTaskList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}

const (
	MemberTaskRelationService_AddMemberTaskRelation_FullMethodName         = "/umsclient.MemberTaskRelationService/AddMemberTaskRelation"
	MemberTaskRelationService_QueryMemberTaskRelationDetail_FullMethodName = "/umsclient.MemberTaskRelationService/QueryMemberTaskRelationDetail"
	MemberTaskRelationService_QueryMemberTaskRelationList_FullMethodName   = "/umsclient.MemberTaskRelationService/QueryMemberTaskRelationList"
)

// MemberTaskRelationServiceClient is the client API for MemberTaskRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberTaskRelationServiceClient interface {
	// 添加会员任务关联
	AddMemberTaskRelation(ctx context.Context, in *AddMemberTaskRelationReq, opts ...grpc.CallOption) (*AddMemberTaskRelationResp, error)
	// 查询会员任务关联详情
	QueryMemberTaskRelationDetail(ctx context.Context, in *QueryMemberTaskRelationDetailReq, opts ...grpc.CallOption) (*QueryMemberTaskRelationDetailResp, error)
	// 查询会员任务关联列表
	QueryMemberTaskRelationList(ctx context.Context, in *QueryMemberTaskRelationListReq, opts ...grpc.CallOption) (*QueryMemberTaskRelationListResp, error)
}

type memberTaskRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberTaskRelationServiceClient(cc grpc.ClientConnInterface) MemberTaskRelationServiceClient {
	return &memberTaskRelationServiceClient{cc}
}

func (c *memberTaskRelationServiceClient) AddMemberTaskRelation(ctx context.Context, in *AddMemberTaskRelationReq, opts ...grpc.CallOption) (*AddMemberTaskRelationResp, error) {
	out := new(AddMemberTaskRelationResp)
	err := c.cc.Invoke(ctx, MemberTaskRelationService_AddMemberTaskRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskRelationServiceClient) QueryMemberTaskRelationDetail(ctx context.Context, in *QueryMemberTaskRelationDetailReq, opts ...grpc.CallOption) (*QueryMemberTaskRelationDetailResp, error) {
	out := new(QueryMemberTaskRelationDetailResp)
	err := c.cc.Invoke(ctx, MemberTaskRelationService_QueryMemberTaskRelationDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberTaskRelationServiceClient) QueryMemberTaskRelationList(ctx context.Context, in *QueryMemberTaskRelationListReq, opts ...grpc.CallOption) (*QueryMemberTaskRelationListResp, error) {
	out := new(QueryMemberTaskRelationListResp)
	err := c.cc.Invoke(ctx, MemberTaskRelationService_QueryMemberTaskRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberTaskRelationServiceServer is the server API for MemberTaskRelationService service.
// All implementations must embed UnimplementedMemberTaskRelationServiceServer
// for forward compatibility
type MemberTaskRelationServiceServer interface {
	// 添加会员任务关联
	AddMemberTaskRelation(context.Context, *AddMemberTaskRelationReq) (*AddMemberTaskRelationResp, error)
	// 查询会员任务关联详情
	QueryMemberTaskRelationDetail(context.Context, *QueryMemberTaskRelationDetailReq) (*QueryMemberTaskRelationDetailResp, error)
	// 查询会员任务关联列表
	QueryMemberTaskRelationList(context.Context, *QueryMemberTaskRelationListReq) (*QueryMemberTaskRelationListResp, error)
	mustEmbedUnimplementedMemberTaskRelationServiceServer()
}

// UnimplementedMemberTaskRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberTaskRelationServiceServer struct {
}

func (UnimplementedMemberTaskRelationServiceServer) AddMemberTaskRelation(context.Context, *AddMemberTaskRelationReq) (*AddMemberTaskRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberTaskRelation not implemented")
}
func (UnimplementedMemberTaskRelationServiceServer) QueryMemberTaskRelationDetail(context.Context, *QueryMemberTaskRelationDetailReq) (*QueryMemberTaskRelationDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTaskRelationDetail not implemented")
}
func (UnimplementedMemberTaskRelationServiceServer) QueryMemberTaskRelationList(context.Context, *QueryMemberTaskRelationListReq) (*QueryMemberTaskRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberTaskRelationList not implemented")
}
func (UnimplementedMemberTaskRelationServiceServer) mustEmbedUnimplementedMemberTaskRelationServiceServer() {
}

// UnsafeMemberTaskRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberTaskRelationServiceServer will
// result in compilation errors.
type UnsafeMemberTaskRelationServiceServer interface {
	mustEmbedUnimplementedMemberTaskRelationServiceServer()
}

func RegisterMemberTaskRelationServiceServer(s grpc.ServiceRegistrar, srv MemberTaskRelationServiceServer) {
	s.RegisterService(&MemberTaskRelationService_ServiceDesc, srv)
}

func _MemberTaskRelationService_AddMemberTaskRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberTaskRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskRelationServiceServer).AddMemberTaskRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskRelationService_AddMemberTaskRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskRelationServiceServer).AddMemberTaskRelation(ctx, req.(*AddMemberTaskRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskRelationService_QueryMemberTaskRelationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTaskRelationDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskRelationServiceServer).QueryMemberTaskRelationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskRelationService_QueryMemberTaskRelationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskRelationServiceServer).QueryMemberTaskRelationDetail(ctx, req.(*QueryMemberTaskRelationDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberTaskRelationService_QueryMemberTaskRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberTaskRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberTaskRelationServiceServer).QueryMemberTaskRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberTaskRelationService_QueryMemberTaskRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberTaskRelationServiceServer).QueryMemberTaskRelationList(ctx, req.(*QueryMemberTaskRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberTaskRelationService_ServiceDesc is the grpc.ServiceDesc for MemberTaskRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberTaskRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "umsclient.MemberTaskRelationService",
	HandlerType: (*MemberTaskRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMemberTaskRelation",
			Handler:    _MemberTaskRelationService_AddMemberTaskRelation_Handler,
		},
		{
			MethodName: "QueryMemberTaskRelationDetail",
			Handler:    _MemberTaskRelationService_QueryMemberTaskRelationDetail_Handler,
		},
		{
			MethodName: "QueryMemberTaskRelationList",
			Handler:    _MemberTaskRelationService_QueryMemberTaskRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ums/ums.proto",
}
