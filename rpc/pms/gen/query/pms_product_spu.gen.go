// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductSpu(db *gorm.DB, opts ...gen.DOOption) pmsProductSpu {
	_pmsProductSpu := pmsProductSpu{}

	_pmsProductSpu.pmsProductSpuDo.UseDB(db, opts...)
	_pmsProductSpu.pmsProductSpuDo.UseModel(&model.PmsProductSpu{})

	tableName := _pmsProductSpu.pmsProductSpuDo.TableName()
	_pmsProductSpu.ALL = field.NewAsterisk(tableName)
	_pmsProductSpu.ID = field.NewInt64(tableName, "id")
	_pmsProductSpu.Name = field.NewString(tableName, "name")
	_pmsProductSpu.ProductSn = field.NewString(tableName, "product_sn")
	_pmsProductSpu.CategoryID = field.NewInt64(tableName, "category_id")
	_pmsProductSpu.CategoryIds = field.NewString(tableName, "category_ids")
	_pmsProductSpu.CategoryName = field.NewString(tableName, "category_name")
	_pmsProductSpu.BrandID = field.NewInt64(tableName, "brand_id")
	_pmsProductSpu.BrandName = field.NewString(tableName, "brand_name")
	_pmsProductSpu.Unit = field.NewString(tableName, "unit")
	_pmsProductSpu.Weight = field.NewFloat64(tableName, "weight")
	_pmsProductSpu.Keywords = field.NewString(tableName, "keywords")
	_pmsProductSpu.Brief = field.NewString(tableName, "brief")
	_pmsProductSpu.Description = field.NewString(tableName, "description")
	_pmsProductSpu.AlbumPics = field.NewString(tableName, "album_pics")
	_pmsProductSpu.MainPic = field.NewString(tableName, "main_pic")
	_pmsProductSpu.PriceRange = field.NewString(tableName, "price_range")
	_pmsProductSpu.PublishStatus = field.NewInt32(tableName, "publish_status")
	_pmsProductSpu.NewStatus = field.NewInt32(tableName, "new_status")
	_pmsProductSpu.RecommendStatus = field.NewInt32(tableName, "recommend_status")
	_pmsProductSpu.VerifyStatus = field.NewInt32(tableName, "verify_status")
	_pmsProductSpu.PreviewStatus = field.NewInt32(tableName, "preview_status")
	_pmsProductSpu.Sort = field.NewInt32(tableName, "sort")
	_pmsProductSpu.NewStatusSort = field.NewInt32(tableName, "new_status_sort")
	_pmsProductSpu.RecommendStatusSort = field.NewInt32(tableName, "recommend_status_sort")
	_pmsProductSpu.Sales = field.NewInt32(tableName, "sales")
	_pmsProductSpu.Stock = field.NewInt32(tableName, "stock")
	_pmsProductSpu.LowStock = field.NewInt32(tableName, "low_stock")
	_pmsProductSpu.PromotionType = field.NewInt32(tableName, "promotion_type")
	_pmsProductSpu.DetailTitle = field.NewString(tableName, "detail_title")
	_pmsProductSpu.DetailDesc = field.NewString(tableName, "detail_desc")
	_pmsProductSpu.DetailHTML = field.NewString(tableName, "detail_html")
	_pmsProductSpu.DetailMobileHTML = field.NewString(tableName, "detail_mobile_html")
	_pmsProductSpu.CreateBy = field.NewInt64(tableName, "create_by")
	_pmsProductSpu.CreateTime = field.NewTime(tableName, "create_time")
	_pmsProductSpu.UpdateBy = field.NewInt64(tableName, "update_by")
	_pmsProductSpu.UpdateTime = field.NewTime(tableName, "update_time")
	_pmsProductSpu.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_pmsProductSpu.fillFieldMap()

	return _pmsProductSpu
}

// pmsProductSpu 商品SPU表
type pmsProductSpu struct {
	pmsProductSpuDo pmsProductSpuDo

	ALL                 field.Asterisk
	ID                  field.Int64   // 商品SpuId
	Name                field.String  // 商品名称
	ProductSn           field.String  // 商品货号
	CategoryID          field.Int64   // 商品分类ID
	CategoryIds         field.String  // 商品分类ID集合
	CategoryName        field.String  // 商品分类名称
	BrandID             field.Int64   // 品牌ID
	BrandName           field.String  // 品牌名称
	Unit                field.String  // 单位
	Weight              field.Float64 // 重量(kg)
	Keywords            field.String  // 关键词
	Brief               field.String  // 简介
	Description         field.String  // 详细描述
	AlbumPics           field.String  // 画册图片，最多8张，以逗号分割
	MainPic             field.String  // 主图
	PriceRange          field.String  // 价格区间
	PublishStatus       field.Int32   // 上架状态：0-下架，1-上架
	NewStatus           field.Int32   // 新品状态:0->不是新品；1->新品
	RecommendStatus     field.Int32   // 推荐状态；0->不推荐；1->推荐
	VerifyStatus        field.Int32   // 审核状态：0->未审核；1->审核通过
	PreviewStatus       field.Int32   // 是否为预告商品：0->不是；1->是
	Sort                field.Int32   // 排序
	NewStatusSort       field.Int32   // 新品排序
	RecommendStatusSort field.Int32   // 推荐排序
	Sales               field.Int32   // 销量
	Stock               field.Int32   // 库存
	LowStock            field.Int32   // 预警库存
	PromotionType       field.Int32   // 促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->秒杀
	DetailTitle         field.String  // 详情标题
	DetailDesc          field.String  // 详情描述
	DetailHTML          field.String  // 产品详情网页内容
	DetailMobileHTML    field.String  // 移动端网页详情
	CreateBy            field.Int64   // 创建人ID
	CreateTime          field.Time    // 创建时间
	UpdateBy            field.Int64   // 更新人ID
	UpdateTime          field.Time    // 更新时间
	IsDeleted           field.Int32   // 是否删除

	fieldMap map[string]field.Expr
}

func (p pmsProductSpu) Table(newTableName string) *pmsProductSpu {
	p.pmsProductSpuDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductSpu) As(alias string) *pmsProductSpu {
	p.pmsProductSpuDo.DO = *(p.pmsProductSpuDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductSpu) updateTableName(table string) *pmsProductSpu {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Name = field.NewString(table, "name")
	p.ProductSn = field.NewString(table, "product_sn")
	p.CategoryID = field.NewInt64(table, "category_id")
	p.CategoryIds = field.NewString(table, "category_ids")
	p.CategoryName = field.NewString(table, "category_name")
	p.BrandID = field.NewInt64(table, "brand_id")
	p.BrandName = field.NewString(table, "brand_name")
	p.Unit = field.NewString(table, "unit")
	p.Weight = field.NewFloat64(table, "weight")
	p.Keywords = field.NewString(table, "keywords")
	p.Brief = field.NewString(table, "brief")
	p.Description = field.NewString(table, "description")
	p.AlbumPics = field.NewString(table, "album_pics")
	p.MainPic = field.NewString(table, "main_pic")
	p.PriceRange = field.NewString(table, "price_range")
	p.PublishStatus = field.NewInt32(table, "publish_status")
	p.NewStatus = field.NewInt32(table, "new_status")
	p.RecommendStatus = field.NewInt32(table, "recommend_status")
	p.VerifyStatus = field.NewInt32(table, "verify_status")
	p.PreviewStatus = field.NewInt32(table, "preview_status")
	p.Sort = field.NewInt32(table, "sort")
	p.NewStatusSort = field.NewInt32(table, "new_status_sort")
	p.RecommendStatusSort = field.NewInt32(table, "recommend_status_sort")
	p.Sales = field.NewInt32(table, "sales")
	p.Stock = field.NewInt32(table, "stock")
	p.LowStock = field.NewInt32(table, "low_stock")
	p.PromotionType = field.NewInt32(table, "promotion_type")
	p.DetailTitle = field.NewString(table, "detail_title")
	p.DetailDesc = field.NewString(table, "detail_desc")
	p.DetailHTML = field.NewString(table, "detail_html")
	p.DetailMobileHTML = field.NewString(table, "detail_mobile_html")
	p.CreateBy = field.NewInt64(table, "create_by")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateBy = field.NewInt64(table, "update_by")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDeleted = field.NewInt32(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *pmsProductSpu) WithContext(ctx context.Context) IPmsProductSpuDo {
	return p.pmsProductSpuDo.WithContext(ctx)
}

func (p pmsProductSpu) TableName() string { return p.pmsProductSpuDo.TableName() }

func (p pmsProductSpu) Alias() string { return p.pmsProductSpuDo.Alias() }

func (p pmsProductSpu) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductSpuDo.Columns(cols...)
}

func (p *pmsProductSpu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductSpu) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 37)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["product_sn"] = p.ProductSn
	p.fieldMap["category_id"] = p.CategoryID
	p.fieldMap["category_ids"] = p.CategoryIds
	p.fieldMap["category_name"] = p.CategoryName
	p.fieldMap["brand_id"] = p.BrandID
	p.fieldMap["brand_name"] = p.BrandName
	p.fieldMap["unit"] = p.Unit
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["keywords"] = p.Keywords
	p.fieldMap["brief"] = p.Brief
	p.fieldMap["description"] = p.Description
	p.fieldMap["album_pics"] = p.AlbumPics
	p.fieldMap["main_pic"] = p.MainPic
	p.fieldMap["price_range"] = p.PriceRange
	p.fieldMap["publish_status"] = p.PublishStatus
	p.fieldMap["new_status"] = p.NewStatus
	p.fieldMap["recommend_status"] = p.RecommendStatus
	p.fieldMap["verify_status"] = p.VerifyStatus
	p.fieldMap["preview_status"] = p.PreviewStatus
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["new_status_sort"] = p.NewStatusSort
	p.fieldMap["recommend_status_sort"] = p.RecommendStatusSort
	p.fieldMap["sales"] = p.Sales
	p.fieldMap["stock"] = p.Stock
	p.fieldMap["low_stock"] = p.LowStock
	p.fieldMap["promotion_type"] = p.PromotionType
	p.fieldMap["detail_title"] = p.DetailTitle
	p.fieldMap["detail_desc"] = p.DetailDesc
	p.fieldMap["detail_html"] = p.DetailHTML
	p.fieldMap["detail_mobile_html"] = p.DetailMobileHTML
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p pmsProductSpu) clone(db *gorm.DB) pmsProductSpu {
	p.pmsProductSpuDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductSpu) replaceDB(db *gorm.DB) pmsProductSpu {
	p.pmsProductSpuDo.ReplaceDB(db)
	return p
}

type pmsProductSpuDo struct{ gen.DO }

type IPmsProductSpuDo interface {
	gen.SubQuery
	Debug() IPmsProductSpuDo
	WithContext(ctx context.Context) IPmsProductSpuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductSpuDo
	WriteDB() IPmsProductSpuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductSpuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductSpuDo
	Not(conds ...gen.Condition) IPmsProductSpuDo
	Or(conds ...gen.Condition) IPmsProductSpuDo
	Select(conds ...field.Expr) IPmsProductSpuDo
	Where(conds ...gen.Condition) IPmsProductSpuDo
	Order(conds ...field.Expr) IPmsProductSpuDo
	Distinct(cols ...field.Expr) IPmsProductSpuDo
	Omit(cols ...field.Expr) IPmsProductSpuDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductSpuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpuDo
	Group(cols ...field.Expr) IPmsProductSpuDo
	Having(conds ...gen.Condition) IPmsProductSpuDo
	Limit(limit int) IPmsProductSpuDo
	Offset(offset int) IPmsProductSpuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductSpuDo
	Unscoped() IPmsProductSpuDo
	Create(values ...*model.PmsProductSpu) error
	CreateInBatches(values []*model.PmsProductSpu, batchSize int) error
	Save(values ...*model.PmsProductSpu) error
	First() (*model.PmsProductSpu, error)
	Take() (*model.PmsProductSpu, error)
	Last() (*model.PmsProductSpu, error)
	Find() ([]*model.PmsProductSpu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductSpu, err error)
	FindInBatches(result *[]*model.PmsProductSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductSpu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductSpuDo
	Assign(attrs ...field.AssignExpr) IPmsProductSpuDo
	Joins(fields ...field.RelationField) IPmsProductSpuDo
	Preload(fields ...field.RelationField) IPmsProductSpuDo
	FirstOrInit() (*model.PmsProductSpu, error)
	FirstOrCreate() (*model.PmsProductSpu, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductSpu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductSpuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductSpuDo) Debug() IPmsProductSpuDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductSpuDo) WithContext(ctx context.Context) IPmsProductSpuDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductSpuDo) ReadDB() IPmsProductSpuDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductSpuDo) WriteDB() IPmsProductSpuDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductSpuDo) Session(config *gorm.Session) IPmsProductSpuDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductSpuDo) Clauses(conds ...clause.Expression) IPmsProductSpuDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductSpuDo) Returning(value interface{}, columns ...string) IPmsProductSpuDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductSpuDo) Not(conds ...gen.Condition) IPmsProductSpuDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductSpuDo) Or(conds ...gen.Condition) IPmsProductSpuDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductSpuDo) Select(conds ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductSpuDo) Where(conds ...gen.Condition) IPmsProductSpuDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductSpuDo) Order(conds ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductSpuDo) Distinct(cols ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductSpuDo) Omit(cols ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductSpuDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductSpuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductSpuDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductSpuDo) Group(cols ...field.Expr) IPmsProductSpuDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductSpuDo) Having(conds ...gen.Condition) IPmsProductSpuDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductSpuDo) Limit(limit int) IPmsProductSpuDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductSpuDo) Offset(offset int) IPmsProductSpuDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductSpuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductSpuDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductSpuDo) Unscoped() IPmsProductSpuDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductSpuDo) Create(values ...*model.PmsProductSpu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductSpuDo) CreateInBatches(values []*model.PmsProductSpu, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductSpuDo) Save(values ...*model.PmsProductSpu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductSpuDo) First() (*model.PmsProductSpu, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpu), nil
	}
}

func (p pmsProductSpuDo) Take() (*model.PmsProductSpu, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpu), nil
	}
}

func (p pmsProductSpuDo) Last() (*model.PmsProductSpu, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpu), nil
	}
}

func (p pmsProductSpuDo) Find() ([]*model.PmsProductSpu, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductSpu), err
}

func (p pmsProductSpuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductSpu, err error) {
	buf := make([]*model.PmsProductSpu, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductSpuDo) FindInBatches(result *[]*model.PmsProductSpu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductSpuDo) Attrs(attrs ...field.AssignExpr) IPmsProductSpuDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductSpuDo) Assign(attrs ...field.AssignExpr) IPmsProductSpuDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductSpuDo) Joins(fields ...field.RelationField) IPmsProductSpuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductSpuDo) Preload(fields ...field.RelationField) IPmsProductSpuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductSpuDo) FirstOrInit() (*model.PmsProductSpu, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpu), nil
	}
}

func (p pmsProductSpuDo) FirstOrCreate() (*model.PmsProductSpu, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpu), nil
	}
}

func (p pmsProductSpuDo) FindByPage(offset int, limit int) (result []*model.PmsProductSpu, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductSpuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductSpuDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductSpuDo) Delete(models ...*model.PmsProductSpu) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductSpuDo) withDO(do gen.Dao) *pmsProductSpuDo {
	p.DO = *do.(*gen.DO)
	return p
}
