// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pms.proto

package pmsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pms_ProductAdd_FullMethodName                             = "/pmsclient.Pms/ProductAdd"
	Pms_ProductList_FullMethodName                            = "/pmsclient.Pms/ProductList"
	Pms_ProductUpdate_FullMethodName                          = "/pmsclient.Pms/ProductUpdate"
	Pms_ProductDelete_FullMethodName                          = "/pmsclient.Pms/ProductDelete"
	Pms_ProductDetailById_FullMethodName                      = "/pmsclient.Pms/ProductDetailById"
	Pms_ProductListByCategoryId_FullMethodName                = "/pmsclient.Pms/ProductListByCategoryId"
	Pms_ProductListByIds_FullMethodName                       = "/pmsclient.Pms/ProductListByIds"
	Pms_AlbumAdd_FullMethodName                               = "/pmsclient.Pms/AlbumAdd"
	Pms_AlbumList_FullMethodName                              = "/pmsclient.Pms/AlbumList"
	Pms_AlbumUpdate_FullMethodName                            = "/pmsclient.Pms/AlbumUpdate"
	Pms_AlbumDelete_FullMethodName                            = "/pmsclient.Pms/AlbumDelete"
	Pms_AlbumPicAdd_FullMethodName                            = "/pmsclient.Pms/AlbumPicAdd"
	Pms_AlbumPicList_FullMethodName                           = "/pmsclient.Pms/AlbumPicList"
	Pms_AlbumPicUpdate_FullMethodName                         = "/pmsclient.Pms/AlbumPicUpdate"
	Pms_AlbumPicDelete_FullMethodName                         = "/pmsclient.Pms/AlbumPicDelete"
	Pms_BrandAdd_FullMethodName                               = "/pmsclient.Pms/BrandAdd"
	Pms_BrandList_FullMethodName                              = "/pmsclient.Pms/BrandList"
	Pms_BrandUpdate_FullMethodName                            = "/pmsclient.Pms/BrandUpdate"
	Pms_BrandDelete_FullMethodName                            = "/pmsclient.Pms/BrandDelete"
	Pms_CommentAdd_FullMethodName                             = "/pmsclient.Pms/CommentAdd"
	Pms_CommentList_FullMethodName                            = "/pmsclient.Pms/CommentList"
	Pms_CommentUpdate_FullMethodName                          = "/pmsclient.Pms/CommentUpdate"
	Pms_CommentDelete_FullMethodName                          = "/pmsclient.Pms/CommentDelete"
	Pms_CommentReplayAdd_FullMethodName                       = "/pmsclient.Pms/CommentReplayAdd"
	Pms_CommentReplayList_FullMethodName                      = "/pmsclient.Pms/CommentReplayList"
	Pms_CommentReplayUpdate_FullMethodName                    = "/pmsclient.Pms/CommentReplayUpdate"
	Pms_CommentReplayDelete_FullMethodName                    = "/pmsclient.Pms/CommentReplayDelete"
	Pms_FeightTemplateAdd_FullMethodName                      = "/pmsclient.Pms/FeightTemplateAdd"
	Pms_FeightTemplateList_FullMethodName                     = "/pmsclient.Pms/FeightTemplateList"
	Pms_FeightTemplateUpdate_FullMethodName                   = "/pmsclient.Pms/FeightTemplateUpdate"
	Pms_FeightTemplateDelete_FullMethodName                   = "/pmsclient.Pms/FeightTemplateDelete"
	Pms_MemberPriceAdd_FullMethodName                         = "/pmsclient.Pms/MemberPriceAdd"
	Pms_MemberPriceList_FullMethodName                        = "/pmsclient.Pms/MemberPriceList"
	Pms_MemberPriceUpdate_FullMethodName                      = "/pmsclient.Pms/MemberPriceUpdate"
	Pms_MemberPriceDelete_FullMethodName                      = "/pmsclient.Pms/MemberPriceDelete"
	Pms_ProductAttributeCategoryAdd_FullMethodName            = "/pmsclient.Pms/ProductAttributeCategoryAdd"
	Pms_ProductAttributeCategoryList_FullMethodName           = "/pmsclient.Pms/ProductAttributeCategoryList"
	Pms_ProductAttributeCategoryUpdate_FullMethodName         = "/pmsclient.Pms/ProductAttributeCategoryUpdate"
	Pms_ProductAttributeCategoryDelete_FullMethodName         = "/pmsclient.Pms/ProductAttributeCategoryDelete"
	Pms_ProductAttributeAdd_FullMethodName                    = "/pmsclient.Pms/ProductAttributeAdd"
	Pms_ProductAttributeList_FullMethodName                   = "/pmsclient.Pms/ProductAttributeList"
	Pms_ProductAttributeUpdate_FullMethodName                 = "/pmsclient.Pms/ProductAttributeUpdate"
	Pms_ProductAttributeDelete_FullMethodName                 = "/pmsclient.Pms/ProductAttributeDelete"
	Pms_ProductAttributeValueAdd_FullMethodName               = "/pmsclient.Pms/ProductAttributeValueAdd"
	Pms_ProductAttributeValueList_FullMethodName              = "/pmsclient.Pms/ProductAttributeValueList"
	Pms_ProductAttributeValueUpdate_FullMethodName            = "/pmsclient.Pms/ProductAttributeValueUpdate"
	Pms_ProductAttributeValueDelete_FullMethodName            = "/pmsclient.Pms/ProductAttributeValueDelete"
	Pms_ProductCategoryAttributeRelationAdd_FullMethodName    = "/pmsclient.Pms/ProductCategoryAttributeRelationAdd"
	Pms_ProductCategoryAttributeRelationList_FullMethodName   = "/pmsclient.Pms/ProductCategoryAttributeRelationList"
	Pms_ProductCategoryAttributeRelationUpdate_FullMethodName = "/pmsclient.Pms/ProductCategoryAttributeRelationUpdate"
	Pms_ProductCategoryAttributeRelationDelete_FullMethodName = "/pmsclient.Pms/ProductCategoryAttributeRelationDelete"
	Pms_ProductCategoryAdd_FullMethodName                     = "/pmsclient.Pms/ProductCategoryAdd"
	Pms_ProductCategoryList_FullMethodName                    = "/pmsclient.Pms/ProductCategoryList"
	Pms_ProductCategoryFirstList_FullMethodName               = "/pmsclient.Pms/ProductCategoryFirstList"
	Pms_ProductCategorySecondList_FullMethodName              = "/pmsclient.Pms/ProductCategorySecondList"
	Pms_ProductCategoryUpdate_FullMethodName                  = "/pmsclient.Pms/ProductCategoryUpdate"
	Pms_ProductCategoryDelete_FullMethodName                  = "/pmsclient.Pms/ProductCategoryDelete"
	Pms_ProductFullReductionAdd_FullMethodName                = "/pmsclient.Pms/ProductFullReductionAdd"
	Pms_ProductFullReductionList_FullMethodName               = "/pmsclient.Pms/ProductFullReductionList"
	Pms_ProductFullReductionUpdate_FullMethodName             = "/pmsclient.Pms/ProductFullReductionUpdate"
	Pms_ProductFullReductionDelete_FullMethodName             = "/pmsclient.Pms/ProductFullReductionDelete"
	Pms_ProductLadderAdd_FullMethodName                       = "/pmsclient.Pms/ProductLadderAdd"
	Pms_ProductLadderList_FullMethodName                      = "/pmsclient.Pms/ProductLadderList"
	Pms_ProductLadderUpdate_FullMethodName                    = "/pmsclient.Pms/ProductLadderUpdate"
	Pms_ProductLadderDelete_FullMethodName                    = "/pmsclient.Pms/ProductLadderDelete"
	Pms_ProductOperateLogAdd_FullMethodName                   = "/pmsclient.Pms/ProductOperateLogAdd"
	Pms_ProductOperateLogList_FullMethodName                  = "/pmsclient.Pms/ProductOperateLogList"
	Pms_ProductOperateLogUpdate_FullMethodName                = "/pmsclient.Pms/ProductOperateLogUpdate"
	Pms_ProductOperateLogDelete_FullMethodName                = "/pmsclient.Pms/ProductOperateLogDelete"
	Pms_ProductVertifyRecordAdd_FullMethodName                = "/pmsclient.Pms/ProductVertifyRecordAdd"
	Pms_ProductVertifyRecordList_FullMethodName               = "/pmsclient.Pms/ProductVertifyRecordList"
	Pms_ProductVertifyRecordUpdate_FullMethodName             = "/pmsclient.Pms/ProductVertifyRecordUpdate"
	Pms_ProductVertifyRecordDelete_FullMethodName             = "/pmsclient.Pms/ProductVertifyRecordDelete"
	Pms_SkuStockAdd_FullMethodName                            = "/pmsclient.Pms/SkuStockAdd"
	Pms_SkuStockList_FullMethodName                           = "/pmsclient.Pms/SkuStockList"
	Pms_SkuStockUpdate_FullMethodName                         = "/pmsclient.Pms/SkuStockUpdate"
	Pms_SkuStockDelete_FullMethodName                         = "/pmsclient.Pms/SkuStockDelete"
	Pms_CollectList_FullMethodName                            = "/pmsclient.Pms/CollectList"
	Pms_CollectAddOrDelete_FullMethodName                     = "/pmsclient.Pms/CollectAddOrDelete"
)

// PmsClient is the client API for Pms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PmsClient interface {
	ProductAdd(ctx context.Context, in *ProductAddReq, opts ...grpc.CallOption) (*ProductAddResp, error)
	ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error)
	ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error)
	ProductDetailById(ctx context.Context, in *ProductDetailByIdReq, opts ...grpc.CallOption) (*ProductDetailByIdResp, error)
	ProductListByCategoryId(ctx context.Context, in *ProductListByCategoryIdReq, opts ...grpc.CallOption) (*ProductListByCategoryIdResp, error)
	ProductListByIds(ctx context.Context, in *ProductListByIdsReq, opts ...grpc.CallOption) (*ProductListByIdsResp, error)
	AlbumAdd(ctx context.Context, in *AlbumAddReq, opts ...grpc.CallOption) (*AlbumAddResp, error)
	AlbumList(ctx context.Context, in *AlbumListReq, opts ...grpc.CallOption) (*AlbumListResp, error)
	AlbumUpdate(ctx context.Context, in *AlbumUpdateReq, opts ...grpc.CallOption) (*AlbumUpdateResp, error)
	AlbumDelete(ctx context.Context, in *AlbumDeleteReq, opts ...grpc.CallOption) (*AlbumDeleteResp, error)
	AlbumPicAdd(ctx context.Context, in *AlbumPicAddReq, opts ...grpc.CallOption) (*AlbumPicAddResp, error)
	AlbumPicList(ctx context.Context, in *AlbumPicListReq, opts ...grpc.CallOption) (*AlbumPicListResp, error)
	AlbumPicUpdate(ctx context.Context, in *AlbumPicUpdateReq, opts ...grpc.CallOption) (*AlbumPicUpdateResp, error)
	AlbumPicDelete(ctx context.Context, in *AlbumPicDeleteReq, opts ...grpc.CallOption) (*AlbumPicDeleteResp, error)
	BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error)
	BrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error)
	BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error)
	BrandDelete(ctx context.Context, in *BrandDeleteReq, opts ...grpc.CallOption) (*BrandDeleteResp, error)
	CommentAdd(ctx context.Context, in *CommentAddReq, opts ...grpc.CallOption) (*CommentAddResp, error)
	CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	CommentUpdate(ctx context.Context, in *CommentUpdateReq, opts ...grpc.CallOption) (*CommentUpdateResp, error)
	CommentDelete(ctx context.Context, in *CommentDeleteReq, opts ...grpc.CallOption) (*CommentDeleteResp, error)
	CommentReplayAdd(ctx context.Context, in *CommentReplayAddReq, opts ...grpc.CallOption) (*CommentReplayAddResp, error)
	CommentReplayList(ctx context.Context, in *CommentReplayListReq, opts ...grpc.CallOption) (*CommentReplayListResp, error)
	CommentReplayUpdate(ctx context.Context, in *CommentReplayUpdateReq, opts ...grpc.CallOption) (*CommentReplayUpdateResp, error)
	CommentReplayDelete(ctx context.Context, in *CommentReplayDeleteReq, opts ...grpc.CallOption) (*CommentReplayDeleteResp, error)
	FeightTemplateAdd(ctx context.Context, in *FeightTemplateAddReq, opts ...grpc.CallOption) (*FeightTemplateAddResp, error)
	FeightTemplateList(ctx context.Context, in *FeightTemplateListReq, opts ...grpc.CallOption) (*FeightTemplateListResp, error)
	FeightTemplateUpdate(ctx context.Context, in *FeightTemplateUpdateReq, opts ...grpc.CallOption) (*FeightTemplateUpdateResp, error)
	FeightTemplateDelete(ctx context.Context, in *FeightTemplateDeleteReq, opts ...grpc.CallOption) (*FeightTemplateDeleteResp, error)
	MemberPriceAdd(ctx context.Context, in *MemberPriceAddReq, opts ...grpc.CallOption) (*MemberPriceAddResp, error)
	MemberPriceList(ctx context.Context, in *MemberPriceListReq, opts ...grpc.CallOption) (*MemberPriceListResp, error)
	MemberPriceUpdate(ctx context.Context, in *MemberPriceUpdateReq, opts ...grpc.CallOption) (*MemberPriceUpdateResp, error)
	MemberPriceDelete(ctx context.Context, in *MemberPriceDeleteReq, opts ...grpc.CallOption) (*MemberPriceDeleteResp, error)
	ProductAttributeCategoryAdd(ctx context.Context, in *ProductAttributeCategoryAddReq, opts ...grpc.CallOption) (*ProductAttributeCategoryAddResp, error)
	ProductAttributeCategoryList(ctx context.Context, in *ProductAttributeCategoryListReq, opts ...grpc.CallOption) (*ProductAttributeCategoryListResp, error)
	ProductAttributeCategoryUpdate(ctx context.Context, in *ProductAttributeCategoryUpdateReq, opts ...grpc.CallOption) (*ProductAttributeCategoryUpdateResp, error)
	ProductAttributeCategoryDelete(ctx context.Context, in *ProductAttributeCategoryDeleteReq, opts ...grpc.CallOption) (*ProductAttributeCategoryDeleteResp, error)
	ProductAttributeAdd(ctx context.Context, in *ProductAttributeAddReq, opts ...grpc.CallOption) (*ProductAttributeAddResp, error)
	ProductAttributeList(ctx context.Context, in *ProductAttributeListReq, opts ...grpc.CallOption) (*ProductAttributeListResp, error)
	ProductAttributeUpdate(ctx context.Context, in *ProductAttributeUpdateReq, opts ...grpc.CallOption) (*ProductAttributeUpdateResp, error)
	ProductAttributeDelete(ctx context.Context, in *ProductAttributeDeleteReq, opts ...grpc.CallOption) (*ProductAttributeDeleteResp, error)
	ProductAttributeValueAdd(ctx context.Context, in *ProductAttributeValueAddReq, opts ...grpc.CallOption) (*ProductAttributeValueAddResp, error)
	ProductAttributeValueList(ctx context.Context, in *ProductAttributeValueListReq, opts ...grpc.CallOption) (*ProductAttributeValueListResp, error)
	ProductAttributeValueUpdate(ctx context.Context, in *ProductAttributeValueUpdateReq, opts ...grpc.CallOption) (*ProductAttributeValueUpdateResp, error)
	ProductAttributeValueDelete(ctx context.Context, in *ProductAttributeValueDeleteReq, opts ...grpc.CallOption) (*ProductAttributeValueDeleteResp, error)
	ProductCategoryAttributeRelationAdd(ctx context.Context, in *ProductCategoryAttributeRelationAddReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationAddResp, error)
	ProductCategoryAttributeRelationList(ctx context.Context, in *ProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationListResp, error)
	ProductCategoryAttributeRelationUpdate(ctx context.Context, in *ProductCategoryAttributeRelationUpdateReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationUpdateResp, error)
	ProductCategoryAttributeRelationDelete(ctx context.Context, in *ProductCategoryAttributeRelationDeleteReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationDeleteResp, error)
	ProductCategoryAdd(ctx context.Context, in *ProductCategoryAddReq, opts ...grpc.CallOption) (*ProductCategoryAddResp, error)
	ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error)
	ProductCategoryFirstList(ctx context.Context, in *ProductCategoryFirstListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error)
	ProductCategorySecondList(ctx context.Context, in *ProductCategorySecondListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error)
	ProductCategoryUpdate(ctx context.Context, in *ProductCategoryUpdateReq, opts ...grpc.CallOption) (*ProductCategoryUpdateResp, error)
	ProductCategoryDelete(ctx context.Context, in *ProductCategoryDeleteReq, opts ...grpc.CallOption) (*ProductCategoryDeleteResp, error)
	ProductFullReductionAdd(ctx context.Context, in *ProductFullReductionAddReq, opts ...grpc.CallOption) (*ProductFullReductionAddResp, error)
	ProductFullReductionList(ctx context.Context, in *ProductFullReductionListReq, opts ...grpc.CallOption) (*ProductFullReductionListResp, error)
	ProductFullReductionUpdate(ctx context.Context, in *ProductFullReductionUpdateReq, opts ...grpc.CallOption) (*ProductFullReductionUpdateResp, error)
	ProductFullReductionDelete(ctx context.Context, in *ProductFullReductionDeleteReq, opts ...grpc.CallOption) (*ProductFullReductionDeleteResp, error)
	ProductLadderAdd(ctx context.Context, in *ProductLadderAddReq, opts ...grpc.CallOption) (*ProductLadderAddResp, error)
	ProductLadderList(ctx context.Context, in *ProductLadderListReq, opts ...grpc.CallOption) (*ProductLadderListResp, error)
	ProductLadderUpdate(ctx context.Context, in *ProductLadderUpdateReq, opts ...grpc.CallOption) (*ProductLadderUpdateResp, error)
	ProductLadderDelete(ctx context.Context, in *ProductLadderDeleteReq, opts ...grpc.CallOption) (*ProductLadderDeleteResp, error)
	ProductOperateLogAdd(ctx context.Context, in *ProductOperateLogAddReq, opts ...grpc.CallOption) (*ProductOperateLogAddResp, error)
	ProductOperateLogList(ctx context.Context, in *ProductOperateLogListReq, opts ...grpc.CallOption) (*ProductOperateLogListResp, error)
	ProductOperateLogUpdate(ctx context.Context, in *ProductOperateLogUpdateReq, opts ...grpc.CallOption) (*ProductOperateLogUpdateResp, error)
	ProductOperateLogDelete(ctx context.Context, in *ProductOperateLogDeleteReq, opts ...grpc.CallOption) (*ProductOperateLogDeleteResp, error)
	ProductVertifyRecordAdd(ctx context.Context, in *ProductVertifyRecordAddReq, opts ...grpc.CallOption) (*ProductVertifyRecordAddResp, error)
	ProductVertifyRecordList(ctx context.Context, in *ProductVertifyRecordListReq, opts ...grpc.CallOption) (*ProductVertifyRecordListResp, error)
	ProductVertifyRecordUpdate(ctx context.Context, in *ProductVertifyRecordUpdateReq, opts ...grpc.CallOption) (*ProductVertifyRecordUpdateResp, error)
	ProductVertifyRecordDelete(ctx context.Context, in *ProductVertifyRecordDeleteReq, opts ...grpc.CallOption) (*ProductVertifyRecordDeleteResp, error)
	SkuStockAdd(ctx context.Context, in *SkuStockAddReq, opts ...grpc.CallOption) (*SkuStockAddResp, error)
	SkuStockList(ctx context.Context, in *SkuStockListReq, opts ...grpc.CallOption) (*SkuStockListResp, error)
	SkuStockUpdate(ctx context.Context, in *SkuStockUpdateReq, opts ...grpc.CallOption) (*SkuStockUpdateResp, error)
	SkuStockDelete(ctx context.Context, in *SkuStockDeleteReq, opts ...grpc.CallOption) (*SkuStockDeleteResp, error)
	CollectList(ctx context.Context, in *CollectListReq, opts ...grpc.CallOption) (*CollectListResp, error)
	CollectAddOrDelete(ctx context.Context, in *CollectAddOrDeleteReq, opts ...grpc.CallOption) (*CollectAddOrDeleteResp, error)
}

type pmsClient struct {
	cc grpc.ClientConnInterface
}

func NewPmsClient(cc grpc.ClientConnInterface) PmsClient {
	return &pmsClient{cc}
}

func (c *pmsClient) ProductAdd(ctx context.Context, in *ProductAddReq, opts ...grpc.CallOption) (*ProductAddResp, error) {
	out := new(ProductAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, Pms_ProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error) {
	out := new(ProductUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error) {
	out := new(ProductDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductDetailById(ctx context.Context, in *ProductDetailByIdReq, opts ...grpc.CallOption) (*ProductDetailByIdResp, error) {
	out := new(ProductDetailByIdResp)
	err := c.cc.Invoke(ctx, Pms_ProductDetailById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductListByCategoryId(ctx context.Context, in *ProductListByCategoryIdReq, opts ...grpc.CallOption) (*ProductListByCategoryIdResp, error) {
	out := new(ProductListByCategoryIdResp)
	err := c.cc.Invoke(ctx, Pms_ProductListByCategoryId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductListByIds(ctx context.Context, in *ProductListByIdsReq, opts ...grpc.CallOption) (*ProductListByIdsResp, error) {
	out := new(ProductListByIdsResp)
	err := c.cc.Invoke(ctx, Pms_ProductListByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumAdd(ctx context.Context, in *AlbumAddReq, opts ...grpc.CallOption) (*AlbumAddResp, error) {
	out := new(AlbumAddResp)
	err := c.cc.Invoke(ctx, Pms_AlbumAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumList(ctx context.Context, in *AlbumListReq, opts ...grpc.CallOption) (*AlbumListResp, error) {
	out := new(AlbumListResp)
	err := c.cc.Invoke(ctx, Pms_AlbumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumUpdate(ctx context.Context, in *AlbumUpdateReq, opts ...grpc.CallOption) (*AlbumUpdateResp, error) {
	out := new(AlbumUpdateResp)
	err := c.cc.Invoke(ctx, Pms_AlbumUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumDelete(ctx context.Context, in *AlbumDeleteReq, opts ...grpc.CallOption) (*AlbumDeleteResp, error) {
	out := new(AlbumDeleteResp)
	err := c.cc.Invoke(ctx, Pms_AlbumDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumPicAdd(ctx context.Context, in *AlbumPicAddReq, opts ...grpc.CallOption) (*AlbumPicAddResp, error) {
	out := new(AlbumPicAddResp)
	err := c.cc.Invoke(ctx, Pms_AlbumPicAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumPicList(ctx context.Context, in *AlbumPicListReq, opts ...grpc.CallOption) (*AlbumPicListResp, error) {
	out := new(AlbumPicListResp)
	err := c.cc.Invoke(ctx, Pms_AlbumPicList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumPicUpdate(ctx context.Context, in *AlbumPicUpdateReq, opts ...grpc.CallOption) (*AlbumPicUpdateResp, error) {
	out := new(AlbumPicUpdateResp)
	err := c.cc.Invoke(ctx, Pms_AlbumPicUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) AlbumPicDelete(ctx context.Context, in *AlbumPicDeleteReq, opts ...grpc.CallOption) (*AlbumPicDeleteResp, error) {
	out := new(AlbumPicDeleteResp)
	err := c.cc.Invoke(ctx, Pms_AlbumPicDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error) {
	out := new(BrandAddResp)
	err := c.cc.Invoke(ctx, Pms_BrandAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error) {
	out := new(BrandListResp)
	err := c.cc.Invoke(ctx, Pms_BrandList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error) {
	out := new(BrandUpdateResp)
	err := c.cc.Invoke(ctx, Pms_BrandUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) BrandDelete(ctx context.Context, in *BrandDeleteReq, opts ...grpc.CallOption) (*BrandDeleteResp, error) {
	out := new(BrandDeleteResp)
	err := c.cc.Invoke(ctx, Pms_BrandDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentAdd(ctx context.Context, in *CommentAddReq, opts ...grpc.CallOption) (*CommentAddResp, error) {
	out := new(CommentAddResp)
	err := c.cc.Invoke(ctx, Pms_CommentAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, Pms_CommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentUpdate(ctx context.Context, in *CommentUpdateReq, opts ...grpc.CallOption) (*CommentUpdateResp, error) {
	out := new(CommentUpdateResp)
	err := c.cc.Invoke(ctx, Pms_CommentUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentDelete(ctx context.Context, in *CommentDeleteReq, opts ...grpc.CallOption) (*CommentDeleteResp, error) {
	out := new(CommentDeleteResp)
	err := c.cc.Invoke(ctx, Pms_CommentDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentReplayAdd(ctx context.Context, in *CommentReplayAddReq, opts ...grpc.CallOption) (*CommentReplayAddResp, error) {
	out := new(CommentReplayAddResp)
	err := c.cc.Invoke(ctx, Pms_CommentReplayAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentReplayList(ctx context.Context, in *CommentReplayListReq, opts ...grpc.CallOption) (*CommentReplayListResp, error) {
	out := new(CommentReplayListResp)
	err := c.cc.Invoke(ctx, Pms_CommentReplayList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentReplayUpdate(ctx context.Context, in *CommentReplayUpdateReq, opts ...grpc.CallOption) (*CommentReplayUpdateResp, error) {
	out := new(CommentReplayUpdateResp)
	err := c.cc.Invoke(ctx, Pms_CommentReplayUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommentReplayDelete(ctx context.Context, in *CommentReplayDeleteReq, opts ...grpc.CallOption) (*CommentReplayDeleteResp, error) {
	out := new(CommentReplayDeleteResp)
	err := c.cc.Invoke(ctx, Pms_CommentReplayDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateAdd(ctx context.Context, in *FeightTemplateAddReq, opts ...grpc.CallOption) (*FeightTemplateAddResp, error) {
	out := new(FeightTemplateAddResp)
	err := c.cc.Invoke(ctx, Pms_FeightTemplateAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateList(ctx context.Context, in *FeightTemplateListReq, opts ...grpc.CallOption) (*FeightTemplateListResp, error) {
	out := new(FeightTemplateListResp)
	err := c.cc.Invoke(ctx, Pms_FeightTemplateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateUpdate(ctx context.Context, in *FeightTemplateUpdateReq, opts ...grpc.CallOption) (*FeightTemplateUpdateResp, error) {
	out := new(FeightTemplateUpdateResp)
	err := c.cc.Invoke(ctx, Pms_FeightTemplateUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) FeightTemplateDelete(ctx context.Context, in *FeightTemplateDeleteReq, opts ...grpc.CallOption) (*FeightTemplateDeleteResp, error) {
	out := new(FeightTemplateDeleteResp)
	err := c.cc.Invoke(ctx, Pms_FeightTemplateDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceAdd(ctx context.Context, in *MemberPriceAddReq, opts ...grpc.CallOption) (*MemberPriceAddResp, error) {
	out := new(MemberPriceAddResp)
	err := c.cc.Invoke(ctx, Pms_MemberPriceAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceList(ctx context.Context, in *MemberPriceListReq, opts ...grpc.CallOption) (*MemberPriceListResp, error) {
	out := new(MemberPriceListResp)
	err := c.cc.Invoke(ctx, Pms_MemberPriceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceUpdate(ctx context.Context, in *MemberPriceUpdateReq, opts ...grpc.CallOption) (*MemberPriceUpdateResp, error) {
	out := new(MemberPriceUpdateResp)
	err := c.cc.Invoke(ctx, Pms_MemberPriceUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) MemberPriceDelete(ctx context.Context, in *MemberPriceDeleteReq, opts ...grpc.CallOption) (*MemberPriceDeleteResp, error) {
	out := new(MemberPriceDeleteResp)
	err := c.cc.Invoke(ctx, Pms_MemberPriceDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeCategoryAdd(ctx context.Context, in *ProductAttributeCategoryAddReq, opts ...grpc.CallOption) (*ProductAttributeCategoryAddResp, error) {
	out := new(ProductAttributeCategoryAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeCategoryAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeCategoryList(ctx context.Context, in *ProductAttributeCategoryListReq, opts ...grpc.CallOption) (*ProductAttributeCategoryListResp, error) {
	out := new(ProductAttributeCategoryListResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeCategoryUpdate(ctx context.Context, in *ProductAttributeCategoryUpdateReq, opts ...grpc.CallOption) (*ProductAttributeCategoryUpdateResp, error) {
	out := new(ProductAttributeCategoryUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeCategoryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeCategoryDelete(ctx context.Context, in *ProductAttributeCategoryDeleteReq, opts ...grpc.CallOption) (*ProductAttributeCategoryDeleteResp, error) {
	out := new(ProductAttributeCategoryDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeCategoryDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeAdd(ctx context.Context, in *ProductAttributeAddReq, opts ...grpc.CallOption) (*ProductAttributeAddResp, error) {
	out := new(ProductAttributeAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeList(ctx context.Context, in *ProductAttributeListReq, opts ...grpc.CallOption) (*ProductAttributeListResp, error) {
	out := new(ProductAttributeListResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeUpdate(ctx context.Context, in *ProductAttributeUpdateReq, opts ...grpc.CallOption) (*ProductAttributeUpdateResp, error) {
	out := new(ProductAttributeUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeDelete(ctx context.Context, in *ProductAttributeDeleteReq, opts ...grpc.CallOption) (*ProductAttributeDeleteResp, error) {
	out := new(ProductAttributeDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeValueAdd(ctx context.Context, in *ProductAttributeValueAddReq, opts ...grpc.CallOption) (*ProductAttributeValueAddResp, error) {
	out := new(ProductAttributeValueAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeValueAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeValueList(ctx context.Context, in *ProductAttributeValueListReq, opts ...grpc.CallOption) (*ProductAttributeValueListResp, error) {
	out := new(ProductAttributeValueListResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeValueList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeValueUpdate(ctx context.Context, in *ProductAttributeValueUpdateReq, opts ...grpc.CallOption) (*ProductAttributeValueUpdateResp, error) {
	out := new(ProductAttributeValueUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeValueUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductAttributeValueDelete(ctx context.Context, in *ProductAttributeValueDeleteReq, opts ...grpc.CallOption) (*ProductAttributeValueDeleteResp, error) {
	out := new(ProductAttributeValueDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductAttributeValueDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryAttributeRelationAdd(ctx context.Context, in *ProductCategoryAttributeRelationAddReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationAddResp, error) {
	out := new(ProductCategoryAttributeRelationAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryAttributeRelationAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryAttributeRelationList(ctx context.Context, in *ProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationListResp, error) {
	out := new(ProductCategoryAttributeRelationListResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryAttributeRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryAttributeRelationUpdate(ctx context.Context, in *ProductCategoryAttributeRelationUpdateReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationUpdateResp, error) {
	out := new(ProductCategoryAttributeRelationUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryAttributeRelationUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryAttributeRelationDelete(ctx context.Context, in *ProductCategoryAttributeRelationDeleteReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationDeleteResp, error) {
	out := new(ProductCategoryAttributeRelationDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryAttributeRelationDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryAdd(ctx context.Context, in *ProductCategoryAddReq, opts ...grpc.CallOption) (*ProductCategoryAddResp, error) {
	out := new(ProductCategoryAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error) {
	out := new(ProductCategoryListResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryFirstList(ctx context.Context, in *ProductCategoryFirstListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error) {
	out := new(ProductCategoryListResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryFirstList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategorySecondList(ctx context.Context, in *ProductCategorySecondListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error) {
	out := new(ProductCategoryListResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategorySecondList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryUpdate(ctx context.Context, in *ProductCategoryUpdateReq, opts ...grpc.CallOption) (*ProductCategoryUpdateResp, error) {
	out := new(ProductCategoryUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductCategoryDelete(ctx context.Context, in *ProductCategoryDeleteReq, opts ...grpc.CallOption) (*ProductCategoryDeleteResp, error) {
	out := new(ProductCategoryDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductCategoryDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductFullReductionAdd(ctx context.Context, in *ProductFullReductionAddReq, opts ...grpc.CallOption) (*ProductFullReductionAddResp, error) {
	out := new(ProductFullReductionAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductFullReductionAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductFullReductionList(ctx context.Context, in *ProductFullReductionListReq, opts ...grpc.CallOption) (*ProductFullReductionListResp, error) {
	out := new(ProductFullReductionListResp)
	err := c.cc.Invoke(ctx, Pms_ProductFullReductionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductFullReductionUpdate(ctx context.Context, in *ProductFullReductionUpdateReq, opts ...grpc.CallOption) (*ProductFullReductionUpdateResp, error) {
	out := new(ProductFullReductionUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductFullReductionUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductFullReductionDelete(ctx context.Context, in *ProductFullReductionDeleteReq, opts ...grpc.CallOption) (*ProductFullReductionDeleteResp, error) {
	out := new(ProductFullReductionDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductFullReductionDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductLadderAdd(ctx context.Context, in *ProductLadderAddReq, opts ...grpc.CallOption) (*ProductLadderAddResp, error) {
	out := new(ProductLadderAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductLadderAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductLadderList(ctx context.Context, in *ProductLadderListReq, opts ...grpc.CallOption) (*ProductLadderListResp, error) {
	out := new(ProductLadderListResp)
	err := c.cc.Invoke(ctx, Pms_ProductLadderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductLadderUpdate(ctx context.Context, in *ProductLadderUpdateReq, opts ...grpc.CallOption) (*ProductLadderUpdateResp, error) {
	out := new(ProductLadderUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductLadderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductLadderDelete(ctx context.Context, in *ProductLadderDeleteReq, opts ...grpc.CallOption) (*ProductLadderDeleteResp, error) {
	out := new(ProductLadderDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductLadderDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductOperateLogAdd(ctx context.Context, in *ProductOperateLogAddReq, opts ...grpc.CallOption) (*ProductOperateLogAddResp, error) {
	out := new(ProductOperateLogAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductOperateLogAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductOperateLogList(ctx context.Context, in *ProductOperateLogListReq, opts ...grpc.CallOption) (*ProductOperateLogListResp, error) {
	out := new(ProductOperateLogListResp)
	err := c.cc.Invoke(ctx, Pms_ProductOperateLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductOperateLogUpdate(ctx context.Context, in *ProductOperateLogUpdateReq, opts ...grpc.CallOption) (*ProductOperateLogUpdateResp, error) {
	out := new(ProductOperateLogUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductOperateLogUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductOperateLogDelete(ctx context.Context, in *ProductOperateLogDeleteReq, opts ...grpc.CallOption) (*ProductOperateLogDeleteResp, error) {
	out := new(ProductOperateLogDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductOperateLogDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductVertifyRecordAdd(ctx context.Context, in *ProductVertifyRecordAddReq, opts ...grpc.CallOption) (*ProductVertifyRecordAddResp, error) {
	out := new(ProductVertifyRecordAddResp)
	err := c.cc.Invoke(ctx, Pms_ProductVertifyRecordAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductVertifyRecordList(ctx context.Context, in *ProductVertifyRecordListReq, opts ...grpc.CallOption) (*ProductVertifyRecordListResp, error) {
	out := new(ProductVertifyRecordListResp)
	err := c.cc.Invoke(ctx, Pms_ProductVertifyRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductVertifyRecordUpdate(ctx context.Context, in *ProductVertifyRecordUpdateReq, opts ...grpc.CallOption) (*ProductVertifyRecordUpdateResp, error) {
	out := new(ProductVertifyRecordUpdateResp)
	err := c.cc.Invoke(ctx, Pms_ProductVertifyRecordUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) ProductVertifyRecordDelete(ctx context.Context, in *ProductVertifyRecordDeleteReq, opts ...grpc.CallOption) (*ProductVertifyRecordDeleteResp, error) {
	out := new(ProductVertifyRecordDeleteResp)
	err := c.cc.Invoke(ctx, Pms_ProductVertifyRecordDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockAdd(ctx context.Context, in *SkuStockAddReq, opts ...grpc.CallOption) (*SkuStockAddResp, error) {
	out := new(SkuStockAddResp)
	err := c.cc.Invoke(ctx, Pms_SkuStockAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockList(ctx context.Context, in *SkuStockListReq, opts ...grpc.CallOption) (*SkuStockListResp, error) {
	out := new(SkuStockListResp)
	err := c.cc.Invoke(ctx, Pms_SkuStockList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockUpdate(ctx context.Context, in *SkuStockUpdateReq, opts ...grpc.CallOption) (*SkuStockUpdateResp, error) {
	out := new(SkuStockUpdateResp)
	err := c.cc.Invoke(ctx, Pms_SkuStockUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) SkuStockDelete(ctx context.Context, in *SkuStockDeleteReq, opts ...grpc.CallOption) (*SkuStockDeleteResp, error) {
	out := new(SkuStockDeleteResp)
	err := c.cc.Invoke(ctx, Pms_SkuStockDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CollectList(ctx context.Context, in *CollectListReq, opts ...grpc.CallOption) (*CollectListResp, error) {
	out := new(CollectListResp)
	err := c.cc.Invoke(ctx, Pms_CollectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CollectAddOrDelete(ctx context.Context, in *CollectAddOrDeleteReq, opts ...grpc.CallOption) (*CollectAddOrDeleteResp, error) {
	out := new(CollectAddOrDeleteResp)
	err := c.cc.Invoke(ctx, Pms_CollectAddOrDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmsServer is the server API for Pms service.
// All implementations must embed UnimplementedPmsServer
// for forward compatibility
type PmsServer interface {
	ProductAdd(context.Context, *ProductAddReq) (*ProductAddResp, error)
	ProductList(context.Context, *ProductListReq) (*ProductListResp, error)
	ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error)
	ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error)
	ProductDetailById(context.Context, *ProductDetailByIdReq) (*ProductDetailByIdResp, error)
	ProductListByCategoryId(context.Context, *ProductListByCategoryIdReq) (*ProductListByCategoryIdResp, error)
	ProductListByIds(context.Context, *ProductListByIdsReq) (*ProductListByIdsResp, error)
	AlbumAdd(context.Context, *AlbumAddReq) (*AlbumAddResp, error)
	AlbumList(context.Context, *AlbumListReq) (*AlbumListResp, error)
	AlbumUpdate(context.Context, *AlbumUpdateReq) (*AlbumUpdateResp, error)
	AlbumDelete(context.Context, *AlbumDeleteReq) (*AlbumDeleteResp, error)
	AlbumPicAdd(context.Context, *AlbumPicAddReq) (*AlbumPicAddResp, error)
	AlbumPicList(context.Context, *AlbumPicListReq) (*AlbumPicListResp, error)
	AlbumPicUpdate(context.Context, *AlbumPicUpdateReq) (*AlbumPicUpdateResp, error)
	AlbumPicDelete(context.Context, *AlbumPicDeleteReq) (*AlbumPicDeleteResp, error)
	BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error)
	BrandList(context.Context, *BrandListReq) (*BrandListResp, error)
	BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error)
	BrandDelete(context.Context, *BrandDeleteReq) (*BrandDeleteResp, error)
	CommentAdd(context.Context, *CommentAddReq) (*CommentAddResp, error)
	CommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	CommentUpdate(context.Context, *CommentUpdateReq) (*CommentUpdateResp, error)
	CommentDelete(context.Context, *CommentDeleteReq) (*CommentDeleteResp, error)
	CommentReplayAdd(context.Context, *CommentReplayAddReq) (*CommentReplayAddResp, error)
	CommentReplayList(context.Context, *CommentReplayListReq) (*CommentReplayListResp, error)
	CommentReplayUpdate(context.Context, *CommentReplayUpdateReq) (*CommentReplayUpdateResp, error)
	CommentReplayDelete(context.Context, *CommentReplayDeleteReq) (*CommentReplayDeleteResp, error)
	FeightTemplateAdd(context.Context, *FeightTemplateAddReq) (*FeightTemplateAddResp, error)
	FeightTemplateList(context.Context, *FeightTemplateListReq) (*FeightTemplateListResp, error)
	FeightTemplateUpdate(context.Context, *FeightTemplateUpdateReq) (*FeightTemplateUpdateResp, error)
	FeightTemplateDelete(context.Context, *FeightTemplateDeleteReq) (*FeightTemplateDeleteResp, error)
	MemberPriceAdd(context.Context, *MemberPriceAddReq) (*MemberPriceAddResp, error)
	MemberPriceList(context.Context, *MemberPriceListReq) (*MemberPriceListResp, error)
	MemberPriceUpdate(context.Context, *MemberPriceUpdateReq) (*MemberPriceUpdateResp, error)
	MemberPriceDelete(context.Context, *MemberPriceDeleteReq) (*MemberPriceDeleteResp, error)
	ProductAttributeCategoryAdd(context.Context, *ProductAttributeCategoryAddReq) (*ProductAttributeCategoryAddResp, error)
	ProductAttributeCategoryList(context.Context, *ProductAttributeCategoryListReq) (*ProductAttributeCategoryListResp, error)
	ProductAttributeCategoryUpdate(context.Context, *ProductAttributeCategoryUpdateReq) (*ProductAttributeCategoryUpdateResp, error)
	ProductAttributeCategoryDelete(context.Context, *ProductAttributeCategoryDeleteReq) (*ProductAttributeCategoryDeleteResp, error)
	ProductAttributeAdd(context.Context, *ProductAttributeAddReq) (*ProductAttributeAddResp, error)
	ProductAttributeList(context.Context, *ProductAttributeListReq) (*ProductAttributeListResp, error)
	ProductAttributeUpdate(context.Context, *ProductAttributeUpdateReq) (*ProductAttributeUpdateResp, error)
	ProductAttributeDelete(context.Context, *ProductAttributeDeleteReq) (*ProductAttributeDeleteResp, error)
	ProductAttributeValueAdd(context.Context, *ProductAttributeValueAddReq) (*ProductAttributeValueAddResp, error)
	ProductAttributeValueList(context.Context, *ProductAttributeValueListReq) (*ProductAttributeValueListResp, error)
	ProductAttributeValueUpdate(context.Context, *ProductAttributeValueUpdateReq) (*ProductAttributeValueUpdateResp, error)
	ProductAttributeValueDelete(context.Context, *ProductAttributeValueDeleteReq) (*ProductAttributeValueDeleteResp, error)
	ProductCategoryAttributeRelationAdd(context.Context, *ProductCategoryAttributeRelationAddReq) (*ProductCategoryAttributeRelationAddResp, error)
	ProductCategoryAttributeRelationList(context.Context, *ProductCategoryAttributeRelationListReq) (*ProductCategoryAttributeRelationListResp, error)
	ProductCategoryAttributeRelationUpdate(context.Context, *ProductCategoryAttributeRelationUpdateReq) (*ProductCategoryAttributeRelationUpdateResp, error)
	ProductCategoryAttributeRelationDelete(context.Context, *ProductCategoryAttributeRelationDeleteReq) (*ProductCategoryAttributeRelationDeleteResp, error)
	ProductCategoryAdd(context.Context, *ProductCategoryAddReq) (*ProductCategoryAddResp, error)
	ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error)
	ProductCategoryFirstList(context.Context, *ProductCategoryFirstListReq) (*ProductCategoryListResp, error)
	ProductCategorySecondList(context.Context, *ProductCategorySecondListReq) (*ProductCategoryListResp, error)
	ProductCategoryUpdate(context.Context, *ProductCategoryUpdateReq) (*ProductCategoryUpdateResp, error)
	ProductCategoryDelete(context.Context, *ProductCategoryDeleteReq) (*ProductCategoryDeleteResp, error)
	ProductFullReductionAdd(context.Context, *ProductFullReductionAddReq) (*ProductFullReductionAddResp, error)
	ProductFullReductionList(context.Context, *ProductFullReductionListReq) (*ProductFullReductionListResp, error)
	ProductFullReductionUpdate(context.Context, *ProductFullReductionUpdateReq) (*ProductFullReductionUpdateResp, error)
	ProductFullReductionDelete(context.Context, *ProductFullReductionDeleteReq) (*ProductFullReductionDeleteResp, error)
	ProductLadderAdd(context.Context, *ProductLadderAddReq) (*ProductLadderAddResp, error)
	ProductLadderList(context.Context, *ProductLadderListReq) (*ProductLadderListResp, error)
	ProductLadderUpdate(context.Context, *ProductLadderUpdateReq) (*ProductLadderUpdateResp, error)
	ProductLadderDelete(context.Context, *ProductLadderDeleteReq) (*ProductLadderDeleteResp, error)
	ProductOperateLogAdd(context.Context, *ProductOperateLogAddReq) (*ProductOperateLogAddResp, error)
	ProductOperateLogList(context.Context, *ProductOperateLogListReq) (*ProductOperateLogListResp, error)
	ProductOperateLogUpdate(context.Context, *ProductOperateLogUpdateReq) (*ProductOperateLogUpdateResp, error)
	ProductOperateLogDelete(context.Context, *ProductOperateLogDeleteReq) (*ProductOperateLogDeleteResp, error)
	ProductVertifyRecordAdd(context.Context, *ProductVertifyRecordAddReq) (*ProductVertifyRecordAddResp, error)
	ProductVertifyRecordList(context.Context, *ProductVertifyRecordListReq) (*ProductVertifyRecordListResp, error)
	ProductVertifyRecordUpdate(context.Context, *ProductVertifyRecordUpdateReq) (*ProductVertifyRecordUpdateResp, error)
	ProductVertifyRecordDelete(context.Context, *ProductVertifyRecordDeleteReq) (*ProductVertifyRecordDeleteResp, error)
	SkuStockAdd(context.Context, *SkuStockAddReq) (*SkuStockAddResp, error)
	SkuStockList(context.Context, *SkuStockListReq) (*SkuStockListResp, error)
	SkuStockUpdate(context.Context, *SkuStockUpdateReq) (*SkuStockUpdateResp, error)
	SkuStockDelete(context.Context, *SkuStockDeleteReq) (*SkuStockDeleteResp, error)
	CollectList(context.Context, *CollectListReq) (*CollectListResp, error)
	CollectAddOrDelete(context.Context, *CollectAddOrDeleteReq) (*CollectAddOrDeleteResp, error)
	mustEmbedUnimplementedPmsServer()
}

// UnimplementedPmsServer must be embedded to have forward compatible implementations.
type UnimplementedPmsServer struct {
}

func (UnimplementedPmsServer) ProductAdd(context.Context, *ProductAddReq) (*ProductAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAdd not implemented")
}
func (UnimplementedPmsServer) ProductList(context.Context, *ProductListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedPmsServer) ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedPmsServer) ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (UnimplementedPmsServer) ProductDetailById(context.Context, *ProductDetailByIdReq) (*ProductDetailByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetailById not implemented")
}
func (UnimplementedPmsServer) ProductListByCategoryId(context.Context, *ProductListByCategoryIdReq) (*ProductListByCategoryIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductListByCategoryId not implemented")
}
func (UnimplementedPmsServer) ProductListByIds(context.Context, *ProductListByIdsReq) (*ProductListByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductListByIds not implemented")
}
func (UnimplementedPmsServer) AlbumAdd(context.Context, *AlbumAddReq) (*AlbumAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumAdd not implemented")
}
func (UnimplementedPmsServer) AlbumList(context.Context, *AlbumListReq) (*AlbumListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumList not implemented")
}
func (UnimplementedPmsServer) AlbumUpdate(context.Context, *AlbumUpdateReq) (*AlbumUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumUpdate not implemented")
}
func (UnimplementedPmsServer) AlbumDelete(context.Context, *AlbumDeleteReq) (*AlbumDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumDelete not implemented")
}
func (UnimplementedPmsServer) AlbumPicAdd(context.Context, *AlbumPicAddReq) (*AlbumPicAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicAdd not implemented")
}
func (UnimplementedPmsServer) AlbumPicList(context.Context, *AlbumPicListReq) (*AlbumPicListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicList not implemented")
}
func (UnimplementedPmsServer) AlbumPicUpdate(context.Context, *AlbumPicUpdateReq) (*AlbumPicUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicUpdate not implemented")
}
func (UnimplementedPmsServer) AlbumPicDelete(context.Context, *AlbumPicDeleteReq) (*AlbumPicDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicDelete not implemented")
}
func (UnimplementedPmsServer) BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandAdd not implemented")
}
func (UnimplementedPmsServer) BrandList(context.Context, *BrandListReq) (*BrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandList not implemented")
}
func (UnimplementedPmsServer) BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandUpdate not implemented")
}
func (UnimplementedPmsServer) BrandDelete(context.Context, *BrandDeleteReq) (*BrandDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandDelete not implemented")
}
func (UnimplementedPmsServer) CommentAdd(context.Context, *CommentAddReq) (*CommentAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAdd not implemented")
}
func (UnimplementedPmsServer) CommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentList not implemented")
}
func (UnimplementedPmsServer) CommentUpdate(context.Context, *CommentUpdateReq) (*CommentUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentUpdate not implemented")
}
func (UnimplementedPmsServer) CommentDelete(context.Context, *CommentDeleteReq) (*CommentDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentDelete not implemented")
}
func (UnimplementedPmsServer) CommentReplayAdd(context.Context, *CommentReplayAddReq) (*CommentReplayAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayAdd not implemented")
}
func (UnimplementedPmsServer) CommentReplayList(context.Context, *CommentReplayListReq) (*CommentReplayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayList not implemented")
}
func (UnimplementedPmsServer) CommentReplayUpdate(context.Context, *CommentReplayUpdateReq) (*CommentReplayUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayUpdate not implemented")
}
func (UnimplementedPmsServer) CommentReplayDelete(context.Context, *CommentReplayDeleteReq) (*CommentReplayDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayDelete not implemented")
}
func (UnimplementedPmsServer) FeightTemplateAdd(context.Context, *FeightTemplateAddReq) (*FeightTemplateAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateAdd not implemented")
}
func (UnimplementedPmsServer) FeightTemplateList(context.Context, *FeightTemplateListReq) (*FeightTemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateList not implemented")
}
func (UnimplementedPmsServer) FeightTemplateUpdate(context.Context, *FeightTemplateUpdateReq) (*FeightTemplateUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateUpdate not implemented")
}
func (UnimplementedPmsServer) FeightTemplateDelete(context.Context, *FeightTemplateDeleteReq) (*FeightTemplateDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateDelete not implemented")
}
func (UnimplementedPmsServer) MemberPriceAdd(context.Context, *MemberPriceAddReq) (*MemberPriceAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceAdd not implemented")
}
func (UnimplementedPmsServer) MemberPriceList(context.Context, *MemberPriceListReq) (*MemberPriceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceList not implemented")
}
func (UnimplementedPmsServer) MemberPriceUpdate(context.Context, *MemberPriceUpdateReq) (*MemberPriceUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceUpdate not implemented")
}
func (UnimplementedPmsServer) MemberPriceDelete(context.Context, *MemberPriceDeleteReq) (*MemberPriceDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceDelete not implemented")
}
func (UnimplementedPmsServer) ProductAttributeCategoryAdd(context.Context, *ProductAttributeCategoryAddReq) (*ProductAttributeCategoryAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryAdd not implemented")
}
func (UnimplementedPmsServer) ProductAttributeCategoryList(context.Context, *ProductAttributeCategoryListReq) (*ProductAttributeCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryList not implemented")
}
func (UnimplementedPmsServer) ProductAttributeCategoryUpdate(context.Context, *ProductAttributeCategoryUpdateReq) (*ProductAttributeCategoryUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryUpdate not implemented")
}
func (UnimplementedPmsServer) ProductAttributeCategoryDelete(context.Context, *ProductAttributeCategoryDeleteReq) (*ProductAttributeCategoryDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryDelete not implemented")
}
func (UnimplementedPmsServer) ProductAttributeAdd(context.Context, *ProductAttributeAddReq) (*ProductAttributeAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeAdd not implemented")
}
func (UnimplementedPmsServer) ProductAttributeList(context.Context, *ProductAttributeListReq) (*ProductAttributeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeList not implemented")
}
func (UnimplementedPmsServer) ProductAttributeUpdate(context.Context, *ProductAttributeUpdateReq) (*ProductAttributeUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeUpdate not implemented")
}
func (UnimplementedPmsServer) ProductAttributeDelete(context.Context, *ProductAttributeDeleteReq) (*ProductAttributeDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeDelete not implemented")
}
func (UnimplementedPmsServer) ProductAttributeValueAdd(context.Context, *ProductAttributeValueAddReq) (*ProductAttributeValueAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueAdd not implemented")
}
func (UnimplementedPmsServer) ProductAttributeValueList(context.Context, *ProductAttributeValueListReq) (*ProductAttributeValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueList not implemented")
}
func (UnimplementedPmsServer) ProductAttributeValueUpdate(context.Context, *ProductAttributeValueUpdateReq) (*ProductAttributeValueUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueUpdate not implemented")
}
func (UnimplementedPmsServer) ProductAttributeValueDelete(context.Context, *ProductAttributeValueDeleteReq) (*ProductAttributeValueDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueDelete not implemented")
}
func (UnimplementedPmsServer) ProductCategoryAttributeRelationAdd(context.Context, *ProductCategoryAttributeRelationAddReq) (*ProductCategoryAttributeRelationAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationAdd not implemented")
}
func (UnimplementedPmsServer) ProductCategoryAttributeRelationList(context.Context, *ProductCategoryAttributeRelationListReq) (*ProductCategoryAttributeRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationList not implemented")
}
func (UnimplementedPmsServer) ProductCategoryAttributeRelationUpdate(context.Context, *ProductCategoryAttributeRelationUpdateReq) (*ProductCategoryAttributeRelationUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationUpdate not implemented")
}
func (UnimplementedPmsServer) ProductCategoryAttributeRelationDelete(context.Context, *ProductCategoryAttributeRelationDeleteReq) (*ProductCategoryAttributeRelationDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationDelete not implemented")
}
func (UnimplementedPmsServer) ProductCategoryAdd(context.Context, *ProductCategoryAddReq) (*ProductCategoryAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAdd not implemented")
}
func (UnimplementedPmsServer) ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryList not implemented")
}
func (UnimplementedPmsServer) ProductCategoryFirstList(context.Context, *ProductCategoryFirstListReq) (*ProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryFirstList not implemented")
}
func (UnimplementedPmsServer) ProductCategorySecondList(context.Context, *ProductCategorySecondListReq) (*ProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategorySecondList not implemented")
}
func (UnimplementedPmsServer) ProductCategoryUpdate(context.Context, *ProductCategoryUpdateReq) (*ProductCategoryUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryUpdate not implemented")
}
func (UnimplementedPmsServer) ProductCategoryDelete(context.Context, *ProductCategoryDeleteReq) (*ProductCategoryDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryDelete not implemented")
}
func (UnimplementedPmsServer) ProductFullReductionAdd(context.Context, *ProductFullReductionAddReq) (*ProductFullReductionAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionAdd not implemented")
}
func (UnimplementedPmsServer) ProductFullReductionList(context.Context, *ProductFullReductionListReq) (*ProductFullReductionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionList not implemented")
}
func (UnimplementedPmsServer) ProductFullReductionUpdate(context.Context, *ProductFullReductionUpdateReq) (*ProductFullReductionUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionUpdate not implemented")
}
func (UnimplementedPmsServer) ProductFullReductionDelete(context.Context, *ProductFullReductionDeleteReq) (*ProductFullReductionDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionDelete not implemented")
}
func (UnimplementedPmsServer) ProductLadderAdd(context.Context, *ProductLadderAddReq) (*ProductLadderAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderAdd not implemented")
}
func (UnimplementedPmsServer) ProductLadderList(context.Context, *ProductLadderListReq) (*ProductLadderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderList not implemented")
}
func (UnimplementedPmsServer) ProductLadderUpdate(context.Context, *ProductLadderUpdateReq) (*ProductLadderUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderUpdate not implemented")
}
func (UnimplementedPmsServer) ProductLadderDelete(context.Context, *ProductLadderDeleteReq) (*ProductLadderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderDelete not implemented")
}
func (UnimplementedPmsServer) ProductOperateLogAdd(context.Context, *ProductOperateLogAddReq) (*ProductOperateLogAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogAdd not implemented")
}
func (UnimplementedPmsServer) ProductOperateLogList(context.Context, *ProductOperateLogListReq) (*ProductOperateLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogList not implemented")
}
func (UnimplementedPmsServer) ProductOperateLogUpdate(context.Context, *ProductOperateLogUpdateReq) (*ProductOperateLogUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogUpdate not implemented")
}
func (UnimplementedPmsServer) ProductOperateLogDelete(context.Context, *ProductOperateLogDeleteReq) (*ProductOperateLogDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogDelete not implemented")
}
func (UnimplementedPmsServer) ProductVertifyRecordAdd(context.Context, *ProductVertifyRecordAddReq) (*ProductVertifyRecordAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordAdd not implemented")
}
func (UnimplementedPmsServer) ProductVertifyRecordList(context.Context, *ProductVertifyRecordListReq) (*ProductVertifyRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordList not implemented")
}
func (UnimplementedPmsServer) ProductVertifyRecordUpdate(context.Context, *ProductVertifyRecordUpdateReq) (*ProductVertifyRecordUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordUpdate not implemented")
}
func (UnimplementedPmsServer) ProductVertifyRecordDelete(context.Context, *ProductVertifyRecordDeleteReq) (*ProductVertifyRecordDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordDelete not implemented")
}
func (UnimplementedPmsServer) SkuStockAdd(context.Context, *SkuStockAddReq) (*SkuStockAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockAdd not implemented")
}
func (UnimplementedPmsServer) SkuStockList(context.Context, *SkuStockListReq) (*SkuStockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockList not implemented")
}
func (UnimplementedPmsServer) SkuStockUpdate(context.Context, *SkuStockUpdateReq) (*SkuStockUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockUpdate not implemented")
}
func (UnimplementedPmsServer) SkuStockDelete(context.Context, *SkuStockDeleteReq) (*SkuStockDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockDelete not implemented")
}
func (UnimplementedPmsServer) CollectList(context.Context, *CollectListReq) (*CollectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectList not implemented")
}
func (UnimplementedPmsServer) CollectAddOrDelete(context.Context, *CollectAddOrDeleteReq) (*CollectAddOrDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectAddOrDelete not implemented")
}
func (UnimplementedPmsServer) mustEmbedUnimplementedPmsServer() {}

// UnsafePmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PmsServer will
// result in compilation errors.
type UnsafePmsServer interface {
	mustEmbedUnimplementedPmsServer()
}

func RegisterPmsServer(s grpc.ServiceRegistrar, srv PmsServer) {
	s.RegisterService(&Pms_ServiceDesc, srv)
}

func _Pms_ProductAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAdd(ctx, req.(*ProductAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductUpdate(ctx, req.(*ProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductDelete(ctx, req.(*ProductDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductDetailById(ctx, req.(*ProductDetailByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductListByCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListByCategoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductListByCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductListByCategoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductListByCategoryId(ctx, req.(*ProductListByCategoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductListByIds(ctx, req.(*ProductListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumAdd(ctx, req.(*AlbumAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumList(ctx, req.(*AlbumListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumUpdate(ctx, req.(*AlbumUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumDelete(ctx, req.(*AlbumDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumPicAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumPicAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumPicAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumPicAdd(ctx, req.(*AlbumPicAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumPicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumPicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumPicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumPicList(ctx, req.(*AlbumPicListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumPicUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumPicUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumPicUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumPicUpdate(ctx, req.(*AlbumPicUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_AlbumPicDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).AlbumPicDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_AlbumPicDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).AlbumPicDelete(ctx, req.(*AlbumPicDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_BrandAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandAdd(ctx, req.(*BrandAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_BrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandList(ctx, req.(*BrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_BrandUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandUpdate(ctx, req.(*BrandUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_BrandDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).BrandDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_BrandDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).BrandDelete(ctx, req.(*BrandDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentAdd(ctx, req.(*CommentAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentUpdate(ctx, req.(*CommentUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentDelete(ctx, req.(*CommentDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentReplayAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentReplayAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentReplayAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentReplayAdd(ctx, req.(*CommentReplayAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentReplayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentReplayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentReplayList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentReplayList(ctx, req.(*CommentReplayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentReplayUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentReplayUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentReplayUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentReplayUpdate(ctx, req.(*CommentReplayUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommentReplayDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommentReplayDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CommentReplayDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommentReplayDelete(ctx, req.(*CommentReplayDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_FeightTemplateAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateAdd(ctx, req.(*FeightTemplateAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_FeightTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateList(ctx, req.(*FeightTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_FeightTemplateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateUpdate(ctx, req.(*FeightTemplateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_FeightTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).FeightTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_FeightTemplateDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).FeightTemplateDelete(ctx, req.(*FeightTemplateDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_MemberPriceAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceAdd(ctx, req.(*MemberPriceAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_MemberPriceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceList(ctx, req.(*MemberPriceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_MemberPriceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceUpdate(ctx, req.(*MemberPriceUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_MemberPriceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).MemberPriceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_MemberPriceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).MemberPriceDelete(ctx, req.(*MemberPriceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeCategoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeCategoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeCategoryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeCategoryAdd(ctx, req.(*ProductAttributeCategoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeCategoryList(ctx, req.(*ProductAttributeCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeCategoryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeCategoryUpdate(ctx, req.(*ProductAttributeCategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeCategoryDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeCategoryDelete(ctx, req.(*ProductAttributeCategoryDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeAdd(ctx, req.(*ProductAttributeAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeList(ctx, req.(*ProductAttributeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeUpdate(ctx, req.(*ProductAttributeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeDelete(ctx, req.(*ProductAttributeDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeValueAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeValueAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeValueAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeValueAdd(ctx, req.(*ProductAttributeValueAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeValueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeValueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeValueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeValueList(ctx, req.(*ProductAttributeValueListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeValueUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeValueUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeValueUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeValueUpdate(ctx, req.(*ProductAttributeValueUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductAttributeValueDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductAttributeValueDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductAttributeValueDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductAttributeValueDelete(ctx, req.(*ProductAttributeValueDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryAttributeRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryAttributeRelationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryAttributeRelationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryAttributeRelationAdd(ctx, req.(*ProductCategoryAttributeRelationAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryAttributeRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryAttributeRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryAttributeRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryAttributeRelationList(ctx, req.(*ProductCategoryAttributeRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryAttributeRelationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryAttributeRelationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryAttributeRelationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryAttributeRelationUpdate(ctx, req.(*ProductCategoryAttributeRelationUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryAttributeRelationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryAttributeRelationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryAttributeRelationDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryAttributeRelationDelete(ctx, req.(*ProductCategoryAttributeRelationDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryAdd(ctx, req.(*ProductCategoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryList(ctx, req.(*ProductCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryFirstList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryFirstListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryFirstList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryFirstList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryFirstList(ctx, req.(*ProductCategoryFirstListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategorySecondList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategorySecondListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategorySecondList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategorySecondList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategorySecondList(ctx, req.(*ProductCategorySecondListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryUpdate(ctx, req.(*ProductCategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductCategoryDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductCategoryDelete(ctx, req.(*ProductCategoryDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductFullReductionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductFullReductionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductFullReductionAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductFullReductionAdd(ctx, req.(*ProductFullReductionAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductFullReductionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductFullReductionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductFullReductionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductFullReductionList(ctx, req.(*ProductFullReductionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductFullReductionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductFullReductionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductFullReductionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductFullReductionUpdate(ctx, req.(*ProductFullReductionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductFullReductionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductFullReductionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductFullReductionDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductFullReductionDelete(ctx, req.(*ProductFullReductionDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductLadderAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductLadderAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductLadderAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductLadderAdd(ctx, req.(*ProductLadderAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductLadderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductLadderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductLadderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductLadderList(ctx, req.(*ProductLadderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductLadderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductLadderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductLadderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductLadderUpdate(ctx, req.(*ProductLadderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductLadderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductLadderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductLadderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductLadderDelete(ctx, req.(*ProductLadderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductOperateLogAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductOperateLogAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductOperateLogAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductOperateLogAdd(ctx, req.(*ProductOperateLogAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductOperateLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductOperateLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductOperateLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductOperateLogList(ctx, req.(*ProductOperateLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductOperateLogUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductOperateLogUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductOperateLogUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductOperateLogUpdate(ctx, req.(*ProductOperateLogUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductOperateLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductOperateLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductOperateLogDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductOperateLogDelete(ctx, req.(*ProductOperateLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductVertifyRecordAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductVertifyRecordAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductVertifyRecordAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductVertifyRecordAdd(ctx, req.(*ProductVertifyRecordAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductVertifyRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductVertifyRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductVertifyRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductVertifyRecordList(ctx, req.(*ProductVertifyRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductVertifyRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductVertifyRecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductVertifyRecordUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductVertifyRecordUpdate(ctx, req.(*ProductVertifyRecordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_ProductVertifyRecordDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).ProductVertifyRecordDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_ProductVertifyRecordDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).ProductVertifyRecordDelete(ctx, req.(*ProductVertifyRecordDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_SkuStockAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockAdd(ctx, req.(*SkuStockAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_SkuStockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockList(ctx, req.(*SkuStockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_SkuStockUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockUpdate(ctx, req.(*SkuStockUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_SkuStockDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).SkuStockDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_SkuStockDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).SkuStockDelete(ctx, req.(*SkuStockDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CollectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CollectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CollectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CollectList(ctx, req.(*CollectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CollectAddOrDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectAddOrDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CollectAddOrDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pms_CollectAddOrDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CollectAddOrDelete(ctx, req.(*CollectAddOrDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pms_ServiceDesc is the grpc.ServiceDesc for Pms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.Pms",
	HandlerType: (*PmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductAdd",
			Handler:    _Pms_ProductAdd_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _Pms_ProductList_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _Pms_ProductUpdate_Handler,
		},
		{
			MethodName: "ProductDelete",
			Handler:    _Pms_ProductDelete_Handler,
		},
		{
			MethodName: "ProductDetailById",
			Handler:    _Pms_ProductDetailById_Handler,
		},
		{
			MethodName: "ProductListByCategoryId",
			Handler:    _Pms_ProductListByCategoryId_Handler,
		},
		{
			MethodName: "ProductListByIds",
			Handler:    _Pms_ProductListByIds_Handler,
		},
		{
			MethodName: "AlbumAdd",
			Handler:    _Pms_AlbumAdd_Handler,
		},
		{
			MethodName: "AlbumList",
			Handler:    _Pms_AlbumList_Handler,
		},
		{
			MethodName: "AlbumUpdate",
			Handler:    _Pms_AlbumUpdate_Handler,
		},
		{
			MethodName: "AlbumDelete",
			Handler:    _Pms_AlbumDelete_Handler,
		},
		{
			MethodName: "AlbumPicAdd",
			Handler:    _Pms_AlbumPicAdd_Handler,
		},
		{
			MethodName: "AlbumPicList",
			Handler:    _Pms_AlbumPicList_Handler,
		},
		{
			MethodName: "AlbumPicUpdate",
			Handler:    _Pms_AlbumPicUpdate_Handler,
		},
		{
			MethodName: "AlbumPicDelete",
			Handler:    _Pms_AlbumPicDelete_Handler,
		},
		{
			MethodName: "BrandAdd",
			Handler:    _Pms_BrandAdd_Handler,
		},
		{
			MethodName: "BrandList",
			Handler:    _Pms_BrandList_Handler,
		},
		{
			MethodName: "BrandUpdate",
			Handler:    _Pms_BrandUpdate_Handler,
		},
		{
			MethodName: "BrandDelete",
			Handler:    _Pms_BrandDelete_Handler,
		},
		{
			MethodName: "CommentAdd",
			Handler:    _Pms_CommentAdd_Handler,
		},
		{
			MethodName: "CommentList",
			Handler:    _Pms_CommentList_Handler,
		},
		{
			MethodName: "CommentUpdate",
			Handler:    _Pms_CommentUpdate_Handler,
		},
		{
			MethodName: "CommentDelete",
			Handler:    _Pms_CommentDelete_Handler,
		},
		{
			MethodName: "CommentReplayAdd",
			Handler:    _Pms_CommentReplayAdd_Handler,
		},
		{
			MethodName: "CommentReplayList",
			Handler:    _Pms_CommentReplayList_Handler,
		},
		{
			MethodName: "CommentReplayUpdate",
			Handler:    _Pms_CommentReplayUpdate_Handler,
		},
		{
			MethodName: "CommentReplayDelete",
			Handler:    _Pms_CommentReplayDelete_Handler,
		},
		{
			MethodName: "FeightTemplateAdd",
			Handler:    _Pms_FeightTemplateAdd_Handler,
		},
		{
			MethodName: "FeightTemplateList",
			Handler:    _Pms_FeightTemplateList_Handler,
		},
		{
			MethodName: "FeightTemplateUpdate",
			Handler:    _Pms_FeightTemplateUpdate_Handler,
		},
		{
			MethodName: "FeightTemplateDelete",
			Handler:    _Pms_FeightTemplateDelete_Handler,
		},
		{
			MethodName: "MemberPriceAdd",
			Handler:    _Pms_MemberPriceAdd_Handler,
		},
		{
			MethodName: "MemberPriceList",
			Handler:    _Pms_MemberPriceList_Handler,
		},
		{
			MethodName: "MemberPriceUpdate",
			Handler:    _Pms_MemberPriceUpdate_Handler,
		},
		{
			MethodName: "MemberPriceDelete",
			Handler:    _Pms_MemberPriceDelete_Handler,
		},
		{
			MethodName: "ProductAttributeCategoryAdd",
			Handler:    _Pms_ProductAttributeCategoryAdd_Handler,
		},
		{
			MethodName: "ProductAttributeCategoryList",
			Handler:    _Pms_ProductAttributeCategoryList_Handler,
		},
		{
			MethodName: "ProductAttributeCategoryUpdate",
			Handler:    _Pms_ProductAttributeCategoryUpdate_Handler,
		},
		{
			MethodName: "ProductAttributeCategoryDelete",
			Handler:    _Pms_ProductAttributeCategoryDelete_Handler,
		},
		{
			MethodName: "ProductAttributeAdd",
			Handler:    _Pms_ProductAttributeAdd_Handler,
		},
		{
			MethodName: "ProductAttributeList",
			Handler:    _Pms_ProductAttributeList_Handler,
		},
		{
			MethodName: "ProductAttributeUpdate",
			Handler:    _Pms_ProductAttributeUpdate_Handler,
		},
		{
			MethodName: "ProductAttributeDelete",
			Handler:    _Pms_ProductAttributeDelete_Handler,
		},
		{
			MethodName: "ProductAttributeValueAdd",
			Handler:    _Pms_ProductAttributeValueAdd_Handler,
		},
		{
			MethodName: "ProductAttributeValueList",
			Handler:    _Pms_ProductAttributeValueList_Handler,
		},
		{
			MethodName: "ProductAttributeValueUpdate",
			Handler:    _Pms_ProductAttributeValueUpdate_Handler,
		},
		{
			MethodName: "ProductAttributeValueDelete",
			Handler:    _Pms_ProductAttributeValueDelete_Handler,
		},
		{
			MethodName: "ProductCategoryAttributeRelationAdd",
			Handler:    _Pms_ProductCategoryAttributeRelationAdd_Handler,
		},
		{
			MethodName: "ProductCategoryAttributeRelationList",
			Handler:    _Pms_ProductCategoryAttributeRelationList_Handler,
		},
		{
			MethodName: "ProductCategoryAttributeRelationUpdate",
			Handler:    _Pms_ProductCategoryAttributeRelationUpdate_Handler,
		},
		{
			MethodName: "ProductCategoryAttributeRelationDelete",
			Handler:    _Pms_ProductCategoryAttributeRelationDelete_Handler,
		},
		{
			MethodName: "ProductCategoryAdd",
			Handler:    _Pms_ProductCategoryAdd_Handler,
		},
		{
			MethodName: "ProductCategoryList",
			Handler:    _Pms_ProductCategoryList_Handler,
		},
		{
			MethodName: "ProductCategoryFirstList",
			Handler:    _Pms_ProductCategoryFirstList_Handler,
		},
		{
			MethodName: "ProductCategorySecondList",
			Handler:    _Pms_ProductCategorySecondList_Handler,
		},
		{
			MethodName: "ProductCategoryUpdate",
			Handler:    _Pms_ProductCategoryUpdate_Handler,
		},
		{
			MethodName: "ProductCategoryDelete",
			Handler:    _Pms_ProductCategoryDelete_Handler,
		},
		{
			MethodName: "ProductFullReductionAdd",
			Handler:    _Pms_ProductFullReductionAdd_Handler,
		},
		{
			MethodName: "ProductFullReductionList",
			Handler:    _Pms_ProductFullReductionList_Handler,
		},
		{
			MethodName: "ProductFullReductionUpdate",
			Handler:    _Pms_ProductFullReductionUpdate_Handler,
		},
		{
			MethodName: "ProductFullReductionDelete",
			Handler:    _Pms_ProductFullReductionDelete_Handler,
		},
		{
			MethodName: "ProductLadderAdd",
			Handler:    _Pms_ProductLadderAdd_Handler,
		},
		{
			MethodName: "ProductLadderList",
			Handler:    _Pms_ProductLadderList_Handler,
		},
		{
			MethodName: "ProductLadderUpdate",
			Handler:    _Pms_ProductLadderUpdate_Handler,
		},
		{
			MethodName: "ProductLadderDelete",
			Handler:    _Pms_ProductLadderDelete_Handler,
		},
		{
			MethodName: "ProductOperateLogAdd",
			Handler:    _Pms_ProductOperateLogAdd_Handler,
		},
		{
			MethodName: "ProductOperateLogList",
			Handler:    _Pms_ProductOperateLogList_Handler,
		},
		{
			MethodName: "ProductOperateLogUpdate",
			Handler:    _Pms_ProductOperateLogUpdate_Handler,
		},
		{
			MethodName: "ProductOperateLogDelete",
			Handler:    _Pms_ProductOperateLogDelete_Handler,
		},
		{
			MethodName: "ProductVertifyRecordAdd",
			Handler:    _Pms_ProductVertifyRecordAdd_Handler,
		},
		{
			MethodName: "ProductVertifyRecordList",
			Handler:    _Pms_ProductVertifyRecordList_Handler,
		},
		{
			MethodName: "ProductVertifyRecordUpdate",
			Handler:    _Pms_ProductVertifyRecordUpdate_Handler,
		},
		{
			MethodName: "ProductVertifyRecordDelete",
			Handler:    _Pms_ProductVertifyRecordDelete_Handler,
		},
		{
			MethodName: "SkuStockAdd",
			Handler:    _Pms_SkuStockAdd_Handler,
		},
		{
			MethodName: "SkuStockList",
			Handler:    _Pms_SkuStockList_Handler,
		},
		{
			MethodName: "SkuStockUpdate",
			Handler:    _Pms_SkuStockUpdate_Handler,
		},
		{
			MethodName: "SkuStockDelete",
			Handler:    _Pms_SkuStockDelete_Handler,
		},
		{
			MethodName: "CollectList",
			Handler:    _Pms_CollectList_Handler,
		},
		{
			MethodName: "CollectAddOrDelete",
			Handler:    _Pms_CollectAddOrDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}
