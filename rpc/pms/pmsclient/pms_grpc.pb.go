// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: rpc/pms/pms.proto

package pmsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductAttributeService_AddProductAttribute_FullMethodName          = "/pmsclient.ProductAttributeService/AddProductAttribute"
	ProductAttributeService_DeleteProductAttribute_FullMethodName       = "/pmsclient.ProductAttributeService/DeleteProductAttribute"
	ProductAttributeService_UpdateProductAttribute_FullMethodName       = "/pmsclient.ProductAttributeService/UpdateProductAttribute"
	ProductAttributeService_UpdateProductAttributeStatus_FullMethodName = "/pmsclient.ProductAttributeService/UpdateProductAttributeStatus"
	ProductAttributeService_QueryProductAttributeDetail_FullMethodName  = "/pmsclient.ProductAttributeService/QueryProductAttributeDetail"
	ProductAttributeService_QueryProductAttributeList_FullMethodName    = "/pmsclient.ProductAttributeService/QueryProductAttributeList"
)

// ProductAttributeServiceClient is the client API for ProductAttributeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品属性
type ProductAttributeServiceClient interface {
	// 添加商品属性
	AddProductAttribute(ctx context.Context, in *AddProductAttributeReq, opts ...grpc.CallOption) (*AddProductAttributeResp, error)
	// 删除商品属性
	DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*DeleteProductAttributeResp, error)
	// 更新商品属性
	UpdateProductAttribute(ctx context.Context, in *UpdateProductAttributeReq, opts ...grpc.CallOption) (*UpdateProductAttributeResp, error)
	// 更新商品属性状态
	UpdateProductAttributeStatus(ctx context.Context, in *UpdateProductAttributeStatusReq, opts ...grpc.CallOption) (*UpdateProductAttributeStatusResp, error)
	// 查询商品属性详情
	QueryProductAttributeDetail(ctx context.Context, in *QueryProductAttributeDetailReq, opts ...grpc.CallOption) (*QueryProductAttributeDetailResp, error)
	// 查询商品属性列表
	QueryProductAttributeList(ctx context.Context, in *QueryProductAttributeListReq, opts ...grpc.CallOption) (*QueryProductAttributeListResp, error)
}

type productAttributeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeServiceClient(cc grpc.ClientConnInterface) ProductAttributeServiceClient {
	return &productAttributeServiceClient{cc}
}

func (c *productAttributeServiceClient) AddProductAttribute(ctx context.Context, in *AddProductAttributeReq, opts ...grpc.CallOption) (*AddProductAttributeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductAttributeResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_AddProductAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*DeleteProductAttributeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductAttributeResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_DeleteProductAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) UpdateProductAttribute(ctx context.Context, in *UpdateProductAttributeReq, opts ...grpc.CallOption) (*UpdateProductAttributeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductAttributeResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_UpdateProductAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) UpdateProductAttributeStatus(ctx context.Context, in *UpdateProductAttributeStatusReq, opts ...grpc.CallOption) (*UpdateProductAttributeStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductAttributeStatusResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_UpdateProductAttributeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) QueryProductAttributeDetail(ctx context.Context, in *QueryProductAttributeDetailReq, opts ...grpc.CallOption) (*QueryProductAttributeDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductAttributeDetailResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_QueryProductAttributeDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) QueryProductAttributeList(ctx context.Context, in *QueryProductAttributeListReq, opts ...grpc.CallOption) (*QueryProductAttributeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductAttributeListResp)
	err := c.cc.Invoke(ctx, ProductAttributeService_QueryProductAttributeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeServiceServer is the server API for ProductAttributeService service.
// All implementations must embed UnimplementedProductAttributeServiceServer
// for forward compatibility.
//
// 商品属性
type ProductAttributeServiceServer interface {
	// 添加商品属性
	AddProductAttribute(context.Context, *AddProductAttributeReq) (*AddProductAttributeResp, error)
	// 删除商品属性
	DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*DeleteProductAttributeResp, error)
	// 更新商品属性
	UpdateProductAttribute(context.Context, *UpdateProductAttributeReq) (*UpdateProductAttributeResp, error)
	// 更新商品属性状态
	UpdateProductAttributeStatus(context.Context, *UpdateProductAttributeStatusReq) (*UpdateProductAttributeStatusResp, error)
	// 查询商品属性详情
	QueryProductAttributeDetail(context.Context, *QueryProductAttributeDetailReq) (*QueryProductAttributeDetailResp, error)
	// 查询商品属性列表
	QueryProductAttributeList(context.Context, *QueryProductAttributeListReq) (*QueryProductAttributeListResp, error)
	mustEmbedUnimplementedProductAttributeServiceServer()
}

// UnimplementedProductAttributeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductAttributeServiceServer struct{}

func (UnimplementedProductAttributeServiceServer) AddProductAttribute(context.Context, *AddProductAttributeReq) (*AddProductAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAttribute not implemented")
}
func (UnimplementedProductAttributeServiceServer) DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*DeleteProductAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttribute not implemented")
}
func (UnimplementedProductAttributeServiceServer) UpdateProductAttribute(context.Context, *UpdateProductAttributeReq) (*UpdateProductAttributeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttribute not implemented")
}
func (UnimplementedProductAttributeServiceServer) UpdateProductAttributeStatus(context.Context, *UpdateProductAttributeStatusReq) (*UpdateProductAttributeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeStatus not implemented")
}
func (UnimplementedProductAttributeServiceServer) QueryProductAttributeDetail(context.Context, *QueryProductAttributeDetailReq) (*QueryProductAttributeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeDetail not implemented")
}
func (UnimplementedProductAttributeServiceServer) QueryProductAttributeList(context.Context, *QueryProductAttributeListReq) (*QueryProductAttributeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeList not implemented")
}
func (UnimplementedProductAttributeServiceServer) mustEmbedUnimplementedProductAttributeServiceServer() {
}
func (UnimplementedProductAttributeServiceServer) testEmbeddedByValue() {}

// UnsafeProductAttributeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeServiceServer will
// result in compilation errors.
type UnsafeProductAttributeServiceServer interface {
	mustEmbedUnimplementedProductAttributeServiceServer()
}

func RegisterProductAttributeServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductAttributeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductAttributeService_ServiceDesc, srv)
}

func _ProductAttributeService_AddProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).AddProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_AddProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).AddProductAttribute(ctx, req.(*AddProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_DeleteProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).DeleteProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_DeleteProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).DeleteProductAttribute(ctx, req.(*DeleteProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_UpdateProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).UpdateProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_UpdateProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).UpdateProductAttribute(ctx, req.(*UpdateProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_UpdateProductAttributeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).UpdateProductAttributeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_UpdateProductAttributeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).UpdateProductAttributeStatus(ctx, req.(*UpdateProductAttributeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_QueryProductAttributeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).QueryProductAttributeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_QueryProductAttributeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).QueryProductAttributeDetail(ctx, req.(*QueryProductAttributeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_QueryProductAttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).QueryProductAttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeService_QueryProductAttributeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).QueryProductAttributeList(ctx, req.(*QueryProductAttributeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeService",
	HandlerType: (*ProductAttributeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductAttribute",
			Handler:    _ProductAttributeService_AddProductAttribute_Handler,
		},
		{
			MethodName: "DeleteProductAttribute",
			Handler:    _ProductAttributeService_DeleteProductAttribute_Handler,
		},
		{
			MethodName: "UpdateProductAttribute",
			Handler:    _ProductAttributeService_UpdateProductAttribute_Handler,
		},
		{
			MethodName: "UpdateProductAttributeStatus",
			Handler:    _ProductAttributeService_UpdateProductAttributeStatus_Handler,
		},
		{
			MethodName: "QueryProductAttributeDetail",
			Handler:    _ProductAttributeService_QueryProductAttributeDetail_Handler,
		},
		{
			MethodName: "QueryProductAttributeList",
			Handler:    _ProductAttributeService_QueryProductAttributeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductAttributeGroupService_AddProductAttributeGroup_FullMethodName          = "/pmsclient.ProductAttributeGroupService/AddProductAttributeGroup"
	ProductAttributeGroupService_DeleteProductAttributeGroup_FullMethodName       = "/pmsclient.ProductAttributeGroupService/DeleteProductAttributeGroup"
	ProductAttributeGroupService_UpdateProductAttributeGroup_FullMethodName       = "/pmsclient.ProductAttributeGroupService/UpdateProductAttributeGroup"
	ProductAttributeGroupService_UpdateProductAttributeGroupStatus_FullMethodName = "/pmsclient.ProductAttributeGroupService/UpdateProductAttributeGroupStatus"
	ProductAttributeGroupService_QueryProductAttributeGroupDetail_FullMethodName  = "/pmsclient.ProductAttributeGroupService/QueryProductAttributeGroupDetail"
	ProductAttributeGroupService_QueryProductAttributeGroupList_FullMethodName    = "/pmsclient.ProductAttributeGroupService/QueryProductAttributeGroupList"
)

// ProductAttributeGroupServiceClient is the client API for ProductAttributeGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品属性分组
type ProductAttributeGroupServiceClient interface {
	// 添加商品属性分组
	AddProductAttributeGroup(ctx context.Context, in *AddProductAttributeGroupReq, opts ...grpc.CallOption) (*AddProductAttributeGroupResp, error)
	// 删除商品属性分组
	DeleteProductAttributeGroup(ctx context.Context, in *DeleteProductAttributeGroupReq, opts ...grpc.CallOption) (*DeleteProductAttributeGroupResp, error)
	// 更新商品属性分组
	UpdateProductAttributeGroup(ctx context.Context, in *UpdateProductAttributeGroupReq, opts ...grpc.CallOption) (*UpdateProductAttributeGroupResp, error)
	// 更新商品属性分组状态
	UpdateProductAttributeGroupStatus(ctx context.Context, in *UpdateProductAttributeGroupStatusReq, opts ...grpc.CallOption) (*UpdateProductAttributeGroupStatusResp, error)
	// 查询商品属性分组详情
	QueryProductAttributeGroupDetail(ctx context.Context, in *QueryProductAttributeGroupDetailReq, opts ...grpc.CallOption) (*QueryProductAttributeGroupDetailResp, error)
	// 查询商品属性分组列表
	QueryProductAttributeGroupList(ctx context.Context, in *QueryProductAttributeGroupListReq, opts ...grpc.CallOption) (*QueryProductAttributeGroupListResp, error)
}

type productAttributeGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeGroupServiceClient(cc grpc.ClientConnInterface) ProductAttributeGroupServiceClient {
	return &productAttributeGroupServiceClient{cc}
}

func (c *productAttributeGroupServiceClient) AddProductAttributeGroup(ctx context.Context, in *AddProductAttributeGroupReq, opts ...grpc.CallOption) (*AddProductAttributeGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductAttributeGroupResp)
	err := c.cc.Invoke(ctx, ProductAttributeGroupService_AddProductAttributeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeGroupServiceClient) DeleteProductAttributeGroup(ctx context.Context, in *DeleteProductAttributeGroupReq, opts ...grpc.CallOption) (*DeleteProductAttributeGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductAttributeGroupResp)
	err := c.cc.Invoke(ctx, ProductAttributeGroupService_DeleteProductAttributeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeGroupServiceClient) UpdateProductAttributeGroup(ctx context.Context, in *UpdateProductAttributeGroupReq, opts ...grpc.CallOption) (*UpdateProductAttributeGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductAttributeGroupResp)
	err := c.cc.Invoke(ctx, ProductAttributeGroupService_UpdateProductAttributeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeGroupServiceClient) UpdateProductAttributeGroupStatus(ctx context.Context, in *UpdateProductAttributeGroupStatusReq, opts ...grpc.CallOption) (*UpdateProductAttributeGroupStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductAttributeGroupStatusResp)
	err := c.cc.Invoke(ctx, ProductAttributeGroupService_UpdateProductAttributeGroupStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeGroupServiceClient) QueryProductAttributeGroupDetail(ctx context.Context, in *QueryProductAttributeGroupDetailReq, opts ...grpc.CallOption) (*QueryProductAttributeGroupDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductAttributeGroupDetailResp)
	err := c.cc.Invoke(ctx, ProductAttributeGroupService_QueryProductAttributeGroupDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeGroupServiceClient) QueryProductAttributeGroupList(ctx context.Context, in *QueryProductAttributeGroupListReq, opts ...grpc.CallOption) (*QueryProductAttributeGroupListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductAttributeGroupListResp)
	err := c.cc.Invoke(ctx, ProductAttributeGroupService_QueryProductAttributeGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeGroupServiceServer is the server API for ProductAttributeGroupService service.
// All implementations must embed UnimplementedProductAttributeGroupServiceServer
// for forward compatibility.
//
// 商品属性分组
type ProductAttributeGroupServiceServer interface {
	// 添加商品属性分组
	AddProductAttributeGroup(context.Context, *AddProductAttributeGroupReq) (*AddProductAttributeGroupResp, error)
	// 删除商品属性分组
	DeleteProductAttributeGroup(context.Context, *DeleteProductAttributeGroupReq) (*DeleteProductAttributeGroupResp, error)
	// 更新商品属性分组
	UpdateProductAttributeGroup(context.Context, *UpdateProductAttributeGroupReq) (*UpdateProductAttributeGroupResp, error)
	// 更新商品属性分组状态
	UpdateProductAttributeGroupStatus(context.Context, *UpdateProductAttributeGroupStatusReq) (*UpdateProductAttributeGroupStatusResp, error)
	// 查询商品属性分组详情
	QueryProductAttributeGroupDetail(context.Context, *QueryProductAttributeGroupDetailReq) (*QueryProductAttributeGroupDetailResp, error)
	// 查询商品属性分组列表
	QueryProductAttributeGroupList(context.Context, *QueryProductAttributeGroupListReq) (*QueryProductAttributeGroupListResp, error)
	mustEmbedUnimplementedProductAttributeGroupServiceServer()
}

// UnimplementedProductAttributeGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductAttributeGroupServiceServer struct{}

func (UnimplementedProductAttributeGroupServiceServer) AddProductAttributeGroup(context.Context, *AddProductAttributeGroupReq) (*AddProductAttributeGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAttributeGroup not implemented")
}
func (UnimplementedProductAttributeGroupServiceServer) DeleteProductAttributeGroup(context.Context, *DeleteProductAttributeGroupReq) (*DeleteProductAttributeGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttributeGroup not implemented")
}
func (UnimplementedProductAttributeGroupServiceServer) UpdateProductAttributeGroup(context.Context, *UpdateProductAttributeGroupReq) (*UpdateProductAttributeGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeGroup not implemented")
}
func (UnimplementedProductAttributeGroupServiceServer) UpdateProductAttributeGroupStatus(context.Context, *UpdateProductAttributeGroupStatusReq) (*UpdateProductAttributeGroupStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeGroupStatus not implemented")
}
func (UnimplementedProductAttributeGroupServiceServer) QueryProductAttributeGroupDetail(context.Context, *QueryProductAttributeGroupDetailReq) (*QueryProductAttributeGroupDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeGroupDetail not implemented")
}
func (UnimplementedProductAttributeGroupServiceServer) QueryProductAttributeGroupList(context.Context, *QueryProductAttributeGroupListReq) (*QueryProductAttributeGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeGroupList not implemented")
}
func (UnimplementedProductAttributeGroupServiceServer) mustEmbedUnimplementedProductAttributeGroupServiceServer() {
}
func (UnimplementedProductAttributeGroupServiceServer) testEmbeddedByValue() {}

// UnsafeProductAttributeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeGroupServiceServer will
// result in compilation errors.
type UnsafeProductAttributeGroupServiceServer interface {
	mustEmbedUnimplementedProductAttributeGroupServiceServer()
}

func RegisterProductAttributeGroupServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeGroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductAttributeGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductAttributeGroupService_ServiceDesc, srv)
}

func _ProductAttributeGroupService_AddProductAttributeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductAttributeGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeGroupServiceServer).AddProductAttributeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeGroupService_AddProductAttributeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeGroupServiceServer).AddProductAttributeGroup(ctx, req.(*AddProductAttributeGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeGroupService_DeleteProductAttributeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeGroupServiceServer).DeleteProductAttributeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeGroupService_DeleteProductAttributeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeGroupServiceServer).DeleteProductAttributeGroup(ctx, req.(*DeleteProductAttributeGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeGroupService_UpdateProductAttributeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeGroupServiceServer).UpdateProductAttributeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeGroupService_UpdateProductAttributeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeGroupServiceServer).UpdateProductAttributeGroup(ctx, req.(*UpdateProductAttributeGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeGroupService_UpdateProductAttributeGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeGroupStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeGroupServiceServer).UpdateProductAttributeGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeGroupService_UpdateProductAttributeGroupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeGroupServiceServer).UpdateProductAttributeGroupStatus(ctx, req.(*UpdateProductAttributeGroupStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeGroupService_QueryProductAttributeGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeGroupDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeGroupServiceServer).QueryProductAttributeGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeGroupService_QueryProductAttributeGroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeGroupServiceServer).QueryProductAttributeGroupDetail(ctx, req.(*QueryProductAttributeGroupDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeGroupService_QueryProductAttributeGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeGroupServiceServer).QueryProductAttributeGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeGroupService_QueryProductAttributeGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeGroupServiceServer).QueryProductAttributeGroupList(ctx, req.(*QueryProductAttributeGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeGroupService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeGroupService",
	HandlerType: (*ProductAttributeGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductAttributeGroup",
			Handler:    _ProductAttributeGroupService_AddProductAttributeGroup_Handler,
		},
		{
			MethodName: "DeleteProductAttributeGroup",
			Handler:    _ProductAttributeGroupService_DeleteProductAttributeGroup_Handler,
		},
		{
			MethodName: "UpdateProductAttributeGroup",
			Handler:    _ProductAttributeGroupService_UpdateProductAttributeGroup_Handler,
		},
		{
			MethodName: "UpdateProductAttributeGroupStatus",
			Handler:    _ProductAttributeGroupService_UpdateProductAttributeGroupStatus_Handler,
		},
		{
			MethodName: "QueryProductAttributeGroupDetail",
			Handler:    _ProductAttributeGroupService_QueryProductAttributeGroupDetail_Handler,
		},
		{
			MethodName: "QueryProductAttributeGroupList",
			Handler:    _ProductAttributeGroupService_QueryProductAttributeGroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductAttributeValueService_AddProductAttributeValue_FullMethodName          = "/pmsclient.ProductAttributeValueService/AddProductAttributeValue"
	ProductAttributeValueService_DeleteProductAttributeValue_FullMethodName       = "/pmsclient.ProductAttributeValueService/DeleteProductAttributeValue"
	ProductAttributeValueService_UpdateProductAttributeValue_FullMethodName       = "/pmsclient.ProductAttributeValueService/UpdateProductAttributeValue"
	ProductAttributeValueService_UpdateProductAttributeValueStatus_FullMethodName = "/pmsclient.ProductAttributeValueService/UpdateProductAttributeValueStatus"
	ProductAttributeValueService_QueryProductAttributeValueDetail_FullMethodName  = "/pmsclient.ProductAttributeValueService/QueryProductAttributeValueDetail"
	ProductAttributeValueService_QueryProductAttributeValueList_FullMethodName    = "/pmsclient.ProductAttributeValueService/QueryProductAttributeValueList"
)

// ProductAttributeValueServiceClient is the client API for ProductAttributeValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品属性值
type ProductAttributeValueServiceClient interface {
	// 添加商品属性值
	AddProductAttributeValue(ctx context.Context, in *AddProductAttributeValueReq, opts ...grpc.CallOption) (*AddProductAttributeValueResp, error)
	// 删除商品属性值
	DeleteProductAttributeValue(ctx context.Context, in *DeleteProductAttributeValueReq, opts ...grpc.CallOption) (*DeleteProductAttributeValueResp, error)
	// 更新商品属性值
	UpdateProductAttributeValue(ctx context.Context, in *UpdateProductAttributeValueReq, opts ...grpc.CallOption) (*UpdateProductAttributeValueResp, error)
	// 更新商品属性值状态
	UpdateProductAttributeValueStatus(ctx context.Context, in *UpdateProductAttributeValueStatusReq, opts ...grpc.CallOption) (*UpdateProductAttributeValueStatusResp, error)
	// 查询商品属性值详情
	QueryProductAttributeValueDetail(ctx context.Context, in *QueryProductAttributeValueDetailReq, opts ...grpc.CallOption) (*QueryProductAttributeValueDetailResp, error)
	// 查询商品属性值列表
	QueryProductAttributeValueList(ctx context.Context, in *QueryProductAttributeValueListReq, opts ...grpc.CallOption) (*QueryProductAttributeValueListResp, error)
}

type productAttributeValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeValueServiceClient(cc grpc.ClientConnInterface) ProductAttributeValueServiceClient {
	return &productAttributeValueServiceClient{cc}
}

func (c *productAttributeValueServiceClient) AddProductAttributeValue(ctx context.Context, in *AddProductAttributeValueReq, opts ...grpc.CallOption) (*AddProductAttributeValueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductAttributeValueResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_AddProductAttributeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) DeleteProductAttributeValue(ctx context.Context, in *DeleteProductAttributeValueReq, opts ...grpc.CallOption) (*DeleteProductAttributeValueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductAttributeValueResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_DeleteProductAttributeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) UpdateProductAttributeValue(ctx context.Context, in *UpdateProductAttributeValueReq, opts ...grpc.CallOption) (*UpdateProductAttributeValueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductAttributeValueResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_UpdateProductAttributeValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) UpdateProductAttributeValueStatus(ctx context.Context, in *UpdateProductAttributeValueStatusReq, opts ...grpc.CallOption) (*UpdateProductAttributeValueStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductAttributeValueStatusResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_UpdateProductAttributeValueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) QueryProductAttributeValueDetail(ctx context.Context, in *QueryProductAttributeValueDetailReq, opts ...grpc.CallOption) (*QueryProductAttributeValueDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductAttributeValueDetailResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_QueryProductAttributeValueDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) QueryProductAttributeValueList(ctx context.Context, in *QueryProductAttributeValueListReq, opts ...grpc.CallOption) (*QueryProductAttributeValueListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductAttributeValueListResp)
	err := c.cc.Invoke(ctx, ProductAttributeValueService_QueryProductAttributeValueList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeValueServiceServer is the server API for ProductAttributeValueService service.
// All implementations must embed UnimplementedProductAttributeValueServiceServer
// for forward compatibility.
//
// 商品属性值
type ProductAttributeValueServiceServer interface {
	// 添加商品属性值
	AddProductAttributeValue(context.Context, *AddProductAttributeValueReq) (*AddProductAttributeValueResp, error)
	// 删除商品属性值
	DeleteProductAttributeValue(context.Context, *DeleteProductAttributeValueReq) (*DeleteProductAttributeValueResp, error)
	// 更新商品属性值
	UpdateProductAttributeValue(context.Context, *UpdateProductAttributeValueReq) (*UpdateProductAttributeValueResp, error)
	// 更新商品属性值状态
	UpdateProductAttributeValueStatus(context.Context, *UpdateProductAttributeValueStatusReq) (*UpdateProductAttributeValueStatusResp, error)
	// 查询商品属性值详情
	QueryProductAttributeValueDetail(context.Context, *QueryProductAttributeValueDetailReq) (*QueryProductAttributeValueDetailResp, error)
	// 查询商品属性值列表
	QueryProductAttributeValueList(context.Context, *QueryProductAttributeValueListReq) (*QueryProductAttributeValueListResp, error)
	mustEmbedUnimplementedProductAttributeValueServiceServer()
}

// UnimplementedProductAttributeValueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductAttributeValueServiceServer struct{}

func (UnimplementedProductAttributeValueServiceServer) AddProductAttributeValue(context.Context, *AddProductAttributeValueReq) (*AddProductAttributeValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAttributeValue not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) DeleteProductAttributeValue(context.Context, *DeleteProductAttributeValueReq) (*DeleteProductAttributeValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttributeValue not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) UpdateProductAttributeValue(context.Context, *UpdateProductAttributeValueReq) (*UpdateProductAttributeValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeValue not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) UpdateProductAttributeValueStatus(context.Context, *UpdateProductAttributeValueStatusReq) (*UpdateProductAttributeValueStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeValueStatus not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) QueryProductAttributeValueDetail(context.Context, *QueryProductAttributeValueDetailReq) (*QueryProductAttributeValueDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeValueDetail not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) QueryProductAttributeValueList(context.Context, *QueryProductAttributeValueListReq) (*QueryProductAttributeValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductAttributeValueList not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) mustEmbedUnimplementedProductAttributeValueServiceServer() {
}
func (UnimplementedProductAttributeValueServiceServer) testEmbeddedByValue() {}

// UnsafeProductAttributeValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeValueServiceServer will
// result in compilation errors.
type UnsafeProductAttributeValueServiceServer interface {
	mustEmbedUnimplementedProductAttributeValueServiceServer()
}

func RegisterProductAttributeValueServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeValueServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductAttributeValueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductAttributeValueService_ServiceDesc, srv)
}

func _ProductAttributeValueService_AddProductAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductAttributeValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).AddProductAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_AddProductAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).AddProductAttributeValue(ctx, req.(*AddProductAttributeValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_DeleteProductAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).DeleteProductAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_DeleteProductAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).DeleteProductAttributeValue(ctx, req.(*DeleteProductAttributeValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_UpdateProductAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).UpdateProductAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_UpdateProductAttributeValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).UpdateProductAttributeValue(ctx, req.(*UpdateProductAttributeValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_UpdateProductAttributeValueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductAttributeValueStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).UpdateProductAttributeValueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_UpdateProductAttributeValueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).UpdateProductAttributeValueStatus(ctx, req.(*UpdateProductAttributeValueStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_QueryProductAttributeValueDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeValueDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).QueryProductAttributeValueDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_QueryProductAttributeValueDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).QueryProductAttributeValueDetail(ctx, req.(*QueryProductAttributeValueDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_QueryProductAttributeValueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductAttributeValueListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).QueryProductAttributeValueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAttributeValueService_QueryProductAttributeValueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).QueryProductAttributeValueList(ctx, req.(*QueryProductAttributeValueListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeValueService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeValueService",
	HandlerType: (*ProductAttributeValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductAttributeValue",
			Handler:    _ProductAttributeValueService_AddProductAttributeValue_Handler,
		},
		{
			MethodName: "DeleteProductAttributeValue",
			Handler:    _ProductAttributeValueService_DeleteProductAttributeValue_Handler,
		},
		{
			MethodName: "UpdateProductAttributeValue",
			Handler:    _ProductAttributeValueService_UpdateProductAttributeValue_Handler,
		},
		{
			MethodName: "UpdateProductAttributeValueStatus",
			Handler:    _ProductAttributeValueService_UpdateProductAttributeValueStatus_Handler,
		},
		{
			MethodName: "QueryProductAttributeValueDetail",
			Handler:    _ProductAttributeValueService_QueryProductAttributeValueDetail_Handler,
		},
		{
			MethodName: "QueryProductAttributeValueList",
			Handler:    _ProductAttributeValueService_QueryProductAttributeValueList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductBrandService_AddProductBrand_FullMethodName            = "/pmsclient.ProductBrandService/AddProductBrand"
	ProductBrandService_DeleteProductBrand_FullMethodName         = "/pmsclient.ProductBrandService/DeleteProductBrand"
	ProductBrandService_UpdateProductBrand_FullMethodName         = "/pmsclient.ProductBrandService/UpdateProductBrand"
	ProductBrandService_UpdateProductBrandStatus_FullMethodName   = "/pmsclient.ProductBrandService/UpdateProductBrandStatus"
	ProductBrandService_QueryProductBrandDetail_FullMethodName    = "/pmsclient.ProductBrandService/QueryProductBrandDetail"
	ProductBrandService_QueryProductBrandList_FullMethodName      = "/pmsclient.ProductBrandService/QueryProductBrandList"
	ProductBrandService_QueryBrandListByIds_FullMethodName        = "/pmsclient.ProductBrandService/QueryBrandListByIds"
	ProductBrandService_UpdateBrandRecommendStatus_FullMethodName = "/pmsclient.ProductBrandService/UpdateBrandRecommendStatus"
	ProductBrandService_UpdateBrandSort_FullMethodName            = "/pmsclient.ProductBrandService/UpdateBrandSort"
)

// ProductBrandServiceClient is the client API for ProductBrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品品牌
type ProductBrandServiceClient interface {
	// 添加商品品牌
	AddProductBrand(ctx context.Context, in *AddProductBrandReq, opts ...grpc.CallOption) (*AddProductBrandResp, error)
	// 删除商品品牌
	DeleteProductBrand(ctx context.Context, in *DeleteProductBrandReq, opts ...grpc.CallOption) (*DeleteProductBrandResp, error)
	// 更新商品品牌
	UpdateProductBrand(ctx context.Context, in *UpdateProductBrandReq, opts ...grpc.CallOption) (*UpdateProductBrandResp, error)
	// 更新商品品牌状态
	UpdateProductBrandStatus(ctx context.Context, in *UpdateProductBrandStatusReq, opts ...grpc.CallOption) (*UpdateProductBrandStatusResp, error)
	// 查询商品品牌详情
	QueryProductBrandDetail(ctx context.Context, in *QueryProductBrandDetailReq, opts ...grpc.CallOption) (*QueryProductBrandDetailResp, error)
	// 查询商品品牌列表
	QueryProductBrandList(ctx context.Context, in *QueryProductBrandListReq, opts ...grpc.CallOption) (*QueryProductBrandListResp, error)
	QueryBrandListByIds(ctx context.Context, in *QueryBrandListByIdsReq, opts ...grpc.CallOption) (*QueryProductBrandListResp, error)
	// 更新品牌的推荐状态
	UpdateBrandRecommendStatus(ctx context.Context, in *UpdateProductBrandStatusReq, opts ...grpc.CallOption) (*UpdateProductBrandStatusResp, error)
	// 更新品牌的排序
	UpdateBrandSort(ctx context.Context, in *UpdateProductBrandSortReq, opts ...grpc.CallOption) (*UpdateProductBrandStatusResp, error)
}

type productBrandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductBrandServiceClient(cc grpc.ClientConnInterface) ProductBrandServiceClient {
	return &productBrandServiceClient{cc}
}

func (c *productBrandServiceClient) AddProductBrand(ctx context.Context, in *AddProductBrandReq, opts ...grpc.CallOption) (*AddProductBrandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductBrandResp)
	err := c.cc.Invoke(ctx, ProductBrandService_AddProductBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) DeleteProductBrand(ctx context.Context, in *DeleteProductBrandReq, opts ...grpc.CallOption) (*DeleteProductBrandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductBrandResp)
	err := c.cc.Invoke(ctx, ProductBrandService_DeleteProductBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) UpdateProductBrand(ctx context.Context, in *UpdateProductBrandReq, opts ...grpc.CallOption) (*UpdateProductBrandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductBrandResp)
	err := c.cc.Invoke(ctx, ProductBrandService_UpdateProductBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) UpdateProductBrandStatus(ctx context.Context, in *UpdateProductBrandStatusReq, opts ...grpc.CallOption) (*UpdateProductBrandStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductBrandStatusResp)
	err := c.cc.Invoke(ctx, ProductBrandService_UpdateProductBrandStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) QueryProductBrandDetail(ctx context.Context, in *QueryProductBrandDetailReq, opts ...grpc.CallOption) (*QueryProductBrandDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductBrandDetailResp)
	err := c.cc.Invoke(ctx, ProductBrandService_QueryProductBrandDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) QueryProductBrandList(ctx context.Context, in *QueryProductBrandListReq, opts ...grpc.CallOption) (*QueryProductBrandListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductBrandListResp)
	err := c.cc.Invoke(ctx, ProductBrandService_QueryProductBrandList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) QueryBrandListByIds(ctx context.Context, in *QueryBrandListByIdsReq, opts ...grpc.CallOption) (*QueryProductBrandListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductBrandListResp)
	err := c.cc.Invoke(ctx, ProductBrandService_QueryBrandListByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) UpdateBrandRecommendStatus(ctx context.Context, in *UpdateProductBrandStatusReq, opts ...grpc.CallOption) (*UpdateProductBrandStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductBrandStatusResp)
	err := c.cc.Invoke(ctx, ProductBrandService_UpdateBrandRecommendStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productBrandServiceClient) UpdateBrandSort(ctx context.Context, in *UpdateProductBrandSortReq, opts ...grpc.CallOption) (*UpdateProductBrandStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductBrandStatusResp)
	err := c.cc.Invoke(ctx, ProductBrandService_UpdateBrandSort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductBrandServiceServer is the server API for ProductBrandService service.
// All implementations must embed UnimplementedProductBrandServiceServer
// for forward compatibility.
//
// 商品品牌
type ProductBrandServiceServer interface {
	// 添加商品品牌
	AddProductBrand(context.Context, *AddProductBrandReq) (*AddProductBrandResp, error)
	// 删除商品品牌
	DeleteProductBrand(context.Context, *DeleteProductBrandReq) (*DeleteProductBrandResp, error)
	// 更新商品品牌
	UpdateProductBrand(context.Context, *UpdateProductBrandReq) (*UpdateProductBrandResp, error)
	// 更新商品品牌状态
	UpdateProductBrandStatus(context.Context, *UpdateProductBrandStatusReq) (*UpdateProductBrandStatusResp, error)
	// 查询商品品牌详情
	QueryProductBrandDetail(context.Context, *QueryProductBrandDetailReq) (*QueryProductBrandDetailResp, error)
	// 查询商品品牌列表
	QueryProductBrandList(context.Context, *QueryProductBrandListReq) (*QueryProductBrandListResp, error)
	QueryBrandListByIds(context.Context, *QueryBrandListByIdsReq) (*QueryProductBrandListResp, error)
	// 更新品牌的推荐状态
	UpdateBrandRecommendStatus(context.Context, *UpdateProductBrandStatusReq) (*UpdateProductBrandStatusResp, error)
	// 更新品牌的排序
	UpdateBrandSort(context.Context, *UpdateProductBrandSortReq) (*UpdateProductBrandStatusResp, error)
	mustEmbedUnimplementedProductBrandServiceServer()
}

// UnimplementedProductBrandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductBrandServiceServer struct{}

func (UnimplementedProductBrandServiceServer) AddProductBrand(context.Context, *AddProductBrandReq) (*AddProductBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductBrand not implemented")
}
func (UnimplementedProductBrandServiceServer) DeleteProductBrand(context.Context, *DeleteProductBrandReq) (*DeleteProductBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductBrand not implemented")
}
func (UnimplementedProductBrandServiceServer) UpdateProductBrand(context.Context, *UpdateProductBrandReq) (*UpdateProductBrandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductBrand not implemented")
}
func (UnimplementedProductBrandServiceServer) UpdateProductBrandStatus(context.Context, *UpdateProductBrandStatusReq) (*UpdateProductBrandStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductBrandStatus not implemented")
}
func (UnimplementedProductBrandServiceServer) QueryProductBrandDetail(context.Context, *QueryProductBrandDetailReq) (*QueryProductBrandDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductBrandDetail not implemented")
}
func (UnimplementedProductBrandServiceServer) QueryProductBrandList(context.Context, *QueryProductBrandListReq) (*QueryProductBrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductBrandList not implemented")
}
func (UnimplementedProductBrandServiceServer) QueryBrandListByIds(context.Context, *QueryBrandListByIdsReq) (*QueryProductBrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBrandListByIds not implemented")
}
func (UnimplementedProductBrandServiceServer) UpdateBrandRecommendStatus(context.Context, *UpdateProductBrandStatusReq) (*UpdateProductBrandStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandRecommendStatus not implemented")
}
func (UnimplementedProductBrandServiceServer) UpdateBrandSort(context.Context, *UpdateProductBrandSortReq) (*UpdateProductBrandStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrandSort not implemented")
}
func (UnimplementedProductBrandServiceServer) mustEmbedUnimplementedProductBrandServiceServer() {}
func (UnimplementedProductBrandServiceServer) testEmbeddedByValue()                             {}

// UnsafeProductBrandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductBrandServiceServer will
// result in compilation errors.
type UnsafeProductBrandServiceServer interface {
	mustEmbedUnimplementedProductBrandServiceServer()
}

func RegisterProductBrandServiceServer(s grpc.ServiceRegistrar, srv ProductBrandServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductBrandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductBrandService_ServiceDesc, srv)
}

func _ProductBrandService_AddProductBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).AddProductBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_AddProductBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).AddProductBrand(ctx, req.(*AddProductBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_DeleteProductBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).DeleteProductBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_DeleteProductBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).DeleteProductBrand(ctx, req.(*DeleteProductBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_UpdateProductBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).UpdateProductBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_UpdateProductBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).UpdateProductBrand(ctx, req.(*UpdateProductBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_UpdateProductBrandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductBrandStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).UpdateProductBrandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_UpdateProductBrandStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).UpdateProductBrandStatus(ctx, req.(*UpdateProductBrandStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_QueryProductBrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductBrandDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).QueryProductBrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_QueryProductBrandDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).QueryProductBrandDetail(ctx, req.(*QueryProductBrandDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_QueryProductBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductBrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).QueryProductBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_QueryProductBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).QueryProductBrandList(ctx, req.(*QueryProductBrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_QueryBrandListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrandListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).QueryBrandListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_QueryBrandListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).QueryBrandListByIds(ctx, req.(*QueryBrandListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_UpdateBrandRecommendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductBrandStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).UpdateBrandRecommendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_UpdateBrandRecommendStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).UpdateBrandRecommendStatus(ctx, req.(*UpdateProductBrandStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductBrandService_UpdateBrandSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductBrandSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductBrandServiceServer).UpdateBrandSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductBrandService_UpdateBrandSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductBrandServiceServer).UpdateBrandSort(ctx, req.(*UpdateProductBrandSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductBrandService_ServiceDesc is the grpc.ServiceDesc for ProductBrandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductBrandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductBrandService",
	HandlerType: (*ProductBrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductBrand",
			Handler:    _ProductBrandService_AddProductBrand_Handler,
		},
		{
			MethodName: "DeleteProductBrand",
			Handler:    _ProductBrandService_DeleteProductBrand_Handler,
		},
		{
			MethodName: "UpdateProductBrand",
			Handler:    _ProductBrandService_UpdateProductBrand_Handler,
		},
		{
			MethodName: "UpdateProductBrandStatus",
			Handler:    _ProductBrandService_UpdateProductBrandStatus_Handler,
		},
		{
			MethodName: "QueryProductBrandDetail",
			Handler:    _ProductBrandService_QueryProductBrandDetail_Handler,
		},
		{
			MethodName: "QueryProductBrandList",
			Handler:    _ProductBrandService_QueryProductBrandList_Handler,
		},
		{
			MethodName: "QueryBrandListByIds",
			Handler:    _ProductBrandService_QueryBrandListByIds_Handler,
		},
		{
			MethodName: "UpdateBrandRecommendStatus",
			Handler:    _ProductBrandService_UpdateBrandRecommendStatus_Handler,
		},
		{
			MethodName: "UpdateBrandSort",
			Handler:    _ProductBrandService_UpdateBrandSort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductCategoryService_AddProductCategory_FullMethodName           = "/pmsclient.ProductCategoryService/AddProductCategory"
	ProductCategoryService_DeleteProductCategory_FullMethodName        = "/pmsclient.ProductCategoryService/DeleteProductCategory"
	ProductCategoryService_UpdateProductCategory_FullMethodName        = "/pmsclient.ProductCategoryService/UpdateProductCategory"
	ProductCategoryService_UpdateCategoryNavStatus_FullMethodName      = "/pmsclient.ProductCategoryService/UpdateCategoryNavStatus"
	ProductCategoryService_UpdateProductCategoryStatus_FullMethodName  = "/pmsclient.ProductCategoryService/UpdateProductCategoryStatus"
	ProductCategoryService_QueryProductCategoryDetail_FullMethodName   = "/pmsclient.ProductCategoryService/QueryProductCategoryDetail"
	ProductCategoryService_QueryProductCategoryList_FullMethodName     = "/pmsclient.ProductCategoryService/QueryProductCategoryList"
	ProductCategoryService_QueryProductCategoryTreeList_FullMethodName = "/pmsclient.ProductCategoryService/QueryProductCategoryTreeList"
)

// ProductCategoryServiceClient is the client API for ProductCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 产品分类
type ProductCategoryServiceClient interface {
	// 添加产品分类
	AddProductCategory(ctx context.Context, in *AddProductCategoryReq, opts ...grpc.CallOption) (*AddProductCategoryResp, error)
	// 删除产品分类
	DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*DeleteProductCategoryResp, error)
	// 更新产品分类
	UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryReq, opts ...grpc.CallOption) (*UpdateProductCategoryResp, error)
	// 更新商品分类导航显示状态
	UpdateCategoryNavStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error)
	// 更新商品分类显示状态
	UpdateProductCategoryStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error)
	// 查询产品分类详情
	QueryProductCategoryDetail(ctx context.Context, in *QueryProductCategoryDetailReq, opts ...grpc.CallOption) (*QueryProductCategoryDetailResp, error)
	// 查询产品分类列表
	QueryProductCategoryList(ctx context.Context, in *QueryProductCategoryListReq, opts ...grpc.CallOption) (*QueryProductCategoryListResp, error)
	// 查询商品分类（tree）
	QueryProductCategoryTreeList(ctx context.Context, in *QueryProductCategoryTreeListReq, opts ...grpc.CallOption) (*QueryProductCategoryListTreeResp, error)
}

type productCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryServiceClient(cc grpc.ClientConnInterface) ProductCategoryServiceClient {
	return &productCategoryServiceClient{cc}
}

func (c *productCategoryServiceClient) AddProductCategory(ctx context.Context, in *AddProductCategoryReq, opts ...grpc.CallOption) (*AddProductCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductCategoryResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_AddProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*DeleteProductCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductCategoryResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_DeleteProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryReq, opts ...grpc.CallOption) (*UpdateProductCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductCategoryResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_UpdateProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) UpdateCategoryNavStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductCategoryStatusResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_UpdateCategoryNavStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) UpdateProductCategoryStatus(ctx context.Context, in *UpdateProductCategoryStatusReq, opts ...grpc.CallOption) (*UpdateProductCategoryStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductCategoryStatusResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_UpdateProductCategoryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) QueryProductCategoryDetail(ctx context.Context, in *QueryProductCategoryDetailReq, opts ...grpc.CallOption) (*QueryProductCategoryDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductCategoryDetailResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_QueryProductCategoryDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) QueryProductCategoryList(ctx context.Context, in *QueryProductCategoryListReq, opts ...grpc.CallOption) (*QueryProductCategoryListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductCategoryListResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_QueryProductCategoryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) QueryProductCategoryTreeList(ctx context.Context, in *QueryProductCategoryTreeListReq, opts ...grpc.CallOption) (*QueryProductCategoryListTreeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductCategoryListTreeResp)
	err := c.cc.Invoke(ctx, ProductCategoryService_QueryProductCategoryTreeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryServiceServer is the server API for ProductCategoryService service.
// All implementations must embed UnimplementedProductCategoryServiceServer
// for forward compatibility.
//
// 产品分类
type ProductCategoryServiceServer interface {
	// 添加产品分类
	AddProductCategory(context.Context, *AddProductCategoryReq) (*AddProductCategoryResp, error)
	// 删除产品分类
	DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*DeleteProductCategoryResp, error)
	// 更新产品分类
	UpdateProductCategory(context.Context, *UpdateProductCategoryReq) (*UpdateProductCategoryResp, error)
	// 更新商品分类导航显示状态
	UpdateCategoryNavStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error)
	// 更新商品分类显示状态
	UpdateProductCategoryStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error)
	// 查询产品分类详情
	QueryProductCategoryDetail(context.Context, *QueryProductCategoryDetailReq) (*QueryProductCategoryDetailResp, error)
	// 查询产品分类列表
	QueryProductCategoryList(context.Context, *QueryProductCategoryListReq) (*QueryProductCategoryListResp, error)
	// 查询商品分类（tree）
	QueryProductCategoryTreeList(context.Context, *QueryProductCategoryTreeListReq) (*QueryProductCategoryListTreeResp, error)
	mustEmbedUnimplementedProductCategoryServiceServer()
}

// UnimplementedProductCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductCategoryServiceServer struct{}

func (UnimplementedProductCategoryServiceServer) AddProductCategory(context.Context, *AddProductCategoryReq) (*AddProductCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*DeleteProductCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) UpdateProductCategory(context.Context, *UpdateProductCategoryReq) (*UpdateProductCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) UpdateCategoryNavStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryNavStatus not implemented")
}
func (UnimplementedProductCategoryServiceServer) UpdateProductCategoryStatus(context.Context, *UpdateProductCategoryStatusReq) (*UpdateProductCategoryStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategoryStatus not implemented")
}
func (UnimplementedProductCategoryServiceServer) QueryProductCategoryDetail(context.Context, *QueryProductCategoryDetailReq) (*QueryProductCategoryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryDetail not implemented")
}
func (UnimplementedProductCategoryServiceServer) QueryProductCategoryList(context.Context, *QueryProductCategoryListReq) (*QueryProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryList not implemented")
}
func (UnimplementedProductCategoryServiceServer) QueryProductCategoryTreeList(context.Context, *QueryProductCategoryTreeListReq) (*QueryProductCategoryListTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryTreeList not implemented")
}
func (UnimplementedProductCategoryServiceServer) mustEmbedUnimplementedProductCategoryServiceServer() {
}
func (UnimplementedProductCategoryServiceServer) testEmbeddedByValue() {}

// UnsafeProductCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryServiceServer will
// result in compilation errors.
type UnsafeProductCategoryServiceServer interface {
	mustEmbedUnimplementedProductCategoryServiceServer()
}

func RegisterProductCategoryServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductCategoryService_ServiceDesc, srv)
}

func _ProductCategoryService_AddProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).AddProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_AddProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).AddProductCategory(ctx, req.(*AddProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_DeleteProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).DeleteProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_DeleteProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).DeleteProductCategory(ctx, req.(*DeleteProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_UpdateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).UpdateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_UpdateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).UpdateProductCategory(ctx, req.(*UpdateProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_UpdateCategoryNavStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).UpdateCategoryNavStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_UpdateCategoryNavStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).UpdateCategoryNavStatus(ctx, req.(*UpdateProductCategoryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_UpdateProductCategoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).UpdateProductCategoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_UpdateProductCategoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).UpdateProductCategoryStatus(ctx, req.(*UpdateProductCategoryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_QueryProductCategoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_QueryProductCategoryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryDetail(ctx, req.(*QueryProductCategoryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_QueryProductCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_QueryProductCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryList(ctx, req.(*QueryProductCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_QueryProductCategoryTreeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryTreeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryTreeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_QueryProductCategoryTreeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).QueryProductCategoryTreeList(ctx, req.(*QueryProductCategoryTreeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCategoryService",
	HandlerType: (*ProductCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductCategory",
			Handler:    _ProductCategoryService_AddProductCategory_Handler,
		},
		{
			MethodName: "DeleteProductCategory",
			Handler:    _ProductCategoryService_DeleteProductCategory_Handler,
		},
		{
			MethodName: "UpdateProductCategory",
			Handler:    _ProductCategoryService_UpdateProductCategory_Handler,
		},
		{
			MethodName: "UpdateCategoryNavStatus",
			Handler:    _ProductCategoryService_UpdateCategoryNavStatus_Handler,
		},
		{
			MethodName: "UpdateProductCategoryStatus",
			Handler:    _ProductCategoryService_UpdateProductCategoryStatus_Handler,
		},
		{
			MethodName: "QueryProductCategoryDetail",
			Handler:    _ProductCategoryService_QueryProductCategoryDetail_Handler,
		},
		{
			MethodName: "QueryProductCategoryList",
			Handler:    _ProductCategoryService_QueryProductCategoryList_Handler,
		},
		{
			MethodName: "QueryProductCategoryTreeList",
			Handler:    _ProductCategoryService_QueryProductCategoryTreeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_FullMethodName       = "/pmsclient.ProductCategoryAttributeRelationService/AddProductCategoryAttributeRelation"
	ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_FullMethodName = "/pmsclient.ProductCategoryAttributeRelationService/QueryProductCategoryAttributeRelationList"
)

// ProductCategoryAttributeRelationServiceClient is the client API for ProductCategoryAttributeRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
type ProductCategoryAttributeRelationServiceClient interface {
	// 添加产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
	AddProductCategoryAttributeRelation(ctx context.Context, in *AddProductCategoryAttributeRelationReq, opts ...grpc.CallOption) (*AddProductCategoryAttributeRelationResp, error)
	// 查询产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）列表
	QueryProductCategoryAttributeRelationList(ctx context.Context, in *QueryProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*QueryProductCategoryAttributeRelationListResp, error)
}

type productCategoryAttributeRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryAttributeRelationServiceClient(cc grpc.ClientConnInterface) ProductCategoryAttributeRelationServiceClient {
	return &productCategoryAttributeRelationServiceClient{cc}
}

func (c *productCategoryAttributeRelationServiceClient) AddProductCategoryAttributeRelation(ctx context.Context, in *AddProductCategoryAttributeRelationReq, opts ...grpc.CallOption) (*AddProductCategoryAttributeRelationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductCategoryAttributeRelationResp)
	err := c.cc.Invoke(ctx, ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryAttributeRelationServiceClient) QueryProductCategoryAttributeRelationList(ctx context.Context, in *QueryProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*QueryProductCategoryAttributeRelationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductCategoryAttributeRelationListResp)
	err := c.cc.Invoke(ctx, ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryAttributeRelationServiceServer is the server API for ProductCategoryAttributeRelationService service.
// All implementations must embed UnimplementedProductCategoryAttributeRelationServiceServer
// for forward compatibility.
//
// 产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
type ProductCategoryAttributeRelationServiceServer interface {
	// 添加产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
	AddProductCategoryAttributeRelation(context.Context, *AddProductCategoryAttributeRelationReq) (*AddProductCategoryAttributeRelationResp, error)
	// 查询产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）列表
	QueryProductCategoryAttributeRelationList(context.Context, *QueryProductCategoryAttributeRelationListReq) (*QueryProductCategoryAttributeRelationListResp, error)
	mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer()
}

// UnimplementedProductCategoryAttributeRelationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductCategoryAttributeRelationServiceServer struct{}

func (UnimplementedProductCategoryAttributeRelationServiceServer) AddProductCategoryAttributeRelation(context.Context, *AddProductCategoryAttributeRelationReq) (*AddProductCategoryAttributeRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductCategoryAttributeRelation not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) QueryProductCategoryAttributeRelationList(context.Context, *QueryProductCategoryAttributeRelationListReq) (*QueryProductCategoryAttributeRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCategoryAttributeRelationList not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer() {
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) testEmbeddedByValue() {}

// UnsafeProductCategoryAttributeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryAttributeRelationServiceServer will
// result in compilation errors.
type UnsafeProductCategoryAttributeRelationServiceServer interface {
	mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer()
}

func RegisterProductCategoryAttributeRelationServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryAttributeRelationServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductCategoryAttributeRelationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductCategoryAttributeRelationService_ServiceDesc, srv)
}

func _ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductCategoryAttributeRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).AddProductCategoryAttributeRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).AddProductCategoryAttributeRelation(ctx, req.(*AddProductCategoryAttributeRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCategoryAttributeRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).QueryProductCategoryAttributeRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).QueryProductCategoryAttributeRelationList(ctx, req.(*QueryProductCategoryAttributeRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryAttributeRelationService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryAttributeRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryAttributeRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCategoryAttributeRelationService",
	HandlerType: (*ProductCategoryAttributeRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductCategoryAttributeRelation",
			Handler:    _ProductCategoryAttributeRelationService_AddProductCategoryAttributeRelation_Handler,
		},
		{
			MethodName: "QueryProductCategoryAttributeRelationList",
			Handler:    _ProductCategoryAttributeRelationService_QueryProductCategoryAttributeRelationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductCollectService_AddProductCollect_FullMethodName         = "/pmsclient.ProductCollectService/AddProductCollect"
	ProductCollectService_DeleteProductCollect_FullMethodName      = "/pmsclient.ProductCollectService/DeleteProductCollect"
	ProductCollectService_QueryProductCollectDetail_FullMethodName = "/pmsclient.ProductCollectService/QueryProductCollectDetail"
	ProductCollectService_QueryProductCollectList_FullMethodName   = "/pmsclient.ProductCollectService/QueryProductCollectList"
)

// ProductCollectServiceClient is the client API for ProductCollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 收藏表
type ProductCollectServiceClient interface {
	// 添加收藏表
	AddProductCollect(ctx context.Context, in *AddProductCollectReq, opts ...grpc.CallOption) (*AddProductCollectResp, error)
	// 删除收藏表
	DeleteProductCollect(ctx context.Context, in *DeleteProductCollectReq, opts ...grpc.CallOption) (*DeleteProductCollectResp, error)
	// 查询收藏表详情
	QueryProductCollectDetail(ctx context.Context, in *QueryProductCollectDetailReq, opts ...grpc.CallOption) (*QueryProductCollectDetailResp, error)
	// 查询收藏表列表
	QueryProductCollectList(ctx context.Context, in *QueryProductCollectListReq, opts ...grpc.CallOption) (*QueryProductCollectListResp, error)
}

type productCollectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCollectServiceClient(cc grpc.ClientConnInterface) ProductCollectServiceClient {
	return &productCollectServiceClient{cc}
}

func (c *productCollectServiceClient) AddProductCollect(ctx context.Context, in *AddProductCollectReq, opts ...grpc.CallOption) (*AddProductCollectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductCollectResp)
	err := c.cc.Invoke(ctx, ProductCollectService_AddProductCollect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectServiceClient) DeleteProductCollect(ctx context.Context, in *DeleteProductCollectReq, opts ...grpc.CallOption) (*DeleteProductCollectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductCollectResp)
	err := c.cc.Invoke(ctx, ProductCollectService_DeleteProductCollect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectServiceClient) QueryProductCollectDetail(ctx context.Context, in *QueryProductCollectDetailReq, opts ...grpc.CallOption) (*QueryProductCollectDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductCollectDetailResp)
	err := c.cc.Invoke(ctx, ProductCollectService_QueryProductCollectDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCollectServiceClient) QueryProductCollectList(ctx context.Context, in *QueryProductCollectListReq, opts ...grpc.CallOption) (*QueryProductCollectListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductCollectListResp)
	err := c.cc.Invoke(ctx, ProductCollectService_QueryProductCollectList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCollectServiceServer is the server API for ProductCollectService service.
// All implementations must embed UnimplementedProductCollectServiceServer
// for forward compatibility.
//
// 收藏表
type ProductCollectServiceServer interface {
	// 添加收藏表
	AddProductCollect(context.Context, *AddProductCollectReq) (*AddProductCollectResp, error)
	// 删除收藏表
	DeleteProductCollect(context.Context, *DeleteProductCollectReq) (*DeleteProductCollectResp, error)
	// 查询收藏表详情
	QueryProductCollectDetail(context.Context, *QueryProductCollectDetailReq) (*QueryProductCollectDetailResp, error)
	// 查询收藏表列表
	QueryProductCollectList(context.Context, *QueryProductCollectListReq) (*QueryProductCollectListResp, error)
	mustEmbedUnimplementedProductCollectServiceServer()
}

// UnimplementedProductCollectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductCollectServiceServer struct{}

func (UnimplementedProductCollectServiceServer) AddProductCollect(context.Context, *AddProductCollectReq) (*AddProductCollectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductCollect not implemented")
}
func (UnimplementedProductCollectServiceServer) DeleteProductCollect(context.Context, *DeleteProductCollectReq) (*DeleteProductCollectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCollect not implemented")
}
func (UnimplementedProductCollectServiceServer) QueryProductCollectDetail(context.Context, *QueryProductCollectDetailReq) (*QueryProductCollectDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCollectDetail not implemented")
}
func (UnimplementedProductCollectServiceServer) QueryProductCollectList(context.Context, *QueryProductCollectListReq) (*QueryProductCollectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductCollectList not implemented")
}
func (UnimplementedProductCollectServiceServer) mustEmbedUnimplementedProductCollectServiceServer() {}
func (UnimplementedProductCollectServiceServer) testEmbeddedByValue()                               {}

// UnsafeProductCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCollectServiceServer will
// result in compilation errors.
type UnsafeProductCollectServiceServer interface {
	mustEmbedUnimplementedProductCollectServiceServer()
}

func RegisterProductCollectServiceServer(s grpc.ServiceRegistrar, srv ProductCollectServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductCollectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductCollectService_ServiceDesc, srv)
}

func _ProductCollectService_AddProductCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).AddProductCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_AddProductCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).AddProductCollect(ctx, req.(*AddProductCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectService_DeleteProductCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).DeleteProductCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_DeleteProductCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).DeleteProductCollect(ctx, req.(*DeleteProductCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectService_QueryProductCollectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCollectDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).QueryProductCollectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_QueryProductCollectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).QueryProductCollectDetail(ctx, req.(*QueryProductCollectDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCollectService_QueryProductCollectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductCollectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCollectServiceServer).QueryProductCollectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCollectService_QueryProductCollectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCollectServiceServer).QueryProductCollectList(ctx, req.(*QueryProductCollectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCollectService_ServiceDesc is the grpc.ServiceDesc for ProductCollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCollectService",
	HandlerType: (*ProductCollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductCollect",
			Handler:    _ProductCollectService_AddProductCollect_Handler,
		},
		{
			MethodName: "DeleteProductCollect",
			Handler:    _ProductCollectService_DeleteProductCollect_Handler,
		},
		{
			MethodName: "QueryProductCollectDetail",
			Handler:    _ProductCollectService_QueryProductCollectDetail_Handler,
		},
		{
			MethodName: "QueryProductCollectList",
			Handler:    _ProductCollectService_QueryProductCollectList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	CommentService_AddComment_FullMethodName         = "/pmsclient.CommentService/AddComment"
	CommentService_DeleteComment_FullMethodName      = "/pmsclient.CommentService/DeleteComment"
	CommentService_UpdateComment_FullMethodName      = "/pmsclient.CommentService/UpdateComment"
	CommentService_QueryCommentDetail_FullMethodName = "/pmsclient.CommentService/QueryCommentDetail"
	CommentService_QueryCommentList_FullMethodName   = "/pmsclient.CommentService/QueryCommentList"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品评价
type CommentServiceClient interface {
	// 添加商品评价
	AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
	// 删除商品评价
	DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error)
	// 更新商品评价
	UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error)
	// 查询商品评价详情
	QueryCommentDetail(ctx context.Context, in *QueryCommentDetailReq, opts ...grpc.CallOption) (*QueryCommentDetailResp, error)
	// 查询商品评价列表
	QueryCommentList(ctx context.Context, in *QueryCommentListReq, opts ...grpc.CallOption) (*QueryCommentListResp, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResp)
	err := c.cc.Invoke(ctx, CommentService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResp)
	err := c.cc.Invoke(ctx, CommentService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommentResp)
	err := c.cc.Invoke(ctx, CommentService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) QueryCommentDetail(ctx context.Context, in *QueryCommentDetailReq, opts ...grpc.CallOption) (*QueryCommentDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCommentDetailResp)
	err := c.cc.Invoke(ctx, CommentService_QueryCommentDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) QueryCommentList(ctx context.Context, in *QueryCommentListReq, opts ...grpc.CallOption) (*QueryCommentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCommentListResp)
	err := c.cc.Invoke(ctx, CommentService_QueryCommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility.
//
// 商品评价
type CommentServiceServer interface {
	// 添加商品评价
	AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error)
	// 删除商品评价
	DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentResp, error)
	// 更新商品评价
	UpdateComment(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error)
	// 查询商品评价详情
	QueryCommentDetail(context.Context, *QueryCommentDetailReq) (*QueryCommentDetailResp, error)
	// 查询商品评价列表
	QueryCommentList(context.Context, *QueryCommentListReq) (*QueryCommentListResp, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentServiceServer struct{}

func (UnimplementedCommentServiceServer) AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServiceServer) UpdateComment(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentServiceServer) QueryCommentDetail(context.Context, *QueryCommentDetailReq) (*QueryCommentDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentDetail not implemented")
}
func (UnimplementedCommentServiceServer) QueryCommentList(context.Context, *QueryCommentListReq) (*QueryCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentList not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}
func (UnimplementedCommentServiceServer) testEmbeddedByValue()                        {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).AddComment(ctx, req.(*AddCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*DeleteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateComment(ctx, req.(*UpdateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_QueryCommentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).QueryCommentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_QueryCommentDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).QueryCommentDetail(ctx, req.(*QueryCommentDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_QueryCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).QueryCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_QueryCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).QueryCommentList(ctx, req.(*QueryCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _CommentService_AddComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentService_UpdateComment_Handler,
		},
		{
			MethodName: "QueryCommentDetail",
			Handler:    _CommentService_QueryCommentDetail_Handler,
		},
		{
			MethodName: "QueryCommentList",
			Handler:    _CommentService_QueryCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	CommentReplayService_AddCommentReplay_FullMethodName         = "/pmsclient.CommentReplayService/AddCommentReplay"
	CommentReplayService_DeleteCommentReplay_FullMethodName      = "/pmsclient.CommentReplayService/DeleteCommentReplay"
	CommentReplayService_UpdateCommentReplay_FullMethodName      = "/pmsclient.CommentReplayService/UpdateCommentReplay"
	CommentReplayService_QueryCommentReplayDetail_FullMethodName = "/pmsclient.CommentReplayService/QueryCommentReplayDetail"
	CommentReplayService_QueryCommentReplayList_FullMethodName   = "/pmsclient.CommentReplayService/QueryCommentReplayList"
)

// CommentReplayServiceClient is the client API for CommentReplayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 产品评价回复
type CommentReplayServiceClient interface {
	// 添加产品评价回复
	AddCommentReplay(ctx context.Context, in *AddCommentReplayReq, opts ...grpc.CallOption) (*AddCommentReplayResp, error)
	// 删除产品评价回复
	DeleteCommentReplay(ctx context.Context, in *DeleteCommentReplayReq, opts ...grpc.CallOption) (*DeleteCommentReplayResp, error)
	// 更新产品评价回复
	UpdateCommentReplay(ctx context.Context, in *UpdateCommentReplayReq, opts ...grpc.CallOption) (*UpdateCommentReplayResp, error)
	// 查询产品评价回复详情
	QueryCommentReplayDetail(ctx context.Context, in *QueryCommentReplayDetailReq, opts ...grpc.CallOption) (*QueryCommentReplayDetailResp, error)
	// 查询产品评价回复列表
	QueryCommentReplayList(ctx context.Context, in *QueryCommentReplayListReq, opts ...grpc.CallOption) (*QueryCommentReplayListResp, error)
}

type commentReplayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentReplayServiceClient(cc grpc.ClientConnInterface) CommentReplayServiceClient {
	return &commentReplayServiceClient{cc}
}

func (c *commentReplayServiceClient) AddCommentReplay(ctx context.Context, in *AddCommentReplayReq, opts ...grpc.CallOption) (*AddCommentReplayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentReplayResp)
	err := c.cc.Invoke(ctx, CommentReplayService_AddCommentReplay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) DeleteCommentReplay(ctx context.Context, in *DeleteCommentReplayReq, opts ...grpc.CallOption) (*DeleteCommentReplayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentReplayResp)
	err := c.cc.Invoke(ctx, CommentReplayService_DeleteCommentReplay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) UpdateCommentReplay(ctx context.Context, in *UpdateCommentReplayReq, opts ...grpc.CallOption) (*UpdateCommentReplayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommentReplayResp)
	err := c.cc.Invoke(ctx, CommentReplayService_UpdateCommentReplay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) QueryCommentReplayDetail(ctx context.Context, in *QueryCommentReplayDetailReq, opts ...grpc.CallOption) (*QueryCommentReplayDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCommentReplayDetailResp)
	err := c.cc.Invoke(ctx, CommentReplayService_QueryCommentReplayDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) QueryCommentReplayList(ctx context.Context, in *QueryCommentReplayListReq, opts ...grpc.CallOption) (*QueryCommentReplayListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCommentReplayListResp)
	err := c.cc.Invoke(ctx, CommentReplayService_QueryCommentReplayList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentReplayServiceServer is the server API for CommentReplayService service.
// All implementations must embed UnimplementedCommentReplayServiceServer
// for forward compatibility.
//
// 产品评价回复
type CommentReplayServiceServer interface {
	// 添加产品评价回复
	AddCommentReplay(context.Context, *AddCommentReplayReq) (*AddCommentReplayResp, error)
	// 删除产品评价回复
	DeleteCommentReplay(context.Context, *DeleteCommentReplayReq) (*DeleteCommentReplayResp, error)
	// 更新产品评价回复
	UpdateCommentReplay(context.Context, *UpdateCommentReplayReq) (*UpdateCommentReplayResp, error)
	// 查询产品评价回复详情
	QueryCommentReplayDetail(context.Context, *QueryCommentReplayDetailReq) (*QueryCommentReplayDetailResp, error)
	// 查询产品评价回复列表
	QueryCommentReplayList(context.Context, *QueryCommentReplayListReq) (*QueryCommentReplayListResp, error)
	mustEmbedUnimplementedCommentReplayServiceServer()
}

// UnimplementedCommentReplayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentReplayServiceServer struct{}

func (UnimplementedCommentReplayServiceServer) AddCommentReplay(context.Context, *AddCommentReplayReq) (*AddCommentReplayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentReplay not implemented")
}
func (UnimplementedCommentReplayServiceServer) DeleteCommentReplay(context.Context, *DeleteCommentReplayReq) (*DeleteCommentReplayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentReplay not implemented")
}
func (UnimplementedCommentReplayServiceServer) UpdateCommentReplay(context.Context, *UpdateCommentReplayReq) (*UpdateCommentReplayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentReplay not implemented")
}
func (UnimplementedCommentReplayServiceServer) QueryCommentReplayDetail(context.Context, *QueryCommentReplayDetailReq) (*QueryCommentReplayDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentReplayDetail not implemented")
}
func (UnimplementedCommentReplayServiceServer) QueryCommentReplayList(context.Context, *QueryCommentReplayListReq) (*QueryCommentReplayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommentReplayList not implemented")
}
func (UnimplementedCommentReplayServiceServer) mustEmbedUnimplementedCommentReplayServiceServer() {}
func (UnimplementedCommentReplayServiceServer) testEmbeddedByValue()                              {}

// UnsafeCommentReplayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentReplayServiceServer will
// result in compilation errors.
type UnsafeCommentReplayServiceServer interface {
	mustEmbedUnimplementedCommentReplayServiceServer()
}

func RegisterCommentReplayServiceServer(s grpc.ServiceRegistrar, srv CommentReplayServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommentReplayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentReplayService_ServiceDesc, srv)
}

func _CommentReplayService_AddCommentReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReplayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).AddCommentReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_AddCommentReplay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).AddCommentReplay(ctx, req.(*AddCommentReplayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_DeleteCommentReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReplayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).DeleteCommentReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_DeleteCommentReplay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).DeleteCommentReplay(ctx, req.(*DeleteCommentReplayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_UpdateCommentReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentReplayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).UpdateCommentReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_UpdateCommentReplay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).UpdateCommentReplay(ctx, req.(*UpdateCommentReplayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_QueryCommentReplayDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentReplayDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).QueryCommentReplayDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_QueryCommentReplayDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).QueryCommentReplayDetail(ctx, req.(*QueryCommentReplayDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_QueryCommentReplayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommentReplayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).QueryCommentReplayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentReplayService_QueryCommentReplayList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).QueryCommentReplayList(ctx, req.(*QueryCommentReplayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentReplayService_ServiceDesc is the grpc.ServiceDesc for CommentReplayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentReplayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.CommentReplayService",
	HandlerType: (*CommentReplayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCommentReplay",
			Handler:    _CommentReplayService_AddCommentReplay_Handler,
		},
		{
			MethodName: "DeleteCommentReplay",
			Handler:    _CommentReplayService_DeleteCommentReplay_Handler,
		},
		{
			MethodName: "UpdateCommentReplay",
			Handler:    _CommentReplayService_UpdateCommentReplay_Handler,
		},
		{
			MethodName: "QueryCommentReplayDetail",
			Handler:    _CommentReplayService_QueryCommentReplayDetail_Handler,
		},
		{
			MethodName: "QueryCommentReplayList",
			Handler:    _CommentReplayService_QueryCommentReplayList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	FeightTemplateService_AddFeightTemplate_FullMethodName         = "/pmsclient.FeightTemplateService/AddFeightTemplate"
	FeightTemplateService_DeleteFeightTemplate_FullMethodName      = "/pmsclient.FeightTemplateService/DeleteFeightTemplate"
	FeightTemplateService_UpdateFeightTemplate_FullMethodName      = "/pmsclient.FeightTemplateService/UpdateFeightTemplate"
	FeightTemplateService_QueryFeightTemplateDetail_FullMethodName = "/pmsclient.FeightTemplateService/QueryFeightTemplateDetail"
	FeightTemplateService_QueryFeightTemplateList_FullMethodName   = "/pmsclient.FeightTemplateService/QueryFeightTemplateList"
)

// FeightTemplateServiceClient is the client API for FeightTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 运费模版
type FeightTemplateServiceClient interface {
	// 添加运费模版
	AddFeightTemplate(ctx context.Context, in *AddFeightTemplateReq, opts ...grpc.CallOption) (*AddFeightTemplateResp, error)
	// 删除运费模版
	DeleteFeightTemplate(ctx context.Context, in *DeleteFeightTemplateReq, opts ...grpc.CallOption) (*DeleteFeightTemplateResp, error)
	// 更新运费模版
	UpdateFeightTemplate(ctx context.Context, in *UpdateFeightTemplateReq, opts ...grpc.CallOption) (*UpdateFeightTemplateResp, error)
	// 查询运费模版详情
	QueryFeightTemplateDetail(ctx context.Context, in *QueryFeightTemplateDetailReq, opts ...grpc.CallOption) (*QueryFeightTemplateDetailResp, error)
	// 查询运费模版列表
	QueryFeightTemplateList(ctx context.Context, in *QueryFeightTemplateListReq, opts ...grpc.CallOption) (*QueryFeightTemplateListResp, error)
}

type feightTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeightTemplateServiceClient(cc grpc.ClientConnInterface) FeightTemplateServiceClient {
	return &feightTemplateServiceClient{cc}
}

func (c *feightTemplateServiceClient) AddFeightTemplate(ctx context.Context, in *AddFeightTemplateReq, opts ...grpc.CallOption) (*AddFeightTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFeightTemplateResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_AddFeightTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) DeleteFeightTemplate(ctx context.Context, in *DeleteFeightTemplateReq, opts ...grpc.CallOption) (*DeleteFeightTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFeightTemplateResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_DeleteFeightTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) UpdateFeightTemplate(ctx context.Context, in *UpdateFeightTemplateReq, opts ...grpc.CallOption) (*UpdateFeightTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeightTemplateResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_UpdateFeightTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) QueryFeightTemplateDetail(ctx context.Context, in *QueryFeightTemplateDetailReq, opts ...grpc.CallOption) (*QueryFeightTemplateDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeightTemplateDetailResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_QueryFeightTemplateDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) QueryFeightTemplateList(ctx context.Context, in *QueryFeightTemplateListReq, opts ...grpc.CallOption) (*QueryFeightTemplateListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeightTemplateListResp)
	err := c.cc.Invoke(ctx, FeightTemplateService_QueryFeightTemplateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeightTemplateServiceServer is the server API for FeightTemplateService service.
// All implementations must embed UnimplementedFeightTemplateServiceServer
// for forward compatibility.
//
// 运费模版
type FeightTemplateServiceServer interface {
	// 添加运费模版
	AddFeightTemplate(context.Context, *AddFeightTemplateReq) (*AddFeightTemplateResp, error)
	// 删除运费模版
	DeleteFeightTemplate(context.Context, *DeleteFeightTemplateReq) (*DeleteFeightTemplateResp, error)
	// 更新运费模版
	UpdateFeightTemplate(context.Context, *UpdateFeightTemplateReq) (*UpdateFeightTemplateResp, error)
	// 查询运费模版详情
	QueryFeightTemplateDetail(context.Context, *QueryFeightTemplateDetailReq) (*QueryFeightTemplateDetailResp, error)
	// 查询运费模版列表
	QueryFeightTemplateList(context.Context, *QueryFeightTemplateListReq) (*QueryFeightTemplateListResp, error)
	mustEmbedUnimplementedFeightTemplateServiceServer()
}

// UnimplementedFeightTemplateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeightTemplateServiceServer struct{}

func (UnimplementedFeightTemplateServiceServer) AddFeightTemplate(context.Context, *AddFeightTemplateReq) (*AddFeightTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeightTemplate not implemented")
}
func (UnimplementedFeightTemplateServiceServer) DeleteFeightTemplate(context.Context, *DeleteFeightTemplateReq) (*DeleteFeightTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeightTemplate not implemented")
}
func (UnimplementedFeightTemplateServiceServer) UpdateFeightTemplate(context.Context, *UpdateFeightTemplateReq) (*UpdateFeightTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeightTemplate not implemented")
}
func (UnimplementedFeightTemplateServiceServer) QueryFeightTemplateDetail(context.Context, *QueryFeightTemplateDetailReq) (*QueryFeightTemplateDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeightTemplateDetail not implemented")
}
func (UnimplementedFeightTemplateServiceServer) QueryFeightTemplateList(context.Context, *QueryFeightTemplateListReq) (*QueryFeightTemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeightTemplateList not implemented")
}
func (UnimplementedFeightTemplateServiceServer) mustEmbedUnimplementedFeightTemplateServiceServer() {}
func (UnimplementedFeightTemplateServiceServer) testEmbeddedByValue()                               {}

// UnsafeFeightTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeightTemplateServiceServer will
// result in compilation errors.
type UnsafeFeightTemplateServiceServer interface {
	mustEmbedUnimplementedFeightTemplateServiceServer()
}

func RegisterFeightTemplateServiceServer(s grpc.ServiceRegistrar, srv FeightTemplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeightTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeightTemplateService_ServiceDesc, srv)
}

func _FeightTemplateService_AddFeightTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeightTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).AddFeightTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_AddFeightTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).AddFeightTemplate(ctx, req.(*AddFeightTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_DeleteFeightTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeightTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).DeleteFeightTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_DeleteFeightTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).DeleteFeightTemplate(ctx, req.(*DeleteFeightTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_UpdateFeightTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeightTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).UpdateFeightTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_UpdateFeightTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).UpdateFeightTemplate(ctx, req.(*UpdateFeightTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_QueryFeightTemplateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeightTemplateDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_QueryFeightTemplateDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateDetail(ctx, req.(*QueryFeightTemplateDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_QueryFeightTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeightTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeightTemplateService_QueryFeightTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).QueryFeightTemplateList(ctx, req.(*QueryFeightTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeightTemplateService_ServiceDesc is the grpc.ServiceDesc for FeightTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeightTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.FeightTemplateService",
	HandlerType: (*FeightTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeightTemplate",
			Handler:    _FeightTemplateService_AddFeightTemplate_Handler,
		},
		{
			MethodName: "DeleteFeightTemplate",
			Handler:    _FeightTemplateService_DeleteFeightTemplate_Handler,
		},
		{
			MethodName: "UpdateFeightTemplate",
			Handler:    _FeightTemplateService_UpdateFeightTemplate_Handler,
		},
		{
			MethodName: "QueryFeightTemplateDetail",
			Handler:    _FeightTemplateService_QueryFeightTemplateDetail_Handler,
		},
		{
			MethodName: "QueryFeightTemplateList",
			Handler:    _FeightTemplateService_QueryFeightTemplateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductFullReductionService_AddProductFullReduction_FullMethodName       = "/pmsclient.ProductFullReductionService/AddProductFullReduction"
	ProductFullReductionService_DeleteProductFullReduction_FullMethodName    = "/pmsclient.ProductFullReductionService/DeleteProductFullReduction"
	ProductFullReductionService_QueryProductFullReductionList_FullMethodName = "/pmsclient.ProductFullReductionService/QueryProductFullReductionList"
)

// ProductFullReductionServiceClient is the client API for ProductFullReductionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 产品满减表(只针对同商品)
type ProductFullReductionServiceClient interface {
	// 添加产品满减表(只针对同商品)
	AddProductFullReduction(ctx context.Context, in *AddProductFullReductionReq, opts ...grpc.CallOption) (*AddProductFullReductionResp, error)
	// 删除产品满减表(只针对同商品)
	DeleteProductFullReduction(ctx context.Context, in *DeleteProductFullReductionReq, opts ...grpc.CallOption) (*DeleteProductFullReductionResp, error)
	// 查询产品满减表(只针对同商品)列表
	QueryProductFullReductionList(ctx context.Context, in *QueryProductFullReductionListReq, opts ...grpc.CallOption) (*QueryProductFullReductionListResp, error)
}

type productFullReductionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductFullReductionServiceClient(cc grpc.ClientConnInterface) ProductFullReductionServiceClient {
	return &productFullReductionServiceClient{cc}
}

func (c *productFullReductionServiceClient) AddProductFullReduction(ctx context.Context, in *AddProductFullReductionReq, opts ...grpc.CallOption) (*AddProductFullReductionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductFullReductionResp)
	err := c.cc.Invoke(ctx, ProductFullReductionService_AddProductFullReduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFullReductionServiceClient) DeleteProductFullReduction(ctx context.Context, in *DeleteProductFullReductionReq, opts ...grpc.CallOption) (*DeleteProductFullReductionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductFullReductionResp)
	err := c.cc.Invoke(ctx, ProductFullReductionService_DeleteProductFullReduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFullReductionServiceClient) QueryProductFullReductionList(ctx context.Context, in *QueryProductFullReductionListReq, opts ...grpc.CallOption) (*QueryProductFullReductionListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductFullReductionListResp)
	err := c.cc.Invoke(ctx, ProductFullReductionService_QueryProductFullReductionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductFullReductionServiceServer is the server API for ProductFullReductionService service.
// All implementations must embed UnimplementedProductFullReductionServiceServer
// for forward compatibility.
//
// 产品满减表(只针对同商品)
type ProductFullReductionServiceServer interface {
	// 添加产品满减表(只针对同商品)
	AddProductFullReduction(context.Context, *AddProductFullReductionReq) (*AddProductFullReductionResp, error)
	// 删除产品满减表(只针对同商品)
	DeleteProductFullReduction(context.Context, *DeleteProductFullReductionReq) (*DeleteProductFullReductionResp, error)
	// 查询产品满减表(只针对同商品)列表
	QueryProductFullReductionList(context.Context, *QueryProductFullReductionListReq) (*QueryProductFullReductionListResp, error)
	mustEmbedUnimplementedProductFullReductionServiceServer()
}

// UnimplementedProductFullReductionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductFullReductionServiceServer struct{}

func (UnimplementedProductFullReductionServiceServer) AddProductFullReduction(context.Context, *AddProductFullReductionReq) (*AddProductFullReductionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductFullReduction not implemented")
}
func (UnimplementedProductFullReductionServiceServer) DeleteProductFullReduction(context.Context, *DeleteProductFullReductionReq) (*DeleteProductFullReductionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductFullReduction not implemented")
}
func (UnimplementedProductFullReductionServiceServer) QueryProductFullReductionList(context.Context, *QueryProductFullReductionListReq) (*QueryProductFullReductionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductFullReductionList not implemented")
}
func (UnimplementedProductFullReductionServiceServer) mustEmbedUnimplementedProductFullReductionServiceServer() {
}
func (UnimplementedProductFullReductionServiceServer) testEmbeddedByValue() {}

// UnsafeProductFullReductionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductFullReductionServiceServer will
// result in compilation errors.
type UnsafeProductFullReductionServiceServer interface {
	mustEmbedUnimplementedProductFullReductionServiceServer()
}

func RegisterProductFullReductionServiceServer(s grpc.ServiceRegistrar, srv ProductFullReductionServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductFullReductionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductFullReductionService_ServiceDesc, srv)
}

func _ProductFullReductionService_AddProductFullReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductFullReductionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).AddProductFullReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductFullReductionService_AddProductFullReduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).AddProductFullReduction(ctx, req.(*AddProductFullReductionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFullReductionService_DeleteProductFullReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductFullReductionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).DeleteProductFullReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductFullReductionService_DeleteProductFullReduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).DeleteProductFullReduction(ctx, req.(*DeleteProductFullReductionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFullReductionService_QueryProductFullReductionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductFullReductionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).QueryProductFullReductionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductFullReductionService_QueryProductFullReductionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).QueryProductFullReductionList(ctx, req.(*QueryProductFullReductionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductFullReductionService_ServiceDesc is the grpc.ServiceDesc for ProductFullReductionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductFullReductionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductFullReductionService",
	HandlerType: (*ProductFullReductionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductFullReduction",
			Handler:    _ProductFullReductionService_AddProductFullReduction_Handler,
		},
		{
			MethodName: "DeleteProductFullReduction",
			Handler:    _ProductFullReductionService_DeleteProductFullReduction_Handler,
		},
		{
			MethodName: "QueryProductFullReductionList",
			Handler:    _ProductFullReductionService_QueryProductFullReductionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductLadderService_AddProductLadder_FullMethodName         = "/pmsclient.ProductLadderService/AddProductLadder"
	ProductLadderService_DeleteProductLadder_FullMethodName      = "/pmsclient.ProductLadderService/DeleteProductLadder"
	ProductLadderService_UpdateProductLadder_FullMethodName      = "/pmsclient.ProductLadderService/UpdateProductLadder"
	ProductLadderService_QueryProductLadderDetail_FullMethodName = "/pmsclient.ProductLadderService/QueryProductLadderDetail"
	ProductLadderService_QueryProductLadderList_FullMethodName   = "/pmsclient.ProductLadderService/QueryProductLadderList"
)

// ProductLadderServiceClient is the client API for ProductLadderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 产品阶梯价格表(只针对同商品)
type ProductLadderServiceClient interface {
	// 添加产品阶梯价格表(只针对同商品)
	AddProductLadder(ctx context.Context, in *AddProductLadderReq, opts ...grpc.CallOption) (*AddProductLadderResp, error)
	// 删除产品阶梯价格表(只针对同商品)
	DeleteProductLadder(ctx context.Context, in *DeleteProductLadderReq, opts ...grpc.CallOption) (*DeleteProductLadderResp, error)
	// 更新产品阶梯价格表(只针对同商品)
	UpdateProductLadder(ctx context.Context, in *UpdateProductLadderReq, opts ...grpc.CallOption) (*UpdateProductLadderResp, error)
	// 查询产品阶梯价格表(只针对同商品)详情
	QueryProductLadderDetail(ctx context.Context, in *QueryProductLadderDetailReq, opts ...grpc.CallOption) (*QueryProductLadderDetailResp, error)
	// 查询产品阶梯价格表(只针对同商品)列表
	QueryProductLadderList(ctx context.Context, in *QueryProductLadderListReq, opts ...grpc.CallOption) (*QueryProductLadderListResp, error)
}

type productLadderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductLadderServiceClient(cc grpc.ClientConnInterface) ProductLadderServiceClient {
	return &productLadderServiceClient{cc}
}

func (c *productLadderServiceClient) AddProductLadder(ctx context.Context, in *AddProductLadderReq, opts ...grpc.CallOption) (*AddProductLadderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductLadderResp)
	err := c.cc.Invoke(ctx, ProductLadderService_AddProductLadder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) DeleteProductLadder(ctx context.Context, in *DeleteProductLadderReq, opts ...grpc.CallOption) (*DeleteProductLadderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductLadderResp)
	err := c.cc.Invoke(ctx, ProductLadderService_DeleteProductLadder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) UpdateProductLadder(ctx context.Context, in *UpdateProductLadderReq, opts ...grpc.CallOption) (*UpdateProductLadderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductLadderResp)
	err := c.cc.Invoke(ctx, ProductLadderService_UpdateProductLadder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) QueryProductLadderDetail(ctx context.Context, in *QueryProductLadderDetailReq, opts ...grpc.CallOption) (*QueryProductLadderDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductLadderDetailResp)
	err := c.cc.Invoke(ctx, ProductLadderService_QueryProductLadderDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) QueryProductLadderList(ctx context.Context, in *QueryProductLadderListReq, opts ...grpc.CallOption) (*QueryProductLadderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductLadderListResp)
	err := c.cc.Invoke(ctx, ProductLadderService_QueryProductLadderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductLadderServiceServer is the server API for ProductLadderService service.
// All implementations must embed UnimplementedProductLadderServiceServer
// for forward compatibility.
//
// 产品阶梯价格表(只针对同商品)
type ProductLadderServiceServer interface {
	// 添加产品阶梯价格表(只针对同商品)
	AddProductLadder(context.Context, *AddProductLadderReq) (*AddProductLadderResp, error)
	// 删除产品阶梯价格表(只针对同商品)
	DeleteProductLadder(context.Context, *DeleteProductLadderReq) (*DeleteProductLadderResp, error)
	// 更新产品阶梯价格表(只针对同商品)
	UpdateProductLadder(context.Context, *UpdateProductLadderReq) (*UpdateProductLadderResp, error)
	// 查询产品阶梯价格表(只针对同商品)详情
	QueryProductLadderDetail(context.Context, *QueryProductLadderDetailReq) (*QueryProductLadderDetailResp, error)
	// 查询产品阶梯价格表(只针对同商品)列表
	QueryProductLadderList(context.Context, *QueryProductLadderListReq) (*QueryProductLadderListResp, error)
	mustEmbedUnimplementedProductLadderServiceServer()
}

// UnimplementedProductLadderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductLadderServiceServer struct{}

func (UnimplementedProductLadderServiceServer) AddProductLadder(context.Context, *AddProductLadderReq) (*AddProductLadderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductLadder not implemented")
}
func (UnimplementedProductLadderServiceServer) DeleteProductLadder(context.Context, *DeleteProductLadderReq) (*DeleteProductLadderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductLadder not implemented")
}
func (UnimplementedProductLadderServiceServer) UpdateProductLadder(context.Context, *UpdateProductLadderReq) (*UpdateProductLadderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductLadder not implemented")
}
func (UnimplementedProductLadderServiceServer) QueryProductLadderDetail(context.Context, *QueryProductLadderDetailReq) (*QueryProductLadderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductLadderDetail not implemented")
}
func (UnimplementedProductLadderServiceServer) QueryProductLadderList(context.Context, *QueryProductLadderListReq) (*QueryProductLadderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductLadderList not implemented")
}
func (UnimplementedProductLadderServiceServer) mustEmbedUnimplementedProductLadderServiceServer() {}
func (UnimplementedProductLadderServiceServer) testEmbeddedByValue()                              {}

// UnsafeProductLadderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductLadderServiceServer will
// result in compilation errors.
type UnsafeProductLadderServiceServer interface {
	mustEmbedUnimplementedProductLadderServiceServer()
}

func RegisterProductLadderServiceServer(s grpc.ServiceRegistrar, srv ProductLadderServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductLadderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductLadderService_ServiceDesc, srv)
}

func _ProductLadderService_AddProductLadder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductLadderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).AddProductLadder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_AddProductLadder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).AddProductLadder(ctx, req.(*AddProductLadderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_DeleteProductLadder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductLadderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).DeleteProductLadder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_DeleteProductLadder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).DeleteProductLadder(ctx, req.(*DeleteProductLadderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_UpdateProductLadder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductLadderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).UpdateProductLadder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_UpdateProductLadder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).UpdateProductLadder(ctx, req.(*UpdateProductLadderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_QueryProductLadderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductLadderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).QueryProductLadderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_QueryProductLadderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).QueryProductLadderDetail(ctx, req.(*QueryProductLadderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_QueryProductLadderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductLadderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).QueryProductLadderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductLadderService_QueryProductLadderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).QueryProductLadderList(ctx, req.(*QueryProductLadderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductLadderService_ServiceDesc is the grpc.ServiceDesc for ProductLadderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductLadderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductLadderService",
	HandlerType: (*ProductLadderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductLadder",
			Handler:    _ProductLadderService_AddProductLadder_Handler,
		},
		{
			MethodName: "DeleteProductLadder",
			Handler:    _ProductLadderService_DeleteProductLadder_Handler,
		},
		{
			MethodName: "UpdateProductLadder",
			Handler:    _ProductLadderService_UpdateProductLadder_Handler,
		},
		{
			MethodName: "QueryProductLadderDetail",
			Handler:    _ProductLadderService_QueryProductLadderDetail_Handler,
		},
		{
			MethodName: "QueryProductLadderList",
			Handler:    _ProductLadderService_QueryProductLadderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductOperateLogService_AddProductOperateLog_FullMethodName         = "/pmsclient.ProductOperateLogService/AddProductOperateLog"
	ProductOperateLogService_DeleteProductOperateLog_FullMethodName      = "/pmsclient.ProductOperateLogService/DeleteProductOperateLog"
	ProductOperateLogService_QueryProductOperateLogDetail_FullMethodName = "/pmsclient.ProductOperateLogService/QueryProductOperateLogDetail"
	ProductOperateLogService_QueryProductOperateLogList_FullMethodName   = "/pmsclient.ProductOperateLogService/QueryProductOperateLogList"
)

// ProductOperateLogServiceClient is the client API for ProductOperateLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品操作日志
type ProductOperateLogServiceClient interface {
	// 添加商品操作日志
	AddProductOperateLog(ctx context.Context, in *AddProductOperateLogReq, opts ...grpc.CallOption) (*AddProductOperateLogResp, error)
	// 删除商品操作日志
	DeleteProductOperateLog(ctx context.Context, in *DeleteProductOperateLogReq, opts ...grpc.CallOption) (*DeleteProductOperateLogResp, error)
	// 查询商品操作日志详情
	QueryProductOperateLogDetail(ctx context.Context, in *QueryProductOperateLogDetailReq, opts ...grpc.CallOption) (*QueryProductOperateLogDetailResp, error)
	// 查询商品操作日志列表
	QueryProductOperateLogList(ctx context.Context, in *QueryProductOperateLogListReq, opts ...grpc.CallOption) (*QueryProductOperateLogListResp, error)
}

type productOperateLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductOperateLogServiceClient(cc grpc.ClientConnInterface) ProductOperateLogServiceClient {
	return &productOperateLogServiceClient{cc}
}

func (c *productOperateLogServiceClient) AddProductOperateLog(ctx context.Context, in *AddProductOperateLogReq, opts ...grpc.CallOption) (*AddProductOperateLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductOperateLogResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_AddProductOperateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) DeleteProductOperateLog(ctx context.Context, in *DeleteProductOperateLogReq, opts ...grpc.CallOption) (*DeleteProductOperateLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductOperateLogResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_DeleteProductOperateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) QueryProductOperateLogDetail(ctx context.Context, in *QueryProductOperateLogDetailReq, opts ...grpc.CallOption) (*QueryProductOperateLogDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductOperateLogDetailResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_QueryProductOperateLogDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) QueryProductOperateLogList(ctx context.Context, in *QueryProductOperateLogListReq, opts ...grpc.CallOption) (*QueryProductOperateLogListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductOperateLogListResp)
	err := c.cc.Invoke(ctx, ProductOperateLogService_QueryProductOperateLogList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductOperateLogServiceServer is the server API for ProductOperateLogService service.
// All implementations must embed UnimplementedProductOperateLogServiceServer
// for forward compatibility.
//
// 商品操作日志
type ProductOperateLogServiceServer interface {
	// 添加商品操作日志
	AddProductOperateLog(context.Context, *AddProductOperateLogReq) (*AddProductOperateLogResp, error)
	// 删除商品操作日志
	DeleteProductOperateLog(context.Context, *DeleteProductOperateLogReq) (*DeleteProductOperateLogResp, error)
	// 查询商品操作日志详情
	QueryProductOperateLogDetail(context.Context, *QueryProductOperateLogDetailReq) (*QueryProductOperateLogDetailResp, error)
	// 查询商品操作日志列表
	QueryProductOperateLogList(context.Context, *QueryProductOperateLogListReq) (*QueryProductOperateLogListResp, error)
	mustEmbedUnimplementedProductOperateLogServiceServer()
}

// UnimplementedProductOperateLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductOperateLogServiceServer struct{}

func (UnimplementedProductOperateLogServiceServer) AddProductOperateLog(context.Context, *AddProductOperateLogReq) (*AddProductOperateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductOperateLog not implemented")
}
func (UnimplementedProductOperateLogServiceServer) DeleteProductOperateLog(context.Context, *DeleteProductOperateLogReq) (*DeleteProductOperateLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductOperateLog not implemented")
}
func (UnimplementedProductOperateLogServiceServer) QueryProductOperateLogDetail(context.Context, *QueryProductOperateLogDetailReq) (*QueryProductOperateLogDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductOperateLogDetail not implemented")
}
func (UnimplementedProductOperateLogServiceServer) QueryProductOperateLogList(context.Context, *QueryProductOperateLogListReq) (*QueryProductOperateLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductOperateLogList not implemented")
}
func (UnimplementedProductOperateLogServiceServer) mustEmbedUnimplementedProductOperateLogServiceServer() {
}
func (UnimplementedProductOperateLogServiceServer) testEmbeddedByValue() {}

// UnsafeProductOperateLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOperateLogServiceServer will
// result in compilation errors.
type UnsafeProductOperateLogServiceServer interface {
	mustEmbedUnimplementedProductOperateLogServiceServer()
}

func RegisterProductOperateLogServiceServer(s grpc.ServiceRegistrar, srv ProductOperateLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductOperateLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductOperateLogService_ServiceDesc, srv)
}

func _ProductOperateLogService_AddProductOperateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductOperateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).AddProductOperateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_AddProductOperateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).AddProductOperateLog(ctx, req.(*AddProductOperateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_DeleteProductOperateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductOperateLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).DeleteProductOperateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_DeleteProductOperateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).DeleteProductOperateLog(ctx, req.(*DeleteProductOperateLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_QueryProductOperateLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductOperateLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_QueryProductOperateLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogDetail(ctx, req.(*QueryProductOperateLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_QueryProductOperateLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductOperateLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOperateLogService_QueryProductOperateLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).QueryProductOperateLogList(ctx, req.(*QueryProductOperateLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOperateLogService_ServiceDesc is the grpc.ServiceDesc for ProductOperateLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOperateLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductOperateLogService",
	HandlerType: (*ProductOperateLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductOperateLog",
			Handler:    _ProductOperateLogService_AddProductOperateLog_Handler,
		},
		{
			MethodName: "DeleteProductOperateLog",
			Handler:    _ProductOperateLogService_DeleteProductOperateLog_Handler,
		},
		{
			MethodName: "QueryProductOperateLogDetail",
			Handler:    _ProductOperateLogService_QueryProductOperateLogDetail_Handler,
		},
		{
			MethodName: "QueryProductOperateLogList",
			Handler:    _ProductOperateLogService_QueryProductOperateLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductSkuService_AddProductSku_FullMethodName         = "/pmsclient.ProductSkuService/AddProductSku"
	ProductSkuService_DeleteProductSku_FullMethodName      = "/pmsclient.ProductSkuService/DeleteProductSku"
	ProductSkuService_UpdateProductSku_FullMethodName      = "/pmsclient.ProductSkuService/UpdateProductSku"
	ProductSkuService_QueryProductSkuDetail_FullMethodName = "/pmsclient.ProductSkuService/QueryProductSkuDetail"
	ProductSkuService_QueryProductSkuList_FullMethodName   = "/pmsclient.ProductSkuService/QueryProductSkuList"
	ProductSkuService_ReleaseSkuStockLock_FullMethodName   = "/pmsclient.ProductSkuService/ReleaseSkuStockLock"
	ProductSkuService_LockSkuStockLock_FullMethodName      = "/pmsclient.ProductSkuService/LockSkuStockLock"
)

// ProductSkuServiceClient is the client API for ProductSkuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品SKU
type ProductSkuServiceClient interface {
	// 添加商品SKU
	AddProductSku(ctx context.Context, in *AddProductSkuReq, opts ...grpc.CallOption) (*AddProductSkuResp, error)
	// 删除商品SKU
	DeleteProductSku(ctx context.Context, in *DeleteProductSkuReq, opts ...grpc.CallOption) (*DeleteProductSkuResp, error)
	// 更新商品SKU
	UpdateProductSku(ctx context.Context, in *UpdateProductSkuReq, opts ...grpc.CallOption) (*UpdateProductSkuResp, error)
	// 查询商品SKU详情
	QueryProductSkuDetail(ctx context.Context, in *QueryProductSkuDetailReq, opts ...grpc.CallOption) (*QueryProductSkuDetailResp, error)
	// 查询商品SKU列表
	QueryProductSkuList(ctx context.Context, in *QueryProductSkuListReq, opts ...grpc.CallOption) (*QueryProductSkuListResp, error)
	// 取消订单的时候,释放库存
	ReleaseSkuStockLock(ctx context.Context, in *UpdateSkuStockReq, opts ...grpc.CallOption) (*UpdateSkuStockLockResp, error)
	// 下单的时候,锁定库存
	LockSkuStockLock(ctx context.Context, in *UpdateSkuStockReq, opts ...grpc.CallOption) (*UpdateSkuStockLockResp, error)
}

type productSkuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSkuServiceClient(cc grpc.ClientConnInterface) ProductSkuServiceClient {
	return &productSkuServiceClient{cc}
}

func (c *productSkuServiceClient) AddProductSku(ctx context.Context, in *AddProductSkuReq, opts ...grpc.CallOption) (*AddProductSkuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductSkuResp)
	err := c.cc.Invoke(ctx, ProductSkuService_AddProductSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuServiceClient) DeleteProductSku(ctx context.Context, in *DeleteProductSkuReq, opts ...grpc.CallOption) (*DeleteProductSkuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductSkuResp)
	err := c.cc.Invoke(ctx, ProductSkuService_DeleteProductSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuServiceClient) UpdateProductSku(ctx context.Context, in *UpdateProductSkuReq, opts ...grpc.CallOption) (*UpdateProductSkuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSkuResp)
	err := c.cc.Invoke(ctx, ProductSkuService_UpdateProductSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuServiceClient) QueryProductSkuDetail(ctx context.Context, in *QueryProductSkuDetailReq, opts ...grpc.CallOption) (*QueryProductSkuDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSkuDetailResp)
	err := c.cc.Invoke(ctx, ProductSkuService_QueryProductSkuDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuServiceClient) QueryProductSkuList(ctx context.Context, in *QueryProductSkuListReq, opts ...grpc.CallOption) (*QueryProductSkuListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSkuListResp)
	err := c.cc.Invoke(ctx, ProductSkuService_QueryProductSkuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuServiceClient) ReleaseSkuStockLock(ctx context.Context, in *UpdateSkuStockReq, opts ...grpc.CallOption) (*UpdateSkuStockLockResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSkuStockLockResp)
	err := c.cc.Invoke(ctx, ProductSkuService_ReleaseSkuStockLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuServiceClient) LockSkuStockLock(ctx context.Context, in *UpdateSkuStockReq, opts ...grpc.CallOption) (*UpdateSkuStockLockResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSkuStockLockResp)
	err := c.cc.Invoke(ctx, ProductSkuService_LockSkuStockLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSkuServiceServer is the server API for ProductSkuService service.
// All implementations must embed UnimplementedProductSkuServiceServer
// for forward compatibility.
//
// 商品SKU
type ProductSkuServiceServer interface {
	// 添加商品SKU
	AddProductSku(context.Context, *AddProductSkuReq) (*AddProductSkuResp, error)
	// 删除商品SKU
	DeleteProductSku(context.Context, *DeleteProductSkuReq) (*DeleteProductSkuResp, error)
	// 更新商品SKU
	UpdateProductSku(context.Context, *UpdateProductSkuReq) (*UpdateProductSkuResp, error)
	// 查询商品SKU详情
	QueryProductSkuDetail(context.Context, *QueryProductSkuDetailReq) (*QueryProductSkuDetailResp, error)
	// 查询商品SKU列表
	QueryProductSkuList(context.Context, *QueryProductSkuListReq) (*QueryProductSkuListResp, error)
	// 取消订单的时候,释放库存
	ReleaseSkuStockLock(context.Context, *UpdateSkuStockReq) (*UpdateSkuStockLockResp, error)
	// 下单的时候,锁定库存
	LockSkuStockLock(context.Context, *UpdateSkuStockReq) (*UpdateSkuStockLockResp, error)
	mustEmbedUnimplementedProductSkuServiceServer()
}

// UnimplementedProductSkuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductSkuServiceServer struct{}

func (UnimplementedProductSkuServiceServer) AddProductSku(context.Context, *AddProductSkuReq) (*AddProductSkuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductSku not implemented")
}
func (UnimplementedProductSkuServiceServer) DeleteProductSku(context.Context, *DeleteProductSkuReq) (*DeleteProductSkuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductSku not implemented")
}
func (UnimplementedProductSkuServiceServer) UpdateProductSku(context.Context, *UpdateProductSkuReq) (*UpdateProductSkuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductSku not implemented")
}
func (UnimplementedProductSkuServiceServer) QueryProductSkuDetail(context.Context, *QueryProductSkuDetailReq) (*QueryProductSkuDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSkuDetail not implemented")
}
func (UnimplementedProductSkuServiceServer) QueryProductSkuList(context.Context, *QueryProductSkuListReq) (*QueryProductSkuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSkuList not implemented")
}
func (UnimplementedProductSkuServiceServer) ReleaseSkuStockLock(context.Context, *UpdateSkuStockReq) (*UpdateSkuStockLockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSkuStockLock not implemented")
}
func (UnimplementedProductSkuServiceServer) LockSkuStockLock(context.Context, *UpdateSkuStockReq) (*UpdateSkuStockLockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockSkuStockLock not implemented")
}
func (UnimplementedProductSkuServiceServer) mustEmbedUnimplementedProductSkuServiceServer() {}
func (UnimplementedProductSkuServiceServer) testEmbeddedByValue()                           {}

// UnsafeProductSkuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSkuServiceServer will
// result in compilation errors.
type UnsafeProductSkuServiceServer interface {
	mustEmbedUnimplementedProductSkuServiceServer()
}

func RegisterProductSkuServiceServer(s grpc.ServiceRegistrar, srv ProductSkuServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductSkuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductSkuService_ServiceDesc, srv)
}

func _ProductSkuService_AddProductSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductSkuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServiceServer).AddProductSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSkuService_AddProductSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServiceServer).AddProductSku(ctx, req.(*AddProductSkuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSkuService_DeleteProductSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSkuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServiceServer).DeleteProductSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSkuService_DeleteProductSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServiceServer).DeleteProductSku(ctx, req.(*DeleteProductSkuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSkuService_UpdateProductSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSkuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServiceServer).UpdateProductSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSkuService_UpdateProductSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServiceServer).UpdateProductSku(ctx, req.(*UpdateProductSkuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSkuService_QueryProductSkuDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSkuDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServiceServer).QueryProductSkuDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSkuService_QueryProductSkuDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServiceServer).QueryProductSkuDetail(ctx, req.(*QueryProductSkuDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSkuService_QueryProductSkuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSkuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServiceServer).QueryProductSkuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSkuService_QueryProductSkuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServiceServer).QueryProductSkuList(ctx, req.(*QueryProductSkuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSkuService_ReleaseSkuStockLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkuStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServiceServer).ReleaseSkuStockLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSkuService_ReleaseSkuStockLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServiceServer).ReleaseSkuStockLock(ctx, req.(*UpdateSkuStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSkuService_LockSkuStockLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkuStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServiceServer).LockSkuStockLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSkuService_LockSkuStockLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServiceServer).LockSkuStockLock(ctx, req.(*UpdateSkuStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSkuService_ServiceDesc is the grpc.ServiceDesc for ProductSkuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSkuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductSkuService",
	HandlerType: (*ProductSkuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductSku",
			Handler:    _ProductSkuService_AddProductSku_Handler,
		},
		{
			MethodName: "DeleteProductSku",
			Handler:    _ProductSkuService_DeleteProductSku_Handler,
		},
		{
			MethodName: "UpdateProductSku",
			Handler:    _ProductSkuService_UpdateProductSku_Handler,
		},
		{
			MethodName: "QueryProductSkuDetail",
			Handler:    _ProductSkuService_QueryProductSkuDetail_Handler,
		},
		{
			MethodName: "QueryProductSkuList",
			Handler:    _ProductSkuService_QueryProductSkuList_Handler,
		},
		{
			MethodName: "ReleaseSkuStockLock",
			Handler:    _ProductSkuService_ReleaseSkuStockLock_Handler,
		},
		{
			MethodName: "LockSkuStockLock",
			Handler:    _ProductSkuService_LockSkuStockLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductSpecService_AddProductSpec_FullMethodName          = "/pmsclient.ProductSpecService/AddProductSpec"
	ProductSpecService_DeleteProductSpec_FullMethodName       = "/pmsclient.ProductSpecService/DeleteProductSpec"
	ProductSpecService_UpdateProductSpec_FullMethodName       = "/pmsclient.ProductSpecService/UpdateProductSpec"
	ProductSpecService_UpdateProductSpecStatus_FullMethodName = "/pmsclient.ProductSpecService/UpdateProductSpecStatus"
	ProductSpecService_QueryProductSpecDetail_FullMethodName  = "/pmsclient.ProductSpecService/QueryProductSpecDetail"
	ProductSpecService_QueryProductSpecList_FullMethodName    = "/pmsclient.ProductSpecService/QueryProductSpecList"
)

// ProductSpecServiceClient is the client API for ProductSpecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品规格
type ProductSpecServiceClient interface {
	// 添加商品规格
	AddProductSpec(ctx context.Context, in *AddProductSpecReq, opts ...grpc.CallOption) (*AddProductSpecResp, error)
	// 删除商品规格
	DeleteProductSpec(ctx context.Context, in *DeleteProductSpecReq, opts ...grpc.CallOption) (*DeleteProductSpecResp, error)
	// 更新商品规格
	UpdateProductSpec(ctx context.Context, in *UpdateProductSpecReq, opts ...grpc.CallOption) (*UpdateProductSpecResp, error)
	// 更新商品规格状态
	UpdateProductSpecStatus(ctx context.Context, in *UpdateProductSpecStatusReq, opts ...grpc.CallOption) (*UpdateProductSpecStatusResp, error)
	// 查询商品规格详情
	QueryProductSpecDetail(ctx context.Context, in *QueryProductSpecDetailReq, opts ...grpc.CallOption) (*QueryProductSpecDetailResp, error)
	// 查询商品规格列表
	QueryProductSpecList(ctx context.Context, in *QueryProductSpecListReq, opts ...grpc.CallOption) (*QueryProductSpecListResp, error)
}

type productSpecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSpecServiceClient(cc grpc.ClientConnInterface) ProductSpecServiceClient {
	return &productSpecServiceClient{cc}
}

func (c *productSpecServiceClient) AddProductSpec(ctx context.Context, in *AddProductSpecReq, opts ...grpc.CallOption) (*AddProductSpecResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductSpecResp)
	err := c.cc.Invoke(ctx, ProductSpecService_AddProductSpec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecServiceClient) DeleteProductSpec(ctx context.Context, in *DeleteProductSpecReq, opts ...grpc.CallOption) (*DeleteProductSpecResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductSpecResp)
	err := c.cc.Invoke(ctx, ProductSpecService_DeleteProductSpec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecServiceClient) UpdateProductSpec(ctx context.Context, in *UpdateProductSpecReq, opts ...grpc.CallOption) (*UpdateProductSpecResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpecResp)
	err := c.cc.Invoke(ctx, ProductSpecService_UpdateProductSpec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecServiceClient) UpdateProductSpecStatus(ctx context.Context, in *UpdateProductSpecStatusReq, opts ...grpc.CallOption) (*UpdateProductSpecStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpecStatusResp)
	err := c.cc.Invoke(ctx, ProductSpecService_UpdateProductSpecStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecServiceClient) QueryProductSpecDetail(ctx context.Context, in *QueryProductSpecDetailReq, opts ...grpc.CallOption) (*QueryProductSpecDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSpecDetailResp)
	err := c.cc.Invoke(ctx, ProductSpecService_QueryProductSpecDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecServiceClient) QueryProductSpecList(ctx context.Context, in *QueryProductSpecListReq, opts ...grpc.CallOption) (*QueryProductSpecListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSpecListResp)
	err := c.cc.Invoke(ctx, ProductSpecService_QueryProductSpecList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSpecServiceServer is the server API for ProductSpecService service.
// All implementations must embed UnimplementedProductSpecServiceServer
// for forward compatibility.
//
// 商品规格
type ProductSpecServiceServer interface {
	// 添加商品规格
	AddProductSpec(context.Context, *AddProductSpecReq) (*AddProductSpecResp, error)
	// 删除商品规格
	DeleteProductSpec(context.Context, *DeleteProductSpecReq) (*DeleteProductSpecResp, error)
	// 更新商品规格
	UpdateProductSpec(context.Context, *UpdateProductSpecReq) (*UpdateProductSpecResp, error)
	// 更新商品规格状态
	UpdateProductSpecStatus(context.Context, *UpdateProductSpecStatusReq) (*UpdateProductSpecStatusResp, error)
	// 查询商品规格详情
	QueryProductSpecDetail(context.Context, *QueryProductSpecDetailReq) (*QueryProductSpecDetailResp, error)
	// 查询商品规格列表
	QueryProductSpecList(context.Context, *QueryProductSpecListReq) (*QueryProductSpecListResp, error)
	mustEmbedUnimplementedProductSpecServiceServer()
}

// UnimplementedProductSpecServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductSpecServiceServer struct{}

func (UnimplementedProductSpecServiceServer) AddProductSpec(context.Context, *AddProductSpecReq) (*AddProductSpecResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductSpec not implemented")
}
func (UnimplementedProductSpecServiceServer) DeleteProductSpec(context.Context, *DeleteProductSpecReq) (*DeleteProductSpecResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductSpec not implemented")
}
func (UnimplementedProductSpecServiceServer) UpdateProductSpec(context.Context, *UpdateProductSpecReq) (*UpdateProductSpecResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductSpec not implemented")
}
func (UnimplementedProductSpecServiceServer) UpdateProductSpecStatus(context.Context, *UpdateProductSpecStatusReq) (*UpdateProductSpecStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductSpecStatus not implemented")
}
func (UnimplementedProductSpecServiceServer) QueryProductSpecDetail(context.Context, *QueryProductSpecDetailReq) (*QueryProductSpecDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSpecDetail not implemented")
}
func (UnimplementedProductSpecServiceServer) QueryProductSpecList(context.Context, *QueryProductSpecListReq) (*QueryProductSpecListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSpecList not implemented")
}
func (UnimplementedProductSpecServiceServer) mustEmbedUnimplementedProductSpecServiceServer() {}
func (UnimplementedProductSpecServiceServer) testEmbeddedByValue()                            {}

// UnsafeProductSpecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSpecServiceServer will
// result in compilation errors.
type UnsafeProductSpecServiceServer interface {
	mustEmbedUnimplementedProductSpecServiceServer()
}

func RegisterProductSpecServiceServer(s grpc.ServiceRegistrar, srv ProductSpecServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductSpecServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductSpecService_ServiceDesc, srv)
}

func _ProductSpecService_AddProductSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductSpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecServiceServer).AddProductSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecService_AddProductSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecServiceServer).AddProductSpec(ctx, req.(*AddProductSpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecService_DeleteProductSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecServiceServer).DeleteProductSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecService_DeleteProductSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecServiceServer).DeleteProductSpec(ctx, req.(*DeleteProductSpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecService_UpdateProductSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecServiceServer).UpdateProductSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecService_UpdateProductSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecServiceServer).UpdateProductSpec(ctx, req.(*UpdateProductSpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecService_UpdateProductSpecStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecServiceServer).UpdateProductSpecStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecService_UpdateProductSpecStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecServiceServer).UpdateProductSpecStatus(ctx, req.(*UpdateProductSpecStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecService_QueryProductSpecDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSpecDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecServiceServer).QueryProductSpecDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecService_QueryProductSpecDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecServiceServer).QueryProductSpecDetail(ctx, req.(*QueryProductSpecDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecService_QueryProductSpecList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSpecListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecServiceServer).QueryProductSpecList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecService_QueryProductSpecList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecServiceServer).QueryProductSpecList(ctx, req.(*QueryProductSpecListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSpecService_ServiceDesc is the grpc.ServiceDesc for ProductSpecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSpecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductSpecService",
	HandlerType: (*ProductSpecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductSpec",
			Handler:    _ProductSpecService_AddProductSpec_Handler,
		},
		{
			MethodName: "DeleteProductSpec",
			Handler:    _ProductSpecService_DeleteProductSpec_Handler,
		},
		{
			MethodName: "UpdateProductSpec",
			Handler:    _ProductSpecService_UpdateProductSpec_Handler,
		},
		{
			MethodName: "UpdateProductSpecStatus",
			Handler:    _ProductSpecService_UpdateProductSpecStatus_Handler,
		},
		{
			MethodName: "QueryProductSpecDetail",
			Handler:    _ProductSpecService_QueryProductSpecDetail_Handler,
		},
		{
			MethodName: "QueryProductSpecList",
			Handler:    _ProductSpecService_QueryProductSpecList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductSpecValueService_AddProductSpecValue_FullMethodName          = "/pmsclient.ProductSpecValueService/AddProductSpecValue"
	ProductSpecValueService_DeleteProductSpecValue_FullMethodName       = "/pmsclient.ProductSpecValueService/DeleteProductSpecValue"
	ProductSpecValueService_UpdateProductSpecValue_FullMethodName       = "/pmsclient.ProductSpecValueService/UpdateProductSpecValue"
	ProductSpecValueService_UpdateProductSpecValueStatus_FullMethodName = "/pmsclient.ProductSpecValueService/UpdateProductSpecValueStatus"
	ProductSpecValueService_QueryProductSpecValueDetail_FullMethodName  = "/pmsclient.ProductSpecValueService/QueryProductSpecValueDetail"
	ProductSpecValueService_QueryProductSpecValueList_FullMethodName    = "/pmsclient.ProductSpecValueService/QueryProductSpecValueList"
)

// ProductSpecValueServiceClient is the client API for ProductSpecValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品规格值
type ProductSpecValueServiceClient interface {
	// 添加商品规格值
	AddProductSpecValue(ctx context.Context, in *AddProductSpecValueReq, opts ...grpc.CallOption) (*AddProductSpecValueResp, error)
	// 删除商品规格值
	DeleteProductSpecValue(ctx context.Context, in *DeleteProductSpecValueReq, opts ...grpc.CallOption) (*DeleteProductSpecValueResp, error)
	// 更新商品规格值
	UpdateProductSpecValue(ctx context.Context, in *UpdateProductSpecValueReq, opts ...grpc.CallOption) (*UpdateProductSpecValueResp, error)
	// 更新商品规格值状态
	UpdateProductSpecValueStatus(ctx context.Context, in *UpdateProductSpecValueStatusReq, opts ...grpc.CallOption) (*UpdateProductSpecValueStatusResp, error)
	// 查询商品规格值详情
	QueryProductSpecValueDetail(ctx context.Context, in *QueryProductSpecValueDetailReq, opts ...grpc.CallOption) (*QueryProductSpecValueDetailResp, error)
	// 查询商品规格值列表
	QueryProductSpecValueList(ctx context.Context, in *QueryProductSpecValueListReq, opts ...grpc.CallOption) (*QueryProductSpecValueListResp, error)
}

type productSpecValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSpecValueServiceClient(cc grpc.ClientConnInterface) ProductSpecValueServiceClient {
	return &productSpecValueServiceClient{cc}
}

func (c *productSpecValueServiceClient) AddProductSpecValue(ctx context.Context, in *AddProductSpecValueReq, opts ...grpc.CallOption) (*AddProductSpecValueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductSpecValueResp)
	err := c.cc.Invoke(ctx, ProductSpecValueService_AddProductSpecValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecValueServiceClient) DeleteProductSpecValue(ctx context.Context, in *DeleteProductSpecValueReq, opts ...grpc.CallOption) (*DeleteProductSpecValueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductSpecValueResp)
	err := c.cc.Invoke(ctx, ProductSpecValueService_DeleteProductSpecValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecValueServiceClient) UpdateProductSpecValue(ctx context.Context, in *UpdateProductSpecValueReq, opts ...grpc.CallOption) (*UpdateProductSpecValueResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpecValueResp)
	err := c.cc.Invoke(ctx, ProductSpecValueService_UpdateProductSpecValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecValueServiceClient) UpdateProductSpecValueStatus(ctx context.Context, in *UpdateProductSpecValueStatusReq, opts ...grpc.CallOption) (*UpdateProductSpecValueStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpecValueStatusResp)
	err := c.cc.Invoke(ctx, ProductSpecValueService_UpdateProductSpecValueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecValueServiceClient) QueryProductSpecValueDetail(ctx context.Context, in *QueryProductSpecValueDetailReq, opts ...grpc.CallOption) (*QueryProductSpecValueDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSpecValueDetailResp)
	err := c.cc.Invoke(ctx, ProductSpecValueService_QueryProductSpecValueDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpecValueServiceClient) QueryProductSpecValueList(ctx context.Context, in *QueryProductSpecValueListReq, opts ...grpc.CallOption) (*QueryProductSpecValueListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSpecValueListResp)
	err := c.cc.Invoke(ctx, ProductSpecValueService_QueryProductSpecValueList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSpecValueServiceServer is the server API for ProductSpecValueService service.
// All implementations must embed UnimplementedProductSpecValueServiceServer
// for forward compatibility.
//
// 商品规格值
type ProductSpecValueServiceServer interface {
	// 添加商品规格值
	AddProductSpecValue(context.Context, *AddProductSpecValueReq) (*AddProductSpecValueResp, error)
	// 删除商品规格值
	DeleteProductSpecValue(context.Context, *DeleteProductSpecValueReq) (*DeleteProductSpecValueResp, error)
	// 更新商品规格值
	UpdateProductSpecValue(context.Context, *UpdateProductSpecValueReq) (*UpdateProductSpecValueResp, error)
	// 更新商品规格值状态
	UpdateProductSpecValueStatus(context.Context, *UpdateProductSpecValueStatusReq) (*UpdateProductSpecValueStatusResp, error)
	// 查询商品规格值详情
	QueryProductSpecValueDetail(context.Context, *QueryProductSpecValueDetailReq) (*QueryProductSpecValueDetailResp, error)
	// 查询商品规格值列表
	QueryProductSpecValueList(context.Context, *QueryProductSpecValueListReq) (*QueryProductSpecValueListResp, error)
	mustEmbedUnimplementedProductSpecValueServiceServer()
}

// UnimplementedProductSpecValueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductSpecValueServiceServer struct{}

func (UnimplementedProductSpecValueServiceServer) AddProductSpecValue(context.Context, *AddProductSpecValueReq) (*AddProductSpecValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductSpecValue not implemented")
}
func (UnimplementedProductSpecValueServiceServer) DeleteProductSpecValue(context.Context, *DeleteProductSpecValueReq) (*DeleteProductSpecValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductSpecValue not implemented")
}
func (UnimplementedProductSpecValueServiceServer) UpdateProductSpecValue(context.Context, *UpdateProductSpecValueReq) (*UpdateProductSpecValueResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductSpecValue not implemented")
}
func (UnimplementedProductSpecValueServiceServer) UpdateProductSpecValueStatus(context.Context, *UpdateProductSpecValueStatusReq) (*UpdateProductSpecValueStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductSpecValueStatus not implemented")
}
func (UnimplementedProductSpecValueServiceServer) QueryProductSpecValueDetail(context.Context, *QueryProductSpecValueDetailReq) (*QueryProductSpecValueDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSpecValueDetail not implemented")
}
func (UnimplementedProductSpecValueServiceServer) QueryProductSpecValueList(context.Context, *QueryProductSpecValueListReq) (*QueryProductSpecValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSpecValueList not implemented")
}
func (UnimplementedProductSpecValueServiceServer) mustEmbedUnimplementedProductSpecValueServiceServer() {
}
func (UnimplementedProductSpecValueServiceServer) testEmbeddedByValue() {}

// UnsafeProductSpecValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSpecValueServiceServer will
// result in compilation errors.
type UnsafeProductSpecValueServiceServer interface {
	mustEmbedUnimplementedProductSpecValueServiceServer()
}

func RegisterProductSpecValueServiceServer(s grpc.ServiceRegistrar, srv ProductSpecValueServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductSpecValueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductSpecValueService_ServiceDesc, srv)
}

func _ProductSpecValueService_AddProductSpecValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductSpecValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecValueServiceServer).AddProductSpecValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecValueService_AddProductSpecValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecValueServiceServer).AddProductSpecValue(ctx, req.(*AddProductSpecValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecValueService_DeleteProductSpecValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSpecValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecValueServiceServer).DeleteProductSpecValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecValueService_DeleteProductSpecValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecValueServiceServer).DeleteProductSpecValue(ctx, req.(*DeleteProductSpecValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecValueService_UpdateProductSpecValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecValueServiceServer).UpdateProductSpecValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecValueService_UpdateProductSpecValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecValueServiceServer).UpdateProductSpecValue(ctx, req.(*UpdateProductSpecValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecValueService_UpdateProductSpecValueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpecValueStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecValueServiceServer).UpdateProductSpecValueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecValueService_UpdateProductSpecValueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecValueServiceServer).UpdateProductSpecValueStatus(ctx, req.(*UpdateProductSpecValueStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecValueService_QueryProductSpecValueDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSpecValueDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecValueServiceServer).QueryProductSpecValueDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecValueService_QueryProductSpecValueDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecValueServiceServer).QueryProductSpecValueDetail(ctx, req.(*QueryProductSpecValueDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpecValueService_QueryProductSpecValueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSpecValueListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpecValueServiceServer).QueryProductSpecValueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpecValueService_QueryProductSpecValueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpecValueServiceServer).QueryProductSpecValueList(ctx, req.(*QueryProductSpecValueListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSpecValueService_ServiceDesc is the grpc.ServiceDesc for ProductSpecValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSpecValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductSpecValueService",
	HandlerType: (*ProductSpecValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductSpecValue",
			Handler:    _ProductSpecValueService_AddProductSpecValue_Handler,
		},
		{
			MethodName: "DeleteProductSpecValue",
			Handler:    _ProductSpecValueService_DeleteProductSpecValue_Handler,
		},
		{
			MethodName: "UpdateProductSpecValue",
			Handler:    _ProductSpecValueService_UpdateProductSpecValue_Handler,
		},
		{
			MethodName: "UpdateProductSpecValueStatus",
			Handler:    _ProductSpecValueService_UpdateProductSpecValueStatus_Handler,
		},
		{
			MethodName: "QueryProductSpecValueDetail",
			Handler:    _ProductSpecValueService_QueryProductSpecValueDetail_Handler,
		},
		{
			MethodName: "QueryProductSpecValueList",
			Handler:    _ProductSpecValueService_QueryProductSpecValueList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductSpuService_AddProductSpu_FullMethodName             = "/pmsclient.ProductSpuService/AddProductSpu"
	ProductSpuService_DeleteProductSpu_FullMethodName          = "/pmsclient.ProductSpuService/DeleteProductSpu"
	ProductSpuService_UpdateProductSpu_FullMethodName          = "/pmsclient.ProductSpuService/UpdateProductSpu"
	ProductSpuService_QueryProductSpuDetail_FullMethodName     = "/pmsclient.ProductSpuService/QueryProductSpuDetail"
	ProductSpuService_QueryProductSpuList_FullMethodName       = "/pmsclient.ProductSpuService/QueryProductSpuList"
	ProductSpuService_UpdateVerifyStatus_FullMethodName        = "/pmsclient.ProductSpuService/UpdateVerifyStatus"
	ProductSpuService_UpdatePublishStatus_FullMethodName       = "/pmsclient.ProductSpuService/UpdatePublishStatus"
	ProductSpuService_UpdateRecommendStatus_FullMethodName     = "/pmsclient.ProductSpuService/UpdateRecommendStatus"
	ProductSpuService_UpdateNewStatus_FullMethodName           = "/pmsclient.ProductSpuService/UpdateNewStatus"
	ProductSpuService_UpdateDeleteStatus_FullMethodName        = "/pmsclient.ProductSpuService/UpdateDeleteStatus"
	ProductSpuService_UpdateNewStatusSort_FullMethodName       = "/pmsclient.ProductSpuService/UpdateNewStatusSort"
	ProductSpuService_UpdateRecommendStatusSort_FullMethodName = "/pmsclient.ProductSpuService/UpdateRecommendStatusSort"
	ProductSpuService_QueryProductSpuListByIds_FullMethodName  = "/pmsclient.ProductSpuService/QueryProductSpuListByIds"
)

// ProductSpuServiceClient is the client API for ProductSpuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品SPU
type ProductSpuServiceClient interface {
	// 添加商品SPU
	AddProductSpu(ctx context.Context, in *ProductSpuReq, opts ...grpc.CallOption) (*ProductSpuResp, error)
	// 删除商品SPU
	DeleteProductSpu(ctx context.Context, in *DeleteProductSpuReq, opts ...grpc.CallOption) (*DeleteProductSpuResp, error)
	// 更新商品SPU
	UpdateProductSpu(ctx context.Context, in *ProductSpuReq, opts ...grpc.CallOption) (*ProductSpuResp, error)
	// 查询商品SPU详情
	QueryProductSpuDetail(ctx context.Context, in *QueryProductSpuDetailReq, opts ...grpc.CallOption) (*QueryProductSpuDetailResp, error)
	// 查询商品SPU列表
	QueryProductSpuList(ctx context.Context, in *QueryProductSpuListReq, opts ...grpc.CallOption) (*QueryProductSpuListResp, error)
	// 修改审核状态
	UpdateVerifyStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error)
	// 上下架商品
	UpdatePublishStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error)
	// 推荐商品
	UpdateRecommendStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error)
	// 设为新品
	UpdateNewStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error)
	// 修改删除状态
	UpdateDeleteStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error)
	// 更新新品排序
	UpdateNewStatusSort(ctx context.Context, in *UpdateProductSortReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error)
	// 更新推荐排序
	UpdateRecommendStatusSort(ctx context.Context, in *UpdateProductSortReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error)
	// 根据id集合查询商品信息
	QueryProductSpuListByIds(ctx context.Context, in *QueryProductSpuByIdsReq, opts ...grpc.CallOption) (*QueryProductSpuListResp, error)
}

type productSpuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSpuServiceClient(cc grpc.ClientConnInterface) ProductSpuServiceClient {
	return &productSpuServiceClient{cc}
}

func (c *productSpuServiceClient) AddProductSpu(ctx context.Context, in *ProductSpuReq, opts ...grpc.CallOption) (*ProductSpuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSpuResp)
	err := c.cc.Invoke(ctx, ProductSpuService_AddProductSpu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) DeleteProductSpu(ctx context.Context, in *DeleteProductSpuReq, opts ...grpc.CallOption) (*DeleteProductSpuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductSpuResp)
	err := c.cc.Invoke(ctx, ProductSpuService_DeleteProductSpu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdateProductSpu(ctx context.Context, in *ProductSpuReq, opts ...grpc.CallOption) (*ProductSpuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductSpuResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdateProductSpu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) QueryProductSpuDetail(ctx context.Context, in *QueryProductSpuDetailReq, opts ...grpc.CallOption) (*QueryProductSpuDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSpuDetailResp)
	err := c.cc.Invoke(ctx, ProductSpuService_QueryProductSpuDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) QueryProductSpuList(ctx context.Context, in *QueryProductSpuListReq, opts ...grpc.CallOption) (*QueryProductSpuListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSpuListResp)
	err := c.cc.Invoke(ctx, ProductSpuService_QueryProductSpuList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdateVerifyStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpuStatusResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdateVerifyStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdatePublishStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpuStatusResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdatePublishStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdateRecommendStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpuStatusResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdateRecommendStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdateNewStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpuStatusResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdateNewStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdateDeleteStatus(ctx context.Context, in *UpdateProductSpuStatusReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpuStatusResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdateDeleteStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdateNewStatusSort(ctx context.Context, in *UpdateProductSortReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpuStatusResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdateNewStatusSort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) UpdateRecommendStatusSort(ctx context.Context, in *UpdateProductSortReq, opts ...grpc.CallOption) (*UpdateProductSpuStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductSpuStatusResp)
	err := c.cc.Invoke(ctx, ProductSpuService_UpdateRecommendStatusSort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSpuServiceClient) QueryProductSpuListByIds(ctx context.Context, in *QueryProductSpuByIdsReq, opts ...grpc.CallOption) (*QueryProductSpuListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductSpuListResp)
	err := c.cc.Invoke(ctx, ProductSpuService_QueryProductSpuListByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSpuServiceServer is the server API for ProductSpuService service.
// All implementations must embed UnimplementedProductSpuServiceServer
// for forward compatibility.
//
// 商品SPU
type ProductSpuServiceServer interface {
	// 添加商品SPU
	AddProductSpu(context.Context, *ProductSpuReq) (*ProductSpuResp, error)
	// 删除商品SPU
	DeleteProductSpu(context.Context, *DeleteProductSpuReq) (*DeleteProductSpuResp, error)
	// 更新商品SPU
	UpdateProductSpu(context.Context, *ProductSpuReq) (*ProductSpuResp, error)
	// 查询商品SPU详情
	QueryProductSpuDetail(context.Context, *QueryProductSpuDetailReq) (*QueryProductSpuDetailResp, error)
	// 查询商品SPU列表
	QueryProductSpuList(context.Context, *QueryProductSpuListReq) (*QueryProductSpuListResp, error)
	// 修改审核状态
	UpdateVerifyStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error)
	// 上下架商品
	UpdatePublishStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error)
	// 推荐商品
	UpdateRecommendStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error)
	// 设为新品
	UpdateNewStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error)
	// 修改删除状态
	UpdateDeleteStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error)
	// 更新新品排序
	UpdateNewStatusSort(context.Context, *UpdateProductSortReq) (*UpdateProductSpuStatusResp, error)
	// 更新推荐排序
	UpdateRecommendStatusSort(context.Context, *UpdateProductSortReq) (*UpdateProductSpuStatusResp, error)
	// 根据id集合查询商品信息
	QueryProductSpuListByIds(context.Context, *QueryProductSpuByIdsReq) (*QueryProductSpuListResp, error)
	mustEmbedUnimplementedProductSpuServiceServer()
}

// UnimplementedProductSpuServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductSpuServiceServer struct{}

func (UnimplementedProductSpuServiceServer) AddProductSpu(context.Context, *ProductSpuReq) (*ProductSpuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductSpu not implemented")
}
func (UnimplementedProductSpuServiceServer) DeleteProductSpu(context.Context, *DeleteProductSpuReq) (*DeleteProductSpuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductSpu not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdateProductSpu(context.Context, *ProductSpuReq) (*ProductSpuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductSpu not implemented")
}
func (UnimplementedProductSpuServiceServer) QueryProductSpuDetail(context.Context, *QueryProductSpuDetailReq) (*QueryProductSpuDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSpuDetail not implemented")
}
func (UnimplementedProductSpuServiceServer) QueryProductSpuList(context.Context, *QueryProductSpuListReq) (*QueryProductSpuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSpuList not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdateVerifyStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifyStatus not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdatePublishStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublishStatus not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdateRecommendStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendStatus not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdateNewStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewStatus not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdateDeleteStatus(context.Context, *UpdateProductSpuStatusReq) (*UpdateProductSpuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeleteStatus not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdateNewStatusSort(context.Context, *UpdateProductSortReq) (*UpdateProductSpuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewStatusSort not implemented")
}
func (UnimplementedProductSpuServiceServer) UpdateRecommendStatusSort(context.Context, *UpdateProductSortReq) (*UpdateProductSpuStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendStatusSort not implemented")
}
func (UnimplementedProductSpuServiceServer) QueryProductSpuListByIds(context.Context, *QueryProductSpuByIdsReq) (*QueryProductSpuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductSpuListByIds not implemented")
}
func (UnimplementedProductSpuServiceServer) mustEmbedUnimplementedProductSpuServiceServer() {}
func (UnimplementedProductSpuServiceServer) testEmbeddedByValue()                           {}

// UnsafeProductSpuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSpuServiceServer will
// result in compilation errors.
type UnsafeProductSpuServiceServer interface {
	mustEmbedUnimplementedProductSpuServiceServer()
}

func RegisterProductSpuServiceServer(s grpc.ServiceRegistrar, srv ProductSpuServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductSpuServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductSpuService_ServiceDesc, srv)
}

func _ProductSpuService_AddProductSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSpuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).AddProductSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_AddProductSpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).AddProductSpu(ctx, req.(*ProductSpuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_DeleteProductSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSpuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).DeleteProductSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_DeleteProductSpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).DeleteProductSpu(ctx, req.(*DeleteProductSpuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdateProductSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSpuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdateProductSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdateProductSpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdateProductSpu(ctx, req.(*ProductSpuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_QueryProductSpuDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSpuDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).QueryProductSpuDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_QueryProductSpuDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).QueryProductSpuDetail(ctx, req.(*QueryProductSpuDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_QueryProductSpuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSpuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).QueryProductSpuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_QueryProductSpuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).QueryProductSpuList(ctx, req.(*QueryProductSpuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdateVerifyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpuStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdateVerifyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdateVerifyStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdateVerifyStatus(ctx, req.(*UpdateProductSpuStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdatePublishStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpuStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdatePublishStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdatePublishStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdatePublishStatus(ctx, req.(*UpdateProductSpuStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdateRecommendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpuStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdateRecommendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdateRecommendStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdateRecommendStatus(ctx, req.(*UpdateProductSpuStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdateNewStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpuStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdateNewStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdateNewStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdateNewStatus(ctx, req.(*UpdateProductSpuStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdateDeleteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSpuStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdateDeleteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdateDeleteStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdateDeleteStatus(ctx, req.(*UpdateProductSpuStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdateNewStatusSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdateNewStatusSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdateNewStatusSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdateNewStatusSort(ctx, req.(*UpdateProductSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_UpdateRecommendStatusSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).UpdateRecommendStatusSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_UpdateRecommendStatusSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).UpdateRecommendStatusSort(ctx, req.(*UpdateProductSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSpuService_QueryProductSpuListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductSpuByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSpuServiceServer).QueryProductSpuListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSpuService_QueryProductSpuListByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSpuServiceServer).QueryProductSpuListByIds(ctx, req.(*QueryProductSpuByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSpuService_ServiceDesc is the grpc.ServiceDesc for ProductSpuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSpuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductSpuService",
	HandlerType: (*ProductSpuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductSpu",
			Handler:    _ProductSpuService_AddProductSpu_Handler,
		},
		{
			MethodName: "DeleteProductSpu",
			Handler:    _ProductSpuService_DeleteProductSpu_Handler,
		},
		{
			MethodName: "UpdateProductSpu",
			Handler:    _ProductSpuService_UpdateProductSpu_Handler,
		},
		{
			MethodName: "QueryProductSpuDetail",
			Handler:    _ProductSpuService_QueryProductSpuDetail_Handler,
		},
		{
			MethodName: "QueryProductSpuList",
			Handler:    _ProductSpuService_QueryProductSpuList_Handler,
		},
		{
			MethodName: "UpdateVerifyStatus",
			Handler:    _ProductSpuService_UpdateVerifyStatus_Handler,
		},
		{
			MethodName: "UpdatePublishStatus",
			Handler:    _ProductSpuService_UpdatePublishStatus_Handler,
		},
		{
			MethodName: "UpdateRecommendStatus",
			Handler:    _ProductSpuService_UpdateRecommendStatus_Handler,
		},
		{
			MethodName: "UpdateNewStatus",
			Handler:    _ProductSpuService_UpdateNewStatus_Handler,
		},
		{
			MethodName: "UpdateDeleteStatus",
			Handler:    _ProductSpuService_UpdateDeleteStatus_Handler,
		},
		{
			MethodName: "UpdateNewStatusSort",
			Handler:    _ProductSpuService_UpdateNewStatusSort_Handler,
		},
		{
			MethodName: "UpdateRecommendStatusSort",
			Handler:    _ProductSpuService_UpdateRecommendStatusSort_Handler,
		},
		{
			MethodName: "QueryProductSpuListByIds",
			Handler:    _ProductSpuService_QueryProductSpuListByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}

const (
	ProductVertifyRecordService_AddProductVertifyRecord_FullMethodName         = "/pmsclient.ProductVertifyRecordService/AddProductVertifyRecord"
	ProductVertifyRecordService_QueryProductVertifyRecordDetail_FullMethodName = "/pmsclient.ProductVertifyRecordService/QueryProductVertifyRecordDetail"
	ProductVertifyRecordService_QueryProductVertifyRecordList_FullMethodName   = "/pmsclient.ProductVertifyRecordService/QueryProductVertifyRecordList"
)

// ProductVertifyRecordServiceClient is the client API for ProductVertifyRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品审核记录
type ProductVertifyRecordServiceClient interface {
	// 添加商品审核记录
	AddProductVertifyRecord(ctx context.Context, in *AddProductVertifyRecordReq, opts ...grpc.CallOption) (*AddProductVertifyRecordResp, error)
	// 查询商品审核记录详情
	QueryProductVertifyRecordDetail(ctx context.Context, in *QueryProductVertifyRecordDetailReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordDetailResp, error)
	// 查询商品审核记录列表
	QueryProductVertifyRecordList(ctx context.Context, in *QueryProductVertifyRecordListReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordListResp, error)
}

type productVertifyRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductVertifyRecordServiceClient(cc grpc.ClientConnInterface) ProductVertifyRecordServiceClient {
	return &productVertifyRecordServiceClient{cc}
}

func (c *productVertifyRecordServiceClient) AddProductVertifyRecord(ctx context.Context, in *AddProductVertifyRecordReq, opts ...grpc.CallOption) (*AddProductVertifyRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductVertifyRecordResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_AddProductVertifyRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) QueryProductVertifyRecordDetail(ctx context.Context, in *QueryProductVertifyRecordDetailReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductVertifyRecordDetailResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_QueryProductVertifyRecordDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) QueryProductVertifyRecordList(ctx context.Context, in *QueryProductVertifyRecordListReq, opts ...grpc.CallOption) (*QueryProductVertifyRecordListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductVertifyRecordListResp)
	err := c.cc.Invoke(ctx, ProductVertifyRecordService_QueryProductVertifyRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductVertifyRecordServiceServer is the server API for ProductVertifyRecordService service.
// All implementations must embed UnimplementedProductVertifyRecordServiceServer
// for forward compatibility.
//
// 商品审核记录
type ProductVertifyRecordServiceServer interface {
	// 添加商品审核记录
	AddProductVertifyRecord(context.Context, *AddProductVertifyRecordReq) (*AddProductVertifyRecordResp, error)
	// 查询商品审核记录详情
	QueryProductVertifyRecordDetail(context.Context, *QueryProductVertifyRecordDetailReq) (*QueryProductVertifyRecordDetailResp, error)
	// 查询商品审核记录列表
	QueryProductVertifyRecordList(context.Context, *QueryProductVertifyRecordListReq) (*QueryProductVertifyRecordListResp, error)
	mustEmbedUnimplementedProductVertifyRecordServiceServer()
}

// UnimplementedProductVertifyRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductVertifyRecordServiceServer struct{}

func (UnimplementedProductVertifyRecordServiceServer) AddProductVertifyRecord(context.Context, *AddProductVertifyRecordReq) (*AddProductVertifyRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductVertifyRecord not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) QueryProductVertifyRecordDetail(context.Context, *QueryProductVertifyRecordDetailReq) (*QueryProductVertifyRecordDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductVertifyRecordDetail not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) QueryProductVertifyRecordList(context.Context, *QueryProductVertifyRecordListReq) (*QueryProductVertifyRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductVertifyRecordList not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) mustEmbedUnimplementedProductVertifyRecordServiceServer() {
}
func (UnimplementedProductVertifyRecordServiceServer) testEmbeddedByValue() {}

// UnsafeProductVertifyRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductVertifyRecordServiceServer will
// result in compilation errors.
type UnsafeProductVertifyRecordServiceServer interface {
	mustEmbedUnimplementedProductVertifyRecordServiceServer()
}

func RegisterProductVertifyRecordServiceServer(s grpc.ServiceRegistrar, srv ProductVertifyRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductVertifyRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductVertifyRecordService_ServiceDesc, srv)
}

func _ProductVertifyRecordService_AddProductVertifyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductVertifyRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).AddProductVertifyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_AddProductVertifyRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).AddProductVertifyRecord(ctx, req.(*AddProductVertifyRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_QueryProductVertifyRecordDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductVertifyRecordDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_QueryProductVertifyRecordDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordDetail(ctx, req.(*QueryProductVertifyRecordDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_QueryProductVertifyRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductVertifyRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVertifyRecordService_QueryProductVertifyRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).QueryProductVertifyRecordList(ctx, req.(*QueryProductVertifyRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductVertifyRecordService_ServiceDesc is the grpc.ServiceDesc for ProductVertifyRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductVertifyRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductVertifyRecordService",
	HandlerType: (*ProductVertifyRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductVertifyRecord",
			Handler:    _ProductVertifyRecordService_AddProductVertifyRecord_Handler,
		},
		{
			MethodName: "QueryProductVertifyRecordDetail",
			Handler:    _ProductVertifyRecordService_QueryProductVertifyRecordDetail_Handler,
		},
		{
			MethodName: "QueryProductVertifyRecordList",
			Handler:    _ProductVertifyRecordService_QueryProductVertifyRecordList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pms/pms.proto",
}
