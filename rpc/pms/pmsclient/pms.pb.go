// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.4
// source: rpc/pms/pms.proto

package pmsclient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加商品属性
type AddProductAttributeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键id
	GroupId       int64                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                //属性分组ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                      //属性名称
	InputType     int32                  `protobuf:"varint,4,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`          //输入类型：1-手动输入，2-单选，3-多选
	ValueType     int32                  `protobuf:"varint,5,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`          //值类型：1-文本，2-数字，3-日期
	InputList     string                 `protobuf:"bytes,6,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`           //可选值列表，用逗号分隔
	Unit          string                 `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`                                      //单位
	IsRequired    int32                  `protobuf:"varint,8,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`       //是否必填
	IsSearchable  int32                  `protobuf:"varint,9,opt,name=is_searchable,json=isSearchable,proto3" json:"is_searchable,omitempty"` //是否支持搜索
	IsShow        int32                  `protobuf:"varint,10,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`                  //是否显示
	Sort          int32                  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                    //排序
	Status        int32                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,13,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`            //创建人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductAttributeReq) Reset() {
	*x = AddProductAttributeReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductAttributeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeReq) ProtoMessage() {}

func (x *AddProductAttributeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeReq.ProtoReflect.Descriptor instead.
func (*AddProductAttributeReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{0}
}

func (x *AddProductAttributeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductAttributeReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AddProductAttributeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductAttributeReq) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *AddProductAttributeReq) GetValueType() int32 {
	if x != nil {
		return x.ValueType
	}
	return 0
}

func (x *AddProductAttributeReq) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *AddProductAttributeReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *AddProductAttributeReq) GetIsRequired() int32 {
	if x != nil {
		return x.IsRequired
	}
	return 0
}

func (x *AddProductAttributeReq) GetIsSearchable() int32 {
	if x != nil {
		return x.IsSearchable
	}
	return 0
}

func (x *AddProductAttributeReq) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *AddProductAttributeReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductAttributeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddProductAttributeReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddProductAttributeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductAttributeResp) Reset() {
	*x = AddProductAttributeResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductAttributeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeResp) ProtoMessage() {}

func (x *AddProductAttributeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeResp.ProtoReflect.Descriptor instead.
func (*AddProductAttributeResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{1}
}

func (x *AddProductAttributeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品属性
type DeleteProductAttributeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductAttributeReq) Reset() {
	*x = DeleteProductAttributeReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductAttributeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeReq) ProtoMessage() {}

func (x *DeleteProductAttributeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteProductAttributeReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductAttributeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductAttributeResp) Reset() {
	*x = DeleteProductAttributeResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductAttributeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeResp) ProtoMessage() {}

func (x *DeleteProductAttributeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeResp.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteProductAttributeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品属性
type UpdateProductAttributeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键id
	GroupId       int64                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                //属性分组ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                      //属性名称
	InputType     int32                  `protobuf:"varint,4,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`          //输入类型：1-手动输入，2-单选，3-多选
	ValueType     int32                  `protobuf:"varint,5,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`          //值类型：1-文本，2-数字，3-日期
	InputList     string                 `protobuf:"bytes,6,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`           //可选值列表，用逗号分隔
	Unit          string                 `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`                                      //单位
	IsRequired    int32                  `protobuf:"varint,8,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`       //是否必填
	IsSearchable  int32                  `protobuf:"varint,9,opt,name=is_searchable,json=isSearchable,proto3" json:"is_searchable,omitempty"` //是否支持搜索
	IsShow        int32                  `protobuf:"varint,10,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`                  //是否显示
	Sort          int32                  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                    //排序
	Status        int32                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeReq) Reset() {
	*x = UpdateProductAttributeReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeReq) ProtoMessage() {}

func (x *UpdateProductAttributeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateProductAttributeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductAttributeReq) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetValueType() int32 {
	if x != nil {
		return x.ValueType
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *UpdateProductAttributeReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *UpdateProductAttributeReq) GetIsRequired() int32 {
	if x != nil {
		return x.IsRequired
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetIsSearchable() int32 {
	if x != nil {
		return x.IsSearchable
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductAttributeReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductAttributeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeResp) Reset() {
	*x = UpdateProductAttributeResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeResp) ProtoMessage() {}

func (x *UpdateProductAttributeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateProductAttributeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品属性状态
type UpdateProductAttributeStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                     //主键id
	Status        int32                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeStatusReq) Reset() {
	*x = UpdateProductAttributeStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeStatusReq) ProtoMessage() {}

func (x *UpdateProductAttributeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateProductAttributeStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductAttributeStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductAttributeStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductAttributeStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeStatusResp) Reset() {
	*x = UpdateProductAttributeStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeStatusResp) ProtoMessage() {}

func (x *UpdateProductAttributeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateProductAttributeStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品属性详情
type QueryProductAttributeDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeDetailReq) Reset() {
	*x = QueryProductAttributeDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeDetailReq) ProtoMessage() {}

func (x *QueryProductAttributeDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{8}
}

func (x *QueryProductAttributeDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductAttributeDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键id
	GroupId       int64                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                //属性分组ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                      //属性名称
	InputType     int32                  `protobuf:"varint,4,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`          //输入类型：1-手动输入，2-单选，3-多选
	ValueType     int32                  `protobuf:"varint,5,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`          //值类型：1-文本，2-数字，3-日期
	InputList     string                 `protobuf:"bytes,6,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`           //可选值列表，用逗号分隔
	Unit          string                 `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`                                      //单位
	IsRequired    int32                  `protobuf:"varint,8,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`       //是否必填
	IsSearchable  int32                  `protobuf:"varint,9,opt,name=is_searchable,json=isSearchable,proto3" json:"is_searchable,omitempty"` //是否支持搜索
	IsShow        int32                  `protobuf:"varint,10,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`                  //是否显示
	Sort          int32                  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                    //排序
	Status        int32                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,13,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`            //创建人ID
	CreateTime    string                 `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`       //创建时间
	UpdateBy      int64                  `protobuf:"varint,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	UpdateTime    string                 `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeDetailResp) Reset() {
	*x = QueryProductAttributeDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeDetailResp) ProtoMessage() {}

func (x *QueryProductAttributeDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{9}
}

func (x *QueryProductAttributeDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductAttributeDetailResp) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetValueType() int32 {
	if x != nil {
		return x.ValueType
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *QueryProductAttributeDetailResp) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *QueryProductAttributeDetailResp) GetIsRequired() int32 {
	if x != nil {
		return x.IsRequired
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetIsSearchable() int32 {
	if x != nil {
		return x.IsSearchable
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductAttributeDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductAttributeDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询商品属性列表
type QueryProductAttributeListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       int64                  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                //属性分组ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //属性名称
	InputType     int32                  `protobuf:"varint,3,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`          //输入类型：1-手动输入，2-单选，3-多选
	IsRequired    int32                  `protobuf:"varint,4,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`       //是否必填
	IsSearchable  int32                  `protobuf:"varint,5,opt,name=is_searchable,json=isSearchable,proto3" json:"is_searchable,omitempty"` //是否支持搜索
	IsShow        int32                  `protobuf:"varint,6,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`                   //是否显示
	PageNum       int32                  `protobuf:"varint,7,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                //第几页
	PageSize      int32                  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`             //每页的数量
	Status        int32                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                 //状态：0->禁用；1->启用
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeListReq) Reset() {
	*x = QueryProductAttributeListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeListReq) ProtoMessage() {}

func (x *QueryProductAttributeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeListReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{10}
}

func (x *QueryProductAttributeListReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductAttributeListReq) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetIsRequired() int32 {
	if x != nil {
		return x.IsRequired
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetIsSearchable() int32 {
	if x != nil {
		return x.IsSearchable
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductAttributeListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ProductAttributeListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键id
	GroupId       int64                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                //属性分组ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                      //属性名称
	InputType     int32                  `protobuf:"varint,4,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`          //输入类型：1-手动输入，2-单选，3-多选
	ValueType     int32                  `protobuf:"varint,5,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`          //值类型：1-文本，2-数字，3-日期
	InputList     string                 `protobuf:"bytes,6,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`           //可选值列表，用逗号分隔
	Unit          string                 `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`                                      //单位
	IsRequired    int32                  `protobuf:"varint,8,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`       //是否必填
	IsSearchable  int32                  `protobuf:"varint,9,opt,name=is_searchable,json=isSearchable,proto3" json:"is_searchable,omitempty"` //是否支持搜索
	IsShow        int32                  `protobuf:"varint,10,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`                  //是否显示
	Sort          int32                  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                    //排序
	Status        int32                  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,13,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`            //创建人ID
	CreateTime    string                 `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`       //创建时间
	UpdateBy      int64                  `protobuf:"varint,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	UpdateTime    string                 `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductAttributeListData) Reset() {
	*x = ProductAttributeListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttributeListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeListData) ProtoMessage() {}

func (x *ProductAttributeListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeListData.ProtoReflect.Descriptor instead.
func (*ProductAttributeListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{11}
}

func (x *ProductAttributeListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeListData) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ProductAttributeListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttributeListData) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *ProductAttributeListData) GetValueType() int32 {
	if x != nil {
		return x.ValueType
	}
	return 0
}

func (x *ProductAttributeListData) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *ProductAttributeListData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProductAttributeListData) GetIsRequired() int32 {
	if x != nil {
		return x.IsRequired
	}
	return 0
}

func (x *ProductAttributeListData) GetIsSearchable() int32 {
	if x != nil {
		return x.IsSearchable
	}
	return 0
}

func (x *ProductAttributeListData) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *ProductAttributeListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductAttributeListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductAttributeListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductAttributeListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductAttributeListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductAttributeListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryProductAttributeListResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Total         int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductAttributeListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeListResp) Reset() {
	*x = QueryProductAttributeListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeListResp) ProtoMessage() {}

func (x *QueryProductAttributeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeListResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{12}
}

func (x *QueryProductAttributeListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductAttributeListResp) GetList() []*ProductAttributeListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品属性分组
type AddProductAttributeGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    int64                  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //分组名称
	Sort          int32                  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,5,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductAttributeGroupReq) Reset() {
	*x = AddProductAttributeGroupReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductAttributeGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeGroupReq) ProtoMessage() {}

func (x *AddProductAttributeGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeGroupReq.ProtoReflect.Descriptor instead.
func (*AddProductAttributeGroupReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{13}
}

func (x *AddProductAttributeGroupReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddProductAttributeGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductAttributeGroupReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductAttributeGroupReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddProductAttributeGroupReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddProductAttributeGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductAttributeGroupResp) Reset() {
	*x = AddProductAttributeGroupResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductAttributeGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeGroupResp) ProtoMessage() {}

func (x *AddProductAttributeGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeGroupResp.ProtoReflect.Descriptor instead.
func (*AddProductAttributeGroupResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{14}
}

func (x *AddProductAttributeGroupResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品属性分组
type DeleteProductAttributeGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductAttributeGroupReq) Reset() {
	*x = DeleteProductAttributeGroupReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductAttributeGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeGroupReq) ProtoMessage() {}

func (x *DeleteProductAttributeGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeGroupReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteProductAttributeGroupReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductAttributeGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductAttributeGroupResp) Reset() {
	*x = DeleteProductAttributeGroupResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductAttributeGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeGroupResp) ProtoMessage() {}

func (x *DeleteProductAttributeGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeGroupResp.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeGroupResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteProductAttributeGroupResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品属性分组
type UpdateProductAttributeGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键id
	CategoryId    int64                  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //分组名称
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,6,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeGroupReq) Reset() {
	*x = UpdateProductAttributeGroupReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeGroupReq) ProtoMessage() {}

func (x *UpdateProductAttributeGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeGroupReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateProductAttributeGroupReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductAttributeGroupReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateProductAttributeGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductAttributeGroupReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductAttributeGroupReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductAttributeGroupReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductAttributeGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeGroupResp) Reset() {
	*x = UpdateProductAttributeGroupResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeGroupResp) ProtoMessage() {}

func (x *UpdateProductAttributeGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeGroupResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeGroupResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateProductAttributeGroupResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品属性分组状态
type UpdateProductAttributeGroupStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //主键id
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeGroupStatusReq) Reset() {
	*x = UpdateProductAttributeGroupStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeGroupStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeGroupStatusReq) ProtoMessage() {}

func (x *UpdateProductAttributeGroupStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeGroupStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeGroupStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateProductAttributeGroupStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductAttributeGroupStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductAttributeGroupStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductAttributeGroupStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeGroupStatusResp) Reset() {
	*x = UpdateProductAttributeGroupStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeGroupStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeGroupStatusResp) ProtoMessage() {}

func (x *UpdateProductAttributeGroupStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeGroupStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeGroupStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateProductAttributeGroupStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品属性分组详情
type QueryProductAttributeGroupDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeGroupDetailReq) Reset() {
	*x = QueryProductAttributeGroupDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeGroupDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeGroupDetailReq) ProtoMessage() {}

func (x *QueryProductAttributeGroupDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeGroupDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeGroupDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{21}
}

func (x *QueryProductAttributeGroupDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductAttributeGroupDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键id
	CategoryId    int64                  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //分组名称
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  //更新时间
	IsDeleted     int32                  `protobuf:"varint,10,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`   //是否删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeGroupDetailResp) Reset() {
	*x = QueryProductAttributeGroupDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeGroupDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeGroupDetailResp) ProtoMessage() {}

func (x *QueryProductAttributeGroupDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeGroupDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeGroupDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{22}
}

func (x *QueryProductAttributeGroupDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductAttributeGroupDetailResp) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryProductAttributeGroupDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductAttributeGroupDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryProductAttributeGroupDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductAttributeGroupDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductAttributeGroupDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductAttributeGroupDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductAttributeGroupDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QueryProductAttributeGroupDetailResp) GetIsDeleted() int32 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

// 分页查询商品属性分组列表
type QueryProductAttributeGroupListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    int64                  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //分组名称
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	PageNum       int32                  `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`          //第几页
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       //每页的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeGroupListReq) Reset() {
	*x = QueryProductAttributeGroupListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeGroupListReq) ProtoMessage() {}

func (x *QueryProductAttributeGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeGroupListReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeGroupListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{23}
}

func (x *QueryProductAttributeGroupListReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryProductAttributeGroupListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductAttributeGroupListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductAttributeGroupListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductAttributeGroupListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductAttributeGroupListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键id
	CategoryId    int64                  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //分组名称
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  //更新时间
	IsDeleted     int32                  `protobuf:"varint,10,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`   //是否删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductAttributeGroupListData) Reset() {
	*x = ProductAttributeGroupListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttributeGroupListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeGroupListData) ProtoMessage() {}

func (x *ProductAttributeGroupListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeGroupListData.ProtoReflect.Descriptor instead.
func (*ProductAttributeGroupListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{24}
}

func (x *ProductAttributeGroupListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeGroupListData) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductAttributeGroupListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttributeGroupListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductAttributeGroupListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductAttributeGroupListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductAttributeGroupListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductAttributeGroupListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductAttributeGroupListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProductAttributeGroupListData) GetIsDeleted() int32 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

type QueryProductAttributeGroupListResp struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Total         int64                            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductAttributeGroupListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeGroupListResp) Reset() {
	*x = QueryProductAttributeGroupListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeGroupListResp) ProtoMessage() {}

func (x *QueryProductAttributeGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeGroupListResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeGroupListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{25}
}

func (x *QueryProductAttributeGroupListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductAttributeGroupListResp) GetList() []*ProductAttributeGroupListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品属性值
type AddProductAttributeValueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //主键id
	SpuId         int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                   //商品SPU ID
	AttributeId   int64                  `protobuf:"varint,3,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"` //属性ID
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                 //属性值
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                              //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`          //创建人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductAttributeValueReq) Reset() {
	*x = AddProductAttributeValueReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductAttributeValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeValueReq) ProtoMessage() {}

func (x *AddProductAttributeValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeValueReq.ProtoReflect.Descriptor instead.
func (*AddProductAttributeValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{26}
}

func (x *AddProductAttributeValueReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductAttributeValueReq) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *AddProductAttributeValueReq) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *AddProductAttributeValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddProductAttributeValueReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddProductAttributeValueReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddProductAttributeValueResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductAttributeValueResp) Reset() {
	*x = AddProductAttributeValueResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductAttributeValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductAttributeValueResp) ProtoMessage() {}

func (x *AddProductAttributeValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductAttributeValueResp.ProtoReflect.Descriptor instead.
func (*AddProductAttributeValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{27}
}

func (x *AddProductAttributeValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品属性值
type DeleteProductAttributeValueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductAttributeValueReq) Reset() {
	*x = DeleteProductAttributeValueReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductAttributeValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeValueReq) ProtoMessage() {}

func (x *DeleteProductAttributeValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeValueReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteProductAttributeValueReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductAttributeValueResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductAttributeValueResp) Reset() {
	*x = DeleteProductAttributeValueResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductAttributeValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeValueResp) ProtoMessage() {}

func (x *DeleteProductAttributeValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeValueResp.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteProductAttributeValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品属性值
type UpdateProductAttributeValueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //主键id
	SpuId         int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                   //商品SPU ID
	AttributeId   int64                  `protobuf:"varint,3,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"` //属性ID
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                 //属性值
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                              //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`          //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeValueReq) Reset() {
	*x = UpdateProductAttributeValueReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeValueReq) ProtoMessage() {}

func (x *UpdateProductAttributeValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeValueReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateProductAttributeValueReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductAttributeValueReq) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *UpdateProductAttributeValueReq) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *UpdateProductAttributeValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateProductAttributeValueReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductAttributeValueReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductAttributeValueResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeValueResp) Reset() {
	*x = UpdateProductAttributeValueResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeValueResp) ProtoMessage() {}

func (x *UpdateProductAttributeValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeValueResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateProductAttributeValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品属性值状态
type UpdateProductAttributeValueStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //主键id
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeValueStatusReq) Reset() {
	*x = UpdateProductAttributeValueStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeValueStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeValueStatusReq) ProtoMessage() {}

func (x *UpdateProductAttributeValueStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeValueStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeValueStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateProductAttributeValueStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductAttributeValueStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductAttributeValueStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductAttributeValueStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductAttributeValueStatusResp) Reset() {
	*x = UpdateProductAttributeValueStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductAttributeValueStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductAttributeValueStatusResp) ProtoMessage() {}

func (x *UpdateProductAttributeValueStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductAttributeValueStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductAttributeValueStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateProductAttributeValueStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品属性值详情
type QueryProductAttributeValueDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeValueDetailReq) Reset() {
	*x = QueryProductAttributeValueDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeValueDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeValueDetailReq) ProtoMessage() {}

func (x *QueryProductAttributeValueDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeValueDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeValueDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{34}
}

func (x *QueryProductAttributeValueDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductAttributeValueDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //主键id
	SpuId         int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                   //商品SPU ID
	AttributeId   int64                  `protobuf:"varint,3,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"` //属性ID
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                 //属性值
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                              //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`          //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`     //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`          //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`     //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeValueDetailResp) Reset() {
	*x = QueryProductAttributeValueDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeValueDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeValueDetailResp) ProtoMessage() {}

func (x *QueryProductAttributeValueDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeValueDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeValueDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{35}
}

func (x *QueryProductAttributeValueDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductAttributeValueDetailResp) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *QueryProductAttributeValueDetailResp) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *QueryProductAttributeValueDetailResp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *QueryProductAttributeValueDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductAttributeValueDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductAttributeValueDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductAttributeValueDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductAttributeValueDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询商品属性值列表
type QueryProductAttributeValueListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpuId         int64                  `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                   //商品SPU ID
	AttributeId   int64                  `protobuf:"varint,2,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"` //属性ID
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                              //状态：0->禁用；1->启用
	PageNum       int32                  `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`             //第几页
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`          //每页的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeValueListReq) Reset() {
	*x = QueryProductAttributeValueListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeValueListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeValueListReq) ProtoMessage() {}

func (x *QueryProductAttributeValueListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeValueListReq.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeValueListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{36}
}

func (x *QueryProductAttributeValueListReq) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *QueryProductAttributeValueListReq) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *QueryProductAttributeValueListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductAttributeValueListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductAttributeValueListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductAttributeValueListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //主键id
	SpuId         int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                   //商品SPU ID
	AttributeId   int64                  `protobuf:"varint,3,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"` //属性ID
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                 //属性值
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                              //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`          //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`     //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`          //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`     //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductAttributeValueListData) Reset() {
	*x = ProductAttributeValueListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttributeValueListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeValueListData) ProtoMessage() {}

func (x *ProductAttributeValueListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeValueListData.ProtoReflect.Descriptor instead.
func (*ProductAttributeValueListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{37}
}

func (x *ProductAttributeValueListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeValueListData) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ProductAttributeValueListData) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *ProductAttributeValueListData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProductAttributeValueListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductAttributeValueListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductAttributeValueListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductAttributeValueListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductAttributeValueListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryProductAttributeValueListResp struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Total         int64                            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductAttributeValueListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductAttributeValueListResp) Reset() {
	*x = QueryProductAttributeValueListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductAttributeValueListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductAttributeValueListResp) ProtoMessage() {}

func (x *QueryProductAttributeValueListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductAttributeValueListResp.ProtoReflect.Descriptor instead.
func (*QueryProductAttributeValueListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{38}
}

func (x *QueryProductAttributeValueListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductAttributeValueListResp) GetList() []*ProductAttributeValueListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品品牌
type AddProductBrandReq struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	Logo                string                 `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	BigPic              string                 `protobuf:"bytes,4,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	Description         string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                //描述
	FirstLetter         string                 `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Sort                int32                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                             //排序
	RecommendStatus     int32                  `protobuf:"varint,8,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`                //推荐状态
	ProductCount        int32                  `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                         //产品数量
	ProductCommentCount int32                  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	IsEnabled           int32                  `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`                                 //是否启用
	CreateBy            int64                  `protobuf:"varint,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                    //创建人ID
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AddProductBrandReq) Reset() {
	*x = AddProductBrandReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductBrandReq) ProtoMessage() {}

func (x *AddProductBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductBrandReq.ProtoReflect.Descriptor instead.
func (*AddProductBrandReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{39}
}

func (x *AddProductBrandReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductBrandReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *AddProductBrandReq) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *AddProductBrandReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddProductBrandReq) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *AddProductBrandReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductBrandReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *AddProductBrandReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *AddProductBrandReq) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *AddProductBrandReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *AddProductBrandReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddProductBrandResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BrandId       int64                  `protobuf:"varint,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductBrandResp) Reset() {
	*x = AddProductBrandResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductBrandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductBrandResp) ProtoMessage() {}

func (x *AddProductBrandResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductBrandResp.ProtoReflect.Descriptor instead.
func (*AddProductBrandResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{40}
}

func (x *AddProductBrandResp) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

// 删除商品品牌
type DeleteProductBrandReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductBrandReq) Reset() {
	*x = DeleteProductBrandReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductBrandReq) ProtoMessage() {}

func (x *DeleteProductBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductBrandReq.ProtoReflect.Descriptor instead.
func (*DeleteProductBrandReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteProductBrandReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductBrandResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductBrandResp) Reset() {
	*x = DeleteProductBrandResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductBrandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductBrandResp) ProtoMessage() {}

func (x *DeleteProductBrandResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductBrandResp.ProtoReflect.Descriptor instead.
func (*DeleteProductBrandResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteProductBrandResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品品牌
type UpdateProductBrandReq struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	Logo                string                 `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	BigPic              string                 `protobuf:"bytes,4,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	Description         string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                //描述
	FirstLetter         string                 `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Sort                int32                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                             //排序
	RecommendStatus     int32                  `protobuf:"varint,8,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`                //推荐状态
	ProductCount        int32                  `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                         //产品数量
	ProductCommentCount int32                  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	IsEnabled           int32                  `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`                                 //是否启用
	UpdateBy            int64                  `protobuf:"varint,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                    //更新人ID
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateProductBrandReq) Reset() {
	*x = UpdateProductBrandReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductBrandReq) ProtoMessage() {}

func (x *UpdateProductBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductBrandReq.ProtoReflect.Descriptor instead.
func (*UpdateProductBrandReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateProductBrandReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductBrandReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UpdateProductBrandReq) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *UpdateProductBrandReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProductBrandReq) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *UpdateProductBrandReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductBrandReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *UpdateProductBrandReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *UpdateProductBrandReq) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *UpdateProductBrandReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *UpdateProductBrandReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductBrandResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductBrandResp) Reset() {
	*x = UpdateProductBrandResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductBrandResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductBrandResp) ProtoMessage() {}

func (x *UpdateProductBrandResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductBrandResp.ProtoReflect.Descriptor instead.
func (*UpdateProductBrandResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateProductBrandResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品品牌状态
type UpdateProductBrandStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                     //推荐状态
	UpdateBy      int64                  `protobuf:"varint,3,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductBrandStatusReq) Reset() {
	*x = UpdateProductBrandStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductBrandStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductBrandStatusReq) ProtoMessage() {}

func (x *UpdateProductBrandStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductBrandStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductBrandStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateProductBrandStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductBrandStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductBrandStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductBrandStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductBrandStatusResp) Reset() {
	*x = UpdateProductBrandStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductBrandStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductBrandStatusResp) ProtoMessage() {}

func (x *UpdateProductBrandStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductBrandStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductBrandStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateProductBrandStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品品牌详情
type QueryProductBrandDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductBrandDetailReq) Reset() {
	*x = QueryProductBrandDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductBrandDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductBrandDetailReq) ProtoMessage() {}

func (x *QueryProductBrandDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductBrandDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductBrandDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{47}
}

func (x *QueryProductBrandDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductBrandDetailResp struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	Logo                string                 `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	BigPic              string                 `protobuf:"bytes,4,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	Description         string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                //描述
	FirstLetter         string                 `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Sort                int32                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                             //排序
	RecommendStatus     int32                  `protobuf:"varint,8,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`                //推荐状态
	ProductCount        int32                  `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                         //产品数量
	ProductCommentCount int32                  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	IsEnabled           int32                  `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`                                 //是否启用
	CreateBy            int64                  `protobuf:"varint,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                    //创建人ID
	CreateTime          string                 `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                               //创建时间
	UpdateBy            int64                  `protobuf:"varint,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                    //更新人ID
	UpdateTime          string                 `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //更新时间
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryProductBrandDetailResp) Reset() {
	*x = QueryProductBrandDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductBrandDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductBrandDetailResp) ProtoMessage() {}

func (x *QueryProductBrandDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductBrandDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductBrandDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{48}
}

func (x *QueryProductBrandDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductBrandDetailResp) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *QueryProductBrandDetailResp) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *QueryProductBrandDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryProductBrandDetailResp) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *QueryProductBrandDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductBrandDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductBrandDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询商品品牌列表
type QueryProductBrandListReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                               //品牌名称
	RecommendStatus int32                  `protobuf:"varint,2,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态
	IsEnabled       int32                  `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`                   //是否启用
	PageNum         int32                  `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                         //第几页
	PageSize        int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                      //每页的数量
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryProductBrandListReq) Reset() {
	*x = QueryProductBrandListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductBrandListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductBrandListReq) ProtoMessage() {}

func (x *QueryProductBrandListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductBrandListReq.ProtoReflect.Descriptor instead.
func (*QueryProductBrandListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{49}
}

func (x *QueryProductBrandListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductBrandListReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *QueryProductBrandListReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QueryProductBrandListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductBrandListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductBrandListData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	Logo                string                 `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	BigPic              string                 `protobuf:"bytes,4,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	Description         string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                //描述
	FirstLetter         string                 `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Sort                int32                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                             //排序
	RecommendStatus     int32                  `protobuf:"varint,8,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`                //推荐状态
	ProductCount        int32                  `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                         //产品数量
	ProductCommentCount int32                  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	IsEnabled           int32                  `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`                                 //是否启用
	CreateBy            int64                  `protobuf:"varint,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                    //创建人ID
	CreateTime          string                 `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                               //创建时间
	UpdateBy            int64                  `protobuf:"varint,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                    //更新人ID
	UpdateTime          string                 `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //更新时间
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProductBrandListData) Reset() {
	*x = ProductBrandListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductBrandListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductBrandListData) ProtoMessage() {}

func (x *ProductBrandListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductBrandListData.ProtoReflect.Descriptor instead.
func (*ProductBrandListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{50}
}

func (x *ProductBrandListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductBrandListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductBrandListData) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ProductBrandListData) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *ProductBrandListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductBrandListData) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *ProductBrandListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductBrandListData) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *ProductBrandListData) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *ProductBrandListData) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *ProductBrandListData) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *ProductBrandListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductBrandListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductBrandListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductBrandListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryProductBrandListResp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Total         int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductBrandListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductBrandListResp) Reset() {
	*x = QueryProductBrandListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductBrandListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductBrandListResp) ProtoMessage() {}

func (x *QueryProductBrandListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductBrandListResp.ProtoReflect.Descriptor instead.
func (*QueryProductBrandListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{51}
}

func (x *QueryProductBrandListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductBrandListResp) GetList() []*ProductBrandListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryBrandListByIdsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryBrandListByIdsReq) Reset() {
	*x = QueryBrandListByIdsReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryBrandListByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBrandListByIdsReq) ProtoMessage() {}

func (x *QueryBrandListByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBrandListByIdsReq.ProtoReflect.Descriptor instead.
func (*QueryBrandListByIdsReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{52}
}

func (x *QueryBrandListByIdsReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 更新品牌的排序
type UpdateProductBrandSortReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             //
	Sort          int32                  `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`                         //排序
	UpdateBy      int64                  `protobuf:"varint,3,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductBrandSortReq) Reset() {
	*x = UpdateProductBrandSortReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductBrandSortReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductBrandSortReq) ProtoMessage() {}

func (x *UpdateProductBrandSortReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductBrandSortReq.ProtoReflect.Descriptor instead.
func (*UpdateProductBrandSortReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{53}
}

func (x *UpdateProductBrandSortReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductBrandSortReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductBrandSortReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

// 添加产品分类
type AddProductCategoryReq struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     //
	ParentId               int64                  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         //上级分类的编号：0表示一级分类
	Name                   string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                  //商品分类名称
	Level                  int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`                               //分类级别：0->1级；1->2级
	ProductUnit            string                 `protobuf:"bytes,6,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"` //商品单位
	NavStatus              int32                  `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`      //是否显示在导航栏：0->不显示；1->显示
	Sort                   int32                  `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`                                 //排序
	Icon                   string                 `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`                                  //图标
	Keywords               string                 `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`                         //关键字
	Description            string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                   //描述
	IsEnabled              int32                  `protobuf:"varint,12,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`     //是否启用
	CreateBy               int64                  `protobuf:"varint,13,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建人ID
	ProductAttributeIdList []int64                `protobuf:"varint,14,rep,packed,name=ProductAttributeIdList,proto3" json:"ProductAttributeIdList,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AddProductCategoryReq) Reset() {
	*x = AddProductCategoryReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryReq) ProtoMessage() {}

func (x *AddProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryReq.ProtoReflect.Descriptor instead.
func (*AddProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{54}
}

func (x *AddProductCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductCategoryReq) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *AddProductCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductCategoryReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AddProductCategoryReq) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *AddProductCategoryReq) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *AddProductCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddProductCategoryReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *AddProductCategoryReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddProductCategoryReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *AddProductCategoryReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AddProductCategoryReq) GetProductAttributeIdList() []int64 {
	if x != nil {
		return x.ProductAttributeIdList
	}
	return nil
}

type AddProductCategoryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductCategoryResp) Reset() {
	*x = AddProductCategoryResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryResp) ProtoMessage() {}

func (x *AddProductCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryResp.ProtoReflect.Descriptor instead.
func (*AddProductCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{55}
}

func (x *AddProductCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品分类
type DeleteProductCategoryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductCategoryReq) Reset() {
	*x = DeleteProductCategoryReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCategoryReq) ProtoMessage() {}

func (x *DeleteProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteProductCategoryReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductCategoryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductCategoryResp) Reset() {
	*x = DeleteProductCategoryResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCategoryResp) ProtoMessage() {}

func (x *DeleteProductCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCategoryResp.ProtoReflect.Descriptor instead.
func (*DeleteProductCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteProductCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品分类
type UpdateProductCategoryReq struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     //
	ParentId               int64                  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`         //上级分类的编号：0表示一级分类
	Name                   string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                  //商品分类名称
	Level                  int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`                               //分类级别：0->1级；1->2级
	ProductUnit            string                 `protobuf:"bytes,6,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"` //商品单位
	NavStatus              int32                  `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`      //是否显示在导航栏：0->不显示；1->显示
	Sort                   int32                  `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`                                 //排序
	Icon                   string                 `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`                                  //图标
	Keywords               string                 `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`                         //关键字
	Description            string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                   //描述
	IsEnabled              int32                  `protobuf:"varint,12,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`     //是否启用
	UpdateBy               int64                  `protobuf:"varint,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新人ID
	ProductAttributeIdList []int64                `protobuf:"varint,14,rep,packed,name=ProductAttributeIdList,proto3" json:"ProductAttributeIdList,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateProductCategoryReq) Reset() {
	*x = UpdateProductCategoryReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryReq) ProtoMessage() {}

func (x *UpdateProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateProductCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateProductCategoryReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *UpdateProductCategoryReq) GetProductAttributeIdList() []int64 {
	if x != nil {
		return x.ProductAttributeIdList
	}
	return nil
}

type UpdateProductCategoryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductCategoryResp) Reset() {
	*x = UpdateProductCategoryResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryResp) ProtoMessage() {}

func (x *UpdateProductCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryResp.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateProductCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品分类状态
type UpdateProductCategoryStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                     //是否显示在导航栏：0->不显示；1->显示
	UpdateBy      int64                  `protobuf:"varint,3,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductCategoryStatusReq) Reset() {
	*x = UpdateProductCategoryStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductCategoryStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryStatusReq) ProtoMessage() {}

func (x *UpdateProductCategoryStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateProductCategoryStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductCategoryStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductCategoryStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductCategoryStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductCategoryStatusResp) Reset() {
	*x = UpdateProductCategoryStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductCategoryStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductCategoryStatusResp) ProtoMessage() {}

func (x *UpdateProductCategoryStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductCategoryStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductCategoryStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateProductCategoryStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询产品分类详情
type QueryProductCategoryDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryDetailReq) Reset() {
	*x = QueryProductCategoryDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryDetailReq) ProtoMessage() {}

func (x *QueryProductCategoryDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{62}
}

func (x *QueryProductCategoryDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductCategoryDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //
	ParentId      int64                  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`             //上级分类的编号：0表示一级分类
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                      //商品分类名称
	Level         int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`                                   //分类级别：0->1级；1->2级
	ProductCount  int32                  `protobuf:"varint,5,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"` //商品数量
	ProductUnit   string                 `protobuf:"bytes,6,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"`     //商品单位
	NavStatus     int32                  `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`          //是否显示在导航栏：0->不显示；1->显示
	Sort          int32                  `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	Icon          string                 `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`                                      //图标
	Keywords      string                 `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`                             //关键字
	Description   string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                       //描述
	IsEnabled     int32                  `protobuf:"varint,12,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`         //是否启用
	CreateBy      int64                  `protobuf:"varint,13,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`            //创建人ID
	CreateTime    string                 `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`       //创建时间
	UpdateBy      int64                  `protobuf:"varint,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	UpdateTime    string                 `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryDetailResp) Reset() {
	*x = QueryProductCategoryDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryDetailResp) ProtoMessage() {}

func (x *QueryProductCategoryDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{63}
}

func (x *QueryProductCategoryDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductCategoryDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductCategoryDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询产品分类列表
type QueryProductCategoryListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                             //商品分类名称
	NavStatus     int32                  `protobuf:"varint,2,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"` //是否显示在导航栏：0->不显示；1->显示
	Keywords      string                 `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords,omitempty"`                     //关键字
	IsEnabled     int32                  `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"` //是否启用
	PageNum       int32                  `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       //第几页
	PageSize      int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    //每页的数量
	ParentId      int64                  `protobuf:"varint,7,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`    //上级分类的编号：0表示一级分类
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryListReq) Reset() {
	*x = QueryProductCategoryListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListReq) ProtoMessage() {}

func (x *QueryProductCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{64}
}

func (x *QueryProductCategoryListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductCategoryListReq) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryProductCategoryListReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductCategoryListReq) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type ProductCategoryListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //
	ParentId      int64                  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`             //上级分类的编号：0表示一级分类
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                      //商品分类名称
	Level         int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`                                   //分类级别：0->1级；1->2级
	ProductCount  int32                  `protobuf:"varint,5,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"` //商品数量
	ProductUnit   string                 `protobuf:"bytes,6,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"`     //商品单位
	NavStatus     int32                  `protobuf:"varint,7,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`          //是否显示在导航栏：0->不显示；1->显示
	Sort          int32                  `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	Icon          string                 `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`                                      //图标
	Keywords      string                 `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`                             //关键字
	Description   string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                       //描述
	IsEnabled     int32                  `protobuf:"varint,12,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`         //是否启用
	CreateBy      int64                  `protobuf:"varint,13,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`            //创建人ID
	CreateTime    string                 `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`       //创建时间
	UpdateBy      int64                  `protobuf:"varint,15,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	UpdateTime    string                 `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductCategoryListData) Reset() {
	*x = ProductCategoryListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCategoryListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryListData) ProtoMessage() {}

func (x *ProductCategoryListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryListData.ProtoReflect.Descriptor instead.
func (*ProductCategoryListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{65}
}

func (x *ProductCategoryListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCategoryListData) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ProductCategoryListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategoryListData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProductCategoryListData) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *ProductCategoryListData) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *ProductCategoryListData) GetNavStatus() int32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *ProductCategoryListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductCategoryListData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ProductCategoryListData) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProductCategoryListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductCategoryListData) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *ProductCategoryListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductCategoryListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductCategoryListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductCategoryListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryProductCategoryListResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Total         int64                      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductCategoryListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryListResp) Reset() {
	*x = QueryProductCategoryListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListResp) ProtoMessage() {}

func (x *QueryProductCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{66}
}

func (x *QueryProductCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductCategoryListResp) GetList() []*ProductCategoryListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryProductCategoryTreeListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryTreeListReq) Reset() {
	*x = QueryProductCategoryTreeListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryTreeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryTreeListReq) ProtoMessage() {}

func (x *QueryProductCategoryTreeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryTreeListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryTreeListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{67}
}

type QueryProductCategoryListTreeData struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Id            int64                               `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string                              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ImageUrl      string                              `protobuf:"bytes,3,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`
	Children      []*QueryProductCategoryListTreeData `protobuf:"bytes,4,rep,name=Children,proto3" json:"Children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryListTreeData) Reset() {
	*x = QueryProductCategoryListTreeData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryListTreeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListTreeData) ProtoMessage() {}

func (x *QueryProductCategoryListTreeData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListTreeData.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListTreeData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{68}
}

func (x *QueryProductCategoryListTreeData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductCategoryListTreeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductCategoryListTreeData) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *QueryProductCategoryListTreeData) GetChildren() []*QueryProductCategoryListTreeData {
	if x != nil {
		return x.Children
	}
	return nil
}

type QueryProductCategoryListTreeResp struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	List          []*QueryProductCategoryListTreeData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryListTreeResp) Reset() {
	*x = QueryProductCategoryListTreeResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryListTreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryListTreeResp) ProtoMessage() {}

func (x *QueryProductCategoryListTreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryListTreeResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryListTreeResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{69}
}

func (x *QueryProductCategoryListTreeResp) GetList() []*QueryProductCategoryListTreeData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）
type AddProductCategoryAttributeRelationReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             //
	ProductCategoryId  int64                  `protobuf:"varint,2,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`    //商品分类id
	ProductAttributeId int64                  `protobuf:"varint,3,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //商品属性id
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AddProductCategoryAttributeRelationReq) Reset() {
	*x = AddProductCategoryAttributeRelationReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductCategoryAttributeRelationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryAttributeRelationReq) ProtoMessage() {}

func (x *AddProductCategoryAttributeRelationReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryAttributeRelationReq.ProtoReflect.Descriptor instead.
func (*AddProductCategoryAttributeRelationReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{70}
}

func (x *AddProductCategoryAttributeRelationReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductCategoryAttributeRelationReq) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

func (x *AddProductCategoryAttributeRelationReq) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

type AddProductCategoryAttributeRelationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductCategoryAttributeRelationResp) Reset() {
	*x = AddProductCategoryAttributeRelationResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductCategoryAttributeRelationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCategoryAttributeRelationResp) ProtoMessage() {}

func (x *AddProductCategoryAttributeRelationResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCategoryAttributeRelationResp.ProtoReflect.Descriptor instead.
func (*AddProductCategoryAttributeRelationResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{71}
}

func (x *AddProductCategoryAttributeRelationResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询产品的分类和属性的关系表，用于设置分类筛选条件（只支持一级分类）列表
type QueryProductCategoryAttributeRelationListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       int64                  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize      int64                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryAttributeRelationListReq) Reset() {
	*x = QueryProductCategoryAttributeRelationListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryAttributeRelationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryAttributeRelationListReq) ProtoMessage() {}

func (x *QueryProductCategoryAttributeRelationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryAttributeRelationListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryAttributeRelationListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{72}
}

func (x *QueryProductCategoryAttributeRelationListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductCategoryAttributeRelationListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductCategoryAttributeRelationListData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             //
	ProductCategoryId  int64                  `protobuf:"varint,2,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`    //商品分类id
	ProductAttributeId int64                  `protobuf:"varint,3,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` //商品属性id
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProductCategoryAttributeRelationListData) Reset() {
	*x = ProductCategoryAttributeRelationListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCategoryAttributeRelationListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryAttributeRelationListData) ProtoMessage() {}

func (x *ProductCategoryAttributeRelationListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryAttributeRelationListData.ProtoReflect.Descriptor instead.
func (*ProductCategoryAttributeRelationListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{73}
}

func (x *ProductCategoryAttributeRelationListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCategoryAttributeRelationListData) GetProductCategoryId() int64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

func (x *ProductCategoryAttributeRelationListData) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

type QueryProductCategoryAttributeRelationListResp struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Total         int64                                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductCategoryAttributeRelationListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCategoryAttributeRelationListResp) Reset() {
	*x = QueryProductCategoryAttributeRelationListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCategoryAttributeRelationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCategoryAttributeRelationListResp) ProtoMessage() {}

func (x *QueryProductCategoryAttributeRelationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCategoryAttributeRelationListResp.ProtoReflect.Descriptor instead.
func (*QueryProductCategoryAttributeRelationListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{74}
}

func (x *QueryProductCategoryAttributeRelationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductCategoryAttributeRelationListResp) GetList() []*ProductCategoryAttributeRelationListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加收藏表
type AddProductCollectReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户表的用户ID
	ValueId       int32                  `protobuf:"varint,3,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`             //如果type=0，则是商品ID；如果type=1，则是专题ID
	CollectType   int32                  `protobuf:"varint,4,opt,name=collect_type,json=collectType,proto3" json:"collect_type,omitempty"` //收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
	AddTime       string                 `protobuf:"bytes,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`              //创建时间
	Deleted       int32                  `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`                            //逻辑删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductCollectReq) Reset() {
	*x = AddProductCollectReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCollectReq) ProtoMessage() {}

func (x *AddProductCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCollectReq.ProtoReflect.Descriptor instead.
func (*AddProductCollectReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{75}
}

func (x *AddProductCollectReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddProductCollectReq) GetValueId() int32 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

func (x *AddProductCollectReq) GetCollectType() int32 {
	if x != nil {
		return x.CollectType
	}
	return 0
}

func (x *AddProductCollectReq) GetAddTime() string {
	if x != nil {
		return x.AddTime
	}
	return ""
}

func (x *AddProductCollectReq) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

type AddProductCollectResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductCollectResp) Reset() {
	*x = AddProductCollectResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductCollectResp) ProtoMessage() {}

func (x *AddProductCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductCollectResp.ProtoReflect.Descriptor instead.
func (*AddProductCollectResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{76}
}

func (x *AddProductCollectResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除收藏表
type DeleteProductCollectReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //用户表的用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductCollectReq) Reset() {
	*x = DeleteProductCollectReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCollectReq) ProtoMessage() {}

func (x *DeleteProductCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCollectReq.ProtoReflect.Descriptor instead.
func (*DeleteProductCollectReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{77}
}

func (x *DeleteProductCollectReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteProductCollectReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DeleteProductCollectResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductCollectResp) Reset() {
	*x = DeleteProductCollectResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCollectResp) ProtoMessage() {}

func (x *DeleteProductCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCollectResp.ProtoReflect.Descriptor instead.
func (*DeleteProductCollectResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteProductCollectResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询收藏表详情
type QueryProductCollectDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCollectDetailReq) Reset() {
	*x = QueryProductCollectDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCollectDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectDetailReq) ProtoMessage() {}

func (x *QueryProductCollectDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductCollectDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{79}
}

func (x *QueryProductCollectDetailReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryProductCollectDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       //
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户表的用户ID
	ValueId       int32                  `protobuf:"varint,3,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`             //如果type=0，则是商品ID；如果type=1，则是专题ID
	CollectType   int32                  `protobuf:"varint,4,opt,name=collect_type,json=collectType,proto3" json:"collect_type,omitempty"` //收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
	AddTime       string                 `protobuf:"bytes,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`              //创建时间
	Deleted       int32                  `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`                            //逻辑删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCollectDetailResp) Reset() {
	*x = QueryProductCollectDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCollectDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectDetailResp) ProtoMessage() {}

func (x *QueryProductCollectDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductCollectDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{80}
}

func (x *QueryProductCollectDetailResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryProductCollectDetailResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryProductCollectDetailResp) GetValueId() int32 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

func (x *QueryProductCollectDetailResp) GetCollectType() int32 {
	if x != nil {
		return x.CollectType
	}
	return 0
}

func (x *QueryProductCollectDetailResp) GetAddTime() string {
	if x != nil {
		return x.AddTime
	}
	return ""
}

func (x *QueryProductCollectDetailResp) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

// 分页查询收藏表列表
type QueryProductCollectListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       int64                  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize      int64                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
	UserId        int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       //用户表的用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCollectListReq) Reset() {
	*x = QueryProductCollectListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCollectListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectListReq) ProtoMessage() {}

func (x *QueryProductCollectListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectListReq.ProtoReflect.Descriptor instead.
func (*QueryProductCollectListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{81}
}

func (x *QueryProductCollectListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductCollectListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductCollectListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ProductCollectListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       //
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                //用户表的用户ID
	ValueId       int32                  `protobuf:"varint,3,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`             //如果type=0，则是商品ID；如果type=1，则是专题ID
	CollectType   int32                  `protobuf:"varint,4,opt,name=collect_type,json=collectType,proto3" json:"collect_type,omitempty"` //收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
	AddTime       string                 `protobuf:"bytes,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`              //创建时间
	Deleted       int32                  `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`                            //逻辑删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductCollectListData) Reset() {
	*x = ProductCollectListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCollectListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCollectListData) ProtoMessage() {}

func (x *ProductCollectListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCollectListData.ProtoReflect.Descriptor instead.
func (*ProductCollectListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{82}
}

func (x *ProductCollectListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductCollectListData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProductCollectListData) GetValueId() int32 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

func (x *ProductCollectListData) GetCollectType() int32 {
	if x != nil {
		return x.CollectType
	}
	return 0
}

func (x *ProductCollectListData) GetAddTime() string {
	if x != nil {
		return x.AddTime
	}
	return ""
}

func (x *ProductCollectListData) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

type QueryProductCollectListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Total         int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductCollectListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductCollectListResp) Reset() {
	*x = QueryProductCollectListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductCollectListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductCollectListResp) ProtoMessage() {}

func (x *QueryProductCollectListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductCollectListResp.ProtoReflect.Descriptor instead.
func (*QueryProductCollectListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{83}
}

func (x *QueryProductCollectListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductCollectListResp) GetList() []*ProductCollectListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品评价
type AddCommentReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ReplayCount      int32                  `protobuf:"varint,1,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`               //回复数量
	ProductId        int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                     //商品id
	MemberNickName   string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //评价者昵称
	ProductName      string                 `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                //商品名称
	Star             int32                  `protobuf:"varint,5,opt,name=star,proto3" json:"star,omitempty"`                                                //评价星数：0->5
	MemberIp         string                 `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	ShowStatus       int32                  `protobuf:"varint,8,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                  //是否显示，0-不显示，1-显示
	ProductAttribute string                 `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	CollectCount     int32                  `protobuf:"varint,10,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`           //点赞数
	ReadCount        int32                  `protobuf:"varint,11,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //阅读数
	Content          string                 `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`                                          //内容
	Pics             string                 `protobuf:"bytes,13,opt,name=pics,proto3" json:"pics,omitempty"`                                                //上传图片地址，以逗号隔开
	MemberIcon       string                 `protobuf:"bytes,14,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                  //评论用户头像
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddCommentReq) Reset() {
	*x = AddCommentReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentReq) ProtoMessage() {}

func (x *AddCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentReq.ProtoReflect.Descriptor instead.
func (*AddCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{84}
}

func (x *AddCommentReq) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

func (x *AddCommentReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *AddCommentReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *AddCommentReq) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *AddCommentReq) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *AddCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddCommentReq) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *AddCommentReq) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *AddCommentReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *AddCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddCommentReq) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *AddCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

type AddCommentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCommentResp) Reset() {
	*x = AddCommentResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentResp) ProtoMessage() {}

func (x *AddCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentResp.ProtoReflect.Descriptor instead.
func (*AddCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{85}
}

func (x *AddCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品评价
type DeleteCommentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentReq) Reset() {
	*x = DeleteCommentReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReq) ProtoMessage() {}

func (x *DeleteCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{86}
}

func (x *DeleteCommentReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCommentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentResp) Reset() {
	*x = DeleteCommentResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentResp) ProtoMessage() {}

func (x *DeleteCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentResp.ProtoReflect.Descriptor instead.
func (*DeleteCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{87}
}

func (x *DeleteCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品评价
type UpdateCommentReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                     //
	ProductId        int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                     //商品id
	MemberNickName   string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //评价者昵称
	ProductName      string                 `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                //商品名称
	Star             int32                  `protobuf:"varint,5,opt,name=star,proto3" json:"star,omitempty"`                                                //评价星数：0->5
	MemberIp         string                 `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	ShowStatus       int32                  `protobuf:"varint,8,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                  //是否显示，0-不显示，1-显示
	ProductAttribute string                 `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	CollectCount     int32                  `protobuf:"varint,10,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`           //点赞数
	ReadCount        int32                  `protobuf:"varint,11,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //阅读数
	Content          string                 `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`                                          //内容
	Pics             string                 `protobuf:"bytes,13,opt,name=pics,proto3" json:"pics,omitempty"`                                                //上传图片地址，以逗号隔开
	MemberIcon       string                 `protobuf:"bytes,14,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                  //评论用户头像
	ReplayCount      int32                  `protobuf:"varint,15,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`              //回复数量
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateCommentReq) Reset() {
	*x = UpdateCommentReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentReq) ProtoMessage() {}

func (x *UpdateCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentReq.ProtoReflect.Descriptor instead.
func (*UpdateCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateCommentReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCommentReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *UpdateCommentReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *UpdateCommentReq) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *UpdateCommentReq) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *UpdateCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateCommentReq) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *UpdateCommentReq) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *UpdateCommentReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *UpdateCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateCommentReq) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *UpdateCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *UpdateCommentReq) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

type UpdateCommentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCommentResp) Reset() {
	*x = UpdateCommentResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentResp) ProtoMessage() {}

func (x *UpdateCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentResp.ProtoReflect.Descriptor instead.
func (*UpdateCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品评价详情
type QueryCommentDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCommentDetailReq) Reset() {
	*x = QueryCommentDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentDetailReq) ProtoMessage() {}

func (x *QueryCommentDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCommentDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{90}
}

func (x *QueryCommentDetailReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryCommentDetailResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                     //
	ProductId        int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                     //商品id
	MemberNickName   string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //评价者昵称
	ProductName      string                 `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                //商品名称
	Star             int32                  `protobuf:"varint,5,opt,name=star,proto3" json:"star,omitempty"`                                                //评价星数：0->5
	MemberIp         string                 `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	CreateTime       string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                   //评价时间
	ShowStatus       int32                  `protobuf:"varint,8,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                  //是否显示，0-不显示，1-显示
	ProductAttribute string                 `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	CollectCount     int32                  `protobuf:"varint,10,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`           //点赞数
	ReadCount        int32                  `protobuf:"varint,11,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //阅读数
	Content          string                 `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`                                          //内容
	Pics             string                 `protobuf:"bytes,13,opt,name=pics,proto3" json:"pics,omitempty"`                                                //上传图片地址，以逗号隔开
	MemberIcon       string                 `protobuf:"bytes,14,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                  //评论用户头像
	ReplayCount      int32                  `protobuf:"varint,15,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`              //回复数量
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryCommentDetailResp) Reset() {
	*x = QueryCommentDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentDetailResp) ProtoMessage() {}

func (x *QueryCommentDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCommentDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{91}
}

func (x *QueryCommentDetailResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryCommentDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryCommentDetailResp) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QueryCommentDetailResp) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *QueryCommentDetailResp) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *QueryCommentDetailResp) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *QueryCommentDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryCommentDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryCommentDetailResp) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *QueryCommentDetailResp) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *QueryCommentDetailResp) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *QueryCommentDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryCommentDetailResp) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *QueryCommentDetailResp) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QueryCommentDetailResp) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

// 分页查询商品评价列表
type QueryCommentListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       int64                  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize      int64                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
	ProductId     int64                  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCommentListReq) Reset() {
	*x = QueryCommentListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentListReq) ProtoMessage() {}

func (x *QueryCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentListReq.ProtoReflect.Descriptor instead.
func (*QueryCommentListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{92}
}

func (x *QueryCommentListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCommentListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryCommentListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type CommentListData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                     //
	ProductId        int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                     //商品id
	MemberNickName   string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"`     //评价者昵称
	ProductName      string                 `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                //商品名称
	Star             int32                  `protobuf:"varint,5,opt,name=star,proto3" json:"star,omitempty"`                                                //评价星数：0->5
	MemberIp         string                 `protobuf:"bytes,6,opt,name=member_ip,json=memberIp,proto3" json:"member_ip,omitempty"`                         //评价的ip
	CreateTime       string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                   //评价时间
	ShowStatus       int32                  `protobuf:"varint,8,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                  //是否显示，0-不显示，1-显示
	ProductAttribute string                 `protobuf:"bytes,9,opt,name=product_attribute,json=productAttribute,proto3" json:"product_attribute,omitempty"` //购买时的商品属性
	CollectCount     int32                  `protobuf:"varint,10,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`           //点赞数
	ReadCount        int32                  `protobuf:"varint,11,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                    //阅读数
	Content          string                 `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`                                          //内容
	Pics             string                 `protobuf:"bytes,13,opt,name=pics,proto3" json:"pics,omitempty"`                                                //上传图片地址，以逗号隔开
	MemberIcon       string                 `protobuf:"bytes,14,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`                  //评论用户头像
	ReplayCount      int32                  `protobuf:"varint,15,opt,name=replay_count,json=replayCount,proto3" json:"replay_count,omitempty"`              //回复数量
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CommentListData) Reset() {
	*x = CommentListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListData) ProtoMessage() {}

func (x *CommentListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListData.ProtoReflect.Descriptor instead.
func (*CommentListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{93}
}

func (x *CommentListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *CommentListData) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *CommentListData) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *CommentListData) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *CommentListData) GetMemberIp() string {
	if x != nil {
		return x.MemberIp
	}
	return ""
}

func (x *CommentListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CommentListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *CommentListData) GetProductAttribute() string {
	if x != nil {
		return x.ProductAttribute
	}
	return ""
}

func (x *CommentListData) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *CommentListData) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *CommentListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentListData) GetPics() string {
	if x != nil {
		return x.Pics
	}
	return ""
}

func (x *CommentListData) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *CommentListData) GetReplayCount() int32 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

type QueryCommentListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*CommentListData     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCommentListResp) Reset() {
	*x = QueryCommentListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentListResp) ProtoMessage() {}

func (x *QueryCommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentListResp.ProtoReflect.Descriptor instead.
func (*QueryCommentListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{94}
}

func (x *QueryCommentListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCommentListResp) GetList() []*CommentListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品评价回复
type AddCommentReplayReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
	CommentId      int64                  `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //评论id
	MemberNickName string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	MemberIcon     string                 `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //内容
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddCommentReplayReq) Reset() {
	*x = AddCommentReplayReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentReplayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentReplayReq) ProtoMessage() {}

func (x *AddCommentReplayReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentReplayReq.ProtoReflect.Descriptor instead.
func (*AddCommentReplayReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{95}
}

func (x *AddCommentReplayReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddCommentReplayReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *AddCommentReplayReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *AddCommentReplayReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *AddCommentReplayReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type AddCommentReplayResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCommentReplayResp) Reset() {
	*x = AddCommentReplayResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommentReplayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentReplayResp) ProtoMessage() {}

func (x *AddCommentReplayResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentReplayResp.ProtoReflect.Descriptor instead.
func (*AddCommentReplayResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{96}
}

func (x *AddCommentReplayResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品评价回复
type DeleteCommentReplayReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentReplayReq) Reset() {
	*x = DeleteCommentReplayReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentReplayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReplayReq) ProtoMessage() {}

func (x *DeleteCommentReplayReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReplayReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentReplayReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{97}
}

func (x *DeleteCommentReplayReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCommentReplayResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentReplayResp) Reset() {
	*x = DeleteCommentReplayResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentReplayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReplayResp) ProtoMessage() {}

func (x *DeleteCommentReplayResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReplayResp.ProtoReflect.Descriptor instead.
func (*DeleteCommentReplayResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{98}
}

func (x *DeleteCommentReplayResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品评价回复
type UpdateCommentReplayReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                 //
	CommentId      int64                  `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //评论id
	MemberNickName string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	MemberIcon     string                 `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //内容
	Type           int32                  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateCommentReplayReq) Reset() {
	*x = UpdateCommentReplayReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentReplayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentReplayReq) ProtoMessage() {}

func (x *UpdateCommentReplayReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentReplayReq.ProtoReflect.Descriptor instead.
func (*UpdateCommentReplayReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateCommentReplayReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *UpdateCommentReplayReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateCommentReplayReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type UpdateCommentReplayResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCommentReplayResp) Reset() {
	*x = UpdateCommentReplayResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentReplayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentReplayResp) ProtoMessage() {}

func (x *UpdateCommentReplayResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentReplayResp.ProtoReflect.Descriptor instead.
func (*UpdateCommentReplayResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateCommentReplayResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询产品评价回复详情
type QueryCommentReplayDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCommentReplayDetailReq) Reset() {
	*x = QueryCommentReplayDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentReplayDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayDetailReq) ProtoMessage() {}

func (x *QueryCommentReplayDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{101}
}

func (x *QueryCommentReplayDetailReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryCommentReplayDetailResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                 //
	CommentId      int64                  `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //评论id
	MemberNickName string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	MemberIcon     string                 `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //内容
	CreateTime     string                 `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //评论时间
	Type           int32                  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryCommentReplayDetailResp) Reset() {
	*x = QueryCommentReplayDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentReplayDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayDetailResp) ProtoMessage() {}

func (x *QueryCommentReplayDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{102}
}

func (x *QueryCommentReplayDetailResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *QueryCommentReplayDetailResp) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryCommentReplayDetailResp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 分页查询产品评价回复列表
type QueryCommentReplayListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       int64                  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       //第几页
	PageSize      int64                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    //每页的数量
	CommentId     int64                  `protobuf:"varint,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCommentReplayListReq) Reset() {
	*x = QueryCommentReplayListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentReplayListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayListReq) ProtoMessage() {}

func (x *QueryCommentReplayListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayListReq.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{103}
}

func (x *QueryCommentReplayListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCommentReplayListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryCommentReplayListReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type CommentReplayListData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                 //
	CommentId      int64                  `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`                 //评论id
	MemberNickName string                 `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	MemberIcon     string                 `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //内容
	CreateTime     string                 `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //评论时间
	Type           int32                  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                            //评论人员类型；0->会员；1->管理员
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommentReplayListData) Reset() {
	*x = CommentReplayListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentReplayListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReplayListData) ProtoMessage() {}

func (x *CommentReplayListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReplayListData.ProtoReflect.Descriptor instead.
func (*CommentReplayListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{104}
}

func (x *CommentReplayListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentReplayListData) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *CommentReplayListData) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *CommentReplayListData) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *CommentReplayListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentReplayListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CommentReplayListData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type QueryCommentReplayListResp struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Total         int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*CommentReplayListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCommentReplayListResp) Reset() {
	*x = QueryCommentReplayListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommentReplayListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommentReplayListResp) ProtoMessage() {}

func (x *QueryCommentReplayListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommentReplayListResp.ProtoReflect.Descriptor instead.
func (*QueryCommentReplayListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{105}
}

func (x *QueryCommentReplayListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCommentReplayListResp) GetList() []*CommentReplayListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加运费模版
type AddFeightTemplateReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
	ChargeType     int32                  `protobuf:"varint,3,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	FirstWeight    int64                  `protobuf:"varint,4,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	FirstFee       int64                  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	ContinueWeight int64                  `protobuf:"varint,6,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //续重kg
	ContinueFee    int64                  `protobuf:"varint,7,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //续费（元）
	Dest           string                 `protobuf:"bytes,8,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddFeightTemplateReq) Reset() {
	*x = AddFeightTemplateReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFeightTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeightTemplateReq) ProtoMessage() {}

func (x *AddFeightTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeightTemplateReq.ProtoReflect.Descriptor instead.
func (*AddFeightTemplateReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{106}
}

func (x *AddFeightTemplateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddFeightTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddFeightTemplateReq) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *AddFeightTemplateReq) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *AddFeightTemplateReq) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *AddFeightTemplateReq) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *AddFeightTemplateReq) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *AddFeightTemplateReq) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

type AddFeightTemplateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddFeightTemplateResp) Reset() {
	*x = AddFeightTemplateResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFeightTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeightTemplateResp) ProtoMessage() {}

func (x *AddFeightTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeightTemplateResp.ProtoReflect.Descriptor instead.
func (*AddFeightTemplateResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{107}
}

func (x *AddFeightTemplateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除运费模版
type DeleteFeightTemplateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFeightTemplateReq) Reset() {
	*x = DeleteFeightTemplateReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFeightTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeightTemplateReq) ProtoMessage() {}

func (x *DeleteFeightTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeightTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteFeightTemplateReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{108}
}

func (x *DeleteFeightTemplateReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteFeightTemplateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFeightTemplateResp) Reset() {
	*x = DeleteFeightTemplateResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFeightTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeightTemplateResp) ProtoMessage() {}

func (x *DeleteFeightTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeightTemplateResp.ProtoReflect.Descriptor instead.
func (*DeleteFeightTemplateResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{109}
}

func (x *DeleteFeightTemplateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新运费模版
type UpdateFeightTemplateReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
	ChargeType     int32                  `protobuf:"varint,3,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	FirstWeight    int64                  `protobuf:"varint,4,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	FirstFee       int64                  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	ContinueWeight int64                  `protobuf:"varint,6,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //续重kg
	ContinueFee    int64                  `protobuf:"varint,7,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //续费（元）
	Dest           string                 `protobuf:"bytes,8,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateFeightTemplateReq) Reset() {
	*x = UpdateFeightTemplateReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFeightTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeightTemplateReq) ProtoMessage() {}

func (x *UpdateFeightTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeightTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateFeightTemplateReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{110}
}

func (x *UpdateFeightTemplateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFeightTemplateReq) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *UpdateFeightTemplateReq) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

type UpdateFeightTemplateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFeightTemplateResp) Reset() {
	*x = UpdateFeightTemplateResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFeightTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeightTemplateResp) ProtoMessage() {}

func (x *UpdateFeightTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeightTemplateResp.ProtoReflect.Descriptor instead.
func (*UpdateFeightTemplateResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{111}
}

func (x *UpdateFeightTemplateResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询运费模版详情
type QueryFeightTemplateDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFeightTemplateDetailReq) Reset() {
	*x = QueryFeightTemplateDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFeightTemplateDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateDetailReq) ProtoMessage() {}

func (x *QueryFeightTemplateDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateDetailReq.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{112}
}

func (x *QueryFeightTemplateDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryFeightTemplateDetailResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
	ChargeType     int32                  `protobuf:"varint,3,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	FirstWeight    int64                  `protobuf:"varint,4,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	FirstFee       int64                  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	ContinueWeight int64                  `protobuf:"varint,6,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //续重kg
	ContinueFee    int64                  `protobuf:"varint,7,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //续费（元）
	Dest           string                 `protobuf:"bytes,8,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryFeightTemplateDetailResp) Reset() {
	*x = QueryFeightTemplateDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFeightTemplateDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateDetailResp) ProtoMessage() {}

func (x *QueryFeightTemplateDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateDetailResp.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{113}
}

func (x *QueryFeightTemplateDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryFeightTemplateDetailResp) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *QueryFeightTemplateDetailResp) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

// 分页查询运费模版列表
type QueryFeightTemplateListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       int64                  `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize      int64                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFeightTemplateListReq) Reset() {
	*x = QueryFeightTemplateListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFeightTemplateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateListReq) ProtoMessage() {}

func (x *QueryFeightTemplateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateListReq.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{114}
}

func (x *QueryFeightTemplateListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryFeightTemplateListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FeightTemplateListData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            //运费模版名称
	ChargeType     int32                  `protobuf:"varint,3,opt,name=charge_type,json=chargeType,proto3" json:"charge_type,omitempty"`             //计费类型:0->按重量；1->按件数
	FirstWeight    int64                  `protobuf:"varint,4,opt,name=first_weight,json=firstWeight,proto3" json:"first_weight,omitempty"`          //首重kg
	FirstFee       int64                  `protobuf:"varint,5,opt,name=first_fee,json=firstFee,proto3" json:"first_fee,omitempty"`                   //首费（元）
	ContinueWeight int64                  `protobuf:"varint,6,opt,name=continue_weight,json=continueWeight,proto3" json:"continue_weight,omitempty"` //续重kg
	ContinueFee    int64                  `protobuf:"varint,7,opt,name=continue_fee,json=continueFee,proto3" json:"continue_fee,omitempty"`          //续费（元）
	Dest           string                 `protobuf:"bytes,8,opt,name=dest,proto3" json:"dest,omitempty"`                                            //目的地（省、市）
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FeightTemplateListData) Reset() {
	*x = FeightTemplateListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeightTemplateListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeightTemplateListData) ProtoMessage() {}

func (x *FeightTemplateListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeightTemplateListData.ProtoReflect.Descriptor instead.
func (*FeightTemplateListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{115}
}

func (x *FeightTemplateListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FeightTemplateListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeightTemplateListData) GetChargeType() int32 {
	if x != nil {
		return x.ChargeType
	}
	return 0
}

func (x *FeightTemplateListData) GetFirstWeight() int64 {
	if x != nil {
		return x.FirstWeight
	}
	return 0
}

func (x *FeightTemplateListData) GetFirstFee() int64 {
	if x != nil {
		return x.FirstFee
	}
	return 0
}

func (x *FeightTemplateListData) GetContinueWeight() int64 {
	if x != nil {
		return x.ContinueWeight
	}
	return 0
}

func (x *FeightTemplateListData) GetContinueFee() int64 {
	if x != nil {
		return x.ContinueFee
	}
	return 0
}

func (x *FeightTemplateListData) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

type QueryFeightTemplateListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Total         int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*FeightTemplateListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFeightTemplateListResp) Reset() {
	*x = QueryFeightTemplateListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFeightTemplateListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeightTemplateListResp) ProtoMessage() {}

func (x *QueryFeightTemplateListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeightTemplateListResp.ProtoReflect.Descriptor instead.
func (*QueryFeightTemplateListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{116}
}

func (x *QueryFeightTemplateListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryFeightTemplateListResp) GetList() []*FeightTemplateListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品满减表(只针对同商品)
type AddProductFullReductionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`       //商品id
	FullPrice     int64                  `protobuf:"varint,3,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`       //商品满多少
	ReducePrice   int64                  `protobuf:"varint,4,opt,name=reduce_price,json=reducePrice,proto3" json:"reduce_price,omitempty"` //商品减多少
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductFullReductionReq) Reset() {
	*x = AddProductFullReductionReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductFullReductionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductFullReductionReq) ProtoMessage() {}

func (x *AddProductFullReductionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductFullReductionReq.ProtoReflect.Descriptor instead.
func (*AddProductFullReductionReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{117}
}

func (x *AddProductFullReductionReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductFullReductionReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductFullReductionReq) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *AddProductFullReductionReq) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type AddProductFullReductionResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductFullReductionResp) Reset() {
	*x = AddProductFullReductionResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductFullReductionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductFullReductionResp) ProtoMessage() {}

func (x *AddProductFullReductionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductFullReductionResp.ProtoReflect.Descriptor instead.
func (*AddProductFullReductionResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{118}
}

func (x *AddProductFullReductionResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品满减表(只针对同商品)
type DeleteProductFullReductionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductFullReductionReq) Reset() {
	*x = DeleteProductFullReductionReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductFullReductionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductFullReductionReq) ProtoMessage() {}

func (x *DeleteProductFullReductionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductFullReductionReq.ProtoReflect.Descriptor instead.
func (*DeleteProductFullReductionReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{119}
}

func (x *DeleteProductFullReductionReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductFullReductionResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductFullReductionResp) Reset() {
	*x = DeleteProductFullReductionResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductFullReductionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductFullReductionResp) ProtoMessage() {}

func (x *DeleteProductFullReductionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductFullReductionResp.ProtoReflect.Descriptor instead.
func (*DeleteProductFullReductionResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{120}
}

func (x *DeleteProductFullReductionResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询产品满减表(只针对同商品)列表
type QueryProductFullReductionListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     int64                  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductFullReductionListReq) Reset() {
	*x = QueryProductFullReductionListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductFullReductionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductFullReductionListReq) ProtoMessage() {}

func (x *QueryProductFullReductionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductFullReductionListReq.ProtoReflect.Descriptor instead.
func (*QueryProductFullReductionListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{121}
}

func (x *QueryProductFullReductionListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type ProductFullReductionListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`       //商品id
	FullPrice     int64                  `protobuf:"varint,3,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`       //商品满多少
	ReducePrice   int64                  `protobuf:"varint,4,opt,name=reduce_price,json=reducePrice,proto3" json:"reduce_price,omitempty"` //商品减多少
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductFullReductionListData) Reset() {
	*x = ProductFullReductionListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductFullReductionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFullReductionListData) ProtoMessage() {}

func (x *ProductFullReductionListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFullReductionListData.ProtoReflect.Descriptor instead.
func (*ProductFullReductionListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{122}
}

func (x *ProductFullReductionListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductFullReductionListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductFullReductionListData) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *ProductFullReductionListData) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type QueryProductFullReductionListResp struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Total         int64                           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductFullReductionListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductFullReductionListResp) Reset() {
	*x = QueryProductFullReductionListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductFullReductionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductFullReductionListResp) ProtoMessage() {}

func (x *QueryProductFullReductionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductFullReductionListResp.ProtoReflect.Descriptor instead.
func (*QueryProductFullReductionListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{123}
}

func (x *QueryProductFullReductionListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductFullReductionListResp) GetList() []*ProductFullReductionListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加产品阶梯价格表(只针对同商品)
type AddProductLadderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //商品id
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount      int64                  `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Price         int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductLadderReq) Reset() {
	*x = AddProductLadderReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductLadderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductLadderReq) ProtoMessage() {}

func (x *AddProductLadderReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductLadderReq.ProtoReflect.Descriptor instead.
func (*AddProductLadderReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{124}
}

func (x *AddProductLadderReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddProductLadderReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductLadderReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddProductLadderReq) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *AddProductLadderReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type AddProductLadderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductLadderResp) Reset() {
	*x = AddProductLadderResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductLadderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductLadderResp) ProtoMessage() {}

func (x *AddProductLadderResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductLadderResp.ProtoReflect.Descriptor instead.
func (*AddProductLadderResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{125}
}

func (x *AddProductLadderResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除产品阶梯价格表(只针对同商品)
type DeleteProductLadderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductLadderReq) Reset() {
	*x = DeleteProductLadderReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductLadderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductLadderReq) ProtoMessage() {}

func (x *DeleteProductLadderReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductLadderReq.ProtoReflect.Descriptor instead.
func (*DeleteProductLadderReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{126}
}

func (x *DeleteProductLadderReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductLadderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductLadderResp) Reset() {
	*x = DeleteProductLadderResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductLadderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductLadderResp) ProtoMessage() {}

func (x *DeleteProductLadderResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductLadderResp.ProtoReflect.Descriptor instead.
func (*DeleteProductLadderResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{127}
}

func (x *DeleteProductLadderResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新产品阶梯价格表(只针对同商品)
type UpdateProductLadderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //商品id
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount      int64                  `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Price         int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductLadderReq) Reset() {
	*x = UpdateProductLadderReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductLadderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductLadderReq) ProtoMessage() {}

func (x *UpdateProductLadderReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductLadderReq.ProtoReflect.Descriptor instead.
func (*UpdateProductLadderReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{128}
}

func (x *UpdateProductLadderReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductLadderReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateProductLadderReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateProductLadderReq) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *UpdateProductLadderReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type UpdateProductLadderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductLadderResp) Reset() {
	*x = UpdateProductLadderResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductLadderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductLadderResp) ProtoMessage() {}

func (x *UpdateProductLadderResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductLadderResp.ProtoReflect.Descriptor instead.
func (*UpdateProductLadderResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{129}
}

func (x *UpdateProductLadderResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询产品阶梯价格表(只针对同商品)详情
type QueryProductLadderDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductLadderDetailReq) Reset() {
	*x = QueryProductLadderDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductLadderDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderDetailReq) ProtoMessage() {}

func (x *QueryProductLadderDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductLadderDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{130}
}

func (x *QueryProductLadderDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductLadderDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //商品id
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount      int64                  `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Price         int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductLadderDetailResp) Reset() {
	*x = QueryProductLadderDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductLadderDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderDetailResp) ProtoMessage() {}

func (x *QueryProductLadderDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductLadderDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{131}
}

func (x *QueryProductLadderDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *QueryProductLadderDetailResp) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// 分页查询产品阶梯价格表(只针对同商品)列表
type QueryProductLadderListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     int64                  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductLadderListReq) Reset() {
	*x = QueryProductLadderListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductLadderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderListReq) ProtoMessage() {}

func (x *QueryProductLadderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderListReq.ProtoReflect.Descriptor instead.
func (*QueryProductLadderListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{132}
}

func (x *QueryProductLadderListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type ProductLadderListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //商品id
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount      int64                  `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Price         int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductLadderListData) Reset() {
	*x = ProductLadderListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductLadderListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLadderListData) ProtoMessage() {}

func (x *ProductLadderListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLadderListData.ProtoReflect.Descriptor instead.
func (*ProductLadderListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{133}
}

func (x *ProductLadderListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductLadderListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductLadderListData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProductLadderListData) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ProductLadderListData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type QueryProductLadderListResp struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Total         int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductLadderListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductLadderListResp) Reset() {
	*x = QueryProductLadderListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductLadderListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductLadderListResp) ProtoMessage() {}

func (x *QueryProductLadderListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductLadderListResp.ProtoReflect.Descriptor instead.
func (*QueryProductLadderListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{134}
}

func (x *QueryProductLadderListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductLadderListResp) GetList() []*ProductLadderListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品操作日志
type AddProductOperateLogReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                           //
	ProductId        int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                           //产品id
	PriceOld         int64                  `protobuf:"varint,3,opt,name=price_old,json=priceOld,proto3" json:"price_old,omitempty"`                              //原价
	PriceNew         int64                  `protobuf:"varint,4,opt,name=price_new,json=priceNew,proto3" json:"price_new,omitempty"`                              //新价格
	SalePriceOld     int64                  `protobuf:"varint,5,opt,name=sale_price_old,json=salePriceOld,proto3" json:"sale_price_old,omitempty"`                //原售价
	SalePriceNew     int64                  `protobuf:"varint,6,opt,name=sale_price_new,json=salePriceNew,proto3" json:"sale_price_new,omitempty"`                //新售价
	GiftPointOld     int32                  `protobuf:"varint,7,opt,name=gift_point_old,json=giftPointOld,proto3" json:"gift_point_old,omitempty"`                //赠送的积分
	GiftPointNew     int32                  `protobuf:"varint,8,opt,name=gift_point_new,json=giftPointNew,proto3" json:"gift_point_new,omitempty"`                //新的积分
	UsePointLimitOld int32                  `protobuf:"varint,9,opt,name=use_point_limit_old,json=usePointLimitOld,proto3" json:"use_point_limit_old,omitempty"`  //使用积分限制
	UsePointLimitNew int32                  `protobuf:"varint,10,opt,name=use_point_limit_new,json=usePointLimitNew,proto3" json:"use_point_limit_new,omitempty"` //新的使用积分限制
	OperateMan       string                 `protobuf:"bytes,11,opt,name=operate_man,json=operateMan,proto3" json:"operate_man,omitempty"`                        //操作人
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddProductOperateLogReq) Reset() {
	*x = AddProductOperateLogReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductOperateLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductOperateLogReq) ProtoMessage() {}

func (x *AddProductOperateLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductOperateLogReq.ProtoReflect.Descriptor instead.
func (*AddProductOperateLogReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{135}
}

func (x *AddProductOperateLogReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddProductOperateLogReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductOperateLogReq) GetPriceOld() int64 {
	if x != nil {
		return x.PriceOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetPriceNew() int64 {
	if x != nil {
		return x.PriceNew
	}
	return 0
}

func (x *AddProductOperateLogReq) GetSalePriceOld() int64 {
	if x != nil {
		return x.SalePriceOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetSalePriceNew() int64 {
	if x != nil {
		return x.SalePriceNew
	}
	return 0
}

func (x *AddProductOperateLogReq) GetGiftPointOld() int32 {
	if x != nil {
		return x.GiftPointOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetGiftPointNew() int32 {
	if x != nil {
		return x.GiftPointNew
	}
	return 0
}

func (x *AddProductOperateLogReq) GetUsePointLimitOld() int32 {
	if x != nil {
		return x.UsePointLimitOld
	}
	return 0
}

func (x *AddProductOperateLogReq) GetUsePointLimitNew() int32 {
	if x != nil {
		return x.UsePointLimitNew
	}
	return 0
}

func (x *AddProductOperateLogReq) GetOperateMan() string {
	if x != nil {
		return x.OperateMan
	}
	return ""
}

type AddProductOperateLogResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductOperateLogResp) Reset() {
	*x = AddProductOperateLogResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductOperateLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductOperateLogResp) ProtoMessage() {}

func (x *AddProductOperateLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductOperateLogResp.ProtoReflect.Descriptor instead.
func (*AddProductOperateLogResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{136}
}

func (x *AddProductOperateLogResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品操作日志
type DeleteProductOperateLogReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductOperateLogReq) Reset() {
	*x = DeleteProductOperateLogReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductOperateLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductOperateLogReq) ProtoMessage() {}

func (x *DeleteProductOperateLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductOperateLogReq.ProtoReflect.Descriptor instead.
func (*DeleteProductOperateLogReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{137}
}

func (x *DeleteProductOperateLogReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteProductOperateLogResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductOperateLogResp) Reset() {
	*x = DeleteProductOperateLogResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductOperateLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductOperateLogResp) ProtoMessage() {}

func (x *DeleteProductOperateLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductOperateLogResp.ProtoReflect.Descriptor instead.
func (*DeleteProductOperateLogResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{138}
}

func (x *DeleteProductOperateLogResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品操作日志详情
type QueryProductOperateLogDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductOperateLogDetailReq) Reset() {
	*x = QueryProductOperateLogDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductOperateLogDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogDetailReq) ProtoMessage() {}

func (x *QueryProductOperateLogDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{139}
}

func (x *QueryProductOperateLogDetailReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryProductOperateLogDetailResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                           //
	ProductId        int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                           //产品id
	PriceOld         int64                  `protobuf:"varint,3,opt,name=price_old,json=priceOld,proto3" json:"price_old,omitempty"`                              //原价
	PriceNew         int64                  `protobuf:"varint,4,opt,name=price_new,json=priceNew,proto3" json:"price_new,omitempty"`                              //新价格
	SalePriceOld     int64                  `protobuf:"varint,5,opt,name=sale_price_old,json=salePriceOld,proto3" json:"sale_price_old,omitempty"`                //原售价
	SalePriceNew     int64                  `protobuf:"varint,6,opt,name=sale_price_new,json=salePriceNew,proto3" json:"sale_price_new,omitempty"`                //新售价
	GiftPointOld     int32                  `protobuf:"varint,7,opt,name=gift_point_old,json=giftPointOld,proto3" json:"gift_point_old,omitempty"`                //赠送的积分
	GiftPointNew     int32                  `protobuf:"varint,8,opt,name=gift_point_new,json=giftPointNew,proto3" json:"gift_point_new,omitempty"`                //新的积分
	UsePointLimitOld int32                  `protobuf:"varint,9,opt,name=use_point_limit_old,json=usePointLimitOld,proto3" json:"use_point_limit_old,omitempty"`  //使用积分限制
	UsePointLimitNew int32                  `protobuf:"varint,10,opt,name=use_point_limit_new,json=usePointLimitNew,proto3" json:"use_point_limit_new,omitempty"` //新的使用积分限制
	OperateMan       string                 `protobuf:"bytes,11,opt,name=operate_man,json=operateMan,proto3" json:"operate_man,omitempty"`                        //操作人
	CreateTime       string                 `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                        //创建时间
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryProductOperateLogDetailResp) Reset() {
	*x = QueryProductOperateLogDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductOperateLogDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogDetailResp) ProtoMessage() {}

func (x *QueryProductOperateLogDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{140}
}

func (x *QueryProductOperateLogDetailResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryProductOperateLogDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetPriceOld() int64 {
	if x != nil {
		return x.PriceOld
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetPriceNew() int64 {
	if x != nil {
		return x.PriceNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetSalePriceOld() int64 {
	if x != nil {
		return x.SalePriceOld
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetSalePriceNew() int64 {
	if x != nil {
		return x.SalePriceNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetGiftPointOld() int32 {
	if x != nil {
		return x.GiftPointOld
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetGiftPointNew() int32 {
	if x != nil {
		return x.GiftPointNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetUsePointLimitOld() int32 {
	if x != nil {
		return x.UsePointLimitOld
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetUsePointLimitNew() int32 {
	if x != nil {
		return x.UsePointLimitNew
	}
	return 0
}

func (x *QueryProductOperateLogDetailResp) GetOperateMan() string {
	if x != nil {
		return x.OperateMan
	}
	return ""
}

func (x *QueryProductOperateLogDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

// 分页查询商品操作日志列表
type QueryProductOperateLogListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     int64                  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //产品id
	PageNum       int64                  `protobuf:"varint,11,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`      //第几页
	PageSize      int64                  `protobuf:"varint,12,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   //每页的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductOperateLogListReq) Reset() {
	*x = QueryProductOperateLogListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductOperateLogListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogListReq) ProtoMessage() {}

func (x *QueryProductOperateLogListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogListReq.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{141}
}

func (x *QueryProductOperateLogListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryProductOperateLogListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductOperateLogListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductOperateLogListData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                           //
	ProductId        int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                           //产品id
	PriceOld         int64                  `protobuf:"varint,3,opt,name=price_old,json=priceOld,proto3" json:"price_old,omitempty"`                              //原价
	PriceNew         int64                  `protobuf:"varint,4,opt,name=price_new,json=priceNew,proto3" json:"price_new,omitempty"`                              //新价格
	SalePriceOld     int64                  `protobuf:"varint,5,opt,name=sale_price_old,json=salePriceOld,proto3" json:"sale_price_old,omitempty"`                //原售价
	SalePriceNew     int64                  `protobuf:"varint,6,opt,name=sale_price_new,json=salePriceNew,proto3" json:"sale_price_new,omitempty"`                //新售价
	GiftPointOld     int32                  `protobuf:"varint,7,opt,name=gift_point_old,json=giftPointOld,proto3" json:"gift_point_old,omitempty"`                //赠送的积分
	GiftPointNew     int32                  `protobuf:"varint,8,opt,name=gift_point_new,json=giftPointNew,proto3" json:"gift_point_new,omitempty"`                //新的积分
	UsePointLimitOld int32                  `protobuf:"varint,9,opt,name=use_point_limit_old,json=usePointLimitOld,proto3" json:"use_point_limit_old,omitempty"`  //使用积分限制
	UsePointLimitNew int32                  `protobuf:"varint,10,opt,name=use_point_limit_new,json=usePointLimitNew,proto3" json:"use_point_limit_new,omitempty"` //新的使用积分限制
	OperateMan       string                 `protobuf:"bytes,11,opt,name=operate_man,json=operateMan,proto3" json:"operate_man,omitempty"`                        //操作人
	CreateTime       string                 `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                        //创建时间
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProductOperateLogListData) Reset() {
	*x = ProductOperateLogListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductOperateLogListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOperateLogListData) ProtoMessage() {}

func (x *ProductOperateLogListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOperateLogListData.ProtoReflect.Descriptor instead.
func (*ProductOperateLogListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{142}
}

func (x *ProductOperateLogListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductOperateLogListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductOperateLogListData) GetPriceOld() int64 {
	if x != nil {
		return x.PriceOld
	}
	return 0
}

func (x *ProductOperateLogListData) GetPriceNew() int64 {
	if x != nil {
		return x.PriceNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetSalePriceOld() int64 {
	if x != nil {
		return x.SalePriceOld
	}
	return 0
}

func (x *ProductOperateLogListData) GetSalePriceNew() int64 {
	if x != nil {
		return x.SalePriceNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetGiftPointOld() int32 {
	if x != nil {
		return x.GiftPointOld
	}
	return 0
}

func (x *ProductOperateLogListData) GetGiftPointNew() int32 {
	if x != nil {
		return x.GiftPointNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetUsePointLimitOld() int32 {
	if x != nil {
		return x.UsePointLimitOld
	}
	return 0
}

func (x *ProductOperateLogListData) GetUsePointLimitNew() int32 {
	if x != nil {
		return x.UsePointLimitNew
	}
	return 0
}

func (x *ProductOperateLogListData) GetOperateMan() string {
	if x != nil {
		return x.OperateMan
	}
	return ""
}

func (x *ProductOperateLogListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type QueryProductOperateLogListResp struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Total         int64                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductOperateLogListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductOperateLogListResp) Reset() {
	*x = QueryProductOperateLogListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductOperateLogListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductOperateLogListResp) ProtoMessage() {}

func (x *QueryProductOperateLogListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductOperateLogListResp.ProtoReflect.Descriptor instead.
func (*QueryProductOperateLogListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{143}
}

func (x *QueryProductOperateLogListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductOperateLogListResp) GetList() []*ProductOperateLogListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品SKU
type AddProductSkuReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SpuId              int64                  `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                         //商品SpuId
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                         //SKU名称
	SkuCode            string                 `protobuf:"bytes,3,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                                    //SKU编码
	MainPic            string                 `protobuf:"bytes,4,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                    //主图
	AlbumPics          string                 `protobuf:"bytes,5,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                              //图片集
	Price              float32                `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`                                                     //价格
	PromotionPrice     float32                `protobuf:"fixed32,7,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`             //单品促销价格
	PromotionStartTime string                 `protobuf:"bytes,8,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"` //促销开始时间
	PromotionEndTime   string                 `protobuf:"bytes,9,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`       //促销结束时间
	Stock              int32                  `protobuf:"varint,10,opt,name=stock,proto3" json:"stock,omitempty"`                                                     //库存
	LowStock           int32                  `protobuf:"varint,11,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                               //预警库存
	SpecData           string                 `protobuf:"bytes,12,opt,name=spec_data,json=specData,proto3" json:"spec_data,omitempty"`                                //规格数据
	Weight             float32                `protobuf:"fixed32,13,opt,name=weight,proto3" json:"weight,omitempty"`                                                  //重量(kg)
	PublishStatus      int32                  `protobuf:"varint,14,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                //上架状态：0-下架，1-上架
	VerifyStatus       int32                  `protobuf:"varint,15,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                   //审核状态：0-未审核，1-审核通过，2-审核不通过
	Sort               int32                  `protobuf:"varint,16,opt,name=sort,proto3" json:"sort,omitempty"`                                                       //排序
	CreateBy           int64                  `protobuf:"varint,17,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                               //创建人ID
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AddProductSkuReq) Reset() {
	*x = AddProductSkuReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductSkuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductSkuReq) ProtoMessage() {}

func (x *AddProductSkuReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductSkuReq.ProtoReflect.Descriptor instead.
func (*AddProductSkuReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{144}
}

func (x *AddProductSkuReq) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *AddProductSkuReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductSkuReq) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *AddProductSkuReq) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *AddProductSkuReq) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *AddProductSkuReq) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddProductSkuReq) GetPromotionPrice() float32 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *AddProductSkuReq) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *AddProductSkuReq) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *AddProductSkuReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *AddProductSkuReq) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *AddProductSkuReq) GetSpecData() string {
	if x != nil {
		return x.SpecData
	}
	return ""
}

func (x *AddProductSkuReq) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AddProductSkuReq) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *AddProductSkuReq) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *AddProductSkuReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductSkuReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddProductSkuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductSkuResp) Reset() {
	*x = AddProductSkuResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductSkuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductSkuResp) ProtoMessage() {}

func (x *AddProductSkuResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductSkuResp.ProtoReflect.Descriptor instead.
func (*AddProductSkuResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{145}
}

func (x *AddProductSkuResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品SKU
type DeleteProductSkuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSkuReq) Reset() {
	*x = DeleteProductSkuReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSkuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSkuReq) ProtoMessage() {}

func (x *DeleteProductSkuReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSkuReq.ProtoReflect.Descriptor instead.
func (*DeleteProductSkuReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{146}
}

func (x *DeleteProductSkuReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductSkuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSkuResp) Reset() {
	*x = DeleteProductSkuResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSkuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSkuResp) ProtoMessage() {}

func (x *DeleteProductSkuResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSkuResp.ProtoReflect.Descriptor instead.
func (*DeleteProductSkuResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{147}
}

func (x *DeleteProductSkuResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品SKU
type UpdateProductSkuReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Data          []*UpdateProductSkuData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSkuReq) Reset() {
	*x = UpdateProductSkuReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSkuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSkuReq) ProtoMessage() {}

func (x *UpdateProductSkuReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSkuReq.ProtoReflect.Descriptor instead.
func (*UpdateProductSkuReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{148}
}

func (x *UpdateProductSkuReq) GetData() []*UpdateProductSkuData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateProductSkuData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            //商品SpuId
	SpuId              int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                         //商品SpuId
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         //SKU名称
	SkuCode            string                 `protobuf:"bytes,4,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                                    //SKU编码
	MainPic            string                 `protobuf:"bytes,5,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                    //主图
	AlbumPics          string                 `protobuf:"bytes,6,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                              //图片集
	Price              float32                `protobuf:"fixed32,7,opt,name=price,proto3" json:"price,omitempty"`                                                     //价格
	PromotionPrice     float32                `protobuf:"fixed32,8,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`             //单品促销价格
	PromotionStartTime string                 `protobuf:"bytes,9,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"` //促销开始时间
	PromotionEndTime   string                 `protobuf:"bytes,10,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`      //促销结束时间
	Stock              int32                  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                                     //库存
	LowStock           int32                  `protobuf:"varint,12,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                               //预警库存
	SpecData           string                 `protobuf:"bytes,13,opt,name=spec_data,json=specData,proto3" json:"spec_data,omitempty"`                                //规格数据
	Weight             float32                `protobuf:"fixed32,14,opt,name=weight,proto3" json:"weight,omitempty"`                                                  //重量(kg)
	PublishStatus      int32                  `protobuf:"varint,15,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                //上架状态：0-下架，1-上架
	VerifyStatus       int32                  `protobuf:"varint,16,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                   //审核状态：0-未审核，1-审核通过，2-审核不通过
	Sort               int32                  `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                                                       //排序
	UpdateBy           int64                  `protobuf:"varint,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                               //更新人ID
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateProductSkuData) Reset() {
	*x = UpdateProductSkuData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSkuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSkuData) ProtoMessage() {}

func (x *UpdateProductSkuData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSkuData.ProtoReflect.Descriptor instead.
func (*UpdateProductSkuData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{149}
}

func (x *UpdateProductSkuData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductSkuData) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *UpdateProductSkuData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductSkuData) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *UpdateProductSkuData) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *UpdateProductSkuData) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *UpdateProductSkuData) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateProductSkuData) GetPromotionPrice() float32 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *UpdateProductSkuData) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *UpdateProductSkuData) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *UpdateProductSkuData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *UpdateProductSkuData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *UpdateProductSkuData) GetSpecData() string {
	if x != nil {
		return x.SpecData
	}
	return ""
}

func (x *UpdateProductSkuData) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UpdateProductSkuData) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *UpdateProductSkuData) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *UpdateProductSkuData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductSkuData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductSkuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSkuResp) Reset() {
	*x = UpdateProductSkuResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSkuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSkuResp) ProtoMessage() {}

func (x *UpdateProductSkuResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSkuResp.ProtoReflect.Descriptor instead.
func (*UpdateProductSkuResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{150}
}

func (x *UpdateProductSkuResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品SKU详情
type QueryProductSkuDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSkuDetailReq) Reset() {
	*x = QueryProductSkuDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSkuDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSkuDetailReq) ProtoMessage() {}

func (x *QueryProductSkuDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSkuDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductSkuDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{151}
}

func (x *QueryProductSkuDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductSkuDetailResp struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            //商品SpuId
	SpuId              int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                         //商品SpuId
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         //SKU名称
	SkuCode            string                 `protobuf:"bytes,4,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                                    //SKU编码
	MainPic            string                 `protobuf:"bytes,5,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                    //主图
	AlbumPics          string                 `protobuf:"bytes,6,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                              //图片集
	Price              float32                `protobuf:"fixed32,7,opt,name=price,proto3" json:"price,omitempty"`                                                     //价格
	PromotionPrice     float32                `protobuf:"fixed32,8,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`             //单品促销价格
	PromotionStartTime string                 `protobuf:"bytes,9,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"` //促销开始时间
	PromotionEndTime   string                 `protobuf:"bytes,10,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`      //促销结束时间
	Stock              int32                  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                                     //库存
	LowStock           int32                  `protobuf:"varint,12,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                               //预警库存
	SpecData           string                 `protobuf:"bytes,13,opt,name=spec_data,json=specData,proto3" json:"spec_data,omitempty"`                                //规格数据
	Weight             float32                `protobuf:"fixed32,14,opt,name=weight,proto3" json:"weight,omitempty"`                                                  //重量(kg)
	PublishStatus      int32                  `protobuf:"varint,15,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                //上架状态：0-下架，1-上架
	VerifyStatus       int32                  `protobuf:"varint,16,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                   //审核状态：0-未审核，1-审核通过，2-审核不通过
	Sort               int32                  `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                                                       //排序
	Sales              int32                  `protobuf:"varint,18,opt,name=sales,proto3" json:"sales,omitempty"`                                                     //销量
	CreateBy           int64                  `protobuf:"varint,19,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                               //创建人ID
	CreateTime         string                 `protobuf:"bytes,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                          //创建时间
	UpdateBy           int64                  `protobuf:"varint,21,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                               //更新人ID
	UpdateTime         string                 `protobuf:"bytes,22,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                          //更新时间
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueryProductSkuDetailResp) Reset() {
	*x = QueryProductSkuDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSkuDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSkuDetailResp) ProtoMessage() {}

func (x *QueryProductSkuDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSkuDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductSkuDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{152}
}

func (x *QueryProductSkuDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetPromotionPrice() float32 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetSpecData() string {
	if x != nil {
		return x.SpecData
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductSkuDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductSkuDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询商品SKU列表
type QueryProductSkuListReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SpuId              int64                  `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                         //商品SpuId
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                         //SKU名称
	SkuCode            string                 `protobuf:"bytes,3,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                                    //SKU编码
	PromotionStartTime string                 `protobuf:"bytes,4,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"` //促销开始时间
	PromotionEndTime   string                 `protobuf:"bytes,5,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`       //促销结束时间
	PublishStatus      int32                  `protobuf:"varint,6,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                 //上架状态：0-下架，1-上架
	VerifyStatus       int32                  `protobuf:"varint,7,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                    //审核状态：0-未审核，1-审核通过，2-审核不通过
	PageNum            int32                  `protobuf:"varint,8,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                                   //第几页
	PageSize           int32                  `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                //每页的数量
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueryProductSkuListReq) Reset() {
	*x = QueryProductSkuListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSkuListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSkuListReq) ProtoMessage() {}

func (x *QueryProductSkuListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSkuListReq.ProtoReflect.Descriptor instead.
func (*QueryProductSkuListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{153}
}

func (x *QueryProductSkuListReq) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *QueryProductSkuListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductSkuListReq) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *QueryProductSkuListReq) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *QueryProductSkuListReq) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *QueryProductSkuListReq) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *QueryProductSkuListReq) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *QueryProductSkuListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductSkuListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductSkuListData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            //商品SpuId
	SpuId              int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                         //商品SpuId
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         //SKU名称
	SkuCode            string                 `protobuf:"bytes,4,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                                    //SKU编码
	MainPic            string                 `protobuf:"bytes,5,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                    //主图
	AlbumPics          string                 `protobuf:"bytes,6,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                              //图片集
	Price              float32                `protobuf:"fixed32,7,opt,name=price,proto3" json:"price,omitempty"`                                                     //价格
	PromotionPrice     float32                `protobuf:"fixed32,8,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`             //单品促销价格
	PromotionStartTime string                 `protobuf:"bytes,9,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"` //促销开始时间
	PromotionEndTime   string                 `protobuf:"bytes,10,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`      //促销结束时间
	Stock              int32                  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                                     //库存
	LowStock           int32                  `protobuf:"varint,12,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                               //预警库存
	SpecData           string                 `protobuf:"bytes,13,opt,name=spec_data,json=specData,proto3" json:"spec_data,omitempty"`                                //规格数据
	Weight             float32                `protobuf:"fixed32,14,opt,name=weight,proto3" json:"weight,omitempty"`                                                  //重量(kg)
	PublishStatus      int32                  `protobuf:"varint,15,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                //上架状态：0-下架，1-上架
	VerifyStatus       int32                  `protobuf:"varint,16,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                   //审核状态：0-未审核，1-审核通过，2-审核不通过
	Sort               int32                  `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                                                       //排序
	Sales              int32                  `protobuf:"varint,18,opt,name=sales,proto3" json:"sales,omitempty"`                                                     //销量
	CreateBy           int64                  `protobuf:"varint,19,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                               //创建人ID
	CreateTime         string                 `protobuf:"bytes,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                          //创建时间
	UpdateBy           int64                  `protobuf:"varint,21,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                               //更新人ID
	UpdateTime         string                 `protobuf:"bytes,22,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                          //更新时间
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProductSkuListData) Reset() {
	*x = ProductSkuListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSkuListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSkuListData) ProtoMessage() {}

func (x *ProductSkuListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSkuListData.ProtoReflect.Descriptor instead.
func (*ProductSkuListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{154}
}

func (x *ProductSkuListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductSkuListData) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ProductSkuListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductSkuListData) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *ProductSkuListData) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *ProductSkuListData) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *ProductSkuListData) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductSkuListData) GetPromotionPrice() float32 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *ProductSkuListData) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *ProductSkuListData) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *ProductSkuListData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductSkuListData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *ProductSkuListData) GetSpecData() string {
	if x != nil {
		return x.SpecData
	}
	return ""
}

func (x *ProductSkuListData) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductSkuListData) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *ProductSkuListData) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *ProductSkuListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductSkuListData) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *ProductSkuListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductSkuListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductSkuListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductSkuListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryProductSkuListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductSkuListData  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSkuListResp) Reset() {
	*x = QueryProductSkuListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSkuListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSkuListResp) ProtoMessage() {}

func (x *QueryProductSkuListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSkuListResp.ProtoReflect.Descriptor instead.
func (*QueryProductSkuListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{155}
}

func (x *QueryProductSkuListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductSkuListResp) GetList() []*ProductSkuListData {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateSkuStockReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*UpdateSkuStockData  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSkuStockReq) Reset() {
	*x = UpdateSkuStockReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkuStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkuStockReq) ProtoMessage() {}

func (x *UpdateSkuStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkuStockReq.ProtoReflect.Descriptor instead.
func (*UpdateSkuStockReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{156}
}

func (x *UpdateSkuStockReq) GetData() []*UpdateSkuStockData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateSkuStockData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductQuantity int32                  `protobuf:"varint,2,opt,name=product_quantity,json=productQuantity,proto3" json:"product_quantity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateSkuStockData) Reset() {
	*x = UpdateSkuStockData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkuStockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkuStockData) ProtoMessage() {}

func (x *UpdateSkuStockData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkuStockData.ProtoReflect.Descriptor instead.
func (*UpdateSkuStockData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{157}
}

func (x *UpdateSkuStockData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSkuStockData) GetProductQuantity() int32 {
	if x != nil {
		return x.ProductQuantity
	}
	return 0
}

type UpdateSkuStockLockResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSkuStockLockResp) Reset() {
	*x = UpdateSkuStockLockResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkuStockLockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkuStockLockResp) ProtoMessage() {}

func (x *UpdateSkuStockLockResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkuStockLockResp.ProtoReflect.Descriptor instead.
func (*UpdateSkuStockLockResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{158}
}

func (x *UpdateSkuStockLockResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 添加商品规格
type AddProductSpecReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    int64                  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //规格名称
	Sort          int32                  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,5,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductSpecReq) Reset() {
	*x = AddProductSpecReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductSpecReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductSpecReq) ProtoMessage() {}

func (x *AddProductSpecReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductSpecReq.ProtoReflect.Descriptor instead.
func (*AddProductSpecReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{159}
}

func (x *AddProductSpecReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddProductSpecReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddProductSpecReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductSpecReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddProductSpecReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddProductSpecResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductSpecResp) Reset() {
	*x = AddProductSpecResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductSpecResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductSpecResp) ProtoMessage() {}

func (x *AddProductSpecResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductSpecResp.ProtoReflect.Descriptor instead.
func (*AddProductSpecResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{160}
}

func (x *AddProductSpecResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品规格
type DeleteProductSpecReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSpecReq) Reset() {
	*x = DeleteProductSpecReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSpecReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSpecReq) ProtoMessage() {}

func (x *DeleteProductSpecReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSpecReq.ProtoReflect.Descriptor instead.
func (*DeleteProductSpecReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{161}
}

func (x *DeleteProductSpecReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductSpecResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSpecResp) Reset() {
	*x = DeleteProductSpecResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSpecResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSpecResp) ProtoMessage() {}

func (x *DeleteProductSpecResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSpecResp.ProtoReflect.Descriptor instead.
func (*DeleteProductSpecResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{162}
}

func (x *DeleteProductSpecResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品规格
type UpdateProductSpecReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //
	CategoryId    int64                  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //规格名称
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecReq) Reset() {
	*x = UpdateProductSpecReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecReq) ProtoMessage() {}

func (x *UpdateProductSpecReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecReq.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{163}
}

func (x *UpdateProductSpecReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductSpecReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateProductSpecReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProductSpecReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductSpecReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductSpecReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductSpecResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecResp) Reset() {
	*x = UpdateProductSpecResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecResp) ProtoMessage() {}

func (x *UpdateProductSpecResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecResp.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{164}
}

func (x *UpdateProductSpecResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品规格状态
type UpdateProductSpecStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecStatusReq) Reset() {
	*x = UpdateProductSpecStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecStatusReq) ProtoMessage() {}

func (x *UpdateProductSpecStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{165}
}

func (x *UpdateProductSpecStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductSpecStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductSpecStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductSpecStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecStatusResp) Reset() {
	*x = UpdateProductSpecStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecStatusResp) ProtoMessage() {}

func (x *UpdateProductSpecStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{166}
}

func (x *UpdateProductSpecStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品规格详情
type QueryProductSpecDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecDetailReq) Reset() {
	*x = QueryProductSpecDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecDetailReq) ProtoMessage() {}

func (x *QueryProductSpecDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductSpecDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{167}
}

func (x *QueryProductSpecDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductSpecDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //
	CategoryId    int64                  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //规格名称
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecDetailResp) Reset() {
	*x = QueryProductSpecDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecDetailResp) ProtoMessage() {}

func (x *QueryProductSpecDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductSpecDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{168}
}

func (x *QueryProductSpecDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductSpecDetailResp) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryProductSpecDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductSpecDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryProductSpecDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductSpecDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductSpecDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductSpecDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductSpecDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询商品规格列表
type QueryProductSpecListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    int64                  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //规格名称
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	PageNum       int32                  `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`          //第几页
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       //每页的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecListReq) Reset() {
	*x = QueryProductSpecListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecListReq) ProtoMessage() {}

func (x *QueryProductSpecListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecListReq.ProtoReflect.Descriptor instead.
func (*QueryProductSpecListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{169}
}

func (x *QueryProductSpecListReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryProductSpecListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductSpecListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductSpecListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductSpecListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductSpecListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //
	CategoryId    int64                  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //规格名称
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  //更新时间
	IsDeleted     int32                  `protobuf:"varint,10,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`   //是否删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductSpecListData) Reset() {
	*x = ProductSpecListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSpecListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSpecListData) ProtoMessage() {}

func (x *ProductSpecListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSpecListData.ProtoReflect.Descriptor instead.
func (*ProductSpecListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{170}
}

func (x *ProductSpecListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductSpecListData) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductSpecListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductSpecListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductSpecListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductSpecListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductSpecListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductSpecListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductSpecListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProductSpecListData) GetIsDeleted() int32 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

type QueryProductSpecListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductSpecListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecListResp) Reset() {
	*x = QueryProductSpecListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecListResp) ProtoMessage() {}

func (x *QueryProductSpecListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecListResp.ProtoReflect.Descriptor instead.
func (*QueryProductSpecListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{171}
}

func (x *QueryProductSpecListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductSpecListResp) GetList() []*ProductSpecListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加商品规格值
type AddProductSpecValueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpecId        int64                  `protobuf:"varint,1,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`       //规格ID
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                        //规格值
	Sort          int32                  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`                         //排序
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,5,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"` //创建人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductSpecValueReq) Reset() {
	*x = AddProductSpecValueReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductSpecValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductSpecValueReq) ProtoMessage() {}

func (x *AddProductSpecValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductSpecValueReq.ProtoReflect.Descriptor instead.
func (*AddProductSpecValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{172}
}

func (x *AddProductSpecValueReq) GetSpecId() int64 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *AddProductSpecValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AddProductSpecValueReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddProductSpecValueReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddProductSpecValueReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddProductSpecValueResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductSpecValueResp) Reset() {
	*x = AddProductSpecValueResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductSpecValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductSpecValueResp) ProtoMessage() {}

func (x *AddProductSpecValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductSpecValueResp.ProtoReflect.Descriptor instead.
func (*AddProductSpecValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{173}
}

func (x *AddProductSpecValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除商品规格值
type DeleteProductSpecValueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSpecValueReq) Reset() {
	*x = DeleteProductSpecValueReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSpecValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSpecValueReq) ProtoMessage() {}

func (x *DeleteProductSpecValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSpecValueReq.ProtoReflect.Descriptor instead.
func (*DeleteProductSpecValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{174}
}

func (x *DeleteProductSpecValueReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductSpecValueResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSpecValueResp) Reset() {
	*x = DeleteProductSpecValueResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSpecValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSpecValueResp) ProtoMessage() {}

func (x *DeleteProductSpecValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSpecValueResp.ProtoReflect.Descriptor instead.
func (*DeleteProductSpecValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{175}
}

func (x *DeleteProductSpecValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品规格值
type UpdateProductSpecValueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             //
	SpecId        int64                  `protobuf:"varint,2,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`       //规格ID
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                        //规格值
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                         //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecValueReq) Reset() {
	*x = UpdateProductSpecValueReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecValueReq) ProtoMessage() {}

func (x *UpdateProductSpecValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecValueReq.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecValueReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{176}
}

func (x *UpdateProductSpecValueReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductSpecValueReq) GetSpecId() int64 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *UpdateProductSpecValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateProductSpecValueReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductSpecValueReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductSpecValueReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductSpecValueResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecValueResp) Reset() {
	*x = UpdateProductSpecValueResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecValueResp) ProtoMessage() {}

func (x *UpdateProductSpecValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecValueResp.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecValueResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{177}
}

func (x *UpdateProductSpecValueResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品规格值状态
type UpdateProductSpecValueStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecValueStatusReq) Reset() {
	*x = UpdateProductSpecValueStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecValueStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecValueStatusReq) ProtoMessage() {}

func (x *UpdateProductSpecValueStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecValueStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecValueStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{178}
}

func (x *UpdateProductSpecValueStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductSpecValueStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductSpecValueStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateProductSpecValueStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpecValueStatusResp) Reset() {
	*x = UpdateProductSpecValueStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpecValueStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpecValueStatusResp) ProtoMessage() {}

func (x *UpdateProductSpecValueStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpecValueStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductSpecValueStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{179}
}

func (x *UpdateProductSpecValueStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品规格值详情
type QueryProductSpecValueDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecValueDetailReq) Reset() {
	*x = QueryProductSpecValueDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecValueDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecValueDetailReq) ProtoMessage() {}

func (x *QueryProductSpecValueDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecValueDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductSpecValueDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{180}
}

func (x *QueryProductSpecValueDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryProductSpecValueDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  //
	SpecId        int64                  `protobuf:"varint,2,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`            //规格ID
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                             //规格值
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                              //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`      //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`      //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecValueDetailResp) Reset() {
	*x = QueryProductSpecValueDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecValueDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecValueDetailResp) ProtoMessage() {}

func (x *QueryProductSpecValueDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecValueDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductSpecValueDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{181}
}

func (x *QueryProductSpecValueDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryProductSpecValueDetailResp) GetSpecId() int64 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *QueryProductSpecValueDetailResp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *QueryProductSpecValueDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryProductSpecValueDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductSpecValueDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryProductSpecValueDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductSpecValueDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryProductSpecValueDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询商品规格值列表
type QueryProductSpecValueListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpecId        int64                  `protobuf:"varint,1,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`       //规格ID
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0->禁用；1->启用
	PageNum       int32                  `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecValueListReq) Reset() {
	*x = QueryProductSpecValueListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecValueListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecValueListReq) ProtoMessage() {}

func (x *QueryProductSpecValueListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecValueListReq.ProtoReflect.Descriptor instead.
func (*QueryProductSpecValueListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{182}
}

func (x *QueryProductSpecValueListReq) GetSpecId() int64 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *QueryProductSpecValueListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductSpecValueListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductSpecValueListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProductSpecValueListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  //
	SpecId        int64                  `protobuf:"varint,2,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`            //规格ID
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                             //规格值
	Sort          int32                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`                              //排序
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //状态：0->禁用；1->启用
	CreateBy      int64                  `protobuf:"varint,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`      //创建人ID
	CreateTime    string                 `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
	UpdateBy      int64                  `protobuf:"varint,8,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`      //更新人ID
	UpdateTime    string                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductSpecValueListData) Reset() {
	*x = ProductSpecValueListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSpecValueListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSpecValueListData) ProtoMessage() {}

func (x *ProductSpecValueListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSpecValueListData.ProtoReflect.Descriptor instead.
func (*ProductSpecValueListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{183}
}

func (x *ProductSpecValueListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductSpecValueListData) GetSpecId() int64 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *ProductSpecValueListData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProductSpecValueListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductSpecValueListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductSpecValueListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductSpecValueListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductSpecValueListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductSpecValueListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryProductSpecValueListResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Total         int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductSpecValueListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpecValueListResp) Reset() {
	*x = QueryProductSpecValueListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpecValueListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpecValueListResp) ProtoMessage() {}

func (x *QueryProductSpecValueListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpecValueListResp.ProtoReflect.Descriptor instead.
func (*QueryProductSpecValueListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{184}
}

func (x *QueryProductSpecValueListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductSpecValueListResp) GetList() []*ProductSpecValueListData {
	if x != nil {
		return x.List
	}
	return nil
}

type MemberPriceList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LevelId       int64                  `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`      //会员id
	Price         int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`                         //会员价格
	LevelName     string                 `protobuf:"bytes,3,opt,name=level_name,json=levelName,proto3" json:"level_name,omitempty"` //会员名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemberPriceList) Reset() {
	*x = MemberPriceList{}
	mi := &file_rpc_pms_pms_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPriceList) ProtoMessage() {}

func (x *MemberPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPriceList.ProtoReflect.Descriptor instead.
func (*MemberPriceList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{185}
}

func (x *MemberPriceList) GetLevelId() int64 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MemberPriceList) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MemberPriceList) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

type ProductAttributeValueList struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ProductAttributeId int64                  `protobuf:"varint,1,opt,name=ProductAttributeId,proto3" json:"ProductAttributeId,omitempty"` //商品满多少
	AttributeValues    string                 `protobuf:"bytes,2,opt,name=AttributeValues,proto3" json:"AttributeValues,omitempty"`        //商品满多少
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProductAttributeValueList) Reset() {
	*x = ProductAttributeValueList{}
	mi := &file_rpc_pms_pms_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttributeValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeValueList) ProtoMessage() {}

func (x *ProductAttributeValueList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeValueList.ProtoReflect.Descriptor instead.
func (*ProductAttributeValueList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{186}
}

func (x *ProductAttributeValueList) GetProductAttributeId() int64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *ProductAttributeValueList) GetAttributeValues() string {
	if x != nil {
		return x.AttributeValues
	}
	return ""
}

type ProductFullReductionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FullPrice     int64                  `protobuf:"varint,1,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`       //商品满多少
	ReducePrice   int64                  `protobuf:"varint,2,opt,name=reduce_price,json=reducePrice,proto3" json:"reduce_price,omitempty"` //商品减多少
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductFullReductionList) Reset() {
	*x = ProductFullReductionList{}
	mi := &file_rpc_pms_pms_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductFullReductionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFullReductionList) ProtoMessage() {}

func (x *ProductFullReductionList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFullReductionList.ProtoReflect.Descriptor instead.
func (*ProductFullReductionList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{187}
}

func (x *ProductFullReductionList) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *ProductFullReductionList) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type ProductLadderList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`       //满足的商品数量
	Discount      int64                  `protobuf:"varint,2,opt,name=discount,proto3" json:"discount,omitempty"` //折扣
	Price         int64                  `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`       //折后价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductLadderList) Reset() {
	*x = ProductLadderList{}
	mi := &file_rpc_pms_pms_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductLadderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLadderList) ProtoMessage() {}

func (x *ProductLadderList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLadderList.ProtoReflect.Descriptor instead.
func (*ProductLadderList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{188}
}

func (x *ProductLadderList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProductLadderList) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ProductLadderList) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type SkuStockList struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SpuId              int64                  `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                         //商品SpuId
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                         //SKU名称
	SkuCode            string                 `protobuf:"bytes,3,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                                    //SKU编码
	MainPic            string                 `protobuf:"bytes,4,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                    //主图
	AlbumPics          string                 `protobuf:"bytes,5,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                              //图片集
	Price              float32                `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`                                                     //价格
	PromotionPrice     float32                `protobuf:"fixed32,7,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`             //单品促销价格
	PromotionStartTime string                 `protobuf:"bytes,8,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"` //促销开始时间
	PromotionEndTime   string                 `protobuf:"bytes,9,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`       //促销结束时间
	Stock              int32                  `protobuf:"varint,10,opt,name=stock,proto3" json:"stock,omitempty"`                                                     //库存
	LowStock           int32                  `protobuf:"varint,11,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                               //预警库存
	SpecData           string                 `protobuf:"bytes,12,opt,name=spec_data,json=specData,proto3" json:"spec_data,omitempty"`                                //规格数据
	Weight             float32                `protobuf:"fixed32,13,opt,name=weight,proto3" json:"weight,omitempty"`                                                  //重量(kg)
	PublishStatus      int32                  `protobuf:"varint,14,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                //上架状态：0-下架，1-上架
	VerifyStatus       int32                  `protobuf:"varint,15,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                   //审核状态：0-未审核，1-审核通过，2-审核不通过
	Sort               int32                  `protobuf:"varint,16,opt,name=sort,proto3" json:"sort,omitempty"`                                                       //排序
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SkuStockList) Reset() {
	*x = SkuStockList{}
	mi := &file_rpc_pms_pms_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkuStockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuStockList) ProtoMessage() {}

func (x *SkuStockList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuStockList.ProtoReflect.Descriptor instead.
func (*SkuStockList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{189}
}

func (x *SkuStockList) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SkuStockList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkuStockList) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *SkuStockList) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *SkuStockList) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *SkuStockList) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuStockList) GetPromotionPrice() float32 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *SkuStockList) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *SkuStockList) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *SkuStockList) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SkuStockList) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *SkuStockList) GetSpecData() string {
	if x != nil {
		return x.SpecData
	}
	return ""
}

func (x *SkuStockList) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SkuStockList) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *SkuStockList) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *SkuStockList) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// 添加商品SPU
type ProductSpuReq struct {
	state                     protoimpl.MessageState       `protogen:"open.v1"`
	Id                        int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 //商品SpuId
	Name                      string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                              //商品名称
	ProductSn                 string                       `protobuf:"bytes,3,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                                   //商品货号
	CategoryId                int64                        `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                               //商品分类ID
	CategoryIds               string                       `protobuf:"bytes,5,opt,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`                             //商品分类ID集合
	CategoryName              string                       `protobuf:"bytes,6,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                          //商品分类名称
	BrandId                   int64                        `protobuf:"varint,7,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                                        //品牌ID
	BrandName                 string                       `protobuf:"bytes,8,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`                                   //品牌名称
	Unit                      string                       `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`                                                              //单位
	Weight                    float32                      `protobuf:"fixed32,10,opt,name=weight,proto3" json:"weight,omitempty"`                                                       //重量(kg)
	Keywords                  string                       `protobuf:"bytes,11,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                     //关键词
	Brief                     string                       `protobuf:"bytes,12,opt,name=brief,proto3" json:"brief,omitempty"`                                                           //简介
	Description               string                       `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`                                               //详细描述
	AlbumPics                 string                       `protobuf:"bytes,14,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                                  //画册图片，最多8张，以逗号分割
	MainPic                   string                       `protobuf:"bytes,15,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                        //主图
	PriceRange                string                       `protobuf:"bytes,16,opt,name=price_range,json=priceRange,proto3" json:"price_range,omitempty"`                               //价格区间
	PublishStatus             int32                        `protobuf:"varint,17,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                     //上架状态：0-下架，1-上架
	NewStatus                 int32                        `protobuf:"varint,18,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`                                 //新品状态:0->不是新品；1->新品
	RecommendStatus           int32                        `protobuf:"varint,19,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`               //推荐状态；0->不推荐；1->推荐
	VerifyStatus              int32                        `protobuf:"varint,20,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                        //审核状态：0->未审核；1->审核通过
	PreviewStatus             int32                        `protobuf:"varint,21,opt,name=preview_status,json=previewStatus,proto3" json:"preview_status,omitempty"`                     //是否为预告商品：0->不是；1->是
	Sort                      int32                        `protobuf:"varint,22,opt,name=sort,proto3" json:"sort,omitempty"`                                                            //排序
	NewStatusSort             int32                        `protobuf:"varint,23,opt,name=new_status_sort,json=newStatusSort,proto3" json:"new_status_sort,omitempty"`                   //新品排序
	RecommendStatusSort       int32                        `protobuf:"varint,24,opt,name=recommend_status_sort,json=recommendStatusSort,proto3" json:"recommend_status_sort,omitempty"` //推荐排序
	Sales                     int32                        `protobuf:"varint,25,opt,name=sales,proto3" json:"sales,omitempty"`                                                          //销量
	Stock                     int32                        `protobuf:"varint,26,opt,name=stock,proto3" json:"stock,omitempty"`                                                          //库存
	LowStock                  int32                        `protobuf:"varint,27,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                                    //预警库存
	PromotionType             int32                        `protobuf:"varint,28,opt,name=promotion_type,json=promotionType,proto3" json:"promotion_type,omitempty"`                     //促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->秒杀
	DetailTitle               string                       `protobuf:"bytes,29,opt,name=detail_title,json=detailTitle,proto3" json:"detail_title,omitempty"`                            //详情标题
	DetailDesc                string                       `protobuf:"bytes,30,opt,name=detail_desc,json=detailDesc,proto3" json:"detail_desc,omitempty"`                               //详情描述
	DetailHtml                string                       `protobuf:"bytes,31,opt,name=detail_html,json=detailHtml,proto3" json:"detail_html,omitempty"`                               //产品详情网页内容
	DetailMobileHtml          string                       `protobuf:"bytes,32,opt,name=detail_mobile_html,json=detailMobileHtml,proto3" json:"detail_mobile_html,omitempty"`           //移动端网页详情
	CreateBy                  int64                        `protobuf:"varint,33,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                    //创建人ID
	MemberPriceList           []*MemberPriceList           `protobuf:"bytes,34,rep,name=MemberPriceList,proto3" json:"MemberPriceList,omitempty"`                                       //会员价格
	ProductAttributeValueList []*ProductAttributeValueList `protobuf:"bytes,35,rep,name=ProductAttributeValueList,proto3" json:"ProductAttributeValueList,omitempty"`                   //商品属性和值
	ProductFullReductionList  []*ProductFullReductionList  `protobuf:"bytes,36,rep,name=ProductFullReductionList,proto3" json:"ProductFullReductionList,omitempty"`                     //满减价格
	ProductLadderList         []*ProductLadderList         `protobuf:"bytes,37,rep,name=ProductLadderList,proto3" json:"ProductLadderList,omitempty"`                                   //阶梯价格
	SkuStockList              []*SkuStockList              `protobuf:"bytes,38,rep,name=SkuStockList,proto3" json:"SkuStockList,omitempty"`                                             //商品sku库存
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ProductSpuReq) Reset() {
	*x = ProductSpuReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSpuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSpuReq) ProtoMessage() {}

func (x *ProductSpuReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSpuReq.ProtoReflect.Descriptor instead.
func (*ProductSpuReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{190}
}

func (x *ProductSpuReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductSpuReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductSpuReq) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

func (x *ProductSpuReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductSpuReq) GetCategoryIds() string {
	if x != nil {
		return x.CategoryIds
	}
	return ""
}

func (x *ProductSpuReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ProductSpuReq) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ProductSpuReq) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *ProductSpuReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProductSpuReq) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductSpuReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProductSpuReq) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

func (x *ProductSpuReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductSpuReq) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *ProductSpuReq) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *ProductSpuReq) GetPriceRange() string {
	if x != nil {
		return x.PriceRange
	}
	return ""
}

func (x *ProductSpuReq) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *ProductSpuReq) GetNewStatus() int32 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *ProductSpuReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *ProductSpuReq) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *ProductSpuReq) GetPreviewStatus() int32 {
	if x != nil {
		return x.PreviewStatus
	}
	return 0
}

func (x *ProductSpuReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductSpuReq) GetNewStatusSort() int32 {
	if x != nil {
		return x.NewStatusSort
	}
	return 0
}

func (x *ProductSpuReq) GetRecommendStatusSort() int32 {
	if x != nil {
		return x.RecommendStatusSort
	}
	return 0
}

func (x *ProductSpuReq) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *ProductSpuReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductSpuReq) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *ProductSpuReq) GetPromotionType() int32 {
	if x != nil {
		return x.PromotionType
	}
	return 0
}

func (x *ProductSpuReq) GetDetailTitle() string {
	if x != nil {
		return x.DetailTitle
	}
	return ""
}

func (x *ProductSpuReq) GetDetailDesc() string {
	if x != nil {
		return x.DetailDesc
	}
	return ""
}

func (x *ProductSpuReq) GetDetailHtml() string {
	if x != nil {
		return x.DetailHtml
	}
	return ""
}

func (x *ProductSpuReq) GetDetailMobileHtml() string {
	if x != nil {
		return x.DetailMobileHtml
	}
	return ""
}

func (x *ProductSpuReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductSpuReq) GetMemberPriceList() []*MemberPriceList {
	if x != nil {
		return x.MemberPriceList
	}
	return nil
}

func (x *ProductSpuReq) GetProductAttributeValueList() []*ProductAttributeValueList {
	if x != nil {
		return x.ProductAttributeValueList
	}
	return nil
}

func (x *ProductSpuReq) GetProductFullReductionList() []*ProductFullReductionList {
	if x != nil {
		return x.ProductFullReductionList
	}
	return nil
}

func (x *ProductSpuReq) GetProductLadderList() []*ProductLadderList {
	if x != nil {
		return x.ProductLadderList
	}
	return nil
}

func (x *ProductSpuReq) GetSkuStockList() []*SkuStockList {
	if x != nil {
		return x.SkuStockList
	}
	return nil
}

type ProductSpuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpuId         int64                  `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductSpuResp) Reset() {
	*x = ProductSpuResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSpuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSpuResp) ProtoMessage() {}

func (x *ProductSpuResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSpuResp.ProtoReflect.Descriptor instead.
func (*ProductSpuResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{191}
}

func (x *ProductSpuResp) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

// 删除商品SPU
type DeleteProductSpuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSpuReq) Reset() {
	*x = DeleteProductSpuReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSpuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSpuReq) ProtoMessage() {}

func (x *DeleteProductSpuReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSpuReq.ProtoReflect.Descriptor instead.
func (*DeleteProductSpuReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{192}
}

func (x *DeleteProductSpuReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteProductSpuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProductSpuResp) Reset() {
	*x = DeleteProductSpuResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProductSpuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductSpuResp) ProtoMessage() {}

func (x *DeleteProductSpuResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductSpuResp.ProtoReflect.Descriptor instead.
func (*DeleteProductSpuResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{193}
}

func (x *DeleteProductSpuResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新商品SPU状态
type UpdateProductSpuStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` //商品SpuId
	Status        int32                  `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"` //状态
	Detail        string                 `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	UpdateBy      int64                  `protobuf:"varint,4,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`   //审核人
	ReviewMan     string                 `protobuf:"bytes,5,opt,name=review_man,json=reviewMan,proto3" json:"review_man,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpuStatusReq) Reset() {
	*x = UpdateProductSpuStatusReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpuStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpuStatusReq) ProtoMessage() {}

func (x *UpdateProductSpuStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpuStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateProductSpuStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{194}
}

func (x *UpdateProductSpuStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateProductSpuStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateProductSpuStatusReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *UpdateProductSpuStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *UpdateProductSpuStatusReq) GetReviewMan() string {
	if x != nil {
		return x.ReviewMan
	}
	return ""
}

type UpdateProductSpuStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSpuStatusResp) Reset() {
	*x = UpdateProductSpuStatusResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSpuStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSpuStatusResp) ProtoMessage() {}

func (x *UpdateProductSpuStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSpuStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateProductSpuStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{195}
}

func (x *UpdateProductSpuStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品SPU详情
type QueryProductSpuDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpuDetailReq) Reset() {
	*x = QueryProductSpuDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpuDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpuDetailReq) ProtoMessage() {}

func (x *QueryProductSpuDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpuDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductSpuDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{196}
}

func (x *QueryProductSpuDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BrandData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 //
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                              //品牌名称
	Logo                string                 `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                                                              //品牌logo
	BigPic              string                 `protobuf:"bytes,4,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                                            //专区大图
	Description         string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                //描述
	FirstLetter         string                 `protobuf:"bytes,6,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`                             //首字母
	Sort                int32                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                                             //排序
	RecommendStatus     int32                  `protobuf:"varint,8,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`                //推荐状态
	ProductCount        int32                  `protobuf:"varint,9,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`                         //产品数量
	ProductCommentCount int32                  `protobuf:"varint,10,opt,name=product_comment_count,json=productCommentCount,proto3" json:"product_comment_count,omitempty"` //产品评论数量
	IsEnabled           int32                  `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`                                 //是否启用
	CreateBy            int64                  `protobuf:"varint,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                    //创建人ID
	CreateTime          string                 `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                               //创建时间
	UpdateBy            int64                  `protobuf:"varint,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                    //更新人ID
	UpdateTime          string                 `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //更新时间
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BrandData) Reset() {
	*x = BrandData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrandData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandData) ProtoMessage() {}

func (x *BrandData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandData.ProtoReflect.Descriptor instead.
func (*BrandData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{197}
}

func (x *BrandData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BrandData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandData) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *BrandData) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *BrandData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BrandData) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *BrandData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BrandData) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *BrandData) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *BrandData) GetProductCommentCount() int32 {
	if x != nil {
		return x.ProductCommentCount
	}
	return 0
}

func (x *BrandData) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *BrandData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *BrandData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *BrandData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *BrandData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ProductAttributeDataList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键id
	GroupId       int64                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                //属性分组ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                      //属性名称
	InputType     int32                  `protobuf:"varint,4,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`          //输入类型：1-手动输入，2-单选，3-多选
	ValueType     int32                  `protobuf:"varint,5,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`          //值类型：1-文本，2-数字，3-日期
	InputList     string                 `protobuf:"bytes,6,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`           //可选值列表，用逗号分隔
	Unit          string                 `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`                                      //单位
	IsRequired    int32                  `protobuf:"varint,8,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`       //是否必填
	IsSearchable  int32                  `protobuf:"varint,9,opt,name=is_searchable,json=isSearchable,proto3" json:"is_searchable,omitempty"` //是否支持搜索
	IsShow        int32                  `protobuf:"varint,10,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`                  //是否显示
	Sort          int32                  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`                                    //排序
	CreateBy      int64                  `protobuf:"varint,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`            //创建人ID
	CreateTime    string                 `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`       //创建时间
	UpdateBy      int64                  `protobuf:"varint,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	UpdateTime    string                 `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductAttributeDataList) Reset() {
	*x = ProductAttributeDataList{}
	mi := &file_rpc_pms_pms_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttributeDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeDataList) ProtoMessage() {}

func (x *ProductAttributeDataList) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeDataList.ProtoReflect.Descriptor instead.
func (*ProductAttributeDataList) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{198}
}

func (x *ProductAttributeDataList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeDataList) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ProductAttributeDataList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttributeDataList) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *ProductAttributeDataList) GetValueType() int32 {
	if x != nil {
		return x.ValueType
	}
	return 0
}

func (x *ProductAttributeDataList) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *ProductAttributeDataList) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProductAttributeDataList) GetIsRequired() int32 {
	if x != nil {
		return x.IsRequired
	}
	return 0
}

func (x *ProductAttributeDataList) GetIsSearchable() int32 {
	if x != nil {
		return x.IsSearchable
	}
	return 0
}

func (x *ProductAttributeDataList) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

func (x *ProductAttributeDataList) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductAttributeDataList) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductAttributeDataList) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductAttributeDataList) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductAttributeDataList) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ProductAttributeValueData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //主键id
	SpuId         int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                   //商品SPU ID
	AttributeId   int64                  `protobuf:"varint,3,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"` //属性ID
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                 //属性值
	CreateBy      int64                  `protobuf:"varint,5,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`          //创建人ID
	CreateTime    string                 `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`     //创建时间
	UpdateBy      int64                  `protobuf:"varint,7,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`          //更新人ID
	UpdateTime    string                 `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`     //更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductAttributeValueData) Reset() {
	*x = ProductAttributeValueData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttributeValueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeValueData) ProtoMessage() {}

func (x *ProductAttributeValueData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeValueData.ProtoReflect.Descriptor instead.
func (*ProductAttributeValueData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{199}
}

func (x *ProductAttributeValueData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductAttributeValueData) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ProductAttributeValueData) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *ProductAttributeValueData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProductAttributeValueData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductAttributeValueData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductAttributeValueData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductAttributeValueData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type SkuStockData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            //商品SpuId
	SpuId              int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`                                         //商品SpuId
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         //SKU名称
	SkuCode            string                 `protobuf:"bytes,4,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`                                    //SKU编码
	MainPic            string                 `protobuf:"bytes,5,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                    //主图
	AlbumPics          string                 `protobuf:"bytes,6,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                              //图片集
	Price              float32                `protobuf:"fixed32,7,opt,name=price,proto3" json:"price,omitempty"`                                                     //价格
	PromotionPrice     float32                `protobuf:"fixed32,8,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`             //单品促销价格
	PromotionStartTime string                 `protobuf:"bytes,9,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"` //促销开始时间
	PromotionEndTime   string                 `protobuf:"bytes,10,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`      //促销结束时间
	Stock              int32                  `protobuf:"varint,11,opt,name=stock,proto3" json:"stock,omitempty"`                                                     //库存
	LowStock           int32                  `protobuf:"varint,12,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                               //预警库存
	SpecData           string                 `protobuf:"bytes,13,opt,name=spec_data,json=specData,proto3" json:"spec_data,omitempty"`                                //规格数据
	Weight             float32                `protobuf:"fixed32,14,opt,name=weight,proto3" json:"weight,omitempty"`                                                  //重量(kg)
	PublishStatus      int32                  `protobuf:"varint,15,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                //上架状态：0-下架，1-上架
	VerifyStatus       int32                  `protobuf:"varint,16,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                   //审核状态：0-未审核，1-审核通过，2-审核不通过
	Sort               int32                  `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                                                       //排序
	Sales              int32                  `protobuf:"varint,18,opt,name=sales,proto3" json:"sales,omitempty"`                                                     //销量
	CreateBy           int64                  `protobuf:"varint,19,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                               //创建人ID
	CreateTime         string                 `protobuf:"bytes,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                          //创建时间
	UpdateBy           int64                  `protobuf:"varint,21,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                               //更新人ID
	UpdateTime         string                 `protobuf:"bytes,22,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                          //更新时间
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SkuStockData) Reset() {
	*x = SkuStockData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkuStockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuStockData) ProtoMessage() {}

func (x *SkuStockData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuStockData.ProtoReflect.Descriptor instead.
func (*SkuStockData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{200}
}

func (x *SkuStockData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkuStockData) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SkuStockData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkuStockData) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *SkuStockData) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *SkuStockData) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *SkuStockData) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuStockData) GetPromotionPrice() float32 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *SkuStockData) GetPromotionStartTime() string {
	if x != nil {
		return x.PromotionStartTime
	}
	return ""
}

func (x *SkuStockData) GetPromotionEndTime() string {
	if x != nil {
		return x.PromotionEndTime
	}
	return ""
}

func (x *SkuStockData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SkuStockData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *SkuStockData) GetSpecData() string {
	if x != nil {
		return x.SpecData
	}
	return ""
}

func (x *SkuStockData) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SkuStockData) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *SkuStockData) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *SkuStockData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SkuStockData) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *SkuStockData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SkuStockData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SkuStockData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SkuStockData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ProductLadderData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //商品id
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                          //满足的商品数量
	Discount      int64                  `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`                    //折扣
	Price         int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                          //折后价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductLadderData) Reset() {
	*x = ProductLadderData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductLadderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductLadderData) ProtoMessage() {}

func (x *ProductLadderData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductLadderData.ProtoReflect.Descriptor instead.
func (*ProductLadderData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{201}
}

func (x *ProductLadderData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductLadderData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductLadderData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProductLadderData) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *ProductLadderData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type ProductFullReductionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`       //商品id
	FullPrice     int64                  `protobuf:"varint,3,opt,name=full_price,json=fullPrice,proto3" json:"full_price,omitempty"`       //商品满多少
	ReducePrice   int64                  `protobuf:"varint,4,opt,name=reduce_price,json=reducePrice,proto3" json:"reduce_price,omitempty"` //商品减多少
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductFullReductionData) Reset() {
	*x = ProductFullReductionData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductFullReductionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFullReductionData) ProtoMessage() {}

func (x *ProductFullReductionData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFullReductionData.ProtoReflect.Descriptor instead.
func (*ProductFullReductionData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{202}
}

func (x *ProductFullReductionData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductFullReductionData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductFullReductionData) GetFullPrice() int64 {
	if x != nil {
		return x.FullPrice
	}
	return 0
}

func (x *ProductFullReductionData) GetReducePrice() int64 {
	if x != nil {
		return x.ReducePrice
	}
	return 0
}

type MemberPriceListData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                   //
	ProductId       int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                    //商品id
	MemberLevelId   int64                  `protobuf:"varint,3,opt,name=member_level_id,json=memberLevelId,proto3" json:"member_level_id,omitempty"`      //会员等级id
	MemberPrice     int64                  `protobuf:"varint,4,opt,name=member_price,json=memberPrice,proto3" json:"member_price,omitempty"`              //会员价格
	MemberLevelName string                 `protobuf:"bytes,5,opt,name=member_level_name,json=memberLevelName,proto3" json:"member_level_name,omitempty"` //会员等级名称
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MemberPriceListData) Reset() {
	*x = MemberPriceListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberPriceListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPriceListData) ProtoMessage() {}

func (x *MemberPriceListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPriceListData.ProtoReflect.Descriptor instead.
func (*MemberPriceListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{203}
}

func (x *MemberPriceListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberPriceListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *MemberPriceListData) GetMemberLevelId() int64 {
	if x != nil {
		return x.MemberLevelId
	}
	return 0
}

func (x *MemberPriceListData) GetMemberPrice() int64 {
	if x != nil {
		return x.MemberPrice
	}
	return 0
}

func (x *MemberPriceListData) GetMemberLevelName() string {
	if x != nil {
		return x.MemberLevelName
	}
	return ""
}

type QueryProductSpuDetailResp struct {
	state                     protoimpl.MessageState       `protogen:"open.v1"`
	Data                      *ProductSpuListData          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //商品
	Brand                     *BrandData                   `protobuf:"bytes,2,opt,name=Brand,proto3" json:"Brand,omitempty"`
	ProductAttributeList      []*ProductAttributeDataList  `protobuf:"bytes,3,rep,name=ProductAttributeList,proto3" json:"ProductAttributeList,omitempty"`
	ProductAttributeValueList []*ProductAttributeValueData `protobuf:"bytes,4,rep,name=ProductAttributeValueList,proto3" json:"ProductAttributeValueList,omitempty"`
	SkuStockList              []*SkuStockData              `protobuf:"bytes,5,rep,name=SkuStockList,proto3" json:"SkuStockList,omitempty"`
	ProductLadderList         []*ProductLadderData         `protobuf:"bytes,6,rep,name=ProductLadderList,proto3" json:"ProductLadderList,omitempty"`
	ProductFullReductionList  []*ProductFullReductionData  `protobuf:"bytes,7,rep,name=ProductFullReductionList,proto3" json:"ProductFullReductionList,omitempty"`
	MemberPriceList           []*MemberPriceListData       `protobuf:"bytes,8,rep,name=MemberPriceList,proto3" json:"MemberPriceList,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *QueryProductSpuDetailResp) Reset() {
	*x = QueryProductSpuDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpuDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpuDetailResp) ProtoMessage() {}

func (x *QueryProductSpuDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpuDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductSpuDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{204}
}

func (x *QueryProductSpuDetailResp) GetData() *ProductSpuListData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryProductSpuDetailResp) GetBrand() *BrandData {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *QueryProductSpuDetailResp) GetProductAttributeList() []*ProductAttributeDataList {
	if x != nil {
		return x.ProductAttributeList
	}
	return nil
}

func (x *QueryProductSpuDetailResp) GetProductAttributeValueList() []*ProductAttributeValueData {
	if x != nil {
		return x.ProductAttributeValueList
	}
	return nil
}

func (x *QueryProductSpuDetailResp) GetSkuStockList() []*SkuStockData {
	if x != nil {
		return x.SkuStockList
	}
	return nil
}

func (x *QueryProductSpuDetailResp) GetProductLadderList() []*ProductLadderData {
	if x != nil {
		return x.ProductLadderList
	}
	return nil
}

func (x *QueryProductSpuDetailResp) GetProductFullReductionList() []*ProductFullReductionData {
	if x != nil {
		return x.ProductFullReductionList
	}
	return nil
}

func (x *QueryProductSpuDetailResp) GetMemberPriceList() []*MemberPriceListData {
	if x != nil {
		return x.MemberPriceList
	}
	return nil
}

// 分页查询商品SPU列表
type QueryProductSpuListReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                               //商品名称
	CategoryId      int64                  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                //商品分类ID
	CategoryIds     string                 `protobuf:"bytes,3,opt,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`              //商品分类ID集合
	CategoryName    string                 `protobuf:"bytes,4,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`           //商品分类名称
	BrandId         int64                  `protobuf:"varint,5,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                         //品牌ID
	BrandName       string                 `protobuf:"bytes,6,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`                    //品牌名称
	PublishStatus   int32                  `protobuf:"varint,7,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`       //上架状态：0-下架，1-上架
	NewStatus       int32                  `protobuf:"varint,8,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`                   //新品状态:0->不是新品；1->新品
	RecommendStatus int32                  `protobuf:"varint,9,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态；0->不推荐；1->推荐
	VerifyStatus    int32                  `protobuf:"varint,10,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`         //审核状态：0->未审核；1->审核通过
	PreviewStatus   int32                  `protobuf:"varint,11,opt,name=preview_status,json=previewStatus,proto3" json:"preview_status,omitempty"`      //是否为预告商品：0->不是；1->是
	PromotionType   int32                  `protobuf:"varint,12,opt,name=promotion_type,json=promotionType,proto3" json:"promotion_type,omitempty"`      //促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->秒杀
	PageNum         int32                  `protobuf:"varint,13,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                        //第几页
	PageSize        int32                  `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                     //每页的数量
	Keywords        string                 `protobuf:"bytes,15,opt,name=keywords,proto3" json:"keywords,omitempty"`                                      //关键词
	ProductSn       string                 `protobuf:"bytes,16,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                   //商品货号
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryProductSpuListReq) Reset() {
	*x = QueryProductSpuListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpuListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpuListReq) ProtoMessage() {}

func (x *QueryProductSpuListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpuListReq.ProtoReflect.Descriptor instead.
func (*QueryProductSpuListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{205}
}

func (x *QueryProductSpuListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryProductSpuListReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryProductSpuListReq) GetCategoryIds() string {
	if x != nil {
		return x.CategoryIds
	}
	return ""
}

func (x *QueryProductSpuListReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *QueryProductSpuListReq) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *QueryProductSpuListReq) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *QueryProductSpuListReq) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *QueryProductSpuListReq) GetNewStatus() int32 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *QueryProductSpuListReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *QueryProductSpuListReq) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *QueryProductSpuListReq) GetPreviewStatus() int32 {
	if x != nil {
		return x.PreviewStatus
	}
	return 0
}

func (x *QueryProductSpuListReq) GetPromotionType() int32 {
	if x != nil {
		return x.PromotionType
	}
	return 0
}

func (x *QueryProductSpuListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryProductSpuListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryProductSpuListReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryProductSpuListReq) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

type ProductSpuListData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 //商品SpuId
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                              //商品名称
	ProductSn           string                 `protobuf:"bytes,3,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                                   //商品货号
	CategoryId          int64                  `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                               //商品分类ID
	CategoryIds         string                 `protobuf:"bytes,5,opt,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`                             //商品分类ID集合
	CategoryName        string                 `protobuf:"bytes,6,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                          //商品分类名称
	BrandId             int64                  `protobuf:"varint,7,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                                        //品牌ID
	BrandName           string                 `protobuf:"bytes,8,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`                                   //品牌名称
	Unit                string                 `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`                                                              //单位
	Weight              float32                `protobuf:"fixed32,10,opt,name=weight,proto3" json:"weight,omitempty"`                                                       //重量(kg)
	Keywords            string                 `protobuf:"bytes,11,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                     //关键词
	Brief               string                 `protobuf:"bytes,12,opt,name=brief,proto3" json:"brief,omitempty"`                                                           //简介
	Description         string                 `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`                                               //详细描述
	AlbumPics           string                 `protobuf:"bytes,14,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                                  //画册图片，最多8张，以逗号分割
	MainPic             string                 `protobuf:"bytes,15,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`                                        //主图
	PriceRange          string                 `protobuf:"bytes,16,opt,name=price_range,json=priceRange,proto3" json:"price_range,omitempty"`                               //价格区间
	PublishStatus       int32                  `protobuf:"varint,17,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                     //上架状态：0-下架，1-上架
	NewStatus           int32                  `protobuf:"varint,18,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`                                 //新品状态:0->不是新品；1->新品
	RecommendStatus     int32                  `protobuf:"varint,19,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"`               //推荐状态；0->不推荐；1->推荐
	VerifyStatus        int32                  `protobuf:"varint,20,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                        //审核状态：0->未审核；1->审核通过
	PreviewStatus       int32                  `protobuf:"varint,21,opt,name=preview_status,json=previewStatus,proto3" json:"preview_status,omitempty"`                     //是否为预告商品：0->不是；1->是
	Sort                int32                  `protobuf:"varint,22,opt,name=sort,proto3" json:"sort,omitempty"`                                                            //排序
	NewStatusSort       int32                  `protobuf:"varint,23,opt,name=new_status_sort,json=newStatusSort,proto3" json:"new_status_sort,omitempty"`                   //新品排序
	RecommendStatusSort int32                  `protobuf:"varint,24,opt,name=recommend_status_sort,json=recommendStatusSort,proto3" json:"recommend_status_sort,omitempty"` //推荐排序
	Sales               int32                  `protobuf:"varint,25,opt,name=sales,proto3" json:"sales,omitempty"`                                                          //销量
	Stock               int32                  `protobuf:"varint,26,opt,name=stock,proto3" json:"stock,omitempty"`                                                          //库存
	LowStock            int32                  `protobuf:"varint,27,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                                    //预警库存
	PromotionType       int32                  `protobuf:"varint,28,opt,name=promotion_type,json=promotionType,proto3" json:"promotion_type,omitempty"`                     //促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->秒杀
	DetailTitle         string                 `protobuf:"bytes,29,opt,name=detail_title,json=detailTitle,proto3" json:"detail_title,omitempty"`                            //详情标题
	DetailDesc          string                 `protobuf:"bytes,30,opt,name=detail_desc,json=detailDesc,proto3" json:"detail_desc,omitempty"`                               //详情描述
	DetailHtml          string                 `protobuf:"bytes,31,opt,name=detail_html,json=detailHtml,proto3" json:"detail_html,omitempty"`                               //产品详情网页内容
	DetailMobileHtml    string                 `protobuf:"bytes,32,opt,name=detail_mobile_html,json=detailMobileHtml,proto3" json:"detail_mobile_html,omitempty"`           //移动端网页详情
	CreateBy            int64                  `protobuf:"varint,33,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                                    //创建人ID
	CreateTime          string                 `protobuf:"bytes,34,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                               //创建时间
	UpdateBy            int64                  `protobuf:"varint,35,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                                    //更新人ID
	UpdateTime          string                 `protobuf:"bytes,36,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //更新时间
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProductSpuListData) Reset() {
	*x = ProductSpuListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSpuListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSpuListData) ProtoMessage() {}

func (x *ProductSpuListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSpuListData.ProtoReflect.Descriptor instead.
func (*ProductSpuListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{206}
}

func (x *ProductSpuListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductSpuListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductSpuListData) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

func (x *ProductSpuListData) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductSpuListData) GetCategoryIds() string {
	if x != nil {
		return x.CategoryIds
	}
	return ""
}

func (x *ProductSpuListData) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ProductSpuListData) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ProductSpuListData) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *ProductSpuListData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProductSpuListData) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductSpuListData) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProductSpuListData) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

func (x *ProductSpuListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductSpuListData) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *ProductSpuListData) GetMainPic() string {
	if x != nil {
		return x.MainPic
	}
	return ""
}

func (x *ProductSpuListData) GetPriceRange() string {
	if x != nil {
		return x.PriceRange
	}
	return ""
}

func (x *ProductSpuListData) GetPublishStatus() int32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *ProductSpuListData) GetNewStatus() int32 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *ProductSpuListData) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *ProductSpuListData) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *ProductSpuListData) GetPreviewStatus() int32 {
	if x != nil {
		return x.PreviewStatus
	}
	return 0
}

func (x *ProductSpuListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductSpuListData) GetNewStatusSort() int32 {
	if x != nil {
		return x.NewStatusSort
	}
	return 0
}

func (x *ProductSpuListData) GetRecommendStatusSort() int32 {
	if x != nil {
		return x.RecommendStatusSort
	}
	return 0
}

func (x *ProductSpuListData) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *ProductSpuListData) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductSpuListData) GetLowStock() int32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *ProductSpuListData) GetPromotionType() int32 {
	if x != nil {
		return x.PromotionType
	}
	return 0
}

func (x *ProductSpuListData) GetDetailTitle() string {
	if x != nil {
		return x.DetailTitle
	}
	return ""
}

func (x *ProductSpuListData) GetDetailDesc() string {
	if x != nil {
		return x.DetailDesc
	}
	return ""
}

func (x *ProductSpuListData) GetDetailHtml() string {
	if x != nil {
		return x.DetailHtml
	}
	return ""
}

func (x *ProductSpuListData) GetDetailMobileHtml() string {
	if x != nil {
		return x.DetailMobileHtml
	}
	return ""
}

func (x *ProductSpuListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ProductSpuListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductSpuListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ProductSpuListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryProductSpuListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductSpuListData  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpuListResp) Reset() {
	*x = QueryProductSpuListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpuListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpuListResp) ProtoMessage() {}

func (x *QueryProductSpuListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpuListResp.ProtoReflect.Descriptor instead.
func (*QueryProductSpuListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{207}
}

func (x *QueryProductSpuListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductSpuListResp) GetList() []*ProductSpuListData {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateProductSortReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sort          int32                  `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	UpdateBy      int64                  `protobuf:"varint,3,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProductSortReq) Reset() {
	*x = UpdateProductSortReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProductSortReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductSortReq) ProtoMessage() {}

func (x *UpdateProductSortReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductSortReq.ProtoReflect.Descriptor instead.
func (*UpdateProductSortReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{208}
}

func (x *UpdateProductSortReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductSortReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateProductSortReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type QueryProductSpuByIdsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductSpuByIdsReq) Reset() {
	*x = QueryProductSpuByIdsReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductSpuByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductSpuByIdsReq) ProtoMessage() {}

func (x *QueryProductSpuByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductSpuByIdsReq.ProtoReflect.Descriptor instead.
func (*QueryProductSpuByIdsReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{209}
}

func (x *QueryProductSpuByIdsReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 添加商品审核记录
type AddProductVertifyRecordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //商品id
	ReviewMan     string                 `protobuf:"bytes,4,opt,name=review_man,json=reviewMan,proto3" json:"review_man,omitempty"`  //审核人
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                        //审核状态：0->未通过；1->通过
	Detail        string                 `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`                         //反馈详情
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductVertifyRecordReq) Reset() {
	*x = AddProductVertifyRecordReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductVertifyRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductVertifyRecordReq) ProtoMessage() {}

func (x *AddProductVertifyRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductVertifyRecordReq.ProtoReflect.Descriptor instead.
func (*AddProductVertifyRecordReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{210}
}

func (x *AddProductVertifyRecordReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddProductVertifyRecordReq) GetReviewMan() string {
	if x != nil {
		return x.ReviewMan
	}
	return ""
}

func (x *AddProductVertifyRecordReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddProductVertifyRecordReq) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type AddProductVertifyRecordResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProductVertifyRecordResp) Reset() {
	*x = AddProductVertifyRecordResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProductVertifyRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProductVertifyRecordResp) ProtoMessage() {}

func (x *AddProductVertifyRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProductVertifyRecordResp.ProtoReflect.Descriptor instead.
func (*AddProductVertifyRecordResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{211}
}

func (x *AddProductVertifyRecordResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询商品审核记录详情
type QueryProductVertifyRecordDetailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductVertifyRecordDetailReq) Reset() {
	*x = QueryProductVertifyRecordDetailReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductVertifyRecordDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordDetailReq) ProtoMessage() {}

func (x *QueryProductVertifyRecordDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordDetailReq.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{212}
}

func (x *QueryProductVertifyRecordDetailReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QueryProductVertifyRecordDetailResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`   //商品id
	CreateTime    string                 `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
	ReviewMan     string                 `protobuf:"bytes,4,opt,name=review_man,json=reviewMan,proto3" json:"review_man,omitempty"`    //审核人
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //审核状态：0->未通过；1->通过
	Detail        string                 `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`                           //反馈详情
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductVertifyRecordDetailResp) Reset() {
	*x = QueryProductVertifyRecordDetailResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductVertifyRecordDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordDetailResp) ProtoMessage() {}

func (x *QueryProductVertifyRecordDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordDetailResp.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{213}
}

func (x *QueryProductVertifyRecordDetailResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryProductVertifyRecordDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryProductVertifyRecordDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryProductVertifyRecordDetailResp) GetReviewMan() string {
	if x != nil {
		return x.ReviewMan
	}
	return ""
}

func (x *QueryProductVertifyRecordDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryProductVertifyRecordDetailResp) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

// 分页查询商品审核记录列表
type QueryProductVertifyRecordListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //商品id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductVertifyRecordListReq) Reset() {
	*x = QueryProductVertifyRecordListReq{}
	mi := &file_rpc_pms_pms_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductVertifyRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordListReq) ProtoMessage() {}

func (x *QueryProductVertifyRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordListReq.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordListReq) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{214}
}

func (x *QueryProductVertifyRecordListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type ProductVertifyRecordListData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   //
	ProductId     int64                  `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`   //商品id
	CreateTime    string                 `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
	ReviewMan     string                 `protobuf:"bytes,4,opt,name=review_man,json=reviewMan,proto3" json:"review_man,omitempty"`    //审核人
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                          //审核状态：0->未通过；1->通过
	Detail        string                 `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`                           //反馈详情
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductVertifyRecordListData) Reset() {
	*x = ProductVertifyRecordListData{}
	mi := &file_rpc_pms_pms_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductVertifyRecordListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductVertifyRecordListData) ProtoMessage() {}

func (x *ProductVertifyRecordListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductVertifyRecordListData.ProtoReflect.Descriptor instead.
func (*ProductVertifyRecordListData) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{215}
}

func (x *ProductVertifyRecordListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductVertifyRecordListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductVertifyRecordListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProductVertifyRecordListData) GetReviewMan() string {
	if x != nil {
		return x.ReviewMan
	}
	return ""
}

func (x *ProductVertifyRecordListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductVertifyRecordListData) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type QueryProductVertifyRecordListResp struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Total         int64                           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductVertifyRecordListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryProductVertifyRecordListResp) Reset() {
	*x = QueryProductVertifyRecordListResp{}
	mi := &file_rpc_pms_pms_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryProductVertifyRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductVertifyRecordListResp) ProtoMessage() {}

func (x *QueryProductVertifyRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pms_pms_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductVertifyRecordListResp.ProtoReflect.Descriptor instead.
func (*QueryProductVertifyRecordListResp) Descriptor() ([]byte, []int) {
	return file_rpc_pms_pms_proto_rawDescGZIP(), []int{216}
}

func (x *QueryProductVertifyRecordListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductVertifyRecordListResp) GetList() []*ProductVertifyRecordListData {
	if x != nil {
		return x.List
	}
	return nil
}

var File_rpc_pms_pms_proto protoreflect.FileDescriptor

var file_rpc_pms_pms_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6d, 0x73, 0x2f, 0x70, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xf0,
	0x02, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x22, 0x2d, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x2d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x30, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0xf3, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x30, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x68, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x22, 0x36, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x30, 0x0a, 0x1e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd8, 0x03,
	0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x1d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x32, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x1e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x35, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x6d, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x3b,
	0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x35, 0x0a, 0x23, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0x78, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22,
	0x32, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xb5,
	0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x6d, 0x0a,
	0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x3b, 0x0a, 0x25,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x35, 0x0a, 0x23, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x9a, 0x02, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x93, 0x02,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfe, 0x02,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x69, 0x67, 0x50, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x30,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x22, 0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x81, 0x03, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69,
	0x67, 0x50, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2c, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x64, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x22, 0x32, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xe6, 0x03, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69,
	0x67, 0x50, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a,
	0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xdf, 0x03, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x66, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x16, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x22, 0x8a, 0x03, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61, 0x76,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x2c, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x8d, 0x03,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x67,
	0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2f,
	0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xdf, 0x03, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xd8, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x6c, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x21, 0x0a,
	0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x22, 0xab, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x63,
	0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x26, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x3d, 0x0a, 0x27, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x66, 0x0a, 0x2c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x2d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x47,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x2e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xbb, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x6d, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x6a, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xb0, 0x03, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xc3, 0x03, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x27, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xea, 0x03,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x13, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0xe3, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c,
	0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x14,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe0, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x01,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xfe, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x8d, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x31, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x31, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x20, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8f,
	0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x76, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x2d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x8f,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x2d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x95,
	0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x03,
	0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e,
	0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69,
	0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6c,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x22, 0x2e, 0x0a, 0x18, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x31, 0x0a, 0x1f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x03,
	0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4e, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f,
	0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65,
	0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x19,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e,
	0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69,
	0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6c,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x96, 0x04, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65,
	0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x27,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x6b, 0x75, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x6b, 0x75, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xaa, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x6b, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2a, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa4, 0x05, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69,
	0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x9d, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x62, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2c, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22,
	0x28, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x28, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0xa4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x63, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x31, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x1a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x90, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x22, 0x2d, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x30, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x68, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x36, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x30, 0x0a,
	0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x88, 0x02, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x5c, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x5b, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xf5, 0x03,
	0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xb1, 0x0b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x5f, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c,
	0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x53, 0x6b, 0x75,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75,
	0x49, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x61, 0x6e, 0x22, 0x30, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xd4, 0x03, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x70,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x97,
	0x05, 0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b,
	0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b,
	0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xeb, 0x04, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x57,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x53,
	0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x53, 0x6b, 0x75, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xa6, 0x04, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x22, 0x81, 0x09, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72,
	0x69, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x50, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x74, 0x6d, 0x6c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x74,
	0x6d, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x57, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2b, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x31, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a,
	0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4d, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x41, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x6d, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4d, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x76, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32, 0xb0,
	0x05, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x24, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x32, 0x91, 0x06, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x76, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x88, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x91, 0x06, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x85, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x95, 0x07, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x52, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6d, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x60, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x86, 0x07, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x73, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x77, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xdd, 0x02, 0x0a, 0x27, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x32, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x38,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xb2, 0x03, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32,
	0xa5, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x85, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x21,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x21,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32,
	0x95, 0x04, 0x0a, 0x15, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xfc, 0x02, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x85, 0x04, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xd9,
	0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x12, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x82, 0x05, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b,
	0x75, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x6b, 0x75, 0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b,
	0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6b, 0x75,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1c,
	0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x32,
	0xd1, 0x04, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x32, 0xb0, 0x05, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x70, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x27, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xdb, 0x09, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x12, 0x18, 0x2e,
	0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x12, 0x1e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x12,
	0x18, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x23, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x62, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x62, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x70,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x70, 0x75, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x32, 0x8c, 0x03, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x25, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_pms_pms_proto_rawDescOnce sync.Once
	file_rpc_pms_pms_proto_rawDescData = file_rpc_pms_pms_proto_rawDesc
)

func file_rpc_pms_pms_proto_rawDescGZIP() []byte {
	file_rpc_pms_pms_proto_rawDescOnce.Do(func() {
		file_rpc_pms_pms_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_pms_pms_proto_rawDescData)
	})
	return file_rpc_pms_pms_proto_rawDescData
}

var file_rpc_pms_pms_proto_msgTypes = make([]protoimpl.MessageInfo, 217)
var file_rpc_pms_pms_proto_goTypes = []any{
	(*AddProductAttributeReq)(nil),                        // 0: pmsclient.AddProductAttributeReq
	(*AddProductAttributeResp)(nil),                       // 1: pmsclient.AddProductAttributeResp
	(*DeleteProductAttributeReq)(nil),                     // 2: pmsclient.DeleteProductAttributeReq
	(*DeleteProductAttributeResp)(nil),                    // 3: pmsclient.DeleteProductAttributeResp
	(*UpdateProductAttributeReq)(nil),                     // 4: pmsclient.UpdateProductAttributeReq
	(*UpdateProductAttributeResp)(nil),                    // 5: pmsclient.UpdateProductAttributeResp
	(*UpdateProductAttributeStatusReq)(nil),               // 6: pmsclient.UpdateProductAttributeStatusReq
	(*UpdateProductAttributeStatusResp)(nil),              // 7: pmsclient.UpdateProductAttributeStatusResp
	(*QueryProductAttributeDetailReq)(nil),                // 8: pmsclient.QueryProductAttributeDetailReq
	(*QueryProductAttributeDetailResp)(nil),               // 9: pmsclient.QueryProductAttributeDetailResp
	(*QueryProductAttributeListReq)(nil),                  // 10: pmsclient.QueryProductAttributeListReq
	(*ProductAttributeListData)(nil),                      // 11: pmsclient.ProductAttributeListData
	(*QueryProductAttributeListResp)(nil),                 // 12: pmsclient.QueryProductAttributeListResp
	(*AddProductAttributeGroupReq)(nil),                   // 13: pmsclient.AddProductAttributeGroupReq
	(*AddProductAttributeGroupResp)(nil),                  // 14: pmsclient.AddProductAttributeGroupResp
	(*DeleteProductAttributeGroupReq)(nil),                // 15: pmsclient.DeleteProductAttributeGroupReq
	(*DeleteProductAttributeGroupResp)(nil),               // 16: pmsclient.DeleteProductAttributeGroupResp
	(*UpdateProductAttributeGroupReq)(nil),                // 17: pmsclient.UpdateProductAttributeGroupReq
	(*UpdateProductAttributeGroupResp)(nil),               // 18: pmsclient.UpdateProductAttributeGroupResp
	(*UpdateProductAttributeGroupStatusReq)(nil),          // 19: pmsclient.UpdateProductAttributeGroupStatusReq
	(*UpdateProductAttributeGroupStatusResp)(nil),         // 20: pmsclient.UpdateProductAttributeGroupStatusResp
	(*QueryProductAttributeGroupDetailReq)(nil),           // 21: pmsclient.QueryProductAttributeGroupDetailReq
	(*QueryProductAttributeGroupDetailResp)(nil),          // 22: pmsclient.QueryProductAttributeGroupDetailResp
	(*QueryProductAttributeGroupListReq)(nil),             // 23: pmsclient.QueryProductAttributeGroupListReq
	(*ProductAttributeGroupListData)(nil),                 // 24: pmsclient.ProductAttributeGroupListData
	(*QueryProductAttributeGroupListResp)(nil),            // 25: pmsclient.QueryProductAttributeGroupListResp
	(*AddProductAttributeValueReq)(nil),                   // 26: pmsclient.AddProductAttributeValueReq
	(*AddProductAttributeValueResp)(nil),                  // 27: pmsclient.AddProductAttributeValueResp
	(*DeleteProductAttributeValueReq)(nil),                // 28: pmsclient.DeleteProductAttributeValueReq
	(*DeleteProductAttributeValueResp)(nil),               // 29: pmsclient.DeleteProductAttributeValueResp
	(*UpdateProductAttributeValueReq)(nil),                // 30: pmsclient.UpdateProductAttributeValueReq
	(*UpdateProductAttributeValueResp)(nil),               // 31: pmsclient.UpdateProductAttributeValueResp
	(*UpdateProductAttributeValueStatusReq)(nil),          // 32: pmsclient.UpdateProductAttributeValueStatusReq
	(*UpdateProductAttributeValueStatusResp)(nil),         // 33: pmsclient.UpdateProductAttributeValueStatusResp
	(*QueryProductAttributeValueDetailReq)(nil),           // 34: pmsclient.QueryProductAttributeValueDetailReq
	(*QueryProductAttributeValueDetailResp)(nil),          // 35: pmsclient.QueryProductAttributeValueDetailResp
	(*QueryProductAttributeValueListReq)(nil),             // 36: pmsclient.QueryProductAttributeValueListReq
	(*ProductAttributeValueListData)(nil),                 // 37: pmsclient.ProductAttributeValueListData
	(*QueryProductAttributeValueListResp)(nil),            // 38: pmsclient.QueryProductAttributeValueListResp
	(*AddProductBrandReq)(nil),                            // 39: pmsclient.AddProductBrandReq
	(*AddProductBrandResp)(nil),                           // 40: pmsclient.AddProductBrandResp
	(*DeleteProductBrandReq)(nil),                         // 41: pmsclient.DeleteProductBrandReq
	(*DeleteProductBrandResp)(nil),                        // 42: pmsclient.DeleteProductBrandResp
	(*UpdateProductBrandReq)(nil),                         // 43: pmsclient.UpdateProductBrandReq
	(*UpdateProductBrandResp)(nil),                        // 44: pmsclient.UpdateProductBrandResp
	(*UpdateProductBrandStatusReq)(nil),                   // 45: pmsclient.UpdateProductBrandStatusReq
	(*UpdateProductBrandStatusResp)(nil),                  // 46: pmsclient.UpdateProductBrandStatusResp
	(*QueryProductBrandDetailReq)(nil),                    // 47: pmsclient.QueryProductBrandDetailReq
	(*QueryProductBrandDetailResp)(nil),                   // 48: pmsclient.QueryProductBrandDetailResp
	(*QueryProductBrandListReq)(nil),                      // 49: pmsclient.QueryProductBrandListReq
	(*ProductBrandListData)(nil),                          // 50: pmsclient.ProductBrandListData
	(*QueryProductBrandListResp)(nil),                     // 51: pmsclient.QueryProductBrandListResp
	(*QueryBrandListByIdsReq)(nil),                        // 52: pmsclient.QueryBrandListByIdsReq
	(*UpdateProductBrandSortReq)(nil),                     // 53: pmsclient.UpdateProductBrandSortReq
	(*AddProductCategoryReq)(nil),                         // 54: pmsclient.AddProductCategoryReq
	(*AddProductCategoryResp)(nil),                        // 55: pmsclient.AddProductCategoryResp
	(*DeleteProductCategoryReq)(nil),                      // 56: pmsclient.DeleteProductCategoryReq
	(*DeleteProductCategoryResp)(nil),                     // 57: pmsclient.DeleteProductCategoryResp
	(*UpdateProductCategoryReq)(nil),                      // 58: pmsclient.UpdateProductCategoryReq
	(*UpdateProductCategoryResp)(nil),                     // 59: pmsclient.UpdateProductCategoryResp
	(*UpdateProductCategoryStatusReq)(nil),                // 60: pmsclient.UpdateProductCategoryStatusReq
	(*UpdateProductCategoryStatusResp)(nil),               // 61: pmsclient.UpdateProductCategoryStatusResp
	(*QueryProductCategoryDetailReq)(nil),                 // 62: pmsclient.QueryProductCategoryDetailReq
	(*QueryProductCategoryDetailResp)(nil),                // 63: pmsclient.QueryProductCategoryDetailResp
	(*QueryProductCategoryListReq)(nil),                   // 64: pmsclient.QueryProductCategoryListReq
	(*ProductCategoryListData)(nil),                       // 65: pmsclient.ProductCategoryListData
	(*QueryProductCategoryListResp)(nil),                  // 66: pmsclient.QueryProductCategoryListResp
	(*QueryProductCategoryTreeListReq)(nil),               // 67: pmsclient.QueryProductCategoryTreeListReq
	(*QueryProductCategoryListTreeData)(nil),              // 68: pmsclient.QueryProductCategoryListTreeData
	(*QueryProductCategoryListTreeResp)(nil),              // 69: pmsclient.QueryProductCategoryListTreeResp
	(*AddProductCategoryAttributeRelationReq)(nil),        // 70: pmsclient.AddProductCategoryAttributeRelationReq
	(*AddProductCategoryAttributeRelationResp)(nil),       // 71: pmsclient.AddProductCategoryAttributeRelationResp
	(*QueryProductCategoryAttributeRelationListReq)(nil),  // 72: pmsclient.QueryProductCategoryAttributeRelationListReq
	(*ProductCategoryAttributeRelationListData)(nil),      // 73: pmsclient.ProductCategoryAttributeRelationListData
	(*QueryProductCategoryAttributeRelationListResp)(nil), // 74: pmsclient.QueryProductCategoryAttributeRelationListResp
	(*AddProductCollectReq)(nil),                          // 75: pmsclient.AddProductCollectReq
	(*AddProductCollectResp)(nil),                         // 76: pmsclient.AddProductCollectResp
	(*DeleteProductCollectReq)(nil),                       // 77: pmsclient.DeleteProductCollectReq
	(*DeleteProductCollectResp)(nil),                      // 78: pmsclient.DeleteProductCollectResp
	(*QueryProductCollectDetailReq)(nil),                  // 79: pmsclient.QueryProductCollectDetailReq
	(*QueryProductCollectDetailResp)(nil),                 // 80: pmsclient.QueryProductCollectDetailResp
	(*QueryProductCollectListReq)(nil),                    // 81: pmsclient.QueryProductCollectListReq
	(*ProductCollectListData)(nil),                        // 82: pmsclient.ProductCollectListData
	(*QueryProductCollectListResp)(nil),                   // 83: pmsclient.QueryProductCollectListResp
	(*AddCommentReq)(nil),                                 // 84: pmsclient.AddCommentReq
	(*AddCommentResp)(nil),                                // 85: pmsclient.AddCommentResp
	(*DeleteCommentReq)(nil),                              // 86: pmsclient.DeleteCommentReq
	(*DeleteCommentResp)(nil),                             // 87: pmsclient.DeleteCommentResp
	(*UpdateCommentReq)(nil),                              // 88: pmsclient.UpdateCommentReq
	(*UpdateCommentResp)(nil),                             // 89: pmsclient.UpdateCommentResp
	(*QueryCommentDetailReq)(nil),                         // 90: pmsclient.QueryCommentDetailReq
	(*QueryCommentDetailResp)(nil),                        // 91: pmsclient.QueryCommentDetailResp
	(*QueryCommentListReq)(nil),                           // 92: pmsclient.QueryCommentListReq
	(*CommentListData)(nil),                               // 93: pmsclient.CommentListData
	(*QueryCommentListResp)(nil),                          // 94: pmsclient.QueryCommentListResp
	(*AddCommentReplayReq)(nil),                           // 95: pmsclient.AddCommentReplayReq
	(*AddCommentReplayResp)(nil),                          // 96: pmsclient.AddCommentReplayResp
	(*DeleteCommentReplayReq)(nil),                        // 97: pmsclient.DeleteCommentReplayReq
	(*DeleteCommentReplayResp)(nil),                       // 98: pmsclient.DeleteCommentReplayResp
	(*UpdateCommentReplayReq)(nil),                        // 99: pmsclient.UpdateCommentReplayReq
	(*UpdateCommentReplayResp)(nil),                       // 100: pmsclient.UpdateCommentReplayResp
	(*QueryCommentReplayDetailReq)(nil),                   // 101: pmsclient.QueryCommentReplayDetailReq
	(*QueryCommentReplayDetailResp)(nil),                  // 102: pmsclient.QueryCommentReplayDetailResp
	(*QueryCommentReplayListReq)(nil),                     // 103: pmsclient.QueryCommentReplayListReq
	(*CommentReplayListData)(nil),                         // 104: pmsclient.CommentReplayListData
	(*QueryCommentReplayListResp)(nil),                    // 105: pmsclient.QueryCommentReplayListResp
	(*AddFeightTemplateReq)(nil),                          // 106: pmsclient.AddFeightTemplateReq
	(*AddFeightTemplateResp)(nil),                         // 107: pmsclient.AddFeightTemplateResp
	(*DeleteFeightTemplateReq)(nil),                       // 108: pmsclient.DeleteFeightTemplateReq
	(*DeleteFeightTemplateResp)(nil),                      // 109: pmsclient.DeleteFeightTemplateResp
	(*UpdateFeightTemplateReq)(nil),                       // 110: pmsclient.UpdateFeightTemplateReq
	(*UpdateFeightTemplateResp)(nil),                      // 111: pmsclient.UpdateFeightTemplateResp
	(*QueryFeightTemplateDetailReq)(nil),                  // 112: pmsclient.QueryFeightTemplateDetailReq
	(*QueryFeightTemplateDetailResp)(nil),                 // 113: pmsclient.QueryFeightTemplateDetailResp
	(*QueryFeightTemplateListReq)(nil),                    // 114: pmsclient.QueryFeightTemplateListReq
	(*FeightTemplateListData)(nil),                        // 115: pmsclient.FeightTemplateListData
	(*QueryFeightTemplateListResp)(nil),                   // 116: pmsclient.QueryFeightTemplateListResp
	(*AddProductFullReductionReq)(nil),                    // 117: pmsclient.AddProductFullReductionReq
	(*AddProductFullReductionResp)(nil),                   // 118: pmsclient.AddProductFullReductionResp
	(*DeleteProductFullReductionReq)(nil),                 // 119: pmsclient.DeleteProductFullReductionReq
	(*DeleteProductFullReductionResp)(nil),                // 120: pmsclient.DeleteProductFullReductionResp
	(*QueryProductFullReductionListReq)(nil),              // 121: pmsclient.QueryProductFullReductionListReq
	(*ProductFullReductionListData)(nil),                  // 122: pmsclient.ProductFullReductionListData
	(*QueryProductFullReductionListResp)(nil),             // 123: pmsclient.QueryProductFullReductionListResp
	(*AddProductLadderReq)(nil),                           // 124: pmsclient.AddProductLadderReq
	(*AddProductLadderResp)(nil),                          // 125: pmsclient.AddProductLadderResp
	(*DeleteProductLadderReq)(nil),                        // 126: pmsclient.DeleteProductLadderReq
	(*DeleteProductLadderResp)(nil),                       // 127: pmsclient.DeleteProductLadderResp
	(*UpdateProductLadderReq)(nil),                        // 128: pmsclient.UpdateProductLadderReq
	(*UpdateProductLadderResp)(nil),                       // 129: pmsclient.UpdateProductLadderResp
	(*QueryProductLadderDetailReq)(nil),                   // 130: pmsclient.QueryProductLadderDetailReq
	(*QueryProductLadderDetailResp)(nil),                  // 131: pmsclient.QueryProductLadderDetailResp
	(*QueryProductLadderListReq)(nil),                     // 132: pmsclient.QueryProductLadderListReq
	(*ProductLadderListData)(nil),                         // 133: pmsclient.ProductLadderListData
	(*QueryProductLadderListResp)(nil),                    // 134: pmsclient.QueryProductLadderListResp
	(*AddProductOperateLogReq)(nil),                       // 135: pmsclient.AddProductOperateLogReq
	(*AddProductOperateLogResp)(nil),                      // 136: pmsclient.AddProductOperateLogResp
	(*DeleteProductOperateLogReq)(nil),                    // 137: pmsclient.DeleteProductOperateLogReq
	(*DeleteProductOperateLogResp)(nil),                   // 138: pmsclient.DeleteProductOperateLogResp
	(*QueryProductOperateLogDetailReq)(nil),               // 139: pmsclient.QueryProductOperateLogDetailReq
	(*QueryProductOperateLogDetailResp)(nil),              // 140: pmsclient.QueryProductOperateLogDetailResp
	(*QueryProductOperateLogListReq)(nil),                 // 141: pmsclient.QueryProductOperateLogListReq
	(*ProductOperateLogListData)(nil),                     // 142: pmsclient.ProductOperateLogListData
	(*QueryProductOperateLogListResp)(nil),                // 143: pmsclient.QueryProductOperateLogListResp
	(*AddProductSkuReq)(nil),                              // 144: pmsclient.AddProductSkuReq
	(*AddProductSkuResp)(nil),                             // 145: pmsclient.AddProductSkuResp
	(*DeleteProductSkuReq)(nil),                           // 146: pmsclient.DeleteProductSkuReq
	(*DeleteProductSkuResp)(nil),                          // 147: pmsclient.DeleteProductSkuResp
	(*UpdateProductSkuReq)(nil),                           // 148: pmsclient.UpdateProductSkuReq
	(*UpdateProductSkuData)(nil),                          // 149: pmsclient.UpdateProductSkuData
	(*UpdateProductSkuResp)(nil),                          // 150: pmsclient.UpdateProductSkuResp
	(*QueryProductSkuDetailReq)(nil),                      // 151: pmsclient.QueryProductSkuDetailReq
	(*QueryProductSkuDetailResp)(nil),                     // 152: pmsclient.QueryProductSkuDetailResp
	(*QueryProductSkuListReq)(nil),                        // 153: pmsclient.QueryProductSkuListReq
	(*ProductSkuListData)(nil),                            // 154: pmsclient.ProductSkuListData
	(*QueryProductSkuListResp)(nil),                       // 155: pmsclient.QueryProductSkuListResp
	(*UpdateSkuStockReq)(nil),                             // 156: pmsclient.UpdateSkuStockReq
	(*UpdateSkuStockData)(nil),                            // 157: pmsclient.UpdateSkuStockData
	(*UpdateSkuStockLockResp)(nil),                        // 158: pmsclient.UpdateSkuStockLockResp
	(*AddProductSpecReq)(nil),                             // 159: pmsclient.AddProductSpecReq
	(*AddProductSpecResp)(nil),                            // 160: pmsclient.AddProductSpecResp
	(*DeleteProductSpecReq)(nil),                          // 161: pmsclient.DeleteProductSpecReq
	(*DeleteProductSpecResp)(nil),                         // 162: pmsclient.DeleteProductSpecResp
	(*UpdateProductSpecReq)(nil),                          // 163: pmsclient.UpdateProductSpecReq
	(*UpdateProductSpecResp)(nil),                         // 164: pmsclient.UpdateProductSpecResp
	(*UpdateProductSpecStatusReq)(nil),                    // 165: pmsclient.UpdateProductSpecStatusReq
	(*UpdateProductSpecStatusResp)(nil),                   // 166: pmsclient.UpdateProductSpecStatusResp
	(*QueryProductSpecDetailReq)(nil),                     // 167: pmsclient.QueryProductSpecDetailReq
	(*QueryProductSpecDetailResp)(nil),                    // 168: pmsclient.QueryProductSpecDetailResp
	(*QueryProductSpecListReq)(nil),                       // 169: pmsclient.QueryProductSpecListReq
	(*ProductSpecListData)(nil),                           // 170: pmsclient.ProductSpecListData
	(*QueryProductSpecListResp)(nil),                      // 171: pmsclient.QueryProductSpecListResp
	(*AddProductSpecValueReq)(nil),                        // 172: pmsclient.AddProductSpecValueReq
	(*AddProductSpecValueResp)(nil),                       // 173: pmsclient.AddProductSpecValueResp
	(*DeleteProductSpecValueReq)(nil),                     // 174: pmsclient.DeleteProductSpecValueReq
	(*DeleteProductSpecValueResp)(nil),                    // 175: pmsclient.DeleteProductSpecValueResp
	(*UpdateProductSpecValueReq)(nil),                     // 176: pmsclient.UpdateProductSpecValueReq
	(*UpdateProductSpecValueResp)(nil),                    // 177: pmsclient.UpdateProductSpecValueResp
	(*UpdateProductSpecValueStatusReq)(nil),               // 178: pmsclient.UpdateProductSpecValueStatusReq
	(*UpdateProductSpecValueStatusResp)(nil),              // 179: pmsclient.UpdateProductSpecValueStatusResp
	(*QueryProductSpecValueDetailReq)(nil),                // 180: pmsclient.QueryProductSpecValueDetailReq
	(*QueryProductSpecValueDetailResp)(nil),               // 181: pmsclient.QueryProductSpecValueDetailResp
	(*QueryProductSpecValueListReq)(nil),                  // 182: pmsclient.QueryProductSpecValueListReq
	(*ProductSpecValueListData)(nil),                      // 183: pmsclient.ProductSpecValueListData
	(*QueryProductSpecValueListResp)(nil),                 // 184: pmsclient.QueryProductSpecValueListResp
	(*MemberPriceList)(nil),                               // 185: pmsclient.MemberPriceList
	(*ProductAttributeValueList)(nil),                     // 186: pmsclient.ProductAttributeValueList
	(*ProductFullReductionList)(nil),                      // 187: pmsclient.ProductFullReductionList
	(*ProductLadderList)(nil),                             // 188: pmsclient.ProductLadderList
	(*SkuStockList)(nil),                                  // 189: pmsclient.SkuStockList
	(*ProductSpuReq)(nil),                                 // 190: pmsclient.ProductSpuReq
	(*ProductSpuResp)(nil),                                // 191: pmsclient.ProductSpuResp
	(*DeleteProductSpuReq)(nil),                           // 192: pmsclient.DeleteProductSpuReq
	(*DeleteProductSpuResp)(nil),                          // 193: pmsclient.DeleteProductSpuResp
	(*UpdateProductSpuStatusReq)(nil),                     // 194: pmsclient.UpdateProductSpuStatusReq
	(*UpdateProductSpuStatusResp)(nil),                    // 195: pmsclient.UpdateProductSpuStatusResp
	(*QueryProductSpuDetailReq)(nil),                      // 196: pmsclient.QueryProductSpuDetailReq
	(*BrandData)(nil),                                     // 197: pmsclient.BrandData
	(*ProductAttributeDataList)(nil),                      // 198: pmsclient.ProductAttributeDataList
	(*ProductAttributeValueData)(nil),                     // 199: pmsclient.ProductAttributeValueData
	(*SkuStockData)(nil),                                  // 200: pmsclient.SkuStockData
	(*ProductLadderData)(nil),                             // 201: pmsclient.ProductLadderData
	(*ProductFullReductionData)(nil),                      // 202: pmsclient.ProductFullReductionData
	(*MemberPriceListData)(nil),                           // 203: pmsclient.MemberPriceListData
	(*QueryProductSpuDetailResp)(nil),                     // 204: pmsclient.QueryProductSpuDetailResp
	(*QueryProductSpuListReq)(nil),                        // 205: pmsclient.QueryProductSpuListReq
	(*ProductSpuListData)(nil),                            // 206: pmsclient.ProductSpuListData
	(*QueryProductSpuListResp)(nil),                       // 207: pmsclient.QueryProductSpuListResp
	(*UpdateProductSortReq)(nil),                          // 208: pmsclient.UpdateProductSortReq
	(*QueryProductSpuByIdsReq)(nil),                       // 209: pmsclient.QueryProductSpuByIdsReq
	(*AddProductVertifyRecordReq)(nil),                    // 210: pmsclient.AddProductVertifyRecordReq
	(*AddProductVertifyRecordResp)(nil),                   // 211: pmsclient.AddProductVertifyRecordResp
	(*QueryProductVertifyRecordDetailReq)(nil),            // 212: pmsclient.QueryProductVertifyRecordDetailReq
	(*QueryProductVertifyRecordDetailResp)(nil),           // 213: pmsclient.QueryProductVertifyRecordDetailResp
	(*QueryProductVertifyRecordListReq)(nil),              // 214: pmsclient.QueryProductVertifyRecordListReq
	(*ProductVertifyRecordListData)(nil),                  // 215: pmsclient.ProductVertifyRecordListData
	(*QueryProductVertifyRecordListResp)(nil),             // 216: pmsclient.QueryProductVertifyRecordListResp
}
var file_rpc_pms_pms_proto_depIdxs = []int32{
	11,  // 0: pmsclient.QueryProductAttributeListResp.list:type_name -> pmsclient.ProductAttributeListData
	24,  // 1: pmsclient.QueryProductAttributeGroupListResp.list:type_name -> pmsclient.ProductAttributeGroupListData
	37,  // 2: pmsclient.QueryProductAttributeValueListResp.list:type_name -> pmsclient.ProductAttributeValueListData
	50,  // 3: pmsclient.QueryProductBrandListResp.list:type_name -> pmsclient.ProductBrandListData
	65,  // 4: pmsclient.QueryProductCategoryListResp.list:type_name -> pmsclient.ProductCategoryListData
	68,  // 5: pmsclient.QueryProductCategoryListTreeData.Children:type_name -> pmsclient.QueryProductCategoryListTreeData
	68,  // 6: pmsclient.QueryProductCategoryListTreeResp.list:type_name -> pmsclient.QueryProductCategoryListTreeData
	73,  // 7: pmsclient.QueryProductCategoryAttributeRelationListResp.list:type_name -> pmsclient.ProductCategoryAttributeRelationListData
	82,  // 8: pmsclient.QueryProductCollectListResp.list:type_name -> pmsclient.ProductCollectListData
	93,  // 9: pmsclient.QueryCommentListResp.list:type_name -> pmsclient.CommentListData
	104, // 10: pmsclient.QueryCommentReplayListResp.list:type_name -> pmsclient.CommentReplayListData
	115, // 11: pmsclient.QueryFeightTemplateListResp.list:type_name -> pmsclient.FeightTemplateListData
	122, // 12: pmsclient.QueryProductFullReductionListResp.list:type_name -> pmsclient.ProductFullReductionListData
	133, // 13: pmsclient.QueryProductLadderListResp.list:type_name -> pmsclient.ProductLadderListData
	142, // 14: pmsclient.QueryProductOperateLogListResp.list:type_name -> pmsclient.ProductOperateLogListData
	149, // 15: pmsclient.UpdateProductSkuReq.data:type_name -> pmsclient.UpdateProductSkuData
	154, // 16: pmsclient.QueryProductSkuListResp.list:type_name -> pmsclient.ProductSkuListData
	157, // 17: pmsclient.UpdateSkuStockReq.data:type_name -> pmsclient.UpdateSkuStockData
	170, // 18: pmsclient.QueryProductSpecListResp.list:type_name -> pmsclient.ProductSpecListData
	183, // 19: pmsclient.QueryProductSpecValueListResp.list:type_name -> pmsclient.ProductSpecValueListData
	185, // 20: pmsclient.ProductSpuReq.MemberPriceList:type_name -> pmsclient.MemberPriceList
	186, // 21: pmsclient.ProductSpuReq.ProductAttributeValueList:type_name -> pmsclient.ProductAttributeValueList
	187, // 22: pmsclient.ProductSpuReq.ProductFullReductionList:type_name -> pmsclient.ProductFullReductionList
	188, // 23: pmsclient.ProductSpuReq.ProductLadderList:type_name -> pmsclient.ProductLadderList
	189, // 24: pmsclient.ProductSpuReq.SkuStockList:type_name -> pmsclient.SkuStockList
	206, // 25: pmsclient.QueryProductSpuDetailResp.data:type_name -> pmsclient.ProductSpuListData
	197, // 26: pmsclient.QueryProductSpuDetailResp.Brand:type_name -> pmsclient.BrandData
	198, // 27: pmsclient.QueryProductSpuDetailResp.ProductAttributeList:type_name -> pmsclient.ProductAttributeDataList
	199, // 28: pmsclient.QueryProductSpuDetailResp.ProductAttributeValueList:type_name -> pmsclient.ProductAttributeValueData
	200, // 29: pmsclient.QueryProductSpuDetailResp.SkuStockList:type_name -> pmsclient.SkuStockData
	201, // 30: pmsclient.QueryProductSpuDetailResp.ProductLadderList:type_name -> pmsclient.ProductLadderData
	202, // 31: pmsclient.QueryProductSpuDetailResp.ProductFullReductionList:type_name -> pmsclient.ProductFullReductionData
	203, // 32: pmsclient.QueryProductSpuDetailResp.MemberPriceList:type_name -> pmsclient.MemberPriceListData
	206, // 33: pmsclient.QueryProductSpuListResp.list:type_name -> pmsclient.ProductSpuListData
	215, // 34: pmsclient.QueryProductVertifyRecordListResp.list:type_name -> pmsclient.ProductVertifyRecordListData
	0,   // 35: pmsclient.ProductAttributeService.AddProductAttribute:input_type -> pmsclient.AddProductAttributeReq
	2,   // 36: pmsclient.ProductAttributeService.DeleteProductAttribute:input_type -> pmsclient.DeleteProductAttributeReq
	4,   // 37: pmsclient.ProductAttributeService.UpdateProductAttribute:input_type -> pmsclient.UpdateProductAttributeReq
	6,   // 38: pmsclient.ProductAttributeService.UpdateProductAttributeStatus:input_type -> pmsclient.UpdateProductAttributeStatusReq
	8,   // 39: pmsclient.ProductAttributeService.QueryProductAttributeDetail:input_type -> pmsclient.QueryProductAttributeDetailReq
	10,  // 40: pmsclient.ProductAttributeService.QueryProductAttributeList:input_type -> pmsclient.QueryProductAttributeListReq
	13,  // 41: pmsclient.ProductAttributeGroupService.AddProductAttributeGroup:input_type -> pmsclient.AddProductAttributeGroupReq
	15,  // 42: pmsclient.ProductAttributeGroupService.DeleteProductAttributeGroup:input_type -> pmsclient.DeleteProductAttributeGroupReq
	17,  // 43: pmsclient.ProductAttributeGroupService.UpdateProductAttributeGroup:input_type -> pmsclient.UpdateProductAttributeGroupReq
	19,  // 44: pmsclient.ProductAttributeGroupService.UpdateProductAttributeGroupStatus:input_type -> pmsclient.UpdateProductAttributeGroupStatusReq
	21,  // 45: pmsclient.ProductAttributeGroupService.QueryProductAttributeGroupDetail:input_type -> pmsclient.QueryProductAttributeGroupDetailReq
	23,  // 46: pmsclient.ProductAttributeGroupService.QueryProductAttributeGroupList:input_type -> pmsclient.QueryProductAttributeGroupListReq
	26,  // 47: pmsclient.ProductAttributeValueService.AddProductAttributeValue:input_type -> pmsclient.AddProductAttributeValueReq
	28,  // 48: pmsclient.ProductAttributeValueService.DeleteProductAttributeValue:input_type -> pmsclient.DeleteProductAttributeValueReq
	30,  // 49: pmsclient.ProductAttributeValueService.UpdateProductAttributeValue:input_type -> pmsclient.UpdateProductAttributeValueReq
	32,  // 50: pmsclient.ProductAttributeValueService.UpdateProductAttributeValueStatus:input_type -> pmsclient.UpdateProductAttributeValueStatusReq
	34,  // 51: pmsclient.ProductAttributeValueService.QueryProductAttributeValueDetail:input_type -> pmsclient.QueryProductAttributeValueDetailReq
	36,  // 52: pmsclient.ProductAttributeValueService.QueryProductAttributeValueList:input_type -> pmsclient.QueryProductAttributeValueListReq
	39,  // 53: pmsclient.ProductBrandService.AddProductBrand:input_type -> pmsclient.AddProductBrandReq
	41,  // 54: pmsclient.ProductBrandService.DeleteProductBrand:input_type -> pmsclient.DeleteProductBrandReq
	43,  // 55: pmsclient.ProductBrandService.UpdateProductBrand:input_type -> pmsclient.UpdateProductBrandReq
	45,  // 56: pmsclient.ProductBrandService.UpdateProductBrandStatus:input_type -> pmsclient.UpdateProductBrandStatusReq
	47,  // 57: pmsclient.ProductBrandService.QueryProductBrandDetail:input_type -> pmsclient.QueryProductBrandDetailReq
	49,  // 58: pmsclient.ProductBrandService.QueryProductBrandList:input_type -> pmsclient.QueryProductBrandListReq
	52,  // 59: pmsclient.ProductBrandService.QueryBrandListByIds:input_type -> pmsclient.QueryBrandListByIdsReq
	45,  // 60: pmsclient.ProductBrandService.UpdateBrandRecommendStatus:input_type -> pmsclient.UpdateProductBrandStatusReq
	53,  // 61: pmsclient.ProductBrandService.UpdateBrandSort:input_type -> pmsclient.UpdateProductBrandSortReq
	54,  // 62: pmsclient.ProductCategoryService.AddProductCategory:input_type -> pmsclient.AddProductCategoryReq
	56,  // 63: pmsclient.ProductCategoryService.DeleteProductCategory:input_type -> pmsclient.DeleteProductCategoryReq
	58,  // 64: pmsclient.ProductCategoryService.UpdateProductCategory:input_type -> pmsclient.UpdateProductCategoryReq
	60,  // 65: pmsclient.ProductCategoryService.UpdateCategoryNavStatus:input_type -> pmsclient.UpdateProductCategoryStatusReq
	60,  // 66: pmsclient.ProductCategoryService.UpdateProductCategoryStatus:input_type -> pmsclient.UpdateProductCategoryStatusReq
	62,  // 67: pmsclient.ProductCategoryService.QueryProductCategoryDetail:input_type -> pmsclient.QueryProductCategoryDetailReq
	64,  // 68: pmsclient.ProductCategoryService.QueryProductCategoryList:input_type -> pmsclient.QueryProductCategoryListReq
	67,  // 69: pmsclient.ProductCategoryService.QueryProductCategoryTreeList:input_type -> pmsclient.QueryProductCategoryTreeListReq
	70,  // 70: pmsclient.ProductCategoryAttributeRelationService.AddProductCategoryAttributeRelation:input_type -> pmsclient.AddProductCategoryAttributeRelationReq
	72,  // 71: pmsclient.ProductCategoryAttributeRelationService.QueryProductCategoryAttributeRelationList:input_type -> pmsclient.QueryProductCategoryAttributeRelationListReq
	75,  // 72: pmsclient.ProductCollectService.AddProductCollect:input_type -> pmsclient.AddProductCollectReq
	77,  // 73: pmsclient.ProductCollectService.DeleteProductCollect:input_type -> pmsclient.DeleteProductCollectReq
	79,  // 74: pmsclient.ProductCollectService.QueryProductCollectDetail:input_type -> pmsclient.QueryProductCollectDetailReq
	81,  // 75: pmsclient.ProductCollectService.QueryProductCollectList:input_type -> pmsclient.QueryProductCollectListReq
	84,  // 76: pmsclient.CommentService.AddComment:input_type -> pmsclient.AddCommentReq
	86,  // 77: pmsclient.CommentService.DeleteComment:input_type -> pmsclient.DeleteCommentReq
	88,  // 78: pmsclient.CommentService.UpdateComment:input_type -> pmsclient.UpdateCommentReq
	90,  // 79: pmsclient.CommentService.QueryCommentDetail:input_type -> pmsclient.QueryCommentDetailReq
	92,  // 80: pmsclient.CommentService.QueryCommentList:input_type -> pmsclient.QueryCommentListReq
	95,  // 81: pmsclient.CommentReplayService.AddCommentReplay:input_type -> pmsclient.AddCommentReplayReq
	97,  // 82: pmsclient.CommentReplayService.DeleteCommentReplay:input_type -> pmsclient.DeleteCommentReplayReq
	99,  // 83: pmsclient.CommentReplayService.UpdateCommentReplay:input_type -> pmsclient.UpdateCommentReplayReq
	101, // 84: pmsclient.CommentReplayService.QueryCommentReplayDetail:input_type -> pmsclient.QueryCommentReplayDetailReq
	103, // 85: pmsclient.CommentReplayService.QueryCommentReplayList:input_type -> pmsclient.QueryCommentReplayListReq
	106, // 86: pmsclient.FeightTemplateService.AddFeightTemplate:input_type -> pmsclient.AddFeightTemplateReq
	108, // 87: pmsclient.FeightTemplateService.DeleteFeightTemplate:input_type -> pmsclient.DeleteFeightTemplateReq
	110, // 88: pmsclient.FeightTemplateService.UpdateFeightTemplate:input_type -> pmsclient.UpdateFeightTemplateReq
	112, // 89: pmsclient.FeightTemplateService.QueryFeightTemplateDetail:input_type -> pmsclient.QueryFeightTemplateDetailReq
	114, // 90: pmsclient.FeightTemplateService.QueryFeightTemplateList:input_type -> pmsclient.QueryFeightTemplateListReq
	117, // 91: pmsclient.ProductFullReductionService.AddProductFullReduction:input_type -> pmsclient.AddProductFullReductionReq
	119, // 92: pmsclient.ProductFullReductionService.DeleteProductFullReduction:input_type -> pmsclient.DeleteProductFullReductionReq
	121, // 93: pmsclient.ProductFullReductionService.QueryProductFullReductionList:input_type -> pmsclient.QueryProductFullReductionListReq
	124, // 94: pmsclient.ProductLadderService.AddProductLadder:input_type -> pmsclient.AddProductLadderReq
	126, // 95: pmsclient.ProductLadderService.DeleteProductLadder:input_type -> pmsclient.DeleteProductLadderReq
	128, // 96: pmsclient.ProductLadderService.UpdateProductLadder:input_type -> pmsclient.UpdateProductLadderReq
	130, // 97: pmsclient.ProductLadderService.QueryProductLadderDetail:input_type -> pmsclient.QueryProductLadderDetailReq
	132, // 98: pmsclient.ProductLadderService.QueryProductLadderList:input_type -> pmsclient.QueryProductLadderListReq
	135, // 99: pmsclient.ProductOperateLogService.AddProductOperateLog:input_type -> pmsclient.AddProductOperateLogReq
	137, // 100: pmsclient.ProductOperateLogService.DeleteProductOperateLog:input_type -> pmsclient.DeleteProductOperateLogReq
	139, // 101: pmsclient.ProductOperateLogService.QueryProductOperateLogDetail:input_type -> pmsclient.QueryProductOperateLogDetailReq
	141, // 102: pmsclient.ProductOperateLogService.QueryProductOperateLogList:input_type -> pmsclient.QueryProductOperateLogListReq
	144, // 103: pmsclient.ProductSkuService.AddProductSku:input_type -> pmsclient.AddProductSkuReq
	146, // 104: pmsclient.ProductSkuService.DeleteProductSku:input_type -> pmsclient.DeleteProductSkuReq
	148, // 105: pmsclient.ProductSkuService.UpdateProductSku:input_type -> pmsclient.UpdateProductSkuReq
	151, // 106: pmsclient.ProductSkuService.QueryProductSkuDetail:input_type -> pmsclient.QueryProductSkuDetailReq
	153, // 107: pmsclient.ProductSkuService.QueryProductSkuList:input_type -> pmsclient.QueryProductSkuListReq
	156, // 108: pmsclient.ProductSkuService.ReleaseSkuStockLock:input_type -> pmsclient.UpdateSkuStockReq
	156, // 109: pmsclient.ProductSkuService.LockSkuStockLock:input_type -> pmsclient.UpdateSkuStockReq
	159, // 110: pmsclient.ProductSpecService.AddProductSpec:input_type -> pmsclient.AddProductSpecReq
	161, // 111: pmsclient.ProductSpecService.DeleteProductSpec:input_type -> pmsclient.DeleteProductSpecReq
	163, // 112: pmsclient.ProductSpecService.UpdateProductSpec:input_type -> pmsclient.UpdateProductSpecReq
	165, // 113: pmsclient.ProductSpecService.UpdateProductSpecStatus:input_type -> pmsclient.UpdateProductSpecStatusReq
	167, // 114: pmsclient.ProductSpecService.QueryProductSpecDetail:input_type -> pmsclient.QueryProductSpecDetailReq
	169, // 115: pmsclient.ProductSpecService.QueryProductSpecList:input_type -> pmsclient.QueryProductSpecListReq
	172, // 116: pmsclient.ProductSpecValueService.AddProductSpecValue:input_type -> pmsclient.AddProductSpecValueReq
	174, // 117: pmsclient.ProductSpecValueService.DeleteProductSpecValue:input_type -> pmsclient.DeleteProductSpecValueReq
	176, // 118: pmsclient.ProductSpecValueService.UpdateProductSpecValue:input_type -> pmsclient.UpdateProductSpecValueReq
	178, // 119: pmsclient.ProductSpecValueService.UpdateProductSpecValueStatus:input_type -> pmsclient.UpdateProductSpecValueStatusReq
	180, // 120: pmsclient.ProductSpecValueService.QueryProductSpecValueDetail:input_type -> pmsclient.QueryProductSpecValueDetailReq
	182, // 121: pmsclient.ProductSpecValueService.QueryProductSpecValueList:input_type -> pmsclient.QueryProductSpecValueListReq
	190, // 122: pmsclient.ProductSpuService.AddProductSpu:input_type -> pmsclient.ProductSpuReq
	192, // 123: pmsclient.ProductSpuService.DeleteProductSpu:input_type -> pmsclient.DeleteProductSpuReq
	190, // 124: pmsclient.ProductSpuService.UpdateProductSpu:input_type -> pmsclient.ProductSpuReq
	196, // 125: pmsclient.ProductSpuService.QueryProductSpuDetail:input_type -> pmsclient.QueryProductSpuDetailReq
	205, // 126: pmsclient.ProductSpuService.QueryProductSpuList:input_type -> pmsclient.QueryProductSpuListReq
	194, // 127: pmsclient.ProductSpuService.UpdateVerifyStatus:input_type -> pmsclient.UpdateProductSpuStatusReq
	194, // 128: pmsclient.ProductSpuService.UpdatePublishStatus:input_type -> pmsclient.UpdateProductSpuStatusReq
	194, // 129: pmsclient.ProductSpuService.UpdateRecommendStatus:input_type -> pmsclient.UpdateProductSpuStatusReq
	194, // 130: pmsclient.ProductSpuService.UpdateNewStatus:input_type -> pmsclient.UpdateProductSpuStatusReq
	194, // 131: pmsclient.ProductSpuService.UpdateDeleteStatus:input_type -> pmsclient.UpdateProductSpuStatusReq
	208, // 132: pmsclient.ProductSpuService.UpdateNewStatusSort:input_type -> pmsclient.UpdateProductSortReq
	208, // 133: pmsclient.ProductSpuService.UpdateRecommendStatusSort:input_type -> pmsclient.UpdateProductSortReq
	209, // 134: pmsclient.ProductSpuService.QueryProductSpuListByIds:input_type -> pmsclient.QueryProductSpuByIdsReq
	210, // 135: pmsclient.ProductVertifyRecordService.AddProductVertifyRecord:input_type -> pmsclient.AddProductVertifyRecordReq
	212, // 136: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordDetail:input_type -> pmsclient.QueryProductVertifyRecordDetailReq
	214, // 137: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordList:input_type -> pmsclient.QueryProductVertifyRecordListReq
	1,   // 138: pmsclient.ProductAttributeService.AddProductAttribute:output_type -> pmsclient.AddProductAttributeResp
	3,   // 139: pmsclient.ProductAttributeService.DeleteProductAttribute:output_type -> pmsclient.DeleteProductAttributeResp
	5,   // 140: pmsclient.ProductAttributeService.UpdateProductAttribute:output_type -> pmsclient.UpdateProductAttributeResp
	7,   // 141: pmsclient.ProductAttributeService.UpdateProductAttributeStatus:output_type -> pmsclient.UpdateProductAttributeStatusResp
	9,   // 142: pmsclient.ProductAttributeService.QueryProductAttributeDetail:output_type -> pmsclient.QueryProductAttributeDetailResp
	12,  // 143: pmsclient.ProductAttributeService.QueryProductAttributeList:output_type -> pmsclient.QueryProductAttributeListResp
	14,  // 144: pmsclient.ProductAttributeGroupService.AddProductAttributeGroup:output_type -> pmsclient.AddProductAttributeGroupResp
	16,  // 145: pmsclient.ProductAttributeGroupService.DeleteProductAttributeGroup:output_type -> pmsclient.DeleteProductAttributeGroupResp
	18,  // 146: pmsclient.ProductAttributeGroupService.UpdateProductAttributeGroup:output_type -> pmsclient.UpdateProductAttributeGroupResp
	20,  // 147: pmsclient.ProductAttributeGroupService.UpdateProductAttributeGroupStatus:output_type -> pmsclient.UpdateProductAttributeGroupStatusResp
	22,  // 148: pmsclient.ProductAttributeGroupService.QueryProductAttributeGroupDetail:output_type -> pmsclient.QueryProductAttributeGroupDetailResp
	25,  // 149: pmsclient.ProductAttributeGroupService.QueryProductAttributeGroupList:output_type -> pmsclient.QueryProductAttributeGroupListResp
	27,  // 150: pmsclient.ProductAttributeValueService.AddProductAttributeValue:output_type -> pmsclient.AddProductAttributeValueResp
	29,  // 151: pmsclient.ProductAttributeValueService.DeleteProductAttributeValue:output_type -> pmsclient.DeleteProductAttributeValueResp
	31,  // 152: pmsclient.ProductAttributeValueService.UpdateProductAttributeValue:output_type -> pmsclient.UpdateProductAttributeValueResp
	33,  // 153: pmsclient.ProductAttributeValueService.UpdateProductAttributeValueStatus:output_type -> pmsclient.UpdateProductAttributeValueStatusResp
	35,  // 154: pmsclient.ProductAttributeValueService.QueryProductAttributeValueDetail:output_type -> pmsclient.QueryProductAttributeValueDetailResp
	38,  // 155: pmsclient.ProductAttributeValueService.QueryProductAttributeValueList:output_type -> pmsclient.QueryProductAttributeValueListResp
	40,  // 156: pmsclient.ProductBrandService.AddProductBrand:output_type -> pmsclient.AddProductBrandResp
	42,  // 157: pmsclient.ProductBrandService.DeleteProductBrand:output_type -> pmsclient.DeleteProductBrandResp
	44,  // 158: pmsclient.ProductBrandService.UpdateProductBrand:output_type -> pmsclient.UpdateProductBrandResp
	46,  // 159: pmsclient.ProductBrandService.UpdateProductBrandStatus:output_type -> pmsclient.UpdateProductBrandStatusResp
	48,  // 160: pmsclient.ProductBrandService.QueryProductBrandDetail:output_type -> pmsclient.QueryProductBrandDetailResp
	51,  // 161: pmsclient.ProductBrandService.QueryProductBrandList:output_type -> pmsclient.QueryProductBrandListResp
	51,  // 162: pmsclient.ProductBrandService.QueryBrandListByIds:output_type -> pmsclient.QueryProductBrandListResp
	46,  // 163: pmsclient.ProductBrandService.UpdateBrandRecommendStatus:output_type -> pmsclient.UpdateProductBrandStatusResp
	46,  // 164: pmsclient.ProductBrandService.UpdateBrandSort:output_type -> pmsclient.UpdateProductBrandStatusResp
	55,  // 165: pmsclient.ProductCategoryService.AddProductCategory:output_type -> pmsclient.AddProductCategoryResp
	57,  // 166: pmsclient.ProductCategoryService.DeleteProductCategory:output_type -> pmsclient.DeleteProductCategoryResp
	59,  // 167: pmsclient.ProductCategoryService.UpdateProductCategory:output_type -> pmsclient.UpdateProductCategoryResp
	61,  // 168: pmsclient.ProductCategoryService.UpdateCategoryNavStatus:output_type -> pmsclient.UpdateProductCategoryStatusResp
	61,  // 169: pmsclient.ProductCategoryService.UpdateProductCategoryStatus:output_type -> pmsclient.UpdateProductCategoryStatusResp
	63,  // 170: pmsclient.ProductCategoryService.QueryProductCategoryDetail:output_type -> pmsclient.QueryProductCategoryDetailResp
	66,  // 171: pmsclient.ProductCategoryService.QueryProductCategoryList:output_type -> pmsclient.QueryProductCategoryListResp
	69,  // 172: pmsclient.ProductCategoryService.QueryProductCategoryTreeList:output_type -> pmsclient.QueryProductCategoryListTreeResp
	71,  // 173: pmsclient.ProductCategoryAttributeRelationService.AddProductCategoryAttributeRelation:output_type -> pmsclient.AddProductCategoryAttributeRelationResp
	74,  // 174: pmsclient.ProductCategoryAttributeRelationService.QueryProductCategoryAttributeRelationList:output_type -> pmsclient.QueryProductCategoryAttributeRelationListResp
	76,  // 175: pmsclient.ProductCollectService.AddProductCollect:output_type -> pmsclient.AddProductCollectResp
	78,  // 176: pmsclient.ProductCollectService.DeleteProductCollect:output_type -> pmsclient.DeleteProductCollectResp
	80,  // 177: pmsclient.ProductCollectService.QueryProductCollectDetail:output_type -> pmsclient.QueryProductCollectDetailResp
	83,  // 178: pmsclient.ProductCollectService.QueryProductCollectList:output_type -> pmsclient.QueryProductCollectListResp
	85,  // 179: pmsclient.CommentService.AddComment:output_type -> pmsclient.AddCommentResp
	87,  // 180: pmsclient.CommentService.DeleteComment:output_type -> pmsclient.DeleteCommentResp
	89,  // 181: pmsclient.CommentService.UpdateComment:output_type -> pmsclient.UpdateCommentResp
	91,  // 182: pmsclient.CommentService.QueryCommentDetail:output_type -> pmsclient.QueryCommentDetailResp
	94,  // 183: pmsclient.CommentService.QueryCommentList:output_type -> pmsclient.QueryCommentListResp
	96,  // 184: pmsclient.CommentReplayService.AddCommentReplay:output_type -> pmsclient.AddCommentReplayResp
	98,  // 185: pmsclient.CommentReplayService.DeleteCommentReplay:output_type -> pmsclient.DeleteCommentReplayResp
	100, // 186: pmsclient.CommentReplayService.UpdateCommentReplay:output_type -> pmsclient.UpdateCommentReplayResp
	102, // 187: pmsclient.CommentReplayService.QueryCommentReplayDetail:output_type -> pmsclient.QueryCommentReplayDetailResp
	105, // 188: pmsclient.CommentReplayService.QueryCommentReplayList:output_type -> pmsclient.QueryCommentReplayListResp
	107, // 189: pmsclient.FeightTemplateService.AddFeightTemplate:output_type -> pmsclient.AddFeightTemplateResp
	109, // 190: pmsclient.FeightTemplateService.DeleteFeightTemplate:output_type -> pmsclient.DeleteFeightTemplateResp
	111, // 191: pmsclient.FeightTemplateService.UpdateFeightTemplate:output_type -> pmsclient.UpdateFeightTemplateResp
	113, // 192: pmsclient.FeightTemplateService.QueryFeightTemplateDetail:output_type -> pmsclient.QueryFeightTemplateDetailResp
	116, // 193: pmsclient.FeightTemplateService.QueryFeightTemplateList:output_type -> pmsclient.QueryFeightTemplateListResp
	118, // 194: pmsclient.ProductFullReductionService.AddProductFullReduction:output_type -> pmsclient.AddProductFullReductionResp
	120, // 195: pmsclient.ProductFullReductionService.DeleteProductFullReduction:output_type -> pmsclient.DeleteProductFullReductionResp
	123, // 196: pmsclient.ProductFullReductionService.QueryProductFullReductionList:output_type -> pmsclient.QueryProductFullReductionListResp
	125, // 197: pmsclient.ProductLadderService.AddProductLadder:output_type -> pmsclient.AddProductLadderResp
	127, // 198: pmsclient.ProductLadderService.DeleteProductLadder:output_type -> pmsclient.DeleteProductLadderResp
	129, // 199: pmsclient.ProductLadderService.UpdateProductLadder:output_type -> pmsclient.UpdateProductLadderResp
	131, // 200: pmsclient.ProductLadderService.QueryProductLadderDetail:output_type -> pmsclient.QueryProductLadderDetailResp
	134, // 201: pmsclient.ProductLadderService.QueryProductLadderList:output_type -> pmsclient.QueryProductLadderListResp
	136, // 202: pmsclient.ProductOperateLogService.AddProductOperateLog:output_type -> pmsclient.AddProductOperateLogResp
	138, // 203: pmsclient.ProductOperateLogService.DeleteProductOperateLog:output_type -> pmsclient.DeleteProductOperateLogResp
	140, // 204: pmsclient.ProductOperateLogService.QueryProductOperateLogDetail:output_type -> pmsclient.QueryProductOperateLogDetailResp
	143, // 205: pmsclient.ProductOperateLogService.QueryProductOperateLogList:output_type -> pmsclient.QueryProductOperateLogListResp
	145, // 206: pmsclient.ProductSkuService.AddProductSku:output_type -> pmsclient.AddProductSkuResp
	147, // 207: pmsclient.ProductSkuService.DeleteProductSku:output_type -> pmsclient.DeleteProductSkuResp
	150, // 208: pmsclient.ProductSkuService.UpdateProductSku:output_type -> pmsclient.UpdateProductSkuResp
	152, // 209: pmsclient.ProductSkuService.QueryProductSkuDetail:output_type -> pmsclient.QueryProductSkuDetailResp
	155, // 210: pmsclient.ProductSkuService.QueryProductSkuList:output_type -> pmsclient.QueryProductSkuListResp
	158, // 211: pmsclient.ProductSkuService.ReleaseSkuStockLock:output_type -> pmsclient.UpdateSkuStockLockResp
	158, // 212: pmsclient.ProductSkuService.LockSkuStockLock:output_type -> pmsclient.UpdateSkuStockLockResp
	160, // 213: pmsclient.ProductSpecService.AddProductSpec:output_type -> pmsclient.AddProductSpecResp
	162, // 214: pmsclient.ProductSpecService.DeleteProductSpec:output_type -> pmsclient.DeleteProductSpecResp
	164, // 215: pmsclient.ProductSpecService.UpdateProductSpec:output_type -> pmsclient.UpdateProductSpecResp
	166, // 216: pmsclient.ProductSpecService.UpdateProductSpecStatus:output_type -> pmsclient.UpdateProductSpecStatusResp
	168, // 217: pmsclient.ProductSpecService.QueryProductSpecDetail:output_type -> pmsclient.QueryProductSpecDetailResp
	171, // 218: pmsclient.ProductSpecService.QueryProductSpecList:output_type -> pmsclient.QueryProductSpecListResp
	173, // 219: pmsclient.ProductSpecValueService.AddProductSpecValue:output_type -> pmsclient.AddProductSpecValueResp
	175, // 220: pmsclient.ProductSpecValueService.DeleteProductSpecValue:output_type -> pmsclient.DeleteProductSpecValueResp
	177, // 221: pmsclient.ProductSpecValueService.UpdateProductSpecValue:output_type -> pmsclient.UpdateProductSpecValueResp
	179, // 222: pmsclient.ProductSpecValueService.UpdateProductSpecValueStatus:output_type -> pmsclient.UpdateProductSpecValueStatusResp
	181, // 223: pmsclient.ProductSpecValueService.QueryProductSpecValueDetail:output_type -> pmsclient.QueryProductSpecValueDetailResp
	184, // 224: pmsclient.ProductSpecValueService.QueryProductSpecValueList:output_type -> pmsclient.QueryProductSpecValueListResp
	191, // 225: pmsclient.ProductSpuService.AddProductSpu:output_type -> pmsclient.ProductSpuResp
	193, // 226: pmsclient.ProductSpuService.DeleteProductSpu:output_type -> pmsclient.DeleteProductSpuResp
	191, // 227: pmsclient.ProductSpuService.UpdateProductSpu:output_type -> pmsclient.ProductSpuResp
	204, // 228: pmsclient.ProductSpuService.QueryProductSpuDetail:output_type -> pmsclient.QueryProductSpuDetailResp
	207, // 229: pmsclient.ProductSpuService.QueryProductSpuList:output_type -> pmsclient.QueryProductSpuListResp
	195, // 230: pmsclient.ProductSpuService.UpdateVerifyStatus:output_type -> pmsclient.UpdateProductSpuStatusResp
	195, // 231: pmsclient.ProductSpuService.UpdatePublishStatus:output_type -> pmsclient.UpdateProductSpuStatusResp
	195, // 232: pmsclient.ProductSpuService.UpdateRecommendStatus:output_type -> pmsclient.UpdateProductSpuStatusResp
	195, // 233: pmsclient.ProductSpuService.UpdateNewStatus:output_type -> pmsclient.UpdateProductSpuStatusResp
	195, // 234: pmsclient.ProductSpuService.UpdateDeleteStatus:output_type -> pmsclient.UpdateProductSpuStatusResp
	195, // 235: pmsclient.ProductSpuService.UpdateNewStatusSort:output_type -> pmsclient.UpdateProductSpuStatusResp
	195, // 236: pmsclient.ProductSpuService.UpdateRecommendStatusSort:output_type -> pmsclient.UpdateProductSpuStatusResp
	207, // 237: pmsclient.ProductSpuService.QueryProductSpuListByIds:output_type -> pmsclient.QueryProductSpuListResp
	211, // 238: pmsclient.ProductVertifyRecordService.AddProductVertifyRecord:output_type -> pmsclient.AddProductVertifyRecordResp
	213, // 239: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordDetail:output_type -> pmsclient.QueryProductVertifyRecordDetailResp
	216, // 240: pmsclient.ProductVertifyRecordService.QueryProductVertifyRecordList:output_type -> pmsclient.QueryProductVertifyRecordListResp
	138, // [138:241] is the sub-list for method output_type
	35,  // [35:138] is the sub-list for method input_type
	35,  // [35:35] is the sub-list for extension type_name
	35,  // [35:35] is the sub-list for extension extendee
	0,   // [0:35] is the sub-list for field type_name
}

func init() { file_rpc_pms_pms_proto_init() }
func file_rpc_pms_pms_proto_init() {
	if File_rpc_pms_pms_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_pms_pms_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   217,
			NumExtensions: 0,
			NumServices:   18,
		},
		GoTypes:           file_rpc_pms_pms_proto_goTypes,
		DependencyIndexes: file_rpc_pms_pms_proto_depIdxs,
		MessageInfos:      file_rpc_pms_pms_proto_msgTypes,
	}.Build()
	File_rpc_pms_pms_proto = out.File
	file_rpc_pms_pms_proto_rawDesc = nil
	file_rpc_pms_pms_proto_goTypes = nil
	file_rpc_pms_pms_proto_depIdxs = nil
}
