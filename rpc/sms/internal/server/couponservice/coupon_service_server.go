// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: sms.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/sms/internal/logic/couponservice"
	"github.com/feihua/zero-admin/rpc/sms/internal/svc"
	"github.com/feihua/zero-admin/rpc/sms/smsclient"
)

type CouponServiceServer struct {
	svcCtx *svc.ServiceContext
	smsclient.UnimplementedCouponServiceServer
}

func NewCouponServiceServer(svcCtx *svc.ServiceContext) *CouponServiceServer {
	return &CouponServiceServer{
		svcCtx: svcCtx,
	}
}

// 添加优惠券
func (s *CouponServiceServer) AddCoupon(ctx context.Context, in *smsclient.AddCouponReq) (*smsclient.AddCouponResp, error) {
	l := couponservicelogic.NewAddCouponLogic(ctx, s.svcCtx)
	return l.AddCoupon(in)
}

// 删除优惠券
func (s *CouponServiceServer) DeleteCoupon(ctx context.Context, in *smsclient.DeleteCouponReq) (*smsclient.DeleteCouponResp, error) {
	l := couponservicelogic.NewDeleteCouponLogic(ctx, s.svcCtx)
	return l.DeleteCoupon(in)
}

// 更新优惠券
func (s *CouponServiceServer) UpdateCoupon(ctx context.Context, in *smsclient.UpdateCouponReq) (*smsclient.UpdateCouponResp, error) {
	l := couponservicelogic.NewUpdateCouponLogic(ctx, s.svcCtx)
	return l.UpdateCoupon(in)
}

// 更新优惠券状态
func (s *CouponServiceServer) UpdateCouponStatus(ctx context.Context, in *smsclient.UpdateCouponStatusReq) (*smsclient.UpdateCouponStatusResp, error) {
	l := couponservicelogic.NewUpdateCouponStatusLogic(ctx, s.svcCtx)
	return l.UpdateCouponStatus(in)
}

// 查询优惠券详情
func (s *CouponServiceServer) QueryCouponDetail(ctx context.Context, in *smsclient.QueryCouponDetailReq) (*smsclient.QueryCouponDetailResp, error) {
	l := couponservicelogic.NewQueryCouponDetailLogic(ctx, s.svcCtx)
	return l.QueryCouponDetail(in)
}

// 查询优惠券列表
func (s *CouponServiceServer) QueryCouponList(ctx context.Context, in *smsclient.QueryCouponListReq) (*smsclient.QueryCouponListResp, error) {
	l := couponservicelogic.NewQueryCouponListLogic(ctx, s.svcCtx)
	return l.QueryCouponList(in)
}

// 根据商品Id和分类id查询可用的优惠券
func (s *CouponServiceServer) QueryCouponByScopeId(ctx context.Context, in *smsclient.QueryCouponByScopeIdReq) (*smsclient.QueryCouponByScopeIdResp, error) {
	l := couponservicelogic.NewQueryCouponByScopeIdLogic(ctx, s.svcCtx)
	return l.QueryCouponByScopeId(in)
}

// 根据优惠券类型的code查询优惠券
func (s *CouponServiceServer) QueryCouponByCode(ctx context.Context, in *smsclient.QueryCouponByCodeReq) (*smsclient.QueryCouponByCodeResp, error) {
	l := couponservicelogic.NewQueryCouponByCodeLogic(ctx, s.svcCtx)
	return l.QueryCouponByCode(in)
}
