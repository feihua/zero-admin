// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: rpc/sms/sms.proto

package smsclient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加优惠券
type AddCouponReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //优惠券ID
	TypeId      int64   `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`             //优惠券类型ID
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                //优惠券名称
	Code        string  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                //优惠券码
	Amount      float32 `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`                          //优惠金额/折扣率
	MinAmount   float32 `protobuf:"fixed32,6,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`   //最低使用金额
	StartTime   string  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     //生效时间
	EndTime     string  `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           //失效时间
	TotalCount  int32   `protobuf:"varint,9,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` //发放总量
	PerLimit    int32   `protobuf:"varint,10,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`      //每人限领数量
	Status      int32   `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`                          //状态：0-未开始，1-进行中，2-已结束，3-已取消
	IsEnabled   int32   `protobuf:"varint,12,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`   //是否启用
	Description string  `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`                 //使用说明
	CreateBy    int64   `protobuf:"varint,14,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`      //创建人ID
}

func (x *AddCouponReq) Reset() {
	*x = AddCouponReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponReq) ProtoMessage() {}

func (x *AddCouponReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponReq.ProtoReflect.Descriptor instead.
func (*AddCouponReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{0}
}

func (x *AddCouponReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddCouponReq) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *AddCouponReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCouponReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddCouponReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AddCouponReq) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *AddCouponReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddCouponReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddCouponReq) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AddCouponReq) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *AddCouponReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddCouponReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *AddCouponReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddCouponReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddCouponResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddCouponResp) Reset() {
	*x = AddCouponResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponResp) ProtoMessage() {}

func (x *AddCouponResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponResp.ProtoReflect.Descriptor instead.
func (*AddCouponResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{1}
}

func (x *AddCouponResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除优惠券
type DeleteCouponReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteCouponReq) Reset() {
	*x = DeleteCouponReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponReq) ProtoMessage() {}

func (x *DeleteCouponReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponReq.ProtoReflect.Descriptor instead.
func (*DeleteCouponReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCouponReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteCouponResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteCouponResp) Reset() {
	*x = DeleteCouponResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponResp) ProtoMessage() {}

func (x *DeleteCouponResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponResp.ProtoReflect.Descriptor instead.
func (*DeleteCouponResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteCouponResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优惠券
type UpdateCouponReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             //优惠券ID
	TypeId        int64   `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`                       //优惠券类型ID
	Name          string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                          //优惠券名称
	Code          string  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                          //优惠券码
	Amount        float32 `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`                                    //优惠金额/折扣率
	MinAmount     float32 `protobuf:"fixed32,6,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`             //最低使用金额
	StartTime     string  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`               //生效时间
	EndTime       string  `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                     //失效时间
	TotalCount    int32   `protobuf:"varint,9,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           //发放总量
	ReceivedCount int32   `protobuf:"varint,10,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"` //已领取数量
	UsedCount     int32   `protobuf:"varint,11,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`             //已使用数量
	PerLimit      int32   `protobuf:"varint,12,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`                //每人限领数量
	Status        int32   `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                                    //状态：0-未开始，1-进行中，2-已结束，3-已取消
	IsEnabled     int32   `protobuf:"varint,14,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`             //是否启用
	Description   string  `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`                           //使用说明
	UpdateBy      int64   `protobuf:"varint,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                //更新人ID
}

func (x *UpdateCouponReq) Reset() {
	*x = UpdateCouponReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponReq) ProtoMessage() {}

func (x *UpdateCouponReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponReq.ProtoReflect.Descriptor instead.
func (*UpdateCouponReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCouponReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCouponReq) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *UpdateCouponReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCouponReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateCouponReq) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UpdateCouponReq) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *UpdateCouponReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateCouponReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateCouponReq) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *UpdateCouponReq) GetReceivedCount() int32 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

func (x *UpdateCouponReq) GetUsedCount() int32 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *UpdateCouponReq) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *UpdateCouponReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateCouponReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *UpdateCouponReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCouponReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateCouponResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCouponResp) Reset() {
	*x = UpdateCouponResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponResp) ProtoMessage() {}

func (x *UpdateCouponResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponResp.ProtoReflect.Descriptor instead.
func (*UpdateCouponResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCouponResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优惠券状态
type UpdateCouponStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids      []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                     //优惠券ID
	Status   int32   `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0-未开始，1-进行中，2-已结束，3-已取消
	UpdateBy int64   `protobuf:"varint,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
}

func (x *UpdateCouponStatusReq) Reset() {
	*x = UpdateCouponStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponStatusReq) ProtoMessage() {}

func (x *UpdateCouponStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateCouponStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCouponStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateCouponStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateCouponStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateCouponStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCouponStatusResp) Reset() {
	*x = UpdateCouponStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponStatusResp) ProtoMessage() {}

func (x *UpdateCouponStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateCouponStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCouponStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询优惠券详情
type QueryCouponDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryCouponDetailReq) Reset() {
	*x = QueryCouponDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponDetailReq) ProtoMessage() {}

func (x *QueryCouponDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCouponDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{8}
}

func (x *QueryCouponDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryCouponDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             //优惠券ID
	TypeId        int64   `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`                       //优惠券类型ID
	Name          string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                          //优惠券名称
	Code          string  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                          //优惠券码
	Amount        float32 `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`                                    //优惠金额/折扣率
	MinAmount     float32 `protobuf:"fixed32,6,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`             //最低使用金额
	StartTime     string  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`               //生效时间
	EndTime       string  `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                     //失效时间
	TotalCount    int32   `protobuf:"varint,9,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           //发放总量
	ReceivedCount int32   `protobuf:"varint,10,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"` //已领取数量
	UsedCount     int32   `protobuf:"varint,11,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`             //已使用数量
	PerLimit      int32   `protobuf:"varint,12,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`                //每人限领数量
	Status        int32   `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                                    //状态：0-未开始，1-进行中，2-已结束，3-已取消
	IsEnabled     int32   `protobuf:"varint,14,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`             //是否启用
	Description   string  `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`                           //使用说明
	CreateBy      int64   `protobuf:"varint,16,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                //创建人ID
	CreateTime    string  `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`           //创建时间
	UpdateBy      int64   `protobuf:"varint,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                //更新人ID
	UpdateTime    string  `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`           //更新时间
	IsDeleted     int32   `protobuf:"varint,20,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`             //是否删除
}

func (x *QueryCouponDetailResp) Reset() {
	*x = QueryCouponDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponDetailResp) ProtoMessage() {}

func (x *QueryCouponDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCouponDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{9}
}

func (x *QueryCouponDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCouponDetailResp) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *QueryCouponDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryCouponDetailResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QueryCouponDetailResp) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QueryCouponDetailResp) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *QueryCouponDetailResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryCouponDetailResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryCouponDetailResp) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *QueryCouponDetailResp) GetReceivedCount() int32 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

func (x *QueryCouponDetailResp) GetUsedCount() int32 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *QueryCouponDetailResp) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *QueryCouponDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryCouponDetailResp) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QueryCouponDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryCouponDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryCouponDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryCouponDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryCouponDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QueryCouponDetailResp) GetIsDeleted() int32 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

// 分页查询优惠券列表
type QueryCouponListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId    int64  `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`          //优惠券类型ID
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             //优惠券名称
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                             //优惠券码
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`  //生效时间
	EndTime   string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        //失效时间
	Status    int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                        //状态：0-未开始，1-进行中，2-已结束，3-已取消
	IsEnabled int32  `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"` //是否启用
	PageNum   int32  `protobuf:"varint,8,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       //第几页
	PageSize  int32  `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    //每页的数量
}

func (x *QueryCouponListReq) Reset() {
	*x = QueryCouponListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponListReq) ProtoMessage() {}

func (x *QueryCouponListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponListReq.ProtoReflect.Descriptor instead.
func (*QueryCouponListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{10}
}

func (x *QueryCouponListReq) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *QueryCouponListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryCouponListReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QueryCouponListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryCouponListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryCouponListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryCouponListReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QueryCouponListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCouponListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CouponListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             //优惠券ID
	TypeId        int64   `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`                       //优惠券类型ID
	Name          string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                          //优惠券名称
	Code          string  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                          //优惠券码
	Amount        float32 `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`                                    //优惠金额/折扣率
	MinAmount     float32 `protobuf:"fixed32,6,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`             //最低使用金额
	StartTime     string  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`               //生效时间
	EndTime       string  `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                     //失效时间
	TotalCount    int32   `protobuf:"varint,9,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           //发放总量
	ReceivedCount int32   `protobuf:"varint,10,opt,name=received_count,json=receivedCount,proto3" json:"received_count,omitempty"` //已领取数量
	UsedCount     int32   `protobuf:"varint,11,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`             //已使用数量
	PerLimit      int32   `protobuf:"varint,12,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`                //每人限领数量
	Status        int32   `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                                    //状态：0-未开始，1-进行中，2-已结束，3-已取消
	IsEnabled     int32   `protobuf:"varint,14,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`             //是否启用
	Description   string  `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`                           //使用说明
	CreateBy      int64   `protobuf:"varint,16,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                //创建人ID
	CreateTime    string  `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`           //创建时间
	UpdateBy      int64   `protobuf:"varint,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                //更新人ID
	UpdateTime    string  `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`           //更新时间
}

func (x *CouponListData) Reset() {
	*x = CouponListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponListData) ProtoMessage() {}

func (x *CouponListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponListData.ProtoReflect.Descriptor instead.
func (*CouponListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{11}
}

func (x *CouponListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CouponListData) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CouponListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CouponListData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CouponListData) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CouponListData) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *CouponListData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CouponListData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CouponListData) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *CouponListData) GetReceivedCount() int32 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

func (x *CouponListData) GetUsedCount() int32 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *CouponListData) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *CouponListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CouponListData) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *CouponListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CouponListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *CouponListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CouponListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *CouponListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryCouponListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CouponListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCouponListResp) Reset() {
	*x = QueryCouponListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponListResp) ProtoMessage() {}

func (x *QueryCouponListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponListResp.ProtoReflect.Descriptor instead.
func (*QueryCouponListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{12}
}

func (x *QueryCouponListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCouponListResp) GetList() []*CouponListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryCouponByScopeIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeIds []int64 `protobuf:"varint,1,rep,packed,name=scope_ids,json=scopeIds,proto3" json:"scope_ids,omitempty"`
}

func (x *QueryCouponByScopeIdReq) Reset() {
	*x = QueryCouponByScopeIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponByScopeIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponByScopeIdReq) ProtoMessage() {}

func (x *QueryCouponByScopeIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponByScopeIdReq.ProtoReflect.Descriptor instead.
func (*QueryCouponByScopeIdReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{13}
}

func (x *QueryCouponByScopeIdReq) GetScopeIds() []int64 {
	if x != nil {
		return x.ScopeIds
	}
	return nil
}

type QueryCouponByScopeIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CouponListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCouponByScopeIdResp) Reset() {
	*x = QueryCouponByScopeIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponByScopeIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponByScopeIdResp) ProtoMessage() {}

func (x *QueryCouponByScopeIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponByScopeIdResp.ProtoReflect.Descriptor instead.
func (*QueryCouponByScopeIdResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{14}
}

func (x *QueryCouponByScopeIdResp) GetList() []*CouponListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryCouponByCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` //优惠券类型编码
}

func (x *QueryCouponByCodeReq) Reset() {
	*x = QueryCouponByCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponByCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponByCodeReq) ProtoMessage() {}

func (x *QueryCouponByCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponByCodeReq.ProtoReflect.Descriptor instead.
func (*QueryCouponByCodeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{15}
}

func (x *QueryCouponByCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type QueryCouponByCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CouponListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCouponByCodeResp) Reset() {
	*x = QueryCouponByCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponByCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponByCodeResp) ProtoMessage() {}

func (x *QueryCouponByCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponByCodeResp.ProtoReflect.Descriptor instead.
func (*QueryCouponByCodeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{16}
}

func (x *QueryCouponByCodeResp) GetList() []*CouponListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加优惠券领取记录
type AddCouponRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId int64 `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"` //优惠券ID
	MemberId int64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` //用户ID
	GetType  int32 `protobuf:"varint,4,opt,name=get_type,json=getType,proto3" json:"get_type,omitempty"`    //获取类型：0->后台赠送；1->主动获取
}

func (x *AddCouponRecordReq) Reset() {
	*x = AddCouponRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponRecordReq) ProtoMessage() {}

func (x *AddCouponRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponRecordReq.ProtoReflect.Descriptor instead.
func (*AddCouponRecordReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{17}
}

func (x *AddCouponRecordReq) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *AddCouponRecordReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *AddCouponRecordReq) GetGetType() int32 {
	if x != nil {
		return x.GetType
	}
	return 0
}

type AddCouponRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddCouponRecordResp) Reset() {
	*x = AddCouponRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponRecordResp) ProtoMessage() {}

func (x *AddCouponRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponRecordResp.ProtoReflect.Descriptor instead.
func (*AddCouponRecordResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{18}
}

func (x *AddCouponRecordResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除优惠券领取记录
type DeleteCouponRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteCouponRecordReq) Reset() {
	*x = DeleteCouponRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponRecordReq) ProtoMessage() {}

func (x *DeleteCouponRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponRecordReq.ProtoReflect.Descriptor instead.
func (*DeleteCouponRecordReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteCouponRecordReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteCouponRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteCouponRecordResp) Reset() {
	*x = DeleteCouponRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponRecordResp) ProtoMessage() {}

func (x *DeleteCouponRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponRecordResp.ProtoReflect.Descriptor instead.
func (*DeleteCouponRecordResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteCouponRecordResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优惠券领取记录
type UpdateCouponRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId       int64   `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`                    //优惠券ID
	MemberId       int64   `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`                    //用户ID
	OrderId        int64   `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                       //使用订单ID
	OrderAmount    float32 `protobuf:"fixed32,4,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`          //订单金额
	DiscountAmount float32 `protobuf:"fixed32,5,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"` //优惠金额
	Status         int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                        //状态：0-未使用，1-已使用，2-已过期，3-已失效
	InvalidTime    string  `protobuf:"bytes,7,opt,name=invalid_time,json=invalidTime,proto3" json:"invalid_time,omitempty"`            //失效时间
	InvalidReason  string  `protobuf:"bytes,8,opt,name=invalid_reason,json=invalidReason,proto3" json:"invalid_reason,omitempty"`      //失效原因
}

func (x *UpdateCouponRecordReq) Reset() {
	*x = UpdateCouponRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponRecordReq) ProtoMessage() {}

func (x *UpdateCouponRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponRecordReq.ProtoReflect.Descriptor instead.
func (*UpdateCouponRecordReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateCouponRecordReq) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *UpdateCouponRecordReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *UpdateCouponRecordReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *UpdateCouponRecordReq) GetOrderAmount() float32 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *UpdateCouponRecordReq) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *UpdateCouponRecordReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateCouponRecordReq) GetInvalidTime() string {
	if x != nil {
		return x.InvalidTime
	}
	return ""
}

func (x *UpdateCouponRecordReq) GetInvalidReason() string {
	if x != nil {
		return x.InvalidReason
	}
	return ""
}

type UpdateCouponRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCouponRecordResp) Reset() {
	*x = UpdateCouponRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponRecordResp) ProtoMessage() {}

func (x *UpdateCouponRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponRecordResp.ProtoReflect.Descriptor instead.
func (*UpdateCouponRecordResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateCouponRecordResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询优惠券领取记录详情
type QueryCouponRecordDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryCouponRecordDetailReq) Reset() {
	*x = QueryCouponRecordDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponRecordDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponRecordDetailReq) ProtoMessage() {}

func (x *QueryCouponRecordDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponRecordDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCouponRecordDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{23}
}

func (x *QueryCouponRecordDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryCouponRecordDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //
	CouponId       int64   `protobuf:"varint,2,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`                    //优惠券ID
	MemberId       int64   `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`                    //用户ID
	GetTime        string  `protobuf:"bytes,4,opt,name=get_time,json=getTime,proto3" json:"get_time,omitempty"`                        //领取时间
	GetType        int32   `protobuf:"varint,5,opt,name=get_type,json=getType,proto3" json:"get_type,omitempty"`                       //获取类型：0->后台赠送；1->主动获取
	UseTime        string  `protobuf:"bytes,6,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`                        //使用时间
	OrderId        int64   `protobuf:"varint,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                       //使用订单ID
	OrderAmount    float32 `protobuf:"fixed32,8,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`          //订单金额
	DiscountAmount float32 `protobuf:"fixed32,9,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"` //优惠金额
	Status         int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                       //状态：0-未使用，1-已使用，2-已过期，3-已失效
	InvalidTime    string  `protobuf:"bytes,11,opt,name=invalid_time,json=invalidTime,proto3" json:"invalid_time,omitempty"`           //失效时间
	InvalidReason  string  `protobuf:"bytes,12,opt,name=invalid_reason,json=invalidReason,proto3" json:"invalid_reason,omitempty"`     //失效原因
	CreateTime     string  `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`              //
}

func (x *QueryCouponRecordDetailResp) Reset() {
	*x = QueryCouponRecordDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponRecordDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponRecordDetailResp) ProtoMessage() {}

func (x *QueryCouponRecordDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponRecordDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCouponRecordDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{24}
}

func (x *QueryCouponRecordDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetGetTime() string {
	if x != nil {
		return x.GetTime
	}
	return ""
}

func (x *QueryCouponRecordDetailResp) GetGetType() int32 {
	if x != nil {
		return x.GetType
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetUseTime() string {
	if x != nil {
		return x.UseTime
	}
	return ""
}

func (x *QueryCouponRecordDetailResp) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetOrderAmount() float32 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryCouponRecordDetailResp) GetInvalidTime() string {
	if x != nil {
		return x.InvalidTime
	}
	return ""
}

func (x *QueryCouponRecordDetailResp) GetInvalidReason() string {
	if x != nil {
		return x.InvalidReason
	}
	return ""
}

func (x *QueryCouponRecordDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

// 分页查询优惠券领取记录列表
type QueryCouponRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId int64 `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"` //优惠券ID
	MemberId int64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` //用户ID
	GetType  int32 `protobuf:"varint,3,opt,name=get_type,json=getType,proto3" json:"get_type,omitempty"`    //获取类型：0->后台赠送；1->主动获取
	OrderId  int64 `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`    //使用订单ID
	Status   int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0-未使用，1-已使用，2-已过期，3-已失效
	PageNum  int32 `protobuf:"varint,6,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //第几页
	PageSize int32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的数量
}

func (x *QueryCouponRecordListReq) Reset() {
	*x = QueryCouponRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponRecordListReq) ProtoMessage() {}

func (x *QueryCouponRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponRecordListReq.ProtoReflect.Descriptor instead.
func (*QueryCouponRecordListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{25}
}

func (x *QueryCouponRecordListReq) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *QueryCouponRecordListReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *QueryCouponRecordListReq) GetGetType() int32 {
	if x != nil {
		return x.GetType
	}
	return 0
}

func (x *QueryCouponRecordListReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *QueryCouponRecordListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryCouponRecordListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCouponRecordListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CouponRecordListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //
	CouponId       int64   `protobuf:"varint,2,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`                    //优惠券ID
	MemberId       int64   `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`                    //用户ID
	GetTime        string  `protobuf:"bytes,4,opt,name=get_time,json=getTime,proto3" json:"get_time,omitempty"`                        //领取时间
	GetType        int32   `protobuf:"varint,5,opt,name=get_type,json=getType,proto3" json:"get_type,omitempty"`                       //获取类型：0->后台赠送；1->主动获取
	UseTime        string  `protobuf:"bytes,6,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`                        //使用时间
	OrderId        int64   `protobuf:"varint,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                       //使用订单ID
	OrderAmount    float32 `protobuf:"fixed32,8,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`          //订单金额
	DiscountAmount float32 `protobuf:"fixed32,9,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"` //优惠金额
	Status         int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                       //状态：0-未使用，1-已使用，2-已过期，3-已失效
	InvalidTime    string  `protobuf:"bytes,11,opt,name=invalid_time,json=invalidTime,proto3" json:"invalid_time,omitempty"`           //失效时间
	InvalidReason  string  `protobuf:"bytes,12,opt,name=invalid_reason,json=invalidReason,proto3" json:"invalid_reason,omitempty"`     //失效原因
	CreateTime     string  `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`              //
}

func (x *CouponRecordListData) Reset() {
	*x = CouponRecordListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponRecordListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponRecordListData) ProtoMessage() {}

func (x *CouponRecordListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponRecordListData.ProtoReflect.Descriptor instead.
func (*CouponRecordListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{26}
}

func (x *CouponRecordListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CouponRecordListData) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *CouponRecordListData) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *CouponRecordListData) GetGetTime() string {
	if x != nil {
		return x.GetTime
	}
	return ""
}

func (x *CouponRecordListData) GetGetType() int32 {
	if x != nil {
		return x.GetType
	}
	return 0
}

func (x *CouponRecordListData) GetUseTime() string {
	if x != nil {
		return x.UseTime
	}
	return ""
}

func (x *CouponRecordListData) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CouponRecordListData) GetOrderAmount() float32 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *CouponRecordListData) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *CouponRecordListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CouponRecordListData) GetInvalidTime() string {
	if x != nil {
		return x.InvalidTime
	}
	return ""
}

func (x *CouponRecordListData) GetInvalidReason() string {
	if x != nil {
		return x.InvalidReason
	}
	return ""
}

func (x *CouponRecordListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type QueryCouponRecordListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CouponRecordListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCouponRecordListResp) Reset() {
	*x = QueryCouponRecordListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponRecordListResp) ProtoMessage() {}

func (x *QueryCouponRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponRecordListResp.ProtoReflect.Descriptor instead.
func (*QueryCouponRecordListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{27}
}

func (x *QueryCouponRecordListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCouponRecordListResp) GetList() []*CouponRecordListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QueryMemberCouponListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId int64 `protobuf:"varint,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Status   int32 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *QueryMemberCouponListReq) Reset() {
	*x = QueryMemberCouponListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberCouponListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberCouponListReq) ProtoMessage() {}

func (x *QueryMemberCouponListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberCouponListReq.ProtoReflect.Descriptor instead.
func (*QueryMemberCouponListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{28}
}

func (x *QueryMemberCouponListReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *QueryMemberCouponListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type QueryCouponData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                 //优惠券ID
	TypeId      int64   `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`           //优惠券类型ID
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                              //优惠券名称
	Code        string  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                              //优惠券码
	Amount      float32 `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`                        //优惠金额/折扣率
	MinAmount   float32 `protobuf:"fixed32,6,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"` //最低使用金额
	StartTime   string  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`   //生效时间
	EndTime     string  `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`         //失效时间
	PerLimit    int32   `protobuf:"varint,12,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`    //每人限领数量
	Status      int32   `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`                        //状态：0-未开始，1-进行中，2-已结束，3-已取消
	Description string  `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`               //使用说明
}

func (x *QueryCouponData) Reset() {
	*x = QueryCouponData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponData) ProtoMessage() {}

func (x *QueryCouponData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponData.ProtoReflect.Descriptor instead.
func (*QueryCouponData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{29}
}

func (x *QueryCouponData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCouponData) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *QueryCouponData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryCouponData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QueryCouponData) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QueryCouponData) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *QueryCouponData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryCouponData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryCouponData) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *QueryCouponData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryCouponData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type QueryMemberCouponListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*QueryCouponData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryMemberCouponListResp) Reset() {
	*x = QueryMemberCouponListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberCouponListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberCouponListResp) ProtoMessage() {}

func (x *QueryMemberCouponListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberCouponListResp.ProtoReflect.Descriptor instead.
func (*QueryMemberCouponListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{30}
}

func (x *QueryMemberCouponListResp) GetList() []*QueryCouponData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加优惠券使用范围
type AddCouponScopeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AddCouponScopeData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` //
}

func (x *AddCouponScopeReq) Reset() {
	*x = AddCouponScopeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponScopeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponScopeReq) ProtoMessage() {}

func (x *AddCouponScopeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponScopeReq.ProtoReflect.Descriptor instead.
func (*AddCouponScopeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{31}
}

func (x *AddCouponScopeReq) GetData() []*AddCouponScopeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddCouponScopeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //
	CouponId  int64 `protobuf:"varint,2,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`    //优惠券ID
	ScopeType int32 `protobuf:"varint,3,opt,name=scope_type,json=scopeType,proto3" json:"scope_type,omitempty"` //范围类型：0-全场，1-分类，2-商品
	ScopeId   int64 `protobuf:"varint,4,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`       //范围ID（分类ID或商品ID）
}

func (x *AddCouponScopeData) Reset() {
	*x = AddCouponScopeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponScopeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponScopeData) ProtoMessage() {}

func (x *AddCouponScopeData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponScopeData.ProtoReflect.Descriptor instead.
func (*AddCouponScopeData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{32}
}

func (x *AddCouponScopeData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddCouponScopeData) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *AddCouponScopeData) GetScopeType() int32 {
	if x != nil {
		return x.ScopeType
	}
	return 0
}

func (x *AddCouponScopeData) GetScopeId() int64 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

type AddCouponScopeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddCouponScopeResp) Reset() {
	*x = AddCouponScopeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponScopeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponScopeResp) ProtoMessage() {}

func (x *AddCouponScopeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponScopeResp.ProtoReflect.Descriptor instead.
func (*AddCouponScopeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{33}
}

func (x *AddCouponScopeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除优惠券使用范围
type DeleteCouponScopeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteCouponScopeReq) Reset() {
	*x = DeleteCouponScopeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponScopeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponScopeReq) ProtoMessage() {}

func (x *DeleteCouponScopeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponScopeReq.ProtoReflect.Descriptor instead.
func (*DeleteCouponScopeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteCouponScopeReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteCouponScopeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteCouponScopeResp) Reset() {
	*x = DeleteCouponScopeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponScopeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponScopeResp) ProtoMessage() {}

func (x *DeleteCouponScopeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponScopeResp.ProtoReflect.Descriptor instead.
func (*DeleteCouponScopeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteCouponScopeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优惠券使用范围
type UpdateCouponScopeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //
	CouponId  int64 `protobuf:"varint,2,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`    //优惠券ID
	ScopeType int32 `protobuf:"varint,3,opt,name=scope_type,json=scopeType,proto3" json:"scope_type,omitempty"` //范围类型：0-全场，1-分类，2-商品
	ScopeId   int64 `protobuf:"varint,4,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`       //范围ID（分类ID或商品ID）
}

func (x *UpdateCouponScopeReq) Reset() {
	*x = UpdateCouponScopeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponScopeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponScopeReq) ProtoMessage() {}

func (x *UpdateCouponScopeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponScopeReq.ProtoReflect.Descriptor instead.
func (*UpdateCouponScopeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateCouponScopeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCouponScopeReq) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *UpdateCouponScopeReq) GetScopeType() int32 {
	if x != nil {
		return x.ScopeType
	}
	return 0
}

func (x *UpdateCouponScopeReq) GetScopeId() int64 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

type UpdateCouponScopeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCouponScopeResp) Reset() {
	*x = UpdateCouponScopeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponScopeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponScopeResp) ProtoMessage() {}

func (x *UpdateCouponScopeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponScopeResp.ProtoReflect.Descriptor instead.
func (*UpdateCouponScopeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateCouponScopeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询优惠券使用范围详情
type QueryCouponScopeDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryCouponScopeDetailReq) Reset() {
	*x = QueryCouponScopeDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponScopeDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponScopeDetailReq) ProtoMessage() {}

func (x *QueryCouponScopeDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponScopeDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCouponScopeDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{38}
}

func (x *QueryCouponScopeDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryCouponScopeDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  //
	CouponId   int64  `protobuf:"varint,2,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`      //优惠券ID
	ScopeType  int32  `protobuf:"varint,3,opt,name=scope_type,json=scopeType,proto3" json:"scope_type,omitempty"`   //范围类型：0-全场，1-分类，2-商品
	ScopeId    int64  `protobuf:"varint,4,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`         //范围ID（分类ID或商品ID）
	CreateTime string `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
}

func (x *QueryCouponScopeDetailResp) Reset() {
	*x = QueryCouponScopeDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponScopeDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponScopeDetailResp) ProtoMessage() {}

func (x *QueryCouponScopeDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponScopeDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCouponScopeDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{39}
}

func (x *QueryCouponScopeDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCouponScopeDetailResp) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *QueryCouponScopeDetailResp) GetScopeType() int32 {
	if x != nil {
		return x.ScopeType
	}
	return 0
}

func (x *QueryCouponScopeDetailResp) GetScopeId() int64 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *QueryCouponScopeDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

// 分页查询优惠券使用范围列表
type QueryCouponScopeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId  int64 `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`    //优惠券ID
	ScopeType int32 `protobuf:"varint,2,opt,name=scope_type,json=scopeType,proto3" json:"scope_type,omitempty"` //范围类型：0-全场，1-分类，2-商品
	ScopeId   int64 `protobuf:"varint,3,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`       //范围ID（分类ID或商品ID）
	PageNum   int32 `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       //第几页
	PageSize  int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    //每页的数量
}

func (x *QueryCouponScopeListReq) Reset() {
	*x = QueryCouponScopeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponScopeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponScopeListReq) ProtoMessage() {}

func (x *QueryCouponScopeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponScopeListReq.ProtoReflect.Descriptor instead.
func (*QueryCouponScopeListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{40}
}

func (x *QueryCouponScopeListReq) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *QueryCouponScopeListReq) GetScopeType() int32 {
	if x != nil {
		return x.ScopeType
	}
	return 0
}

func (x *QueryCouponScopeListReq) GetScopeId() int64 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *QueryCouponScopeListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCouponScopeListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CouponScopeListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  //
	CouponId   int64  `protobuf:"varint,2,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`      //优惠券ID
	ScopeType  int32  `protobuf:"varint,3,opt,name=scope_type,json=scopeType,proto3" json:"scope_type,omitempty"`   //范围类型：0-全场，1-分类，2-商品
	ScopeId    int64  `protobuf:"varint,4,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`         //范围ID（分类ID或商品ID）
	CreateTime string `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
}

func (x *CouponScopeListData) Reset() {
	*x = CouponScopeListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponScopeListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponScopeListData) ProtoMessage() {}

func (x *CouponScopeListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponScopeListData.ProtoReflect.Descriptor instead.
func (*CouponScopeListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{41}
}

func (x *CouponScopeListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CouponScopeListData) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *CouponScopeListData) GetScopeType() int32 {
	if x != nil {
		return x.ScopeType
	}
	return 0
}

func (x *CouponScopeListData) GetScopeId() int64 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *CouponScopeListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type QueryCouponScopeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CouponScopeListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCouponScopeListResp) Reset() {
	*x = QueryCouponScopeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponScopeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponScopeListResp) ProtoMessage() {}

func (x *QueryCouponScopeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponScopeListResp.ProtoReflect.Descriptor instead.
func (*QueryCouponScopeListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{42}
}

func (x *QueryCouponScopeListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCouponScopeListResp) GetList() []*CouponScopeListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加优惠券类型
type AddCouponTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //类型名称
	Code         string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                                      //类型编码
	Description  string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	DiscountType int32  `protobuf:"varint,5,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"` //优惠方式：1-固定金额，2-折扣率，3-第N件特惠，4-买赠，5-特价，6-套装优惠，7-搭配优惠，8-积分抵现，9-积分倍率，10-免运费，11-运费减免，12-限时特权，13-会员特权
	Status       int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                 //是否启用
	Sort         int32  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     int64  `protobuf:"varint,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`             //创建人ID
}

func (x *AddCouponTypeReq) Reset() {
	*x = AddCouponTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponTypeReq) ProtoMessage() {}

func (x *AddCouponTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponTypeReq.ProtoReflect.Descriptor instead.
func (*AddCouponTypeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{43}
}

func (x *AddCouponTypeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddCouponTypeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCouponTypeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddCouponTypeReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddCouponTypeReq) GetDiscountType() int32 {
	if x != nil {
		return x.DiscountType
	}
	return 0
}

func (x *AddCouponTypeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddCouponTypeReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddCouponTypeReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddCouponTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddCouponTypeResp) Reset() {
	*x = AddCouponTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCouponTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCouponTypeResp) ProtoMessage() {}

func (x *AddCouponTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCouponTypeResp.ProtoReflect.Descriptor instead.
func (*AddCouponTypeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{44}
}

func (x *AddCouponTypeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除优惠券类型
type DeleteCouponTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteCouponTypeReq) Reset() {
	*x = DeleteCouponTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponTypeReq) ProtoMessage() {}

func (x *DeleteCouponTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponTypeReq.ProtoReflect.Descriptor instead.
func (*DeleteCouponTypeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteCouponTypeReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteCouponTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteCouponTypeResp) Reset() {
	*x = DeleteCouponTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCouponTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCouponTypeResp) ProtoMessage() {}

func (x *DeleteCouponTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCouponTypeResp.ProtoReflect.Descriptor instead.
func (*DeleteCouponTypeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteCouponTypeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优惠券类型
type UpdateCouponTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //类型名称
	Code         string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                                      //类型编码
	Description  string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	DiscountType int32  `protobuf:"varint,5,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"` //优惠方式：1-固定金额，2-折扣率，3-第N件特惠，4-买赠，5-特价，6-套装优惠，7-搭配优惠，8-积分抵现，9-积分倍率，10-免运费，11-运费减免，12-限时特权，13-会员特权
	Status       int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                 //是否启用
	Sort         int32  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	UpdateBy     int64  `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
}

func (x *UpdateCouponTypeReq) Reset() {
	*x = UpdateCouponTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponTypeReq) ProtoMessage() {}

func (x *UpdateCouponTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponTypeReq.ProtoReflect.Descriptor instead.
func (*UpdateCouponTypeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateCouponTypeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCouponTypeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCouponTypeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateCouponTypeReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCouponTypeReq) GetDiscountType() int32 {
	if x != nil {
		return x.DiscountType
	}
	return 0
}

func (x *UpdateCouponTypeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateCouponTypeReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateCouponTypeReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateCouponTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCouponTypeResp) Reset() {
	*x = UpdateCouponTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponTypeResp) ProtoMessage() {}

func (x *UpdateCouponTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponTypeResp.ProtoReflect.Descriptor instead.
func (*UpdateCouponTypeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateCouponTypeResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优惠券类型状态
type UpdateCouponTypeStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids      []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                     //主键ID
	Status   int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                      //是否启用
	UpdateBy int64   `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
}

func (x *UpdateCouponTypeStatusReq) Reset() {
	*x = UpdateCouponTypeStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponTypeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponTypeStatusReq) ProtoMessage() {}

func (x *UpdateCouponTypeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponTypeStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateCouponTypeStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateCouponTypeStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateCouponTypeStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateCouponTypeStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateCouponTypeStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateCouponTypeStatusResp) Reset() {
	*x = UpdateCouponTypeStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponTypeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponTypeStatusResp) ProtoMessage() {}

func (x *UpdateCouponTypeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponTypeStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateCouponTypeStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateCouponTypeStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询优惠券类型详情
type QueryCouponTypeDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryCouponTypeDetailReq) Reset() {
	*x = QueryCouponTypeDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponTypeDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponTypeDetailReq) ProtoMessage() {}

func (x *QueryCouponTypeDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponTypeDetailReq.ProtoReflect.Descriptor instead.
func (*QueryCouponTypeDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{51}
}

func (x *QueryCouponTypeDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryCouponTypeDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //类型名称
	Code         string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                                      //类型编码
	Description  string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	DiscountType int32  `protobuf:"varint,5,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"` //优惠方式：1-固定金额，2-折扣率，3-第N件特惠，4-买赠，5-特价，6-套装优惠，7-搭配优惠，8-积分抵现，9-积分倍率，10-免运费，11-运费减免，12-限时特权，13-会员特权
	Status       int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                 //是否启用
	Sort         int32  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     int64  `protobuf:"varint,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`             //创建人ID
	CreateTime   string `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     int64  `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	UpdateTime   string `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
}

func (x *QueryCouponTypeDetailResp) Reset() {
	*x = QueryCouponTypeDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponTypeDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponTypeDetailResp) ProtoMessage() {}

func (x *QueryCouponTypeDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponTypeDetailResp.ProtoReflect.Descriptor instead.
func (*QueryCouponTypeDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{52}
}

func (x *QueryCouponTypeDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryCouponTypeDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryCouponTypeDetailResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QueryCouponTypeDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryCouponTypeDetailResp) GetDiscountType() int32 {
	if x != nil {
		return x.DiscountType
	}
	return 0
}

func (x *QueryCouponTypeDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryCouponTypeDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryCouponTypeDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QueryCouponTypeDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryCouponTypeDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QueryCouponTypeDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询优惠券类型列表
type QueryCouponTypeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                      //类型名称
	Code         string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                                      //类型编码
	DiscountType int32  `protobuf:"varint,3,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"` //优惠方式：1-固定金额，2-折扣率，3-第N件特惠，4-买赠，5-特价，6-套装优惠，7-搭配优惠，8-积分抵现，9-积分倍率，10-免运费，11-运费减免，12-限时特权，13-会员特权
	Status       int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                 //是否启用
	PageNum      int32  `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                //第几页
	PageSize     int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`             //每页的数量
}

func (x *QueryCouponTypeListReq) Reset() {
	*x = QueryCouponTypeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponTypeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponTypeListReq) ProtoMessage() {}

func (x *QueryCouponTypeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponTypeListReq.ProtoReflect.Descriptor instead.
func (*QueryCouponTypeListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{53}
}

func (x *QueryCouponTypeListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryCouponTypeListReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QueryCouponTypeListReq) GetDiscountType() int32 {
	if x != nil {
		return x.DiscountType
	}
	return 0
}

func (x *QueryCouponTypeListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryCouponTypeListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryCouponTypeListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CouponTypeListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //类型名称
	Code         string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                                      //类型编码
	Description  string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                        //描述
	DiscountType int32  `protobuf:"varint,5,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"` //优惠方式：1-固定金额，2-折扣率，3-第N件特惠，4-买赠，5-特价，6-套装优惠，7-搭配优惠，8-积分抵现，9-积分倍率，10-免运费，11-运费减免，12-限时特权，13-会员特权
	Status       int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                 //是否启用
	Sort         int32  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     int64  `protobuf:"varint,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`             //创建人ID
	CreateTime   string `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     int64  `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`            //更新人ID
	UpdateTime   string `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
}

func (x *CouponTypeListData) Reset() {
	*x = CouponTypeListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponTypeListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponTypeListData) ProtoMessage() {}

func (x *CouponTypeListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponTypeListData.ProtoReflect.Descriptor instead.
func (*CouponTypeListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{54}
}

func (x *CouponTypeListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CouponTypeListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CouponTypeListData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CouponTypeListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CouponTypeListData) GetDiscountType() int32 {
	if x != nil {
		return x.DiscountType
	}
	return 0
}

func (x *CouponTypeListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CouponTypeListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CouponTypeListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *CouponTypeListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CouponTypeListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *CouponTypeListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryCouponTypeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CouponTypeListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryCouponTypeListResp) Reset() {
	*x = QueryCouponTypeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouponTypeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouponTypeListResp) ProtoMessage() {}

func (x *QueryCouponTypeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouponTypeListResp.ProtoReflect.Descriptor instead.
func (*QueryCouponTypeListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{55}
}

func (x *QueryCouponTypeListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryCouponTypeListResp) GetList() []*CouponTypeListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加首页轮播广告
type AddHomeAdvertiseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               //编号
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            //名称
	Type      int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                           //轮播位置：0->PC首页轮播；1->app首页轮播
	Pic       string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                              //图片地址
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
	Status    int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                       //上下线状态：0->下线；1->上线
	Url       string `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`                              //链接地址
	Remark    string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`                        //备注
	Sort      int32  `protobuf:"varint,10,opt,name=sort,proto3" json:"sort,omitempty"`                          //排序
}

func (x *AddHomeAdvertiseReq) Reset() {
	*x = AddHomeAdvertiseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHomeAdvertiseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHomeAdvertiseReq) ProtoMessage() {}

func (x *AddHomeAdvertiseReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHomeAdvertiseReq.ProtoReflect.Descriptor instead.
func (*AddHomeAdvertiseReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{56}
}

func (x *AddHomeAdvertiseReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddHomeAdvertiseReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddHomeAdvertiseReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddHomeAdvertiseReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *AddHomeAdvertiseReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddHomeAdvertiseReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddHomeAdvertiseReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddHomeAdvertiseReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddHomeAdvertiseReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AddHomeAdvertiseReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type AddHomeAdvertiseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddHomeAdvertiseResp) Reset() {
	*x = AddHomeAdvertiseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHomeAdvertiseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHomeAdvertiseResp) ProtoMessage() {}

func (x *AddHomeAdvertiseResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHomeAdvertiseResp.ProtoReflect.Descriptor instead.
func (*AddHomeAdvertiseResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{57}
}

func (x *AddHomeAdvertiseResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除首页轮播广告
type DeleteHomeAdvertiseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteHomeAdvertiseReq) Reset() {
	*x = DeleteHomeAdvertiseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHomeAdvertiseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHomeAdvertiseReq) ProtoMessage() {}

func (x *DeleteHomeAdvertiseReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHomeAdvertiseReq.ProtoReflect.Descriptor instead.
func (*DeleteHomeAdvertiseReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteHomeAdvertiseReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteHomeAdvertiseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteHomeAdvertiseResp) Reset() {
	*x = DeleteHomeAdvertiseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHomeAdvertiseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHomeAdvertiseResp) ProtoMessage() {}

func (x *DeleteHomeAdvertiseResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHomeAdvertiseResp.ProtoReflect.Descriptor instead.
func (*DeleteHomeAdvertiseResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteHomeAdvertiseResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新首页轮播广告
type UpdateHomeAdvertiseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               //编号
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            //名称
	Type      int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                           //轮播位置：0->PC首页轮播；1->app首页轮播
	Pic       string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                              //图片地址
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
	Status    int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                       //上下线状态：0->下线；1->上线
	Url       string `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`                             //链接地址
	Remark    string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`                       //备注
	Sort      int32  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                          //排序
}

func (x *UpdateHomeAdvertiseReq) Reset() {
	*x = UpdateHomeAdvertiseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHomeAdvertiseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHomeAdvertiseReq) ProtoMessage() {}

func (x *UpdateHomeAdvertiseReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHomeAdvertiseReq.ProtoReflect.Descriptor instead.
func (*UpdateHomeAdvertiseReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateHomeAdvertiseReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateHomeAdvertiseReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateHomeAdvertiseReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateHomeAdvertiseReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *UpdateHomeAdvertiseReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateHomeAdvertiseReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateHomeAdvertiseReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateHomeAdvertiseReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateHomeAdvertiseReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdateHomeAdvertiseReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type UpdateHomeAdvertiseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateHomeAdvertiseResp) Reset() {
	*x = UpdateHomeAdvertiseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHomeAdvertiseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHomeAdvertiseResp) ProtoMessage() {}

func (x *UpdateHomeAdvertiseResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHomeAdvertiseResp.ProtoReflect.Descriptor instead.
func (*UpdateHomeAdvertiseResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateHomeAdvertiseResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新首页轮播广告状态
type UpdateHomeAdvertiseStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` //编号
	Status int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`  //上下线状态：0->下线；1->上线
}

func (x *UpdateHomeAdvertiseStatusReq) Reset() {
	*x = UpdateHomeAdvertiseStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHomeAdvertiseStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHomeAdvertiseStatusReq) ProtoMessage() {}

func (x *UpdateHomeAdvertiseStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHomeAdvertiseStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateHomeAdvertiseStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateHomeAdvertiseStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateHomeAdvertiseStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateHomeAdvertiseStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateHomeAdvertiseStatusResp) Reset() {
	*x = UpdateHomeAdvertiseStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHomeAdvertiseStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHomeAdvertiseStatusResp) ProtoMessage() {}

func (x *UpdateHomeAdvertiseStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHomeAdvertiseStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateHomeAdvertiseStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateHomeAdvertiseStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询首页轮播广告详情
type QueryHomeAdvertiseDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryHomeAdvertiseDetailReq) Reset() {
	*x = QueryHomeAdvertiseDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHomeAdvertiseDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHomeAdvertiseDetailReq) ProtoMessage() {}

func (x *QueryHomeAdvertiseDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHomeAdvertiseDetailReq.ProtoReflect.Descriptor instead.
func (*QueryHomeAdvertiseDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{64}
}

func (x *QueryHomeAdvertiseDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryHomeAdvertiseDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //编号
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //名称
	Type       int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                               //轮播位置：0->PC首页轮播；1->app首页轮播
	Pic        string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                  //图片地址
	StartTime  string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     //开始时间
	EndTime    string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           //结束时间
	Status     int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                           //上下线状态：0->下线；1->上线
	ClickCount int32  `protobuf:"varint,8,opt,name=click_count,json=clickCount,proto3" json:"click_count,omitempty"` //点击数
	OrderCount int32  `protobuf:"varint,9,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"` //下单数
	Url        string `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`                                 //链接地址
	Remark     string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`                           //备注
	Sort       int32  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                              //排序
	CreateTime string `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
	UpdateTime string `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *QueryHomeAdvertiseDetailResp) Reset() {
	*x = QueryHomeAdvertiseDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHomeAdvertiseDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHomeAdvertiseDetailResp) ProtoMessage() {}

func (x *QueryHomeAdvertiseDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHomeAdvertiseDetailResp.ProtoReflect.Descriptor instead.
func (*QueryHomeAdvertiseDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{65}
}

func (x *QueryHomeAdvertiseDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryHomeAdvertiseDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryHomeAdvertiseDetailResp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *QueryHomeAdvertiseDetailResp) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *QueryHomeAdvertiseDetailResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryHomeAdvertiseDetailResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryHomeAdvertiseDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryHomeAdvertiseDetailResp) GetClickCount() int32 {
	if x != nil {
		return x.ClickCount
	}
	return 0
}

func (x *QueryHomeAdvertiseDetailResp) GetOrderCount() int32 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *QueryHomeAdvertiseDetailResp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *QueryHomeAdvertiseDetailResp) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *QueryHomeAdvertiseDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryHomeAdvertiseDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryHomeAdvertiseDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询首页轮播广告列表
type QueryHomeAdvertiseListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            //名称
	Type      int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                           //轮播位置：0->PC首页轮播；1->app首页轮播
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
	Status    int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                       //上下线状态：0->下线；1->上线
	PageNum   int32  `protobuf:"varint,6,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`      //第几页
	PageSize  int32  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   //每页的数量
}

func (x *QueryHomeAdvertiseListReq) Reset() {
	*x = QueryHomeAdvertiseListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHomeAdvertiseListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHomeAdvertiseListReq) ProtoMessage() {}

func (x *QueryHomeAdvertiseListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHomeAdvertiseListReq.ProtoReflect.Descriptor instead.
func (*QueryHomeAdvertiseListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{66}
}

func (x *QueryHomeAdvertiseListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryHomeAdvertiseListReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *QueryHomeAdvertiseListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryHomeAdvertiseListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryHomeAdvertiseListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QueryHomeAdvertiseListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryHomeAdvertiseListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type HomeAdvertiseListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //编号
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //名称
	Type       int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                               //轮播位置：0->PC首页轮播；1->app首页轮播
	Pic        string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                  //图片地址
	StartTime  string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     //开始时间
	EndTime    string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           //结束时间
	Status     int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                           //上下线状态：0->下线；1->上线
	ClickCount int32  `protobuf:"varint,8,opt,name=click_count,json=clickCount,proto3" json:"click_count,omitempty"` //点击数
	OrderCount int32  `protobuf:"varint,9,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"` //下单数
	Url        string `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`                                 //链接地址
	Remark     string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`                           //备注
	Sort       int32  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                              //排序
	CreateTime string `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` //创建时间
	UpdateTime string `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *HomeAdvertiseListData) Reset() {
	*x = HomeAdvertiseListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeAdvertiseListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeAdvertiseListData) ProtoMessage() {}

func (x *HomeAdvertiseListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeAdvertiseListData.ProtoReflect.Descriptor instead.
func (*HomeAdvertiseListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{67}
}

func (x *HomeAdvertiseListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HomeAdvertiseListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HomeAdvertiseListData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HomeAdvertiseListData) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *HomeAdvertiseListData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *HomeAdvertiseListData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *HomeAdvertiseListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HomeAdvertiseListData) GetClickCount() int32 {
	if x != nil {
		return x.ClickCount
	}
	return 0
}

func (x *HomeAdvertiseListData) GetOrderCount() int32 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *HomeAdvertiseListData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HomeAdvertiseListData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *HomeAdvertiseListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *HomeAdvertiseListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *HomeAdvertiseListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryHomeAdvertiseListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*HomeAdvertiseListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryHomeAdvertiseListResp) Reset() {
	*x = QueryHomeAdvertiseListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHomeAdvertiseListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHomeAdvertiseListResp) ProtoMessage() {}

func (x *QueryHomeAdvertiseListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHomeAdvertiseListResp.ProtoReflect.Descriptor instead.
func (*QueryHomeAdvertiseListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{68}
}

func (x *QueryHomeAdvertiseListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHomeAdvertiseListResp) GetList() []*HomeAdvertiseListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加秒杀活动
type AddSeckillActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //编号
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             //活动名称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`               //活动描述
	StartTime   string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`  //开始时间
	EndTime     string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        //结束时间
	Status      int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                        //活动状态：状态:0-上线,1-下线
	IsEnabled   int32  `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"` //是否启用
	CreateBy    int64  `protobuf:"varint,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`    //创建人ID
}

func (x *AddSeckillActivityReq) Reset() {
	*x = AddSeckillActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillActivityReq) ProtoMessage() {}

func (x *AddSeckillActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillActivityReq.ProtoReflect.Descriptor instead.
func (*AddSeckillActivityReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{69}
}

func (x *AddSeckillActivityReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSeckillActivityReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddSeckillActivityReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddSeckillActivityReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddSeckillActivityReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddSeckillActivityReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddSeckillActivityReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *AddSeckillActivityReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddSeckillActivityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSeckillActivityResp) Reset() {
	*x = AddSeckillActivityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillActivityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillActivityResp) ProtoMessage() {}

func (x *AddSeckillActivityResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillActivityResp.ProtoReflect.Descriptor instead.
func (*AddSeckillActivityResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{70}
}

func (x *AddSeckillActivityResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除秒杀活动
type DeleteSeckillActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSeckillActivityReq) Reset() {
	*x = DeleteSeckillActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillActivityReq) ProtoMessage() {}

func (x *DeleteSeckillActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillActivityReq.ProtoReflect.Descriptor instead.
func (*DeleteSeckillActivityReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteSeckillActivityReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSeckillActivityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSeckillActivityResp) Reset() {
	*x = DeleteSeckillActivityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillActivityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillActivityResp) ProtoMessage() {}

func (x *DeleteSeckillActivityResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillActivityResp.ProtoReflect.Descriptor instead.
func (*DeleteSeckillActivityResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteSeckillActivityResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀活动
type UpdateSeckillActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //编号
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             //活动名称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`               //活动描述
	StartTime   string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`  //开始时间
	EndTime     string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        //结束时间
	Status      int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                        //活动状态：状态:0-上线,1-下线
	IsEnabled   int32  `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"` //是否启用
	UpdateBy    int64  `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`   //更新人ID
}

func (x *UpdateSeckillActivityReq) Reset() {
	*x = UpdateSeckillActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillActivityReq) ProtoMessage() {}

func (x *UpdateSeckillActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillActivityReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillActivityReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateSeckillActivityReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSeckillActivityReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSeckillActivityReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSeckillActivityReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateSeckillActivityReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateSeckillActivityReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateSeckillActivityReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *UpdateSeckillActivityReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateSeckillActivityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillActivityResp) Reset() {
	*x = UpdateSeckillActivityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillActivityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillActivityResp) ProtoMessage() {}

func (x *UpdateSeckillActivityResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillActivityResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillActivityResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateSeckillActivityResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀活动状态
type UpdateSeckillActivityStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids      []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                     //编号
	Status   int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                      //活动状态：状态:0-上线,1-下线
	UpdateBy int64   `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
}

func (x *UpdateSeckillActivityStatusReq) Reset() {
	*x = UpdateSeckillActivityStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillActivityStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillActivityStatusReq) ProtoMessage() {}

func (x *UpdateSeckillActivityStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillActivityStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillActivityStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{75}
}

func (x *UpdateSeckillActivityStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSeckillActivityStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateSeckillActivityStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateSeckillActivityStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillActivityStatusResp) Reset() {
	*x = UpdateSeckillActivityStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillActivityStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillActivityStatusResp) ProtoMessage() {}

func (x *UpdateSeckillActivityStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillActivityStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillActivityStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateSeckillActivityStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询秒杀活动详情
type QuerySeckillActivityDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySeckillActivityDetailReq) Reset() {
	*x = QuerySeckillActivityDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillActivityDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillActivityDetailReq) ProtoMessage() {}

func (x *QuerySeckillActivityDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillActivityDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillActivityDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{77}
}

func (x *QuerySeckillActivityDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySeckillActivityDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //编号
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //活动名称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                  //活动描述
	StartTime   string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     //开始时间
	EndTime     string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           //结束时间
	Status      int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                           //活动状态：状态:0-上线,1-下线
	IsEnabled   int32  `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`    //是否启用
	CreateBy    int64  `protobuf:"varint,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime  string `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy    int64  `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`      //更新人ID
	UpdateTime  string `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *QuerySeckillActivityDetailResp) Reset() {
	*x = QuerySeckillActivityDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillActivityDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillActivityDetailResp) ProtoMessage() {}

func (x *QuerySeckillActivityDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillActivityDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillActivityDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{78}
}

func (x *QuerySeckillActivityDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySeckillActivityDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuerySeckillActivityDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QuerySeckillActivityDetailResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QuerySeckillActivityDetailResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QuerySeckillActivityDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillActivityDetailResp) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QuerySeckillActivityDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QuerySeckillActivityDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuerySeckillActivityDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QuerySeckillActivityDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询秒杀活动列表
type QuerySeckillActivityListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                             //活动名称
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`  //开始时间
	EndTime   string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        //结束时间
	Status    int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                        //活动状态：状态:0-上线,1-下线
	IsEnabled int32  `protobuf:"varint,5,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"` //是否启用
	PageNum   int32  `protobuf:"varint,6,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       //第几页
	PageSize  int32  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    //每页的数量
}

func (x *QuerySeckillActivityListReq) Reset() {
	*x = QuerySeckillActivityListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillActivityListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillActivityListReq) ProtoMessage() {}

func (x *QuerySeckillActivityListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillActivityListReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillActivityListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{79}
}

func (x *QuerySeckillActivityListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuerySeckillActivityListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QuerySeckillActivityListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QuerySeckillActivityListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillActivityListReq) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *QuerySeckillActivityListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QuerySeckillActivityListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SeckillActivityListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //编号
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //活动名称
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                  //活动描述
	StartTime   string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     //开始时间
	EndTime     string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           //结束时间
	Status      int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                           //活动状态：状态:0-上线,1-下线
	IsEnabled   int32  `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`    //是否启用
	CreateBy    int64  `protobuf:"varint,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime  string `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy    int64  `protobuf:"varint,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`      //更新人ID
	UpdateTime  string `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *SeckillActivityListData) Reset() {
	*x = SeckillActivityListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeckillActivityListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeckillActivityListData) ProtoMessage() {}

func (x *SeckillActivityListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeckillActivityListData.ProtoReflect.Descriptor instead.
func (*SeckillActivityListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{80}
}

func (x *SeckillActivityListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeckillActivityListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeckillActivityListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeckillActivityListData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SeckillActivityListData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SeckillActivityListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SeckillActivityListData) GetIsEnabled() int32 {
	if x != nil {
		return x.IsEnabled
	}
	return 0
}

func (x *SeckillActivityListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SeckillActivityListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SeckillActivityListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SeckillActivityListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QuerySeckillActivityListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SeckillActivityListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySeckillActivityListResp) Reset() {
	*x = QuerySeckillActivityListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillActivityListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillActivityListResp) ProtoMessage() {}

func (x *QuerySeckillActivityListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillActivityListResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillActivityListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{81}
}

func (x *QuerySeckillActivityListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySeckillActivityListResp) GetList() []*SeckillActivityListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QuerySeckillActivityListByDateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDate string `protobuf:"bytes,1,opt,name=currentDate,proto3" json:"currentDate,omitempty"`
}

func (x *QuerySeckillActivityListByDateReq) Reset() {
	*x = QuerySeckillActivityListByDateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillActivityListByDateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillActivityListByDateReq) ProtoMessage() {}

func (x *QuerySeckillActivityListByDateReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillActivityListByDateReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillActivityListByDateReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{82}
}

func (x *QuerySeckillActivityListByDateReq) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

type QueryFlashPromotionListByDateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SeckillActivityListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryFlashPromotionListByDateResp) Reset() {
	*x = QueryFlashPromotionListByDateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFlashPromotionListByDateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFlashPromotionListByDateResp) ProtoMessage() {}

func (x *QueryFlashPromotionListByDateResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFlashPromotionListByDateResp.ProtoReflect.Descriptor instead.
func (*QueryFlashPromotionListByDateResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{83}
}

func (x *QueryFlashPromotionListByDateResp) GetList() []*SeckillActivityListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加秒杀商品
type AddSeckillProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AddSeckillProductData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AddSeckillProductReq) Reset() {
	*x = AddSeckillProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillProductReq) ProtoMessage() {}

func (x *AddSeckillProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillProductReq.ProtoReflect.Descriptor instead.
func (*AddSeckillProductReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{84}
}

func (x *AddSeckillProductReq) GetData() []*AddSeckillProductData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddSeckillProductData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          //ID
	ActivityId   int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`        //活动ID
	SessionId    int64   `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`           //秒杀场次ID
	SkuId        int64   `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                       //商品SKU ID
	SeckillPrice float32 `protobuf:"fixed32,5,opt,name=seckill_price,json=seckillPrice,proto3" json:"seckill_price,omitempty"` //秒杀价格
	SeckillStock int32   `protobuf:"varint,6,opt,name=seckill_stock,json=seckillStock,proto3" json:"seckill_stock,omitempty"`  //秒杀库存
	StockLocked  int32   `protobuf:"varint,7,opt,name=stock_locked,json=stockLocked,proto3" json:"stock_locked,omitempty"`     //锁定库存
	PerLimit     int32   `protobuf:"varint,8,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`              //每人限购数量
	Sort         int32   `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`                                      //排序
	Status       int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                 //状态：0-未上架，1-已上架
	CreateBy     int64   `protobuf:"varint,11,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`             //创建人ID
	SkuName      string  `protobuf:"bytes,12,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`                 //商品名称
}

func (x *AddSeckillProductData) Reset() {
	*x = AddSeckillProductData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillProductData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillProductData) ProtoMessage() {}

func (x *AddSeckillProductData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillProductData.ProtoReflect.Descriptor instead.
func (*AddSeckillProductData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{85}
}

func (x *AddSeckillProductData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSeckillProductData) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *AddSeckillProductData) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *AddSeckillProductData) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *AddSeckillProductData) GetSeckillPrice() float32 {
	if x != nil {
		return x.SeckillPrice
	}
	return 0
}

func (x *AddSeckillProductData) GetSeckillStock() int32 {
	if x != nil {
		return x.SeckillStock
	}
	return 0
}

func (x *AddSeckillProductData) GetStockLocked() int32 {
	if x != nil {
		return x.StockLocked
	}
	return 0
}

func (x *AddSeckillProductData) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *AddSeckillProductData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddSeckillProductData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddSeckillProductData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AddSeckillProductData) GetSkuName() string {
	if x != nil {
		return x.SkuName
	}
	return ""
}

type AddSeckillProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSeckillProductResp) Reset() {
	*x = AddSeckillProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillProductResp) ProtoMessage() {}

func (x *AddSeckillProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillProductResp.ProtoReflect.Descriptor instead.
func (*AddSeckillProductResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{86}
}

func (x *AddSeckillProductResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除秒杀商品
type DeleteSeckillProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSeckillProductReq) Reset() {
	*x = DeleteSeckillProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillProductReq) ProtoMessage() {}

func (x *DeleteSeckillProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillProductReq.ProtoReflect.Descriptor instead.
func (*DeleteSeckillProductReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{87}
}

func (x *DeleteSeckillProductReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSeckillProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSeckillProductResp) Reset() {
	*x = DeleteSeckillProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillProductResp) ProtoMessage() {}

func (x *DeleteSeckillProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillProductResp.ProtoReflect.Descriptor instead.
func (*DeleteSeckillProductResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteSeckillProductResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀商品
type UpdateSeckillProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          //ID
	ActivityId   int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`        //活动ID
	SessionId    int64   `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`           //秒杀场次ID
	SkuId        int64   `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                       //商品SKU ID
	SeckillPrice float32 `protobuf:"fixed32,5,opt,name=seckill_price,json=seckillPrice,proto3" json:"seckill_price,omitempty"` //秒杀价格
	SeckillStock int32   `protobuf:"varint,6,opt,name=seckill_stock,json=seckillStock,proto3" json:"seckill_stock,omitempty"`  //秒杀库存
	StockLocked  int32   `protobuf:"varint,7,opt,name=stock_locked,json=stockLocked,proto3" json:"stock_locked,omitempty"`     //锁定库存
	PerLimit     int32   `protobuf:"varint,8,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`              //每人限购数量
	Sort         int32   `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`                                      //排序
	Status       int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                 //状态：0-未上架，1-已上架
	UpdateBy     int64   `protobuf:"varint,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`             //更新人ID
	SkuName      string  `protobuf:"bytes,14,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`                 //商品名称
}

func (x *UpdateSeckillProductReq) Reset() {
	*x = UpdateSeckillProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillProductReq) ProtoMessage() {}

func (x *UpdateSeckillProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillProductReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillProductReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateSeckillProductReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetSeckillPrice() float32 {
	if x != nil {
		return x.SeckillPrice
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetSeckillStock() int32 {
	if x != nil {
		return x.SeckillStock
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetStockLocked() int32 {
	if x != nil {
		return x.StockLocked
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *UpdateSeckillProductReq) GetSkuName() string {
	if x != nil {
		return x.SkuName
	}
	return ""
}

type UpdateSeckillProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillProductResp) Reset() {
	*x = UpdateSeckillProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillProductResp) ProtoMessage() {}

func (x *UpdateSeckillProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillProductResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillProductResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateSeckillProductResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀商品状态
type UpdateSeckillProductStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids      []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                     //ID
	Status   int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0-未上架，1-已上架
	UpdateBy int64   `protobuf:"varint,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
}

func (x *UpdateSeckillProductStatusReq) Reset() {
	*x = UpdateSeckillProductStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillProductStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillProductStatusReq) ProtoMessage() {}

func (x *UpdateSeckillProductStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillProductStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillProductStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateSeckillProductStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSeckillProductStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateSeckillProductStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateSeckillProductStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillProductStatusResp) Reset() {
	*x = UpdateSeckillProductStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillProductStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillProductStatusResp) ProtoMessage() {}

func (x *UpdateSeckillProductStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillProductStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillProductStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{92}
}

func (x *UpdateSeckillProductStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询秒杀商品详情
type QuerySeckillProductDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySeckillProductDetailReq) Reset() {
	*x = QuerySeckillProductDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillProductDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillProductDetailReq) ProtoMessage() {}

func (x *QuerySeckillProductDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillProductDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillProductDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{93}
}

func (x *QuerySeckillProductDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySeckillProductDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          //ID
	ActivityId   int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`        //活动ID
	SessionId    int64   `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`           //秒杀场次ID
	SkuId        int64   `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                       //商品SKU ID
	SeckillPrice float32 `protobuf:"fixed32,5,opt,name=seckill_price,json=seckillPrice,proto3" json:"seckill_price,omitempty"` //秒杀价格
	SeckillStock int32   `protobuf:"varint,6,opt,name=seckill_stock,json=seckillStock,proto3" json:"seckill_stock,omitempty"`  //秒杀库存
	StockLocked  int32   `protobuf:"varint,7,opt,name=stock_locked,json=stockLocked,proto3" json:"stock_locked,omitempty"`     //锁定库存
	PerLimit     int32   `protobuf:"varint,8,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`              //每人限购数量
	Sort         int32   `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`                                      //排序
	Status       int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                 //状态：0-未上架，1-已上架
	CreateBy     int64   `protobuf:"varint,11,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`             //创建人ID
	CreateTime   string  `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     int64   `protobuf:"varint,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`             //更新人ID
	UpdateTime   string  `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`        //更新时间
	SkuName      string  `protobuf:"bytes,15,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`                 //商品名称
}

func (x *QuerySeckillProductDetailResp) Reset() {
	*x = QuerySeckillProductDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillProductDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillProductDetailResp) ProtoMessage() {}

func (x *QuerySeckillProductDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillProductDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillProductDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{94}
}

func (x *QuerySeckillProductDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetSeckillPrice() float32 {
	if x != nil {
		return x.SeckillPrice
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetSeckillStock() int32 {
	if x != nil {
		return x.SeckillStock
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetStockLocked() int32 {
	if x != nil {
		return x.StockLocked
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuerySeckillProductDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QuerySeckillProductDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QuerySeckillProductDetailResp) GetSkuName() string {
	if x != nil {
		return x.SkuName
	}
	return ""
}

// 分页查询秒杀商品列表
type QuerySeckillProductListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId int64 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` //活动ID
	SessionId  int64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`    //秒杀场次ID
	Status     int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-未上架，1-已上架
	PageNum    int32 `protobuf:"varint,10,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`         //第几页
	PageSize   int32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`      //每页的数量
}

func (x *QuerySeckillProductListReq) Reset() {
	*x = QuerySeckillProductListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillProductListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillProductListReq) ProtoMessage() {}

func (x *QuerySeckillProductListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillProductListReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillProductListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{95}
}

func (x *QuerySeckillProductListReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *QuerySeckillProductListReq) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *QuerySeckillProductListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillProductListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QuerySeckillProductListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SeckillProductListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          //ID
	ActivityId   int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`        //活动ID
	SessionId    int64   `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`           //秒杀场次ID
	SkuId        int64   `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                       //商品SKU ID
	SeckillPrice float32 `protobuf:"fixed32,5,opt,name=seckill_price,json=seckillPrice,proto3" json:"seckill_price,omitempty"` //秒杀价格
	SeckillStock int32   `protobuf:"varint,6,opt,name=seckill_stock,json=seckillStock,proto3" json:"seckill_stock,omitempty"`  //秒杀库存
	StockLocked  int32   `protobuf:"varint,7,opt,name=stock_locked,json=stockLocked,proto3" json:"stock_locked,omitempty"`     //锁定库存
	PerLimit     int32   `protobuf:"varint,8,opt,name=per_limit,json=perLimit,proto3" json:"per_limit,omitempty"`              //每人限购数量
	Sort         int32   `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`                                      //排序
	Status       int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                 //状态：0-未上架，1-已上架
	CreateBy     int64   `protobuf:"varint,11,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`             //创建人ID
	CreateTime   string  `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     int64   `protobuf:"varint,13,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`             //更新人ID
	UpdateTime   string  `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`        //更新时间
	SkuName      string  `protobuf:"bytes,15,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`                 //商品名称
}

func (x *SeckillProductListData) Reset() {
	*x = SeckillProductListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeckillProductListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeckillProductListData) ProtoMessage() {}

func (x *SeckillProductListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeckillProductListData.ProtoReflect.Descriptor instead.
func (*SeckillProductListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{96}
}

func (x *SeckillProductListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeckillProductListData) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SeckillProductListData) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SeckillProductListData) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *SeckillProductListData) GetSeckillPrice() float32 {
	if x != nil {
		return x.SeckillPrice
	}
	return 0
}

func (x *SeckillProductListData) GetSeckillStock() int32 {
	if x != nil {
		return x.SeckillStock
	}
	return 0
}

func (x *SeckillProductListData) GetStockLocked() int32 {
	if x != nil {
		return x.StockLocked
	}
	return 0
}

func (x *SeckillProductListData) GetPerLimit() int32 {
	if x != nil {
		return x.PerLimit
	}
	return 0
}

func (x *SeckillProductListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SeckillProductListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SeckillProductListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SeckillProductListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SeckillProductListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SeckillProductListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SeckillProductListData) GetSkuName() string {
	if x != nil {
		return x.SkuName
	}
	return ""
}

type QuerySeckillProductListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SeckillProductListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySeckillProductListResp) Reset() {
	*x = QuerySeckillProductListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillProductListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillProductListResp) ProtoMessage() {}

func (x *QuerySeckillProductListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillProductListResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillProductListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{97}
}

func (x *QuerySeckillProductListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySeckillProductListResp) GetList() []*SeckillProductListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 查询秒杀商品详情
type QuerySeckillProductBySkuIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId int64 `protobuf:"varint,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
}

func (x *QuerySeckillProductBySkuIdReq) Reset() {
	*x = QuerySeckillProductBySkuIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillProductBySkuIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillProductBySkuIdReq) ProtoMessage() {}

func (x *QuerySeckillProductBySkuIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillProductBySkuIdReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillProductBySkuIdReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{98}
}

func (x *QuerySeckillProductBySkuIdReq) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

// 添加秒杀预约
type AddSeckillReservationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //ID
	UserId     int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户ID
	ActivityId int64 `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` //活动ID
	ProductId  int64 `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`    //秒杀商品ID
	Status     int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-已预约，1-已参与，2-已取消
}

func (x *AddSeckillReservationReq) Reset() {
	*x = AddSeckillReservationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillReservationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillReservationReq) ProtoMessage() {}

func (x *AddSeckillReservationReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillReservationReq.ProtoReflect.Descriptor instead.
func (*AddSeckillReservationReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{99}
}

func (x *AddSeckillReservationReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSeckillReservationReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddSeckillReservationReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *AddSeckillReservationReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddSeckillReservationReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type AddSeckillReservationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSeckillReservationResp) Reset() {
	*x = AddSeckillReservationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillReservationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillReservationResp) ProtoMessage() {}

func (x *AddSeckillReservationResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillReservationResp.ProtoReflect.Descriptor instead.
func (*AddSeckillReservationResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{100}
}

func (x *AddSeckillReservationResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除秒杀预约
type DeleteSeckillReservationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSeckillReservationReq) Reset() {
	*x = DeleteSeckillReservationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillReservationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillReservationReq) ProtoMessage() {}

func (x *DeleteSeckillReservationReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillReservationReq.ProtoReflect.Descriptor instead.
func (*DeleteSeckillReservationReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteSeckillReservationReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSeckillReservationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSeckillReservationResp) Reset() {
	*x = DeleteSeckillReservationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillReservationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillReservationResp) ProtoMessage() {}

func (x *DeleteSeckillReservationResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillReservationResp.ProtoReflect.Descriptor instead.
func (*DeleteSeckillReservationResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{102}
}

func (x *DeleteSeckillReservationResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀预约
type UpdateSeckillReservationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //ID
	UserId     int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户ID
	ActivityId int64 `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` //活动ID
	ProductId  int64 `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`    //秒杀商品ID
	Status     int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-已预约，1-已参与，2-已取消
}

func (x *UpdateSeckillReservationReq) Reset() {
	*x = UpdateSeckillReservationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillReservationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillReservationReq) ProtoMessage() {}

func (x *UpdateSeckillReservationReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillReservationReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillReservationReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{103}
}

func (x *UpdateSeckillReservationReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSeckillReservationReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSeckillReservationReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *UpdateSeckillReservationReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateSeckillReservationReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateSeckillReservationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillReservationResp) Reset() {
	*x = UpdateSeckillReservationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillReservationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillReservationResp) ProtoMessage() {}

func (x *UpdateSeckillReservationResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillReservationResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillReservationResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{104}
}

func (x *UpdateSeckillReservationResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀预约状态
type UpdateSeckillReservationStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` //ID
	Status int32   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`  //状态：0-已预约，1-已参与，2-已取消
}

func (x *UpdateSeckillReservationStatusReq) Reset() {
	*x = UpdateSeckillReservationStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillReservationStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillReservationStatusReq) ProtoMessage() {}

func (x *UpdateSeckillReservationStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillReservationStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillReservationStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{105}
}

func (x *UpdateSeckillReservationStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSeckillReservationStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateSeckillReservationStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillReservationStatusResp) Reset() {
	*x = UpdateSeckillReservationStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillReservationStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillReservationStatusResp) ProtoMessage() {}

func (x *UpdateSeckillReservationStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillReservationStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillReservationStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{106}
}

func (x *UpdateSeckillReservationStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询秒杀预约详情
type QuerySeckillReservationDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySeckillReservationDetailReq) Reset() {
	*x = QuerySeckillReservationDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillReservationDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillReservationDetailReq) ProtoMessage() {}

func (x *QuerySeckillReservationDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillReservationDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillReservationDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{107}
}

func (x *QuerySeckillReservationDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySeckillReservationDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //ID
	UserId     int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户ID
	ActivityId int64  `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` //活动ID
	ProductId  int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`    //秒杀商品ID
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-已预约，1-已参与，2-已取消
	CreateTime string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //
	UpdateTime string `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  //
}

func (x *QuerySeckillReservationDetailResp) Reset() {
	*x = QuerySeckillReservationDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillReservationDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillReservationDetailResp) ProtoMessage() {}

func (x *QuerySeckillReservationDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillReservationDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillReservationDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{108}
}

func (x *QuerySeckillReservationDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySeckillReservationDetailResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuerySeckillReservationDetailResp) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *QuerySeckillReservationDetailResp) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QuerySeckillReservationDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillReservationDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuerySeckillReservationDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询秒杀预约列表
type QuerySeckillReservationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户ID
	ActivityId int64 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` //活动ID
	ProductId  int64 `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`    //秒杀商品ID
	Status     int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-已预约，1-已参与，2-已取消
	PageNum    int32 `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`          //第几页
	PageSize   int32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       //每页的数量
}

func (x *QuerySeckillReservationListReq) Reset() {
	*x = QuerySeckillReservationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillReservationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillReservationListReq) ProtoMessage() {}

func (x *QuerySeckillReservationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillReservationListReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillReservationListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{109}
}

func (x *QuerySeckillReservationListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuerySeckillReservationListReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *QuerySeckillReservationListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QuerySeckillReservationListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillReservationListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QuerySeckillReservationListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SeckillReservationListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //ID
	UserId     int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             //用户ID
	ActivityId int64  `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` //活动ID
	ProductId  int64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`    //秒杀商品ID
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-已预约，1-已参与，2-已取消
	CreateTime string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //
	UpdateTime string `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  //
}

func (x *SeckillReservationListData) Reset() {
	*x = SeckillReservationListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeckillReservationListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeckillReservationListData) ProtoMessage() {}

func (x *SeckillReservationListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeckillReservationListData.ProtoReflect.Descriptor instead.
func (*SeckillReservationListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{110}
}

func (x *SeckillReservationListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeckillReservationListData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SeckillReservationListData) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SeckillReservationListData) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SeckillReservationListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SeckillReservationListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SeckillReservationListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QuerySeckillReservationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SeckillReservationListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySeckillReservationListResp) Reset() {
	*x = QuerySeckillReservationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillReservationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillReservationListResp) ProtoMessage() {}

func (x *QuerySeckillReservationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillReservationListResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillReservationListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{111}
}

func (x *QuerySeckillReservationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySeckillReservationListResp) GetList() []*SeckillReservationListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加秒杀场次
type AddSeckillSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               //秒杀场次ID
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            //场次名称
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
	Status    int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                       //状态：0-禁用，1-启用
	Sort      int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                           //排序
	CreateBy  int64  `protobuf:"varint,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`   //创建人ID
}

func (x *AddSeckillSessionReq) Reset() {
	*x = AddSeckillSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillSessionReq) ProtoMessage() {}

func (x *AddSeckillSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillSessionReq.ProtoReflect.Descriptor instead.
func (*AddSeckillSessionReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{112}
}

func (x *AddSeckillSessionReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSeckillSessionReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddSeckillSessionReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddSeckillSessionReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddSeckillSessionReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddSeckillSessionReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddSeckillSessionReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

type AddSeckillSessionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSeckillSessionResp) Reset() {
	*x = AddSeckillSessionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSeckillSessionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeckillSessionResp) ProtoMessage() {}

func (x *AddSeckillSessionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeckillSessionResp.ProtoReflect.Descriptor instead.
func (*AddSeckillSessionResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{113}
}

func (x *AddSeckillSessionResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除秒杀场次
type DeleteSeckillSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSeckillSessionReq) Reset() {
	*x = DeleteSeckillSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillSessionReq) ProtoMessage() {}

func (x *DeleteSeckillSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillSessionReq.ProtoReflect.Descriptor instead.
func (*DeleteSeckillSessionReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{114}
}

func (x *DeleteSeckillSessionReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSeckillSessionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSeckillSessionResp) Reset() {
	*x = DeleteSeckillSessionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeckillSessionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeckillSessionResp) ProtoMessage() {}

func (x *DeleteSeckillSessionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeckillSessionResp.ProtoReflect.Descriptor instead.
func (*DeleteSeckillSessionResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{115}
}

func (x *DeleteSeckillSessionResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀场次
type UpdateSeckillSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               //秒杀场次ID
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            //场次名称
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
	Status    int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                       //状态：0-禁用，1-启用
	Sort      int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                           //排序
	UpdateBy  int64  `protobuf:"varint,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`   //更新人ID
}

func (x *UpdateSeckillSessionReq) Reset() {
	*x = UpdateSeckillSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillSessionReq) ProtoMessage() {}

func (x *UpdateSeckillSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillSessionReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillSessionReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{116}
}

func (x *UpdateSeckillSessionReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSeckillSessionReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSeckillSessionReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateSeckillSessionReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateSeckillSessionReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateSeckillSessionReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateSeckillSessionReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateSeckillSessionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillSessionResp) Reset() {
	*x = UpdateSeckillSessionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillSessionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillSessionResp) ProtoMessage() {}

func (x *UpdateSeckillSessionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillSessionResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillSessionResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateSeckillSessionResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新秒杀场次状态
type UpdateSeckillSessionStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids      []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //秒杀场次ID
	Status   int32   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                     //状态：0-禁用，1-启用
	UpdateBy int64   `protobuf:"varint,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新人ID
}

func (x *UpdateSeckillSessionStatusReq) Reset() {
	*x = UpdateSeckillSessionStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillSessionStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillSessionStatusReq) ProtoMessage() {}

func (x *UpdateSeckillSessionStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillSessionStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSeckillSessionStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateSeckillSessionStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSeckillSessionStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateSeckillSessionStatusReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

type UpdateSeckillSessionStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSeckillSessionStatusResp) Reset() {
	*x = UpdateSeckillSessionStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeckillSessionStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeckillSessionStatusResp) ProtoMessage() {}

func (x *UpdateSeckillSessionStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeckillSessionStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSeckillSessionStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{119}
}

func (x *UpdateSeckillSessionStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询秒杀场次详情
type QuerySeckillSessionDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySeckillSessionDetailReq) Reset() {
	*x = QuerySeckillSessionDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillSessionDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillSessionDetailReq) ProtoMessage() {}

func (x *QuerySeckillSessionDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillSessionDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillSessionDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{120}
}

func (x *QuerySeckillSessionDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySeckillSessionDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //秒杀场次ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //场次名称
	StartTime  string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     //开始时间
	EndTime    string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           //结束时间
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-禁用，1-启用
	Sort       int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	CreateBy   int64  `protobuf:"varint,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   int64  `protobuf:"varint,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	UpdateTime string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
	IsDeleted  int32  `protobuf:"varint,11,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`   //是否删除
}

func (x *QuerySeckillSessionDetailResp) Reset() {
	*x = QuerySeckillSessionDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillSessionDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillSessionDetailResp) ProtoMessage() {}

func (x *QuerySeckillSessionDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillSessionDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillSessionDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{121}
}

func (x *QuerySeckillSessionDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySeckillSessionDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuerySeckillSessionDetailResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QuerySeckillSessionDetailResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QuerySeckillSessionDetailResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillSessionDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QuerySeckillSessionDetailResp) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *QuerySeckillSessionDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuerySeckillSessionDetailResp) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *QuerySeckillSessionDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QuerySeckillSessionDetailResp) GetIsDeleted() int32 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

// 分页查询秒杀场次列表
type QuerySeckillSessionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            //场次名称
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
	Status    int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                       //状态：0-禁用，1-启用
	PageNum   int32  `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`      //第几页
	PageSize  int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   //每页的数量
}

func (x *QuerySeckillSessionListReq) Reset() {
	*x = QuerySeckillSessionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillSessionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillSessionListReq) ProtoMessage() {}

func (x *QuerySeckillSessionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillSessionListReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillSessionListReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{122}
}

func (x *QuerySeckillSessionListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuerySeckillSessionListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QuerySeckillSessionListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QuerySeckillSessionListReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuerySeckillSessionListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QuerySeckillSessionListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SeckillSessionListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //秒杀场次ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //场次名称
	StartTime  string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     //开始时间
	EndTime    string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           //结束时间
	Status     int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                           //状态：0-禁用，1-启用
	Sort       int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	CreateBy   int64  `protobuf:"varint,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`       //创建人ID
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   int64  `protobuf:"varint,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新人ID
	UpdateTime string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *SeckillSessionListData) Reset() {
	*x = SeckillSessionListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeckillSessionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeckillSessionListData) ProtoMessage() {}

func (x *SeckillSessionListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeckillSessionListData.ProtoReflect.Descriptor instead.
func (*SeckillSessionListData) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{123}
}

func (x *SeckillSessionListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeckillSessionListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeckillSessionListData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SeckillSessionListData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SeckillSessionListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SeckillSessionListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SeckillSessionListData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SeckillSessionListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SeckillSessionListData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SeckillSessionListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QuerySeckillSessionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SeckillSessionListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySeckillSessionListResp) Reset() {
	*x = QuerySeckillSessionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillSessionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillSessionListResp) ProtoMessage() {}

func (x *QuerySeckillSessionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillSessionListResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillSessionListResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{124}
}

func (x *QuerySeckillSessionListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySeckillSessionListResp) GetList() []*SeckillSessionListData {
	if x != nil {
		return x.List
	}
	return nil
}

type QuerySeckillSessionListByTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTIme string `protobuf:"bytes,1,opt,name=currentTIme,proto3" json:"currentTIme,omitempty"`
}

func (x *QuerySeckillSessionListByTimeReq) Reset() {
	*x = QuerySeckillSessionListByTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillSessionListByTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillSessionListByTimeReq) ProtoMessage() {}

func (x *QuerySeckillSessionListByTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillSessionListByTimeReq.ProtoReflect.Descriptor instead.
func (*QuerySeckillSessionListByTimeReq) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{125}
}

func (x *QuerySeckillSessionListByTimeReq) GetCurrentTIme() string {
	if x != nil {
		return x.CurrentTIme
	}
	return ""
}

type QuerySeckillSessionListByTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SeckillSessionListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySeckillSessionListByTimeResp) Reset() {
	*x = QuerySeckillSessionListByTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_sms_sms_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeckillSessionListByTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeckillSessionListByTimeResp) ProtoMessage() {}

func (x *QuerySeckillSessionListByTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_sms_sms_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeckillSessionListByTimeResp.ProtoReflect.Descriptor instead.
func (*QuerySeckillSessionListByTimeResp) Descriptor() ([]byte, []int) {
	return file_rpc_sms_sms_proto_rawDescGZIP(), []int{126}
}

func (x *QuerySeckillSessionListByTimeResp) GetList() []*SeckillSessionListData {
	if x != nil {
		return x.List
	}
	return nil
}

var File_rpc_sms_sms_proto protoreflect.FileDescriptor

var file_rpc_sms_sms_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x6d, 0x73, 0x2f, 0x73, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x84,
	0x03, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x23, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x23, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x26, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xcd, 0x03, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x26, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x5e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22,
	0x2c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x26, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd1, 0x04, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xab, 0x04, 0x0a, 0x0e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x18,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa2, 0x03, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x28, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2b,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x7d, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x27, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x62, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x30, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x62, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d,
	0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2d,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xf2, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0x48, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x2d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xfc, 0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcd,
	0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf5,
	0x02, 0x0a, 0x15, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xeb, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2c,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xee, 0x01, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2f, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x67, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2f, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd3,
	0x02, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xcc, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x6c, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x45,
	0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x4c, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xec, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2b, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xee, 0x02, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x22, 0x34, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd3, 0x03, 0x0a, 0x1d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcc, 0x03,
	0x0a, 0x16, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42,
	0x79, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64,
	0x22, 0x9b, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f,
	0x0a, 0x19, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x2f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x32, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x32, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc9, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x1a,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a,
	0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xbd, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x22, 0x2b, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2e,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x66,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x34, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x1c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc4, 0x02, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x9e, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x6a, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x49, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x49, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32,
	0xab, 0x05, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x17,
	0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1a,
	0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x73, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xd9, 0x04,
	0x0a, 0x13, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25,
	0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe5, 0x03, 0x0a, 0x12, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x24, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x32, 0xbe, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x32, 0xf7, 0x04, 0x0a, 0x14, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12,
	0x1e, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d,
	0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x9b, 0x06, 0x0a,
	0x16, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x23, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x76, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xfe, 0x05, 0x0a, 0x15, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79,
	0x53, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xd6, 0x05, 0x0a, 0x19,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x73, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e,
	0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7c,
	0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2b, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x32, 0x86, 0x06, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x73,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x27, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x73, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x7a, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2c, 0x2e, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0d, 0x5a,
	0x0b, 0x2e, 0x2f, 0x73, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_sms_sms_proto_rawDescOnce sync.Once
	file_rpc_sms_sms_proto_rawDescData = file_rpc_sms_sms_proto_rawDesc
)

func file_rpc_sms_sms_proto_rawDescGZIP() []byte {
	file_rpc_sms_sms_proto_rawDescOnce.Do(func() {
		file_rpc_sms_sms_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_sms_sms_proto_rawDescData)
	})
	return file_rpc_sms_sms_proto_rawDescData
}

var file_rpc_sms_sms_proto_msgTypes = make([]protoimpl.MessageInfo, 127)
var file_rpc_sms_sms_proto_goTypes = []interface{}{
	(*AddCouponReq)(nil),                       // 0: smsclient.AddCouponReq
	(*AddCouponResp)(nil),                      // 1: smsclient.AddCouponResp
	(*DeleteCouponReq)(nil),                    // 2: smsclient.DeleteCouponReq
	(*DeleteCouponResp)(nil),                   // 3: smsclient.DeleteCouponResp
	(*UpdateCouponReq)(nil),                    // 4: smsclient.UpdateCouponReq
	(*UpdateCouponResp)(nil),                   // 5: smsclient.UpdateCouponResp
	(*UpdateCouponStatusReq)(nil),              // 6: smsclient.UpdateCouponStatusReq
	(*UpdateCouponStatusResp)(nil),             // 7: smsclient.UpdateCouponStatusResp
	(*QueryCouponDetailReq)(nil),               // 8: smsclient.QueryCouponDetailReq
	(*QueryCouponDetailResp)(nil),              // 9: smsclient.QueryCouponDetailResp
	(*QueryCouponListReq)(nil),                 // 10: smsclient.QueryCouponListReq
	(*CouponListData)(nil),                     // 11: smsclient.CouponListData
	(*QueryCouponListResp)(nil),                // 12: smsclient.QueryCouponListResp
	(*QueryCouponByScopeIdReq)(nil),            // 13: smsclient.QueryCouponByScopeIdReq
	(*QueryCouponByScopeIdResp)(nil),           // 14: smsclient.QueryCouponByScopeIdResp
	(*QueryCouponByCodeReq)(nil),               // 15: smsclient.QueryCouponByCodeReq
	(*QueryCouponByCodeResp)(nil),              // 16: smsclient.QueryCouponByCodeResp
	(*AddCouponRecordReq)(nil),                 // 17: smsclient.AddCouponRecordReq
	(*AddCouponRecordResp)(nil),                // 18: smsclient.AddCouponRecordResp
	(*DeleteCouponRecordReq)(nil),              // 19: smsclient.DeleteCouponRecordReq
	(*DeleteCouponRecordResp)(nil),             // 20: smsclient.DeleteCouponRecordResp
	(*UpdateCouponRecordReq)(nil),              // 21: smsclient.UpdateCouponRecordReq
	(*UpdateCouponRecordResp)(nil),             // 22: smsclient.UpdateCouponRecordResp
	(*QueryCouponRecordDetailReq)(nil),         // 23: smsclient.QueryCouponRecordDetailReq
	(*QueryCouponRecordDetailResp)(nil),        // 24: smsclient.QueryCouponRecordDetailResp
	(*QueryCouponRecordListReq)(nil),           // 25: smsclient.QueryCouponRecordListReq
	(*CouponRecordListData)(nil),               // 26: smsclient.CouponRecordListData
	(*QueryCouponRecordListResp)(nil),          // 27: smsclient.QueryCouponRecordListResp
	(*QueryMemberCouponListReq)(nil),           // 28: smsclient.QueryMemberCouponListReq
	(*QueryCouponData)(nil),                    // 29: smsclient.QueryCouponData
	(*QueryMemberCouponListResp)(nil),          // 30: smsclient.QueryMemberCouponListResp
	(*AddCouponScopeReq)(nil),                  // 31: smsclient.AddCouponScopeReq
	(*AddCouponScopeData)(nil),                 // 32: smsclient.AddCouponScopeData
	(*AddCouponScopeResp)(nil),                 // 33: smsclient.AddCouponScopeResp
	(*DeleteCouponScopeReq)(nil),               // 34: smsclient.DeleteCouponScopeReq
	(*DeleteCouponScopeResp)(nil),              // 35: smsclient.DeleteCouponScopeResp
	(*UpdateCouponScopeReq)(nil),               // 36: smsclient.UpdateCouponScopeReq
	(*UpdateCouponScopeResp)(nil),              // 37: smsclient.UpdateCouponScopeResp
	(*QueryCouponScopeDetailReq)(nil),          // 38: smsclient.QueryCouponScopeDetailReq
	(*QueryCouponScopeDetailResp)(nil),         // 39: smsclient.QueryCouponScopeDetailResp
	(*QueryCouponScopeListReq)(nil),            // 40: smsclient.QueryCouponScopeListReq
	(*CouponScopeListData)(nil),                // 41: smsclient.CouponScopeListData
	(*QueryCouponScopeListResp)(nil),           // 42: smsclient.QueryCouponScopeListResp
	(*AddCouponTypeReq)(nil),                   // 43: smsclient.AddCouponTypeReq
	(*AddCouponTypeResp)(nil),                  // 44: smsclient.AddCouponTypeResp
	(*DeleteCouponTypeReq)(nil),                // 45: smsclient.DeleteCouponTypeReq
	(*DeleteCouponTypeResp)(nil),               // 46: smsclient.DeleteCouponTypeResp
	(*UpdateCouponTypeReq)(nil),                // 47: smsclient.UpdateCouponTypeReq
	(*UpdateCouponTypeResp)(nil),               // 48: smsclient.UpdateCouponTypeResp
	(*UpdateCouponTypeStatusReq)(nil),          // 49: smsclient.UpdateCouponTypeStatusReq
	(*UpdateCouponTypeStatusResp)(nil),         // 50: smsclient.UpdateCouponTypeStatusResp
	(*QueryCouponTypeDetailReq)(nil),           // 51: smsclient.QueryCouponTypeDetailReq
	(*QueryCouponTypeDetailResp)(nil),          // 52: smsclient.QueryCouponTypeDetailResp
	(*QueryCouponTypeListReq)(nil),             // 53: smsclient.QueryCouponTypeListReq
	(*CouponTypeListData)(nil),                 // 54: smsclient.CouponTypeListData
	(*QueryCouponTypeListResp)(nil),            // 55: smsclient.QueryCouponTypeListResp
	(*AddHomeAdvertiseReq)(nil),                // 56: smsclient.AddHomeAdvertiseReq
	(*AddHomeAdvertiseResp)(nil),               // 57: smsclient.AddHomeAdvertiseResp
	(*DeleteHomeAdvertiseReq)(nil),             // 58: smsclient.DeleteHomeAdvertiseReq
	(*DeleteHomeAdvertiseResp)(nil),            // 59: smsclient.DeleteHomeAdvertiseResp
	(*UpdateHomeAdvertiseReq)(nil),             // 60: smsclient.UpdateHomeAdvertiseReq
	(*UpdateHomeAdvertiseResp)(nil),            // 61: smsclient.UpdateHomeAdvertiseResp
	(*UpdateHomeAdvertiseStatusReq)(nil),       // 62: smsclient.UpdateHomeAdvertiseStatusReq
	(*UpdateHomeAdvertiseStatusResp)(nil),      // 63: smsclient.UpdateHomeAdvertiseStatusResp
	(*QueryHomeAdvertiseDetailReq)(nil),        // 64: smsclient.QueryHomeAdvertiseDetailReq
	(*QueryHomeAdvertiseDetailResp)(nil),       // 65: smsclient.QueryHomeAdvertiseDetailResp
	(*QueryHomeAdvertiseListReq)(nil),          // 66: smsclient.QueryHomeAdvertiseListReq
	(*HomeAdvertiseListData)(nil),              // 67: smsclient.HomeAdvertiseListData
	(*QueryHomeAdvertiseListResp)(nil),         // 68: smsclient.QueryHomeAdvertiseListResp
	(*AddSeckillActivityReq)(nil),              // 69: smsclient.AddSeckillActivityReq
	(*AddSeckillActivityResp)(nil),             // 70: smsclient.AddSeckillActivityResp
	(*DeleteSeckillActivityReq)(nil),           // 71: smsclient.DeleteSeckillActivityReq
	(*DeleteSeckillActivityResp)(nil),          // 72: smsclient.DeleteSeckillActivityResp
	(*UpdateSeckillActivityReq)(nil),           // 73: smsclient.UpdateSeckillActivityReq
	(*UpdateSeckillActivityResp)(nil),          // 74: smsclient.UpdateSeckillActivityResp
	(*UpdateSeckillActivityStatusReq)(nil),     // 75: smsclient.UpdateSeckillActivityStatusReq
	(*UpdateSeckillActivityStatusResp)(nil),    // 76: smsclient.UpdateSeckillActivityStatusResp
	(*QuerySeckillActivityDetailReq)(nil),      // 77: smsclient.QuerySeckillActivityDetailReq
	(*QuerySeckillActivityDetailResp)(nil),     // 78: smsclient.QuerySeckillActivityDetailResp
	(*QuerySeckillActivityListReq)(nil),        // 79: smsclient.QuerySeckillActivityListReq
	(*SeckillActivityListData)(nil),            // 80: smsclient.SeckillActivityListData
	(*QuerySeckillActivityListResp)(nil),       // 81: smsclient.QuerySeckillActivityListResp
	(*QuerySeckillActivityListByDateReq)(nil),  // 82: smsclient.QuerySeckillActivityListByDateReq
	(*QueryFlashPromotionListByDateResp)(nil),  // 83: smsclient.QueryFlashPromotionListByDateResp
	(*AddSeckillProductReq)(nil),               // 84: smsclient.AddSeckillProductReq
	(*AddSeckillProductData)(nil),              // 85: smsclient.AddSeckillProductData
	(*AddSeckillProductResp)(nil),              // 86: smsclient.AddSeckillProductResp
	(*DeleteSeckillProductReq)(nil),            // 87: smsclient.DeleteSeckillProductReq
	(*DeleteSeckillProductResp)(nil),           // 88: smsclient.DeleteSeckillProductResp
	(*UpdateSeckillProductReq)(nil),            // 89: smsclient.UpdateSeckillProductReq
	(*UpdateSeckillProductResp)(nil),           // 90: smsclient.UpdateSeckillProductResp
	(*UpdateSeckillProductStatusReq)(nil),      // 91: smsclient.UpdateSeckillProductStatusReq
	(*UpdateSeckillProductStatusResp)(nil),     // 92: smsclient.UpdateSeckillProductStatusResp
	(*QuerySeckillProductDetailReq)(nil),       // 93: smsclient.QuerySeckillProductDetailReq
	(*QuerySeckillProductDetailResp)(nil),      // 94: smsclient.QuerySeckillProductDetailResp
	(*QuerySeckillProductListReq)(nil),         // 95: smsclient.QuerySeckillProductListReq
	(*SeckillProductListData)(nil),             // 96: smsclient.SeckillProductListData
	(*QuerySeckillProductListResp)(nil),        // 97: smsclient.QuerySeckillProductListResp
	(*QuerySeckillProductBySkuIdReq)(nil),      // 98: smsclient.QuerySeckillProductBySkuIdReq
	(*AddSeckillReservationReq)(nil),           // 99: smsclient.AddSeckillReservationReq
	(*AddSeckillReservationResp)(nil),          // 100: smsclient.AddSeckillReservationResp
	(*DeleteSeckillReservationReq)(nil),        // 101: smsclient.DeleteSeckillReservationReq
	(*DeleteSeckillReservationResp)(nil),       // 102: smsclient.DeleteSeckillReservationResp
	(*UpdateSeckillReservationReq)(nil),        // 103: smsclient.UpdateSeckillReservationReq
	(*UpdateSeckillReservationResp)(nil),       // 104: smsclient.UpdateSeckillReservationResp
	(*UpdateSeckillReservationStatusReq)(nil),  // 105: smsclient.UpdateSeckillReservationStatusReq
	(*UpdateSeckillReservationStatusResp)(nil), // 106: smsclient.UpdateSeckillReservationStatusResp
	(*QuerySeckillReservationDetailReq)(nil),   // 107: smsclient.QuerySeckillReservationDetailReq
	(*QuerySeckillReservationDetailResp)(nil),  // 108: smsclient.QuerySeckillReservationDetailResp
	(*QuerySeckillReservationListReq)(nil),     // 109: smsclient.QuerySeckillReservationListReq
	(*SeckillReservationListData)(nil),         // 110: smsclient.SeckillReservationListData
	(*QuerySeckillReservationListResp)(nil),    // 111: smsclient.QuerySeckillReservationListResp
	(*AddSeckillSessionReq)(nil),               // 112: smsclient.AddSeckillSessionReq
	(*AddSeckillSessionResp)(nil),              // 113: smsclient.AddSeckillSessionResp
	(*DeleteSeckillSessionReq)(nil),            // 114: smsclient.DeleteSeckillSessionReq
	(*DeleteSeckillSessionResp)(nil),           // 115: smsclient.DeleteSeckillSessionResp
	(*UpdateSeckillSessionReq)(nil),            // 116: smsclient.UpdateSeckillSessionReq
	(*UpdateSeckillSessionResp)(nil),           // 117: smsclient.UpdateSeckillSessionResp
	(*UpdateSeckillSessionStatusReq)(nil),      // 118: smsclient.UpdateSeckillSessionStatusReq
	(*UpdateSeckillSessionStatusResp)(nil),     // 119: smsclient.UpdateSeckillSessionStatusResp
	(*QuerySeckillSessionDetailReq)(nil),       // 120: smsclient.QuerySeckillSessionDetailReq
	(*QuerySeckillSessionDetailResp)(nil),      // 121: smsclient.QuerySeckillSessionDetailResp
	(*QuerySeckillSessionListReq)(nil),         // 122: smsclient.QuerySeckillSessionListReq
	(*SeckillSessionListData)(nil),             // 123: smsclient.SeckillSessionListData
	(*QuerySeckillSessionListResp)(nil),        // 124: smsclient.QuerySeckillSessionListResp
	(*QuerySeckillSessionListByTimeReq)(nil),   // 125: smsclient.QuerySeckillSessionListByTimeReq
	(*QuerySeckillSessionListByTimeResp)(nil),  // 126: smsclient.QuerySeckillSessionListByTimeResp
}
var file_rpc_sms_sms_proto_depIdxs = []int32{
	11,  // 0: smsclient.QueryCouponListResp.list:type_name -> smsclient.CouponListData
	11,  // 1: smsclient.QueryCouponByScopeIdResp.list:type_name -> smsclient.CouponListData
	11,  // 2: smsclient.QueryCouponByCodeResp.list:type_name -> smsclient.CouponListData
	26,  // 3: smsclient.QueryCouponRecordListResp.list:type_name -> smsclient.CouponRecordListData
	29,  // 4: smsclient.QueryMemberCouponListResp.list:type_name -> smsclient.QueryCouponData
	32,  // 5: smsclient.AddCouponScopeReq.data:type_name -> smsclient.AddCouponScopeData
	41,  // 6: smsclient.QueryCouponScopeListResp.list:type_name -> smsclient.CouponScopeListData
	54,  // 7: smsclient.QueryCouponTypeListResp.list:type_name -> smsclient.CouponTypeListData
	67,  // 8: smsclient.QueryHomeAdvertiseListResp.list:type_name -> smsclient.HomeAdvertiseListData
	80,  // 9: smsclient.QuerySeckillActivityListResp.list:type_name -> smsclient.SeckillActivityListData
	80,  // 10: smsclient.QueryFlashPromotionListByDateResp.list:type_name -> smsclient.SeckillActivityListData
	85,  // 11: smsclient.AddSeckillProductReq.data:type_name -> smsclient.AddSeckillProductData
	96,  // 12: smsclient.QuerySeckillProductListResp.list:type_name -> smsclient.SeckillProductListData
	110, // 13: smsclient.QuerySeckillReservationListResp.list:type_name -> smsclient.SeckillReservationListData
	123, // 14: smsclient.QuerySeckillSessionListResp.list:type_name -> smsclient.SeckillSessionListData
	123, // 15: smsclient.QuerySeckillSessionListByTimeResp.list:type_name -> smsclient.SeckillSessionListData
	0,   // 16: smsclient.CouponService.AddCoupon:input_type -> smsclient.AddCouponReq
	2,   // 17: smsclient.CouponService.DeleteCoupon:input_type -> smsclient.DeleteCouponReq
	4,   // 18: smsclient.CouponService.UpdateCoupon:input_type -> smsclient.UpdateCouponReq
	6,   // 19: smsclient.CouponService.UpdateCouponStatus:input_type -> smsclient.UpdateCouponStatusReq
	8,   // 20: smsclient.CouponService.QueryCouponDetail:input_type -> smsclient.QueryCouponDetailReq
	10,  // 21: smsclient.CouponService.QueryCouponList:input_type -> smsclient.QueryCouponListReq
	13,  // 22: smsclient.CouponService.QueryCouponByScopeId:input_type -> smsclient.QueryCouponByScopeIdReq
	15,  // 23: smsclient.CouponService.QueryCouponByCode:input_type -> smsclient.QueryCouponByCodeReq
	17,  // 24: smsclient.CouponRecordService.AddCouponRecord:input_type -> smsclient.AddCouponRecordReq
	19,  // 25: smsclient.CouponRecordService.DeleteCouponRecord:input_type -> smsclient.DeleteCouponRecordReq
	21,  // 26: smsclient.CouponRecordService.UpdateCouponRecord:input_type -> smsclient.UpdateCouponRecordReq
	23,  // 27: smsclient.CouponRecordService.QueryCouponRecordDetail:input_type -> smsclient.QueryCouponRecordDetailReq
	25,  // 28: smsclient.CouponRecordService.QueryCouponRecordList:input_type -> smsclient.QueryCouponRecordListReq
	28,  // 29: smsclient.CouponRecordService.QueryMemberCouponList:input_type -> smsclient.QueryMemberCouponListReq
	31,  // 30: smsclient.CouponScopeService.AddCouponScope:input_type -> smsclient.AddCouponScopeReq
	34,  // 31: smsclient.CouponScopeService.DeleteCouponScope:input_type -> smsclient.DeleteCouponScopeReq
	36,  // 32: smsclient.CouponScopeService.UpdateCouponScope:input_type -> smsclient.UpdateCouponScopeReq
	38,  // 33: smsclient.CouponScopeService.QueryCouponScopeDetail:input_type -> smsclient.QueryCouponScopeDetailReq
	40,  // 34: smsclient.CouponScopeService.QueryCouponScopeList:input_type -> smsclient.QueryCouponScopeListReq
	43,  // 35: smsclient.CouponTypeService.AddCouponType:input_type -> smsclient.AddCouponTypeReq
	45,  // 36: smsclient.CouponTypeService.DeleteCouponType:input_type -> smsclient.DeleteCouponTypeReq
	47,  // 37: smsclient.CouponTypeService.UpdateCouponType:input_type -> smsclient.UpdateCouponTypeReq
	49,  // 38: smsclient.CouponTypeService.UpdateCouponTypeStatus:input_type -> smsclient.UpdateCouponTypeStatusReq
	51,  // 39: smsclient.CouponTypeService.QueryCouponTypeDetail:input_type -> smsclient.QueryCouponTypeDetailReq
	53,  // 40: smsclient.CouponTypeService.QueryCouponTypeList:input_type -> smsclient.QueryCouponTypeListReq
	56,  // 41: smsclient.HomeAdvertiseService.AddHomeAdvertise:input_type -> smsclient.AddHomeAdvertiseReq
	58,  // 42: smsclient.HomeAdvertiseService.DeleteHomeAdvertise:input_type -> smsclient.DeleteHomeAdvertiseReq
	60,  // 43: smsclient.HomeAdvertiseService.UpdateHomeAdvertise:input_type -> smsclient.UpdateHomeAdvertiseReq
	62,  // 44: smsclient.HomeAdvertiseService.UpdateHomeAdvertiseStatus:input_type -> smsclient.UpdateHomeAdvertiseStatusReq
	64,  // 45: smsclient.HomeAdvertiseService.QueryHomeAdvertiseDetail:input_type -> smsclient.QueryHomeAdvertiseDetailReq
	66,  // 46: smsclient.HomeAdvertiseService.QueryHomeAdvertiseList:input_type -> smsclient.QueryHomeAdvertiseListReq
	69,  // 47: smsclient.SeckillActivityService.AddSeckillActivity:input_type -> smsclient.AddSeckillActivityReq
	71,  // 48: smsclient.SeckillActivityService.DeleteSeckillActivity:input_type -> smsclient.DeleteSeckillActivityReq
	73,  // 49: smsclient.SeckillActivityService.UpdateSeckillActivity:input_type -> smsclient.UpdateSeckillActivityReq
	75,  // 50: smsclient.SeckillActivityService.UpdateSeckillActivityStatus:input_type -> smsclient.UpdateSeckillActivityStatusReq
	77,  // 51: smsclient.SeckillActivityService.QuerySeckillActivityDetail:input_type -> smsclient.QuerySeckillActivityDetailReq
	79,  // 52: smsclient.SeckillActivityService.QuerySeckillActivityList:input_type -> smsclient.QuerySeckillActivityListReq
	82,  // 53: smsclient.SeckillActivityService.QuerySeckillActivityListByDate:input_type -> smsclient.QuerySeckillActivityListByDateReq
	84,  // 54: smsclient.SeckillProductService.AddSeckillProduct:input_type -> smsclient.AddSeckillProductReq
	87,  // 55: smsclient.SeckillProductService.DeleteSeckillProduct:input_type -> smsclient.DeleteSeckillProductReq
	89,  // 56: smsclient.SeckillProductService.UpdateSeckillProduct:input_type -> smsclient.UpdateSeckillProductReq
	91,  // 57: smsclient.SeckillProductService.UpdateSeckillProductStatus:input_type -> smsclient.UpdateSeckillProductStatusReq
	93,  // 58: smsclient.SeckillProductService.QuerySeckillProductDetail:input_type -> smsclient.QuerySeckillProductDetailReq
	95,  // 59: smsclient.SeckillProductService.QuerySeckillProductList:input_type -> smsclient.QuerySeckillProductListReq
	98,  // 60: smsclient.SeckillProductService.QuerySeckillProductBySkuId:input_type -> smsclient.QuerySeckillProductBySkuIdReq
	99,  // 61: smsclient.SeckillReservationService.AddSeckillReservation:input_type -> smsclient.AddSeckillReservationReq
	101, // 62: smsclient.SeckillReservationService.DeleteSeckillReservation:input_type -> smsclient.DeleteSeckillReservationReq
	103, // 63: smsclient.SeckillReservationService.UpdateSeckillReservation:input_type -> smsclient.UpdateSeckillReservationReq
	105, // 64: smsclient.SeckillReservationService.UpdateSeckillReservationStatus:input_type -> smsclient.UpdateSeckillReservationStatusReq
	107, // 65: smsclient.SeckillReservationService.QuerySeckillReservationDetail:input_type -> smsclient.QuerySeckillReservationDetailReq
	109, // 66: smsclient.SeckillReservationService.QuerySeckillReservationList:input_type -> smsclient.QuerySeckillReservationListReq
	112, // 67: smsclient.SeckillSessionService.AddSeckillSession:input_type -> smsclient.AddSeckillSessionReq
	114, // 68: smsclient.SeckillSessionService.DeleteSeckillSession:input_type -> smsclient.DeleteSeckillSessionReq
	116, // 69: smsclient.SeckillSessionService.UpdateSeckillSession:input_type -> smsclient.UpdateSeckillSessionReq
	118, // 70: smsclient.SeckillSessionService.UpdateSeckillSessionStatus:input_type -> smsclient.UpdateSeckillSessionStatusReq
	120, // 71: smsclient.SeckillSessionService.QuerySeckillSessionDetail:input_type -> smsclient.QuerySeckillSessionDetailReq
	122, // 72: smsclient.SeckillSessionService.QuerySeckillSessionList:input_type -> smsclient.QuerySeckillSessionListReq
	125, // 73: smsclient.SeckillSessionService.QuerySeckillSessionListByTime:input_type -> smsclient.QuerySeckillSessionListByTimeReq
	1,   // 74: smsclient.CouponService.AddCoupon:output_type -> smsclient.AddCouponResp
	3,   // 75: smsclient.CouponService.DeleteCoupon:output_type -> smsclient.DeleteCouponResp
	5,   // 76: smsclient.CouponService.UpdateCoupon:output_type -> smsclient.UpdateCouponResp
	7,   // 77: smsclient.CouponService.UpdateCouponStatus:output_type -> smsclient.UpdateCouponStatusResp
	9,   // 78: smsclient.CouponService.QueryCouponDetail:output_type -> smsclient.QueryCouponDetailResp
	12,  // 79: smsclient.CouponService.QueryCouponList:output_type -> smsclient.QueryCouponListResp
	14,  // 80: smsclient.CouponService.QueryCouponByScopeId:output_type -> smsclient.QueryCouponByScopeIdResp
	16,  // 81: smsclient.CouponService.QueryCouponByCode:output_type -> smsclient.QueryCouponByCodeResp
	18,  // 82: smsclient.CouponRecordService.AddCouponRecord:output_type -> smsclient.AddCouponRecordResp
	20,  // 83: smsclient.CouponRecordService.DeleteCouponRecord:output_type -> smsclient.DeleteCouponRecordResp
	22,  // 84: smsclient.CouponRecordService.UpdateCouponRecord:output_type -> smsclient.UpdateCouponRecordResp
	24,  // 85: smsclient.CouponRecordService.QueryCouponRecordDetail:output_type -> smsclient.QueryCouponRecordDetailResp
	27,  // 86: smsclient.CouponRecordService.QueryCouponRecordList:output_type -> smsclient.QueryCouponRecordListResp
	30,  // 87: smsclient.CouponRecordService.QueryMemberCouponList:output_type -> smsclient.QueryMemberCouponListResp
	33,  // 88: smsclient.CouponScopeService.AddCouponScope:output_type -> smsclient.AddCouponScopeResp
	35,  // 89: smsclient.CouponScopeService.DeleteCouponScope:output_type -> smsclient.DeleteCouponScopeResp
	37,  // 90: smsclient.CouponScopeService.UpdateCouponScope:output_type -> smsclient.UpdateCouponScopeResp
	39,  // 91: smsclient.CouponScopeService.QueryCouponScopeDetail:output_type -> smsclient.QueryCouponScopeDetailResp
	42,  // 92: smsclient.CouponScopeService.QueryCouponScopeList:output_type -> smsclient.QueryCouponScopeListResp
	44,  // 93: smsclient.CouponTypeService.AddCouponType:output_type -> smsclient.AddCouponTypeResp
	46,  // 94: smsclient.CouponTypeService.DeleteCouponType:output_type -> smsclient.DeleteCouponTypeResp
	48,  // 95: smsclient.CouponTypeService.UpdateCouponType:output_type -> smsclient.UpdateCouponTypeResp
	50,  // 96: smsclient.CouponTypeService.UpdateCouponTypeStatus:output_type -> smsclient.UpdateCouponTypeStatusResp
	52,  // 97: smsclient.CouponTypeService.QueryCouponTypeDetail:output_type -> smsclient.QueryCouponTypeDetailResp
	55,  // 98: smsclient.CouponTypeService.QueryCouponTypeList:output_type -> smsclient.QueryCouponTypeListResp
	57,  // 99: smsclient.HomeAdvertiseService.AddHomeAdvertise:output_type -> smsclient.AddHomeAdvertiseResp
	59,  // 100: smsclient.HomeAdvertiseService.DeleteHomeAdvertise:output_type -> smsclient.DeleteHomeAdvertiseResp
	61,  // 101: smsclient.HomeAdvertiseService.UpdateHomeAdvertise:output_type -> smsclient.UpdateHomeAdvertiseResp
	63,  // 102: smsclient.HomeAdvertiseService.UpdateHomeAdvertiseStatus:output_type -> smsclient.UpdateHomeAdvertiseStatusResp
	65,  // 103: smsclient.HomeAdvertiseService.QueryHomeAdvertiseDetail:output_type -> smsclient.QueryHomeAdvertiseDetailResp
	68,  // 104: smsclient.HomeAdvertiseService.QueryHomeAdvertiseList:output_type -> smsclient.QueryHomeAdvertiseListResp
	70,  // 105: smsclient.SeckillActivityService.AddSeckillActivity:output_type -> smsclient.AddSeckillActivityResp
	72,  // 106: smsclient.SeckillActivityService.DeleteSeckillActivity:output_type -> smsclient.DeleteSeckillActivityResp
	74,  // 107: smsclient.SeckillActivityService.UpdateSeckillActivity:output_type -> smsclient.UpdateSeckillActivityResp
	76,  // 108: smsclient.SeckillActivityService.UpdateSeckillActivityStatus:output_type -> smsclient.UpdateSeckillActivityStatusResp
	78,  // 109: smsclient.SeckillActivityService.QuerySeckillActivityDetail:output_type -> smsclient.QuerySeckillActivityDetailResp
	81,  // 110: smsclient.SeckillActivityService.QuerySeckillActivityList:output_type -> smsclient.QuerySeckillActivityListResp
	83,  // 111: smsclient.SeckillActivityService.QuerySeckillActivityListByDate:output_type -> smsclient.QueryFlashPromotionListByDateResp
	86,  // 112: smsclient.SeckillProductService.AddSeckillProduct:output_type -> smsclient.AddSeckillProductResp
	88,  // 113: smsclient.SeckillProductService.DeleteSeckillProduct:output_type -> smsclient.DeleteSeckillProductResp
	90,  // 114: smsclient.SeckillProductService.UpdateSeckillProduct:output_type -> smsclient.UpdateSeckillProductResp
	92,  // 115: smsclient.SeckillProductService.UpdateSeckillProductStatus:output_type -> smsclient.UpdateSeckillProductStatusResp
	94,  // 116: smsclient.SeckillProductService.QuerySeckillProductDetail:output_type -> smsclient.QuerySeckillProductDetailResp
	97,  // 117: smsclient.SeckillProductService.QuerySeckillProductList:output_type -> smsclient.QuerySeckillProductListResp
	94,  // 118: smsclient.SeckillProductService.QuerySeckillProductBySkuId:output_type -> smsclient.QuerySeckillProductDetailResp
	100, // 119: smsclient.SeckillReservationService.AddSeckillReservation:output_type -> smsclient.AddSeckillReservationResp
	102, // 120: smsclient.SeckillReservationService.DeleteSeckillReservation:output_type -> smsclient.DeleteSeckillReservationResp
	104, // 121: smsclient.SeckillReservationService.UpdateSeckillReservation:output_type -> smsclient.UpdateSeckillReservationResp
	106, // 122: smsclient.SeckillReservationService.UpdateSeckillReservationStatus:output_type -> smsclient.UpdateSeckillReservationStatusResp
	108, // 123: smsclient.SeckillReservationService.QuerySeckillReservationDetail:output_type -> smsclient.QuerySeckillReservationDetailResp
	111, // 124: smsclient.SeckillReservationService.QuerySeckillReservationList:output_type -> smsclient.QuerySeckillReservationListResp
	113, // 125: smsclient.SeckillSessionService.AddSeckillSession:output_type -> smsclient.AddSeckillSessionResp
	115, // 126: smsclient.SeckillSessionService.DeleteSeckillSession:output_type -> smsclient.DeleteSeckillSessionResp
	117, // 127: smsclient.SeckillSessionService.UpdateSeckillSession:output_type -> smsclient.UpdateSeckillSessionResp
	119, // 128: smsclient.SeckillSessionService.UpdateSeckillSessionStatus:output_type -> smsclient.UpdateSeckillSessionStatusResp
	121, // 129: smsclient.SeckillSessionService.QuerySeckillSessionDetail:output_type -> smsclient.QuerySeckillSessionDetailResp
	124, // 130: smsclient.SeckillSessionService.QuerySeckillSessionList:output_type -> smsclient.QuerySeckillSessionListResp
	126, // 131: smsclient.SeckillSessionService.QuerySeckillSessionListByTime:output_type -> smsclient.QuerySeckillSessionListByTimeResp
	74,  // [74:132] is the sub-list for method output_type
	16,  // [16:74] is the sub-list for method input_type
	16,  // [16:16] is the sub-list for extension type_name
	16,  // [16:16] is the sub-list for extension extendee
	0,   // [0:16] is the sub-list for field type_name
}

func init() { file_rpc_sms_sms_proto_init() }
func file_rpc_sms_sms_proto_init() {
	if File_rpc_sms_sms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_sms_sms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponByScopeIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponByScopeIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponByCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponByCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponRecordDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponRecordDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponRecordListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponRecordListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberCouponListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberCouponListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponScopeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponScopeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponScopeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponScopeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponScopeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponScopeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponScopeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponScopeDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponScopeDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponScopeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponScopeListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponScopeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCouponTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCouponTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponTypeStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponTypeStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponTypeDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponTypeDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponTypeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponTypeListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouponTypeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHomeAdvertiseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHomeAdvertiseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHomeAdvertiseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHomeAdvertiseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHomeAdvertiseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHomeAdvertiseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHomeAdvertiseStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHomeAdvertiseStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHomeAdvertiseDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHomeAdvertiseDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHomeAdvertiseListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeAdvertiseListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHomeAdvertiseListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillActivityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillActivityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillActivityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillActivityStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillActivityStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillActivityDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillActivityDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillActivityListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeckillActivityListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillActivityListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillActivityListByDateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFlashPromotionListByDateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillProductData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillProductStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillProductStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillProductDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillProductDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillProductListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeckillProductListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillProductListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillProductBySkuIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillReservationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillReservationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillReservationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillReservationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillReservationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillReservationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillReservationStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillReservationStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillReservationDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillReservationDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillReservationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeckillReservationListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillReservationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSeckillSessionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeckillSessionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillSessionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillSessionStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeckillSessionStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillSessionDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillSessionDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillSessionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeckillSessionListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillSessionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillSessionListByTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_sms_sms_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeckillSessionListByTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_sms_sms_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   127,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_rpc_sms_sms_proto_goTypes,
		DependencyIndexes: file_rpc_sms_sms_proto_depIdxs,
		MessageInfos:      file_rpc_sms_sms_proto_msgTypes,
	}.Build()
	File_rpc_sms_sms_proto = out.File
	file_rpc_sms_sms_proto_rawDesc = nil
	file_rpc_sms_sms_proto_goTypes = nil
	file_rpc_sms_sms_proto_depIdxs = nil
}
