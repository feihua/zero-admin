// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/sms/sms.proto

package smsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CouponService_AddCoupon_FullMethodName            = "/smsclient.CouponService/AddCoupon"
	CouponService_DeleteCoupon_FullMethodName         = "/smsclient.CouponService/DeleteCoupon"
	CouponService_UpdateCoupon_FullMethodName         = "/smsclient.CouponService/UpdateCoupon"
	CouponService_UpdateCouponStatus_FullMethodName   = "/smsclient.CouponService/UpdateCouponStatus"
	CouponService_QueryCouponDetail_FullMethodName    = "/smsclient.CouponService/QueryCouponDetail"
	CouponService_QueryCouponList_FullMethodName      = "/smsclient.CouponService/QueryCouponList"
	CouponService_QueryCouponByScopeId_FullMethodName = "/smsclient.CouponService/QueryCouponByScopeId"
	CouponService_QueryCouponByCode_FullMethodName    = "/smsclient.CouponService/QueryCouponByCode"
)

// CouponServiceClient is the client API for CouponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponServiceClient interface {
	// 添加优惠券
	AddCoupon(ctx context.Context, in *AddCouponReq, opts ...grpc.CallOption) (*AddCouponResp, error)
	// 删除优惠券
	DeleteCoupon(ctx context.Context, in *DeleteCouponReq, opts ...grpc.CallOption) (*DeleteCouponResp, error)
	// 更新优惠券
	UpdateCoupon(ctx context.Context, in *UpdateCouponReq, opts ...grpc.CallOption) (*UpdateCouponResp, error)
	// 更新优惠券状态
	UpdateCouponStatus(ctx context.Context, in *UpdateCouponStatusReq, opts ...grpc.CallOption) (*UpdateCouponStatusResp, error)
	// 查询优惠券详情
	QueryCouponDetail(ctx context.Context, in *QueryCouponDetailReq, opts ...grpc.CallOption) (*QueryCouponDetailResp, error)
	// 查询优惠券列表
	QueryCouponList(ctx context.Context, in *QueryCouponListReq, opts ...grpc.CallOption) (*QueryCouponListResp, error)
	// 根据商品Id和分类id查询可用的优惠券
	QueryCouponByScopeId(ctx context.Context, in *QueryCouponByScopeIdReq, opts ...grpc.CallOption) (*QueryCouponByScopeIdResp, error)
	// 根据优惠券类型的code查询优惠券
	QueryCouponByCode(ctx context.Context, in *QueryCouponByCodeReq, opts ...grpc.CallOption) (*QueryCouponByCodeResp, error)
}

type couponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponServiceClient(cc grpc.ClientConnInterface) CouponServiceClient {
	return &couponServiceClient{cc}
}

func (c *couponServiceClient) AddCoupon(ctx context.Context, in *AddCouponReq, opts ...grpc.CallOption) (*AddCouponResp, error) {
	out := new(AddCouponResp)
	err := c.cc.Invoke(ctx, CouponService_AddCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) DeleteCoupon(ctx context.Context, in *DeleteCouponReq, opts ...grpc.CallOption) (*DeleteCouponResp, error) {
	out := new(DeleteCouponResp)
	err := c.cc.Invoke(ctx, CouponService_DeleteCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) UpdateCoupon(ctx context.Context, in *UpdateCouponReq, opts ...grpc.CallOption) (*UpdateCouponResp, error) {
	out := new(UpdateCouponResp)
	err := c.cc.Invoke(ctx, CouponService_UpdateCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) UpdateCouponStatus(ctx context.Context, in *UpdateCouponStatusReq, opts ...grpc.CallOption) (*UpdateCouponStatusResp, error) {
	out := new(UpdateCouponStatusResp)
	err := c.cc.Invoke(ctx, CouponService_UpdateCouponStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponDetail(ctx context.Context, in *QueryCouponDetailReq, opts ...grpc.CallOption) (*QueryCouponDetailResp, error) {
	out := new(QueryCouponDetailResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponList(ctx context.Context, in *QueryCouponListReq, opts ...grpc.CallOption) (*QueryCouponListResp, error) {
	out := new(QueryCouponListResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponByScopeId(ctx context.Context, in *QueryCouponByScopeIdReq, opts ...grpc.CallOption) (*QueryCouponByScopeIdResp, error) {
	out := new(QueryCouponByScopeIdResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponByScopeId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) QueryCouponByCode(ctx context.Context, in *QueryCouponByCodeReq, opts ...grpc.CallOption) (*QueryCouponByCodeResp, error) {
	out := new(QueryCouponByCodeResp)
	err := c.cc.Invoke(ctx, CouponService_QueryCouponByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServiceServer is the server API for CouponService service.
// All implementations must embed UnimplementedCouponServiceServer
// for forward compatibility
type CouponServiceServer interface {
	// 添加优惠券
	AddCoupon(context.Context, *AddCouponReq) (*AddCouponResp, error)
	// 删除优惠券
	DeleteCoupon(context.Context, *DeleteCouponReq) (*DeleteCouponResp, error)
	// 更新优惠券
	UpdateCoupon(context.Context, *UpdateCouponReq) (*UpdateCouponResp, error)
	// 更新优惠券状态
	UpdateCouponStatus(context.Context, *UpdateCouponStatusReq) (*UpdateCouponStatusResp, error)
	// 查询优惠券详情
	QueryCouponDetail(context.Context, *QueryCouponDetailReq) (*QueryCouponDetailResp, error)
	// 查询优惠券列表
	QueryCouponList(context.Context, *QueryCouponListReq) (*QueryCouponListResp, error)
	// 根据商品Id和分类id查询可用的优惠券
	QueryCouponByScopeId(context.Context, *QueryCouponByScopeIdReq) (*QueryCouponByScopeIdResp, error)
	// 根据优惠券类型的code查询优惠券
	QueryCouponByCode(context.Context, *QueryCouponByCodeReq) (*QueryCouponByCodeResp, error)
	mustEmbedUnimplementedCouponServiceServer()
}

// UnimplementedCouponServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponServiceServer struct {
}

func (UnimplementedCouponServiceServer) AddCoupon(context.Context, *AddCouponReq) (*AddCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoupon not implemented")
}
func (UnimplementedCouponServiceServer) DeleteCoupon(context.Context, *DeleteCouponReq) (*DeleteCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoupon not implemented")
}
func (UnimplementedCouponServiceServer) UpdateCoupon(context.Context, *UpdateCouponReq) (*UpdateCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoupon not implemented")
}
func (UnimplementedCouponServiceServer) UpdateCouponStatus(context.Context, *UpdateCouponStatusReq) (*UpdateCouponStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponStatus not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponDetail(context.Context, *QueryCouponDetailReq) (*QueryCouponDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponDetail not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponList(context.Context, *QueryCouponListReq) (*QueryCouponListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponList not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponByScopeId(context.Context, *QueryCouponByScopeIdReq) (*QueryCouponByScopeIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponByScopeId not implemented")
}
func (UnimplementedCouponServiceServer) QueryCouponByCode(context.Context, *QueryCouponByCodeReq) (*QueryCouponByCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponByCode not implemented")
}
func (UnimplementedCouponServiceServer) mustEmbedUnimplementedCouponServiceServer() {}

// UnsafeCouponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServiceServer will
// result in compilation errors.
type UnsafeCouponServiceServer interface {
	mustEmbedUnimplementedCouponServiceServer()
}

func RegisterCouponServiceServer(s grpc.ServiceRegistrar, srv CouponServiceServer) {
	s.RegisterService(&CouponService_ServiceDesc, srv)
}

func _CouponService_AddCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).AddCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_AddCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).AddCoupon(ctx, req.(*AddCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_DeleteCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).DeleteCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_DeleteCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).DeleteCoupon(ctx, req.(*DeleteCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_UpdateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).UpdateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_UpdateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).UpdateCoupon(ctx, req.(*UpdateCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_UpdateCouponStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).UpdateCouponStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_UpdateCouponStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).UpdateCouponStatus(ctx, req.(*UpdateCouponStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponDetail(ctx, req.(*QueryCouponDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponList(ctx, req.(*QueryCouponListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponByScopeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponByScopeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponByScopeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponByScopeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponByScopeId(ctx, req.(*QueryCouponByScopeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_QueryCouponByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).QueryCouponByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_QueryCouponByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).QueryCouponByCode(ctx, req.(*QueryCouponByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponService_ServiceDesc is the grpc.ServiceDesc for CouponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.CouponService",
	HandlerType: (*CouponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCoupon",
			Handler:    _CouponService_AddCoupon_Handler,
		},
		{
			MethodName: "DeleteCoupon",
			Handler:    _CouponService_DeleteCoupon_Handler,
		},
		{
			MethodName: "UpdateCoupon",
			Handler:    _CouponService_UpdateCoupon_Handler,
		},
		{
			MethodName: "UpdateCouponStatus",
			Handler:    _CouponService_UpdateCouponStatus_Handler,
		},
		{
			MethodName: "QueryCouponDetail",
			Handler:    _CouponService_QueryCouponDetail_Handler,
		},
		{
			MethodName: "QueryCouponList",
			Handler:    _CouponService_QueryCouponList_Handler,
		},
		{
			MethodName: "QueryCouponByScopeId",
			Handler:    _CouponService_QueryCouponByScopeId_Handler,
		},
		{
			MethodName: "QueryCouponByCode",
			Handler:    _CouponService_QueryCouponByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	CouponRecordService_AddCouponRecord_FullMethodName         = "/smsclient.CouponRecordService/AddCouponRecord"
	CouponRecordService_DeleteCouponRecord_FullMethodName      = "/smsclient.CouponRecordService/DeleteCouponRecord"
	CouponRecordService_UpdateCouponRecord_FullMethodName      = "/smsclient.CouponRecordService/UpdateCouponRecord"
	CouponRecordService_QueryCouponRecordDetail_FullMethodName = "/smsclient.CouponRecordService/QueryCouponRecordDetail"
	CouponRecordService_QueryCouponRecordList_FullMethodName   = "/smsclient.CouponRecordService/QueryCouponRecordList"
	CouponRecordService_QueryMemberCouponList_FullMethodName   = "/smsclient.CouponRecordService/QueryMemberCouponList"
)

// CouponRecordServiceClient is the client API for CouponRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponRecordServiceClient interface {
	// 添加优惠券领取记录
	AddCouponRecord(ctx context.Context, in *AddCouponRecordReq, opts ...grpc.CallOption) (*AddCouponRecordResp, error)
	// 删除优惠券领取记录
	DeleteCouponRecord(ctx context.Context, in *DeleteCouponRecordReq, opts ...grpc.CallOption) (*DeleteCouponRecordResp, error)
	// 更新优惠券领取记录
	UpdateCouponRecord(ctx context.Context, in *UpdateCouponRecordReq, opts ...grpc.CallOption) (*UpdateCouponRecordResp, error)
	// 查询优惠券领取记录详情
	QueryCouponRecordDetail(ctx context.Context, in *QueryCouponRecordDetailReq, opts ...grpc.CallOption) (*QueryCouponRecordDetailResp, error)
	// 查询优惠券领取记录列表
	QueryCouponRecordList(ctx context.Context, in *QueryCouponRecordListReq, opts ...grpc.CallOption) (*QueryCouponRecordListResp, error)
	// 获取会员优惠券
	QueryMemberCouponList(ctx context.Context, in *QueryMemberCouponListReq, opts ...grpc.CallOption) (*QueryMemberCouponListResp, error)
}

type couponRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponRecordServiceClient(cc grpc.ClientConnInterface) CouponRecordServiceClient {
	return &couponRecordServiceClient{cc}
}

func (c *couponRecordServiceClient) AddCouponRecord(ctx context.Context, in *AddCouponRecordReq, opts ...grpc.CallOption) (*AddCouponRecordResp, error) {
	out := new(AddCouponRecordResp)
	err := c.cc.Invoke(ctx, CouponRecordService_AddCouponRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponRecordServiceClient) DeleteCouponRecord(ctx context.Context, in *DeleteCouponRecordReq, opts ...grpc.CallOption) (*DeleteCouponRecordResp, error) {
	out := new(DeleteCouponRecordResp)
	err := c.cc.Invoke(ctx, CouponRecordService_DeleteCouponRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponRecordServiceClient) UpdateCouponRecord(ctx context.Context, in *UpdateCouponRecordReq, opts ...grpc.CallOption) (*UpdateCouponRecordResp, error) {
	out := new(UpdateCouponRecordResp)
	err := c.cc.Invoke(ctx, CouponRecordService_UpdateCouponRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponRecordServiceClient) QueryCouponRecordDetail(ctx context.Context, in *QueryCouponRecordDetailReq, opts ...grpc.CallOption) (*QueryCouponRecordDetailResp, error) {
	out := new(QueryCouponRecordDetailResp)
	err := c.cc.Invoke(ctx, CouponRecordService_QueryCouponRecordDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponRecordServiceClient) QueryCouponRecordList(ctx context.Context, in *QueryCouponRecordListReq, opts ...grpc.CallOption) (*QueryCouponRecordListResp, error) {
	out := new(QueryCouponRecordListResp)
	err := c.cc.Invoke(ctx, CouponRecordService_QueryCouponRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponRecordServiceClient) QueryMemberCouponList(ctx context.Context, in *QueryMemberCouponListReq, opts ...grpc.CallOption) (*QueryMemberCouponListResp, error) {
	out := new(QueryMemberCouponListResp)
	err := c.cc.Invoke(ctx, CouponRecordService_QueryMemberCouponList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponRecordServiceServer is the server API for CouponRecordService service.
// All implementations must embed UnimplementedCouponRecordServiceServer
// for forward compatibility
type CouponRecordServiceServer interface {
	// 添加优惠券领取记录
	AddCouponRecord(context.Context, *AddCouponRecordReq) (*AddCouponRecordResp, error)
	// 删除优惠券领取记录
	DeleteCouponRecord(context.Context, *DeleteCouponRecordReq) (*DeleteCouponRecordResp, error)
	// 更新优惠券领取记录
	UpdateCouponRecord(context.Context, *UpdateCouponRecordReq) (*UpdateCouponRecordResp, error)
	// 查询优惠券领取记录详情
	QueryCouponRecordDetail(context.Context, *QueryCouponRecordDetailReq) (*QueryCouponRecordDetailResp, error)
	// 查询优惠券领取记录列表
	QueryCouponRecordList(context.Context, *QueryCouponRecordListReq) (*QueryCouponRecordListResp, error)
	// 获取会员优惠券
	QueryMemberCouponList(context.Context, *QueryMemberCouponListReq) (*QueryMemberCouponListResp, error)
	mustEmbedUnimplementedCouponRecordServiceServer()
}

// UnimplementedCouponRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponRecordServiceServer struct {
}

func (UnimplementedCouponRecordServiceServer) AddCouponRecord(context.Context, *AddCouponRecordReq) (*AddCouponRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCouponRecord not implemented")
}
func (UnimplementedCouponRecordServiceServer) DeleteCouponRecord(context.Context, *DeleteCouponRecordReq) (*DeleteCouponRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouponRecord not implemented")
}
func (UnimplementedCouponRecordServiceServer) UpdateCouponRecord(context.Context, *UpdateCouponRecordReq) (*UpdateCouponRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponRecord not implemented")
}
func (UnimplementedCouponRecordServiceServer) QueryCouponRecordDetail(context.Context, *QueryCouponRecordDetailReq) (*QueryCouponRecordDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponRecordDetail not implemented")
}
func (UnimplementedCouponRecordServiceServer) QueryCouponRecordList(context.Context, *QueryCouponRecordListReq) (*QueryCouponRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponRecordList not implemented")
}
func (UnimplementedCouponRecordServiceServer) QueryMemberCouponList(context.Context, *QueryMemberCouponListReq) (*QueryMemberCouponListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMemberCouponList not implemented")
}
func (UnimplementedCouponRecordServiceServer) mustEmbedUnimplementedCouponRecordServiceServer() {}

// UnsafeCouponRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponRecordServiceServer will
// result in compilation errors.
type UnsafeCouponRecordServiceServer interface {
	mustEmbedUnimplementedCouponRecordServiceServer()
}

func RegisterCouponRecordServiceServer(s grpc.ServiceRegistrar, srv CouponRecordServiceServer) {
	s.RegisterService(&CouponRecordService_ServiceDesc, srv)
}

func _CouponRecordService_AddCouponRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponRecordServiceServer).AddCouponRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponRecordService_AddCouponRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponRecordServiceServer).AddCouponRecord(ctx, req.(*AddCouponRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponRecordService_DeleteCouponRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponRecordServiceServer).DeleteCouponRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponRecordService_DeleteCouponRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponRecordServiceServer).DeleteCouponRecord(ctx, req.(*DeleteCouponRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponRecordService_UpdateCouponRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponRecordServiceServer).UpdateCouponRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponRecordService_UpdateCouponRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponRecordServiceServer).UpdateCouponRecord(ctx, req.(*UpdateCouponRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponRecordService_QueryCouponRecordDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponRecordDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponRecordServiceServer).QueryCouponRecordDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponRecordService_QueryCouponRecordDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponRecordServiceServer).QueryCouponRecordDetail(ctx, req.(*QueryCouponRecordDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponRecordService_QueryCouponRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponRecordServiceServer).QueryCouponRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponRecordService_QueryCouponRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponRecordServiceServer).QueryCouponRecordList(ctx, req.(*QueryCouponRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponRecordService_QueryMemberCouponList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberCouponListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponRecordServiceServer).QueryMemberCouponList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponRecordService_QueryMemberCouponList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponRecordServiceServer).QueryMemberCouponList(ctx, req.(*QueryMemberCouponListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponRecordService_ServiceDesc is the grpc.ServiceDesc for CouponRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.CouponRecordService",
	HandlerType: (*CouponRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCouponRecord",
			Handler:    _CouponRecordService_AddCouponRecord_Handler,
		},
		{
			MethodName: "DeleteCouponRecord",
			Handler:    _CouponRecordService_DeleteCouponRecord_Handler,
		},
		{
			MethodName: "UpdateCouponRecord",
			Handler:    _CouponRecordService_UpdateCouponRecord_Handler,
		},
		{
			MethodName: "QueryCouponRecordDetail",
			Handler:    _CouponRecordService_QueryCouponRecordDetail_Handler,
		},
		{
			MethodName: "QueryCouponRecordList",
			Handler:    _CouponRecordService_QueryCouponRecordList_Handler,
		},
		{
			MethodName: "QueryMemberCouponList",
			Handler:    _CouponRecordService_QueryMemberCouponList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	CouponScopeService_AddCouponScope_FullMethodName         = "/smsclient.CouponScopeService/AddCouponScope"
	CouponScopeService_DeleteCouponScope_FullMethodName      = "/smsclient.CouponScopeService/DeleteCouponScope"
	CouponScopeService_UpdateCouponScope_FullMethodName      = "/smsclient.CouponScopeService/UpdateCouponScope"
	CouponScopeService_QueryCouponScopeDetail_FullMethodName = "/smsclient.CouponScopeService/QueryCouponScopeDetail"
	CouponScopeService_QueryCouponScopeList_FullMethodName   = "/smsclient.CouponScopeService/QueryCouponScopeList"
)

// CouponScopeServiceClient is the client API for CouponScopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponScopeServiceClient interface {
	// 添加优惠券使用范围
	AddCouponScope(ctx context.Context, in *AddCouponScopeReq, opts ...grpc.CallOption) (*AddCouponScopeResp, error)
	// 删除优惠券使用范围
	DeleteCouponScope(ctx context.Context, in *DeleteCouponScopeReq, opts ...grpc.CallOption) (*DeleteCouponScopeResp, error)
	// 更新优惠券使用范围
	UpdateCouponScope(ctx context.Context, in *UpdateCouponScopeReq, opts ...grpc.CallOption) (*UpdateCouponScopeResp, error)
	// 查询优惠券使用范围详情
	QueryCouponScopeDetail(ctx context.Context, in *QueryCouponScopeDetailReq, opts ...grpc.CallOption) (*QueryCouponScopeDetailResp, error)
	// 查询优惠券使用范围列表
	QueryCouponScopeList(ctx context.Context, in *QueryCouponScopeListReq, opts ...grpc.CallOption) (*QueryCouponScopeListResp, error)
}

type couponScopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponScopeServiceClient(cc grpc.ClientConnInterface) CouponScopeServiceClient {
	return &couponScopeServiceClient{cc}
}

func (c *couponScopeServiceClient) AddCouponScope(ctx context.Context, in *AddCouponScopeReq, opts ...grpc.CallOption) (*AddCouponScopeResp, error) {
	out := new(AddCouponScopeResp)
	err := c.cc.Invoke(ctx, CouponScopeService_AddCouponScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponScopeServiceClient) DeleteCouponScope(ctx context.Context, in *DeleteCouponScopeReq, opts ...grpc.CallOption) (*DeleteCouponScopeResp, error) {
	out := new(DeleteCouponScopeResp)
	err := c.cc.Invoke(ctx, CouponScopeService_DeleteCouponScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponScopeServiceClient) UpdateCouponScope(ctx context.Context, in *UpdateCouponScopeReq, opts ...grpc.CallOption) (*UpdateCouponScopeResp, error) {
	out := new(UpdateCouponScopeResp)
	err := c.cc.Invoke(ctx, CouponScopeService_UpdateCouponScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponScopeServiceClient) QueryCouponScopeDetail(ctx context.Context, in *QueryCouponScopeDetailReq, opts ...grpc.CallOption) (*QueryCouponScopeDetailResp, error) {
	out := new(QueryCouponScopeDetailResp)
	err := c.cc.Invoke(ctx, CouponScopeService_QueryCouponScopeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponScopeServiceClient) QueryCouponScopeList(ctx context.Context, in *QueryCouponScopeListReq, opts ...grpc.CallOption) (*QueryCouponScopeListResp, error) {
	out := new(QueryCouponScopeListResp)
	err := c.cc.Invoke(ctx, CouponScopeService_QueryCouponScopeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponScopeServiceServer is the server API for CouponScopeService service.
// All implementations must embed UnimplementedCouponScopeServiceServer
// for forward compatibility
type CouponScopeServiceServer interface {
	// 添加优惠券使用范围
	AddCouponScope(context.Context, *AddCouponScopeReq) (*AddCouponScopeResp, error)
	// 删除优惠券使用范围
	DeleteCouponScope(context.Context, *DeleteCouponScopeReq) (*DeleteCouponScopeResp, error)
	// 更新优惠券使用范围
	UpdateCouponScope(context.Context, *UpdateCouponScopeReq) (*UpdateCouponScopeResp, error)
	// 查询优惠券使用范围详情
	QueryCouponScopeDetail(context.Context, *QueryCouponScopeDetailReq) (*QueryCouponScopeDetailResp, error)
	// 查询优惠券使用范围列表
	QueryCouponScopeList(context.Context, *QueryCouponScopeListReq) (*QueryCouponScopeListResp, error)
	mustEmbedUnimplementedCouponScopeServiceServer()
}

// UnimplementedCouponScopeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponScopeServiceServer struct {
}

func (UnimplementedCouponScopeServiceServer) AddCouponScope(context.Context, *AddCouponScopeReq) (*AddCouponScopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCouponScope not implemented")
}
func (UnimplementedCouponScopeServiceServer) DeleteCouponScope(context.Context, *DeleteCouponScopeReq) (*DeleteCouponScopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouponScope not implemented")
}
func (UnimplementedCouponScopeServiceServer) UpdateCouponScope(context.Context, *UpdateCouponScopeReq) (*UpdateCouponScopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponScope not implemented")
}
func (UnimplementedCouponScopeServiceServer) QueryCouponScopeDetail(context.Context, *QueryCouponScopeDetailReq) (*QueryCouponScopeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponScopeDetail not implemented")
}
func (UnimplementedCouponScopeServiceServer) QueryCouponScopeList(context.Context, *QueryCouponScopeListReq) (*QueryCouponScopeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponScopeList not implemented")
}
func (UnimplementedCouponScopeServiceServer) mustEmbedUnimplementedCouponScopeServiceServer() {}

// UnsafeCouponScopeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponScopeServiceServer will
// result in compilation errors.
type UnsafeCouponScopeServiceServer interface {
	mustEmbedUnimplementedCouponScopeServiceServer()
}

func RegisterCouponScopeServiceServer(s grpc.ServiceRegistrar, srv CouponScopeServiceServer) {
	s.RegisterService(&CouponScopeService_ServiceDesc, srv)
}

func _CouponScopeService_AddCouponScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponScopeServiceServer).AddCouponScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponScopeService_AddCouponScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponScopeServiceServer).AddCouponScope(ctx, req.(*AddCouponScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponScopeService_DeleteCouponScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponScopeServiceServer).DeleteCouponScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponScopeService_DeleteCouponScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponScopeServiceServer).DeleteCouponScope(ctx, req.(*DeleteCouponScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponScopeService_UpdateCouponScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponScopeServiceServer).UpdateCouponScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponScopeService_UpdateCouponScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponScopeServiceServer).UpdateCouponScope(ctx, req.(*UpdateCouponScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponScopeService_QueryCouponScopeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponScopeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponScopeServiceServer).QueryCouponScopeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponScopeService_QueryCouponScopeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponScopeServiceServer).QueryCouponScopeDetail(ctx, req.(*QueryCouponScopeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponScopeService_QueryCouponScopeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponScopeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponScopeServiceServer).QueryCouponScopeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponScopeService_QueryCouponScopeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponScopeServiceServer).QueryCouponScopeList(ctx, req.(*QueryCouponScopeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponScopeService_ServiceDesc is the grpc.ServiceDesc for CouponScopeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponScopeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.CouponScopeService",
	HandlerType: (*CouponScopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCouponScope",
			Handler:    _CouponScopeService_AddCouponScope_Handler,
		},
		{
			MethodName: "DeleteCouponScope",
			Handler:    _CouponScopeService_DeleteCouponScope_Handler,
		},
		{
			MethodName: "UpdateCouponScope",
			Handler:    _CouponScopeService_UpdateCouponScope_Handler,
		},
		{
			MethodName: "QueryCouponScopeDetail",
			Handler:    _CouponScopeService_QueryCouponScopeDetail_Handler,
		},
		{
			MethodName: "QueryCouponScopeList",
			Handler:    _CouponScopeService_QueryCouponScopeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	CouponTypeService_AddCouponType_FullMethodName          = "/smsclient.CouponTypeService/AddCouponType"
	CouponTypeService_DeleteCouponType_FullMethodName       = "/smsclient.CouponTypeService/DeleteCouponType"
	CouponTypeService_UpdateCouponType_FullMethodName       = "/smsclient.CouponTypeService/UpdateCouponType"
	CouponTypeService_UpdateCouponTypeStatus_FullMethodName = "/smsclient.CouponTypeService/UpdateCouponTypeStatus"
	CouponTypeService_QueryCouponTypeDetail_FullMethodName  = "/smsclient.CouponTypeService/QueryCouponTypeDetail"
	CouponTypeService_QueryCouponTypeList_FullMethodName    = "/smsclient.CouponTypeService/QueryCouponTypeList"
)

// CouponTypeServiceClient is the client API for CouponTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponTypeServiceClient interface {
	// 添加优惠券类型
	AddCouponType(ctx context.Context, in *AddCouponTypeReq, opts ...grpc.CallOption) (*AddCouponTypeResp, error)
	// 删除优惠券类型
	DeleteCouponType(ctx context.Context, in *DeleteCouponTypeReq, opts ...grpc.CallOption) (*DeleteCouponTypeResp, error)
	// 更新优惠券类型
	UpdateCouponType(ctx context.Context, in *UpdateCouponTypeReq, opts ...grpc.CallOption) (*UpdateCouponTypeResp, error)
	// 更新优惠券类型状态
	UpdateCouponTypeStatus(ctx context.Context, in *UpdateCouponTypeStatusReq, opts ...grpc.CallOption) (*UpdateCouponTypeStatusResp, error)
	// 查询优惠券类型详情
	QueryCouponTypeDetail(ctx context.Context, in *QueryCouponTypeDetailReq, opts ...grpc.CallOption) (*QueryCouponTypeDetailResp, error)
	// 查询优惠券类型列表
	QueryCouponTypeList(ctx context.Context, in *QueryCouponTypeListReq, opts ...grpc.CallOption) (*QueryCouponTypeListResp, error)
}

type couponTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponTypeServiceClient(cc grpc.ClientConnInterface) CouponTypeServiceClient {
	return &couponTypeServiceClient{cc}
}

func (c *couponTypeServiceClient) AddCouponType(ctx context.Context, in *AddCouponTypeReq, opts ...grpc.CallOption) (*AddCouponTypeResp, error) {
	out := new(AddCouponTypeResp)
	err := c.cc.Invoke(ctx, CouponTypeService_AddCouponType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponTypeServiceClient) DeleteCouponType(ctx context.Context, in *DeleteCouponTypeReq, opts ...grpc.CallOption) (*DeleteCouponTypeResp, error) {
	out := new(DeleteCouponTypeResp)
	err := c.cc.Invoke(ctx, CouponTypeService_DeleteCouponType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponTypeServiceClient) UpdateCouponType(ctx context.Context, in *UpdateCouponTypeReq, opts ...grpc.CallOption) (*UpdateCouponTypeResp, error) {
	out := new(UpdateCouponTypeResp)
	err := c.cc.Invoke(ctx, CouponTypeService_UpdateCouponType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponTypeServiceClient) UpdateCouponTypeStatus(ctx context.Context, in *UpdateCouponTypeStatusReq, opts ...grpc.CallOption) (*UpdateCouponTypeStatusResp, error) {
	out := new(UpdateCouponTypeStatusResp)
	err := c.cc.Invoke(ctx, CouponTypeService_UpdateCouponTypeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponTypeServiceClient) QueryCouponTypeDetail(ctx context.Context, in *QueryCouponTypeDetailReq, opts ...grpc.CallOption) (*QueryCouponTypeDetailResp, error) {
	out := new(QueryCouponTypeDetailResp)
	err := c.cc.Invoke(ctx, CouponTypeService_QueryCouponTypeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponTypeServiceClient) QueryCouponTypeList(ctx context.Context, in *QueryCouponTypeListReq, opts ...grpc.CallOption) (*QueryCouponTypeListResp, error) {
	out := new(QueryCouponTypeListResp)
	err := c.cc.Invoke(ctx, CouponTypeService_QueryCouponTypeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponTypeServiceServer is the server API for CouponTypeService service.
// All implementations must embed UnimplementedCouponTypeServiceServer
// for forward compatibility
type CouponTypeServiceServer interface {
	// 添加优惠券类型
	AddCouponType(context.Context, *AddCouponTypeReq) (*AddCouponTypeResp, error)
	// 删除优惠券类型
	DeleteCouponType(context.Context, *DeleteCouponTypeReq) (*DeleteCouponTypeResp, error)
	// 更新优惠券类型
	UpdateCouponType(context.Context, *UpdateCouponTypeReq) (*UpdateCouponTypeResp, error)
	// 更新优惠券类型状态
	UpdateCouponTypeStatus(context.Context, *UpdateCouponTypeStatusReq) (*UpdateCouponTypeStatusResp, error)
	// 查询优惠券类型详情
	QueryCouponTypeDetail(context.Context, *QueryCouponTypeDetailReq) (*QueryCouponTypeDetailResp, error)
	// 查询优惠券类型列表
	QueryCouponTypeList(context.Context, *QueryCouponTypeListReq) (*QueryCouponTypeListResp, error)
	mustEmbedUnimplementedCouponTypeServiceServer()
}

// UnimplementedCouponTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponTypeServiceServer struct {
}

func (UnimplementedCouponTypeServiceServer) AddCouponType(context.Context, *AddCouponTypeReq) (*AddCouponTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCouponType not implemented")
}
func (UnimplementedCouponTypeServiceServer) DeleteCouponType(context.Context, *DeleteCouponTypeReq) (*DeleteCouponTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouponType not implemented")
}
func (UnimplementedCouponTypeServiceServer) UpdateCouponType(context.Context, *UpdateCouponTypeReq) (*UpdateCouponTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponType not implemented")
}
func (UnimplementedCouponTypeServiceServer) UpdateCouponTypeStatus(context.Context, *UpdateCouponTypeStatusReq) (*UpdateCouponTypeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponTypeStatus not implemented")
}
func (UnimplementedCouponTypeServiceServer) QueryCouponTypeDetail(context.Context, *QueryCouponTypeDetailReq) (*QueryCouponTypeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponTypeDetail not implemented")
}
func (UnimplementedCouponTypeServiceServer) QueryCouponTypeList(context.Context, *QueryCouponTypeListReq) (*QueryCouponTypeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCouponTypeList not implemented")
}
func (UnimplementedCouponTypeServiceServer) mustEmbedUnimplementedCouponTypeServiceServer() {}

// UnsafeCouponTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponTypeServiceServer will
// result in compilation errors.
type UnsafeCouponTypeServiceServer interface {
	mustEmbedUnimplementedCouponTypeServiceServer()
}

func RegisterCouponTypeServiceServer(s grpc.ServiceRegistrar, srv CouponTypeServiceServer) {
	s.RegisterService(&CouponTypeService_ServiceDesc, srv)
}

func _CouponTypeService_AddCouponType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponTypeServiceServer).AddCouponType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponTypeService_AddCouponType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponTypeServiceServer).AddCouponType(ctx, req.(*AddCouponTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponTypeService_DeleteCouponType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponTypeServiceServer).DeleteCouponType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponTypeService_DeleteCouponType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponTypeServiceServer).DeleteCouponType(ctx, req.(*DeleteCouponTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponTypeService_UpdateCouponType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponTypeServiceServer).UpdateCouponType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponTypeService_UpdateCouponType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponTypeServiceServer).UpdateCouponType(ctx, req.(*UpdateCouponTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponTypeService_UpdateCouponTypeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponTypeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponTypeServiceServer).UpdateCouponTypeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponTypeService_UpdateCouponTypeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponTypeServiceServer).UpdateCouponTypeStatus(ctx, req.(*UpdateCouponTypeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponTypeService_QueryCouponTypeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponTypeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponTypeServiceServer).QueryCouponTypeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponTypeService_QueryCouponTypeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponTypeServiceServer).QueryCouponTypeDetail(ctx, req.(*QueryCouponTypeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponTypeService_QueryCouponTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouponTypeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponTypeServiceServer).QueryCouponTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponTypeService_QueryCouponTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponTypeServiceServer).QueryCouponTypeList(ctx, req.(*QueryCouponTypeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponTypeService_ServiceDesc is the grpc.ServiceDesc for CouponTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.CouponTypeService",
	HandlerType: (*CouponTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCouponType",
			Handler:    _CouponTypeService_AddCouponType_Handler,
		},
		{
			MethodName: "DeleteCouponType",
			Handler:    _CouponTypeService_DeleteCouponType_Handler,
		},
		{
			MethodName: "UpdateCouponType",
			Handler:    _CouponTypeService_UpdateCouponType_Handler,
		},
		{
			MethodName: "UpdateCouponTypeStatus",
			Handler:    _CouponTypeService_UpdateCouponTypeStatus_Handler,
		},
		{
			MethodName: "QueryCouponTypeDetail",
			Handler:    _CouponTypeService_QueryCouponTypeDetail_Handler,
		},
		{
			MethodName: "QueryCouponTypeList",
			Handler:    _CouponTypeService_QueryCouponTypeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	HomeAdvertiseService_AddHomeAdvertise_FullMethodName          = "/smsclient.HomeAdvertiseService/AddHomeAdvertise"
	HomeAdvertiseService_DeleteHomeAdvertise_FullMethodName       = "/smsclient.HomeAdvertiseService/DeleteHomeAdvertise"
	HomeAdvertiseService_UpdateHomeAdvertise_FullMethodName       = "/smsclient.HomeAdvertiseService/UpdateHomeAdvertise"
	HomeAdvertiseService_UpdateHomeAdvertiseStatus_FullMethodName = "/smsclient.HomeAdvertiseService/UpdateHomeAdvertiseStatus"
	HomeAdvertiseService_QueryHomeAdvertiseDetail_FullMethodName  = "/smsclient.HomeAdvertiseService/QueryHomeAdvertiseDetail"
	HomeAdvertiseService_QueryHomeAdvertiseList_FullMethodName    = "/smsclient.HomeAdvertiseService/QueryHomeAdvertiseList"
)

// HomeAdvertiseServiceClient is the client API for HomeAdvertiseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeAdvertiseServiceClient interface {
	// 添加首页轮播广告
	AddHomeAdvertise(ctx context.Context, in *AddHomeAdvertiseReq, opts ...grpc.CallOption) (*AddHomeAdvertiseResp, error)
	// 删除首页轮播广告
	DeleteHomeAdvertise(ctx context.Context, in *DeleteHomeAdvertiseReq, opts ...grpc.CallOption) (*DeleteHomeAdvertiseResp, error)
	// 更新首页轮播广告
	UpdateHomeAdvertise(ctx context.Context, in *UpdateHomeAdvertiseReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseResp, error)
	// 更新首页轮播广告状态
	UpdateHomeAdvertiseStatus(ctx context.Context, in *UpdateHomeAdvertiseStatusReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseStatusResp, error)
	// 查询首页轮播广告详情
	QueryHomeAdvertiseDetail(ctx context.Context, in *QueryHomeAdvertiseDetailReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseDetailResp, error)
	// 查询首页轮播广告列表
	QueryHomeAdvertiseList(ctx context.Context, in *QueryHomeAdvertiseListReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseListResp, error)
}

type homeAdvertiseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeAdvertiseServiceClient(cc grpc.ClientConnInterface) HomeAdvertiseServiceClient {
	return &homeAdvertiseServiceClient{cc}
}

func (c *homeAdvertiseServiceClient) AddHomeAdvertise(ctx context.Context, in *AddHomeAdvertiseReq, opts ...grpc.CallOption) (*AddHomeAdvertiseResp, error) {
	out := new(AddHomeAdvertiseResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_AddHomeAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) DeleteHomeAdvertise(ctx context.Context, in *DeleteHomeAdvertiseReq, opts ...grpc.CallOption) (*DeleteHomeAdvertiseResp, error) {
	out := new(DeleteHomeAdvertiseResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_DeleteHomeAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) UpdateHomeAdvertise(ctx context.Context, in *UpdateHomeAdvertiseReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseResp, error) {
	out := new(UpdateHomeAdvertiseResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_UpdateHomeAdvertise_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) UpdateHomeAdvertiseStatus(ctx context.Context, in *UpdateHomeAdvertiseStatusReq, opts ...grpc.CallOption) (*UpdateHomeAdvertiseStatusResp, error) {
	out := new(UpdateHomeAdvertiseStatusResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_UpdateHomeAdvertiseStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) QueryHomeAdvertiseDetail(ctx context.Context, in *QueryHomeAdvertiseDetailReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseDetailResp, error) {
	out := new(QueryHomeAdvertiseDetailResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_QueryHomeAdvertiseDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeAdvertiseServiceClient) QueryHomeAdvertiseList(ctx context.Context, in *QueryHomeAdvertiseListReq, opts ...grpc.CallOption) (*QueryHomeAdvertiseListResp, error) {
	out := new(QueryHomeAdvertiseListResp)
	err := c.cc.Invoke(ctx, HomeAdvertiseService_QueryHomeAdvertiseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeAdvertiseServiceServer is the server API for HomeAdvertiseService service.
// All implementations must embed UnimplementedHomeAdvertiseServiceServer
// for forward compatibility
type HomeAdvertiseServiceServer interface {
	// 添加首页轮播广告
	AddHomeAdvertise(context.Context, *AddHomeAdvertiseReq) (*AddHomeAdvertiseResp, error)
	// 删除首页轮播广告
	DeleteHomeAdvertise(context.Context, *DeleteHomeAdvertiseReq) (*DeleteHomeAdvertiseResp, error)
	// 更新首页轮播广告
	UpdateHomeAdvertise(context.Context, *UpdateHomeAdvertiseReq) (*UpdateHomeAdvertiseResp, error)
	// 更新首页轮播广告状态
	UpdateHomeAdvertiseStatus(context.Context, *UpdateHomeAdvertiseStatusReq) (*UpdateHomeAdvertiseStatusResp, error)
	// 查询首页轮播广告详情
	QueryHomeAdvertiseDetail(context.Context, *QueryHomeAdvertiseDetailReq) (*QueryHomeAdvertiseDetailResp, error)
	// 查询首页轮播广告列表
	QueryHomeAdvertiseList(context.Context, *QueryHomeAdvertiseListReq) (*QueryHomeAdvertiseListResp, error)
	mustEmbedUnimplementedHomeAdvertiseServiceServer()
}

// UnimplementedHomeAdvertiseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeAdvertiseServiceServer struct {
}

func (UnimplementedHomeAdvertiseServiceServer) AddHomeAdvertise(context.Context, *AddHomeAdvertiseReq) (*AddHomeAdvertiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomeAdvertise not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) DeleteHomeAdvertise(context.Context, *DeleteHomeAdvertiseReq) (*DeleteHomeAdvertiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomeAdvertise not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) UpdateHomeAdvertise(context.Context, *UpdateHomeAdvertiseReq) (*UpdateHomeAdvertiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeAdvertise not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) UpdateHomeAdvertiseStatus(context.Context, *UpdateHomeAdvertiseStatusReq) (*UpdateHomeAdvertiseStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomeAdvertiseStatus not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) QueryHomeAdvertiseDetail(context.Context, *QueryHomeAdvertiseDetailReq) (*QueryHomeAdvertiseDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeAdvertiseDetail not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) QueryHomeAdvertiseList(context.Context, *QueryHomeAdvertiseListReq) (*QueryHomeAdvertiseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHomeAdvertiseList not implemented")
}
func (UnimplementedHomeAdvertiseServiceServer) mustEmbedUnimplementedHomeAdvertiseServiceServer() {}

// UnsafeHomeAdvertiseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeAdvertiseServiceServer will
// result in compilation errors.
type UnsafeHomeAdvertiseServiceServer interface {
	mustEmbedUnimplementedHomeAdvertiseServiceServer()
}

func RegisterHomeAdvertiseServiceServer(s grpc.ServiceRegistrar, srv HomeAdvertiseServiceServer) {
	s.RegisterService(&HomeAdvertiseService_ServiceDesc, srv)
}

func _HomeAdvertiseService_AddHomeAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomeAdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).AddHomeAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_AddHomeAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).AddHomeAdvertise(ctx, req.(*AddHomeAdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_DeleteHomeAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomeAdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).DeleteHomeAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_DeleteHomeAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).DeleteHomeAdvertise(ctx, req.(*DeleteHomeAdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_UpdateHomeAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeAdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_UpdateHomeAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertise(ctx, req.(*UpdateHomeAdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_UpdateHomeAdvertiseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomeAdvertiseStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertiseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_UpdateHomeAdvertiseStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).UpdateHomeAdvertiseStatus(ctx, req.(*UpdateHomeAdvertiseStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_QueryHomeAdvertiseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeAdvertiseDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_QueryHomeAdvertiseDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseDetail(ctx, req.(*QueryHomeAdvertiseDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeAdvertiseService_QueryHomeAdvertiseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHomeAdvertiseListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeAdvertiseService_QueryHomeAdvertiseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeAdvertiseServiceServer).QueryHomeAdvertiseList(ctx, req.(*QueryHomeAdvertiseListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeAdvertiseService_ServiceDesc is the grpc.ServiceDesc for HomeAdvertiseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeAdvertiseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.HomeAdvertiseService",
	HandlerType: (*HomeAdvertiseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHomeAdvertise",
			Handler:    _HomeAdvertiseService_AddHomeAdvertise_Handler,
		},
		{
			MethodName: "DeleteHomeAdvertise",
			Handler:    _HomeAdvertiseService_DeleteHomeAdvertise_Handler,
		},
		{
			MethodName: "UpdateHomeAdvertise",
			Handler:    _HomeAdvertiseService_UpdateHomeAdvertise_Handler,
		},
		{
			MethodName: "UpdateHomeAdvertiseStatus",
			Handler:    _HomeAdvertiseService_UpdateHomeAdvertiseStatus_Handler,
		},
		{
			MethodName: "QueryHomeAdvertiseDetail",
			Handler:    _HomeAdvertiseService_QueryHomeAdvertiseDetail_Handler,
		},
		{
			MethodName: "QueryHomeAdvertiseList",
			Handler:    _HomeAdvertiseService_QueryHomeAdvertiseList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	SeckillActivityService_AddSeckillActivity_FullMethodName             = "/smsclient.SeckillActivityService/AddSeckillActivity"
	SeckillActivityService_DeleteSeckillActivity_FullMethodName          = "/smsclient.SeckillActivityService/DeleteSeckillActivity"
	SeckillActivityService_UpdateSeckillActivity_FullMethodName          = "/smsclient.SeckillActivityService/UpdateSeckillActivity"
	SeckillActivityService_UpdateSeckillActivityStatus_FullMethodName    = "/smsclient.SeckillActivityService/UpdateSeckillActivityStatus"
	SeckillActivityService_QuerySeckillActivityDetail_FullMethodName     = "/smsclient.SeckillActivityService/QuerySeckillActivityDetail"
	SeckillActivityService_QuerySeckillActivityList_FullMethodName       = "/smsclient.SeckillActivityService/QuerySeckillActivityList"
	SeckillActivityService_QuerySeckillActivityListByDate_FullMethodName = "/smsclient.SeckillActivityService/QuerySeckillActivityListByDate"
)

// SeckillActivityServiceClient is the client API for SeckillActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillActivityServiceClient interface {
	// 添加秒杀活动
	AddSeckillActivity(ctx context.Context, in *AddSeckillActivityReq, opts ...grpc.CallOption) (*AddSeckillActivityResp, error)
	// 删除秒杀活动
	DeleteSeckillActivity(ctx context.Context, in *DeleteSeckillActivityReq, opts ...grpc.CallOption) (*DeleteSeckillActivityResp, error)
	// 更新秒杀活动
	UpdateSeckillActivity(ctx context.Context, in *UpdateSeckillActivityReq, opts ...grpc.CallOption) (*UpdateSeckillActivityResp, error)
	// 更新秒杀活动状态
	UpdateSeckillActivityStatus(ctx context.Context, in *UpdateSeckillActivityStatusReq, opts ...grpc.CallOption) (*UpdateSeckillActivityStatusResp, error)
	// 查询秒杀活动详情
	QuerySeckillActivityDetail(ctx context.Context, in *QuerySeckillActivityDetailReq, opts ...grpc.CallOption) (*QuerySeckillActivityDetailResp, error)
	// 查询秒杀活动列表
	QuerySeckillActivityList(ctx context.Context, in *QuerySeckillActivityListReq, opts ...grpc.CallOption) (*QuerySeckillActivityListResp, error)
	// 查询当前时间是否有秒杀活动
	QuerySeckillActivityListByDate(ctx context.Context, in *QuerySeckillActivityListByDateReq, opts ...grpc.CallOption) (*QueryFlashPromotionListByDateResp, error)
}

type seckillActivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillActivityServiceClient(cc grpc.ClientConnInterface) SeckillActivityServiceClient {
	return &seckillActivityServiceClient{cc}
}

func (c *seckillActivityServiceClient) AddSeckillActivity(ctx context.Context, in *AddSeckillActivityReq, opts ...grpc.CallOption) (*AddSeckillActivityResp, error) {
	out := new(AddSeckillActivityResp)
	err := c.cc.Invoke(ctx, SeckillActivityService_AddSeckillActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillActivityServiceClient) DeleteSeckillActivity(ctx context.Context, in *DeleteSeckillActivityReq, opts ...grpc.CallOption) (*DeleteSeckillActivityResp, error) {
	out := new(DeleteSeckillActivityResp)
	err := c.cc.Invoke(ctx, SeckillActivityService_DeleteSeckillActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillActivityServiceClient) UpdateSeckillActivity(ctx context.Context, in *UpdateSeckillActivityReq, opts ...grpc.CallOption) (*UpdateSeckillActivityResp, error) {
	out := new(UpdateSeckillActivityResp)
	err := c.cc.Invoke(ctx, SeckillActivityService_UpdateSeckillActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillActivityServiceClient) UpdateSeckillActivityStatus(ctx context.Context, in *UpdateSeckillActivityStatusReq, opts ...grpc.CallOption) (*UpdateSeckillActivityStatusResp, error) {
	out := new(UpdateSeckillActivityStatusResp)
	err := c.cc.Invoke(ctx, SeckillActivityService_UpdateSeckillActivityStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillActivityServiceClient) QuerySeckillActivityDetail(ctx context.Context, in *QuerySeckillActivityDetailReq, opts ...grpc.CallOption) (*QuerySeckillActivityDetailResp, error) {
	out := new(QuerySeckillActivityDetailResp)
	err := c.cc.Invoke(ctx, SeckillActivityService_QuerySeckillActivityDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillActivityServiceClient) QuerySeckillActivityList(ctx context.Context, in *QuerySeckillActivityListReq, opts ...grpc.CallOption) (*QuerySeckillActivityListResp, error) {
	out := new(QuerySeckillActivityListResp)
	err := c.cc.Invoke(ctx, SeckillActivityService_QuerySeckillActivityList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillActivityServiceClient) QuerySeckillActivityListByDate(ctx context.Context, in *QuerySeckillActivityListByDateReq, opts ...grpc.CallOption) (*QueryFlashPromotionListByDateResp, error) {
	out := new(QueryFlashPromotionListByDateResp)
	err := c.cc.Invoke(ctx, SeckillActivityService_QuerySeckillActivityListByDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillActivityServiceServer is the server API for SeckillActivityService service.
// All implementations must embed UnimplementedSeckillActivityServiceServer
// for forward compatibility
type SeckillActivityServiceServer interface {
	// 添加秒杀活动
	AddSeckillActivity(context.Context, *AddSeckillActivityReq) (*AddSeckillActivityResp, error)
	// 删除秒杀活动
	DeleteSeckillActivity(context.Context, *DeleteSeckillActivityReq) (*DeleteSeckillActivityResp, error)
	// 更新秒杀活动
	UpdateSeckillActivity(context.Context, *UpdateSeckillActivityReq) (*UpdateSeckillActivityResp, error)
	// 更新秒杀活动状态
	UpdateSeckillActivityStatus(context.Context, *UpdateSeckillActivityStatusReq) (*UpdateSeckillActivityStatusResp, error)
	// 查询秒杀活动详情
	QuerySeckillActivityDetail(context.Context, *QuerySeckillActivityDetailReq) (*QuerySeckillActivityDetailResp, error)
	// 查询秒杀活动列表
	QuerySeckillActivityList(context.Context, *QuerySeckillActivityListReq) (*QuerySeckillActivityListResp, error)
	// 查询当前时间是否有秒杀活动
	QuerySeckillActivityListByDate(context.Context, *QuerySeckillActivityListByDateReq) (*QueryFlashPromotionListByDateResp, error)
	mustEmbedUnimplementedSeckillActivityServiceServer()
}

// UnimplementedSeckillActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeckillActivityServiceServer struct {
}

func (UnimplementedSeckillActivityServiceServer) AddSeckillActivity(context.Context, *AddSeckillActivityReq) (*AddSeckillActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeckillActivity not implemented")
}
func (UnimplementedSeckillActivityServiceServer) DeleteSeckillActivity(context.Context, *DeleteSeckillActivityReq) (*DeleteSeckillActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeckillActivity not implemented")
}
func (UnimplementedSeckillActivityServiceServer) UpdateSeckillActivity(context.Context, *UpdateSeckillActivityReq) (*UpdateSeckillActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillActivity not implemented")
}
func (UnimplementedSeckillActivityServiceServer) UpdateSeckillActivityStatus(context.Context, *UpdateSeckillActivityStatusReq) (*UpdateSeckillActivityStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillActivityStatus not implemented")
}
func (UnimplementedSeckillActivityServiceServer) QuerySeckillActivityDetail(context.Context, *QuerySeckillActivityDetailReq) (*QuerySeckillActivityDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillActivityDetail not implemented")
}
func (UnimplementedSeckillActivityServiceServer) QuerySeckillActivityList(context.Context, *QuerySeckillActivityListReq) (*QuerySeckillActivityListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillActivityList not implemented")
}
func (UnimplementedSeckillActivityServiceServer) QuerySeckillActivityListByDate(context.Context, *QuerySeckillActivityListByDateReq) (*QueryFlashPromotionListByDateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillActivityListByDate not implemented")
}
func (UnimplementedSeckillActivityServiceServer) mustEmbedUnimplementedSeckillActivityServiceServer() {
}

// UnsafeSeckillActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillActivityServiceServer will
// result in compilation errors.
type UnsafeSeckillActivityServiceServer interface {
	mustEmbedUnimplementedSeckillActivityServiceServer()
}

func RegisterSeckillActivityServiceServer(s grpc.ServiceRegistrar, srv SeckillActivityServiceServer) {
	s.RegisterService(&SeckillActivityService_ServiceDesc, srv)
}

func _SeckillActivityService_AddSeckillActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeckillActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillActivityServiceServer).AddSeckillActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillActivityService_AddSeckillActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillActivityServiceServer).AddSeckillActivity(ctx, req.(*AddSeckillActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillActivityService_DeleteSeckillActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeckillActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillActivityServiceServer).DeleteSeckillActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillActivityService_DeleteSeckillActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillActivityServiceServer).DeleteSeckillActivity(ctx, req.(*DeleteSeckillActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillActivityService_UpdateSeckillActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillActivityServiceServer).UpdateSeckillActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillActivityService_UpdateSeckillActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillActivityServiceServer).UpdateSeckillActivity(ctx, req.(*UpdateSeckillActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillActivityService_UpdateSeckillActivityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillActivityStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillActivityServiceServer).UpdateSeckillActivityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillActivityService_UpdateSeckillActivityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillActivityServiceServer).UpdateSeckillActivityStatus(ctx, req.(*UpdateSeckillActivityStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillActivityService_QuerySeckillActivityDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillActivityDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillActivityServiceServer).QuerySeckillActivityDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillActivityService_QuerySeckillActivityDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillActivityServiceServer).QuerySeckillActivityDetail(ctx, req.(*QuerySeckillActivityDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillActivityService_QuerySeckillActivityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillActivityListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillActivityServiceServer).QuerySeckillActivityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillActivityService_QuerySeckillActivityList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillActivityServiceServer).QuerySeckillActivityList(ctx, req.(*QuerySeckillActivityListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillActivityService_QuerySeckillActivityListByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillActivityListByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillActivityServiceServer).QuerySeckillActivityListByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillActivityService_QuerySeckillActivityListByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillActivityServiceServer).QuerySeckillActivityListByDate(ctx, req.(*QuerySeckillActivityListByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeckillActivityService_ServiceDesc is the grpc.ServiceDesc for SeckillActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeckillActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.SeckillActivityService",
	HandlerType: (*SeckillActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSeckillActivity",
			Handler:    _SeckillActivityService_AddSeckillActivity_Handler,
		},
		{
			MethodName: "DeleteSeckillActivity",
			Handler:    _SeckillActivityService_DeleteSeckillActivity_Handler,
		},
		{
			MethodName: "UpdateSeckillActivity",
			Handler:    _SeckillActivityService_UpdateSeckillActivity_Handler,
		},
		{
			MethodName: "UpdateSeckillActivityStatus",
			Handler:    _SeckillActivityService_UpdateSeckillActivityStatus_Handler,
		},
		{
			MethodName: "QuerySeckillActivityDetail",
			Handler:    _SeckillActivityService_QuerySeckillActivityDetail_Handler,
		},
		{
			MethodName: "QuerySeckillActivityList",
			Handler:    _SeckillActivityService_QuerySeckillActivityList_Handler,
		},
		{
			MethodName: "QuerySeckillActivityListByDate",
			Handler:    _SeckillActivityService_QuerySeckillActivityListByDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	SeckillProductService_AddSeckillProduct_FullMethodName          = "/smsclient.SeckillProductService/AddSeckillProduct"
	SeckillProductService_DeleteSeckillProduct_FullMethodName       = "/smsclient.SeckillProductService/DeleteSeckillProduct"
	SeckillProductService_UpdateSeckillProduct_FullMethodName       = "/smsclient.SeckillProductService/UpdateSeckillProduct"
	SeckillProductService_UpdateSeckillProductStatus_FullMethodName = "/smsclient.SeckillProductService/UpdateSeckillProductStatus"
	SeckillProductService_QuerySeckillProductDetail_FullMethodName  = "/smsclient.SeckillProductService/QuerySeckillProductDetail"
	SeckillProductService_QuerySeckillProductList_FullMethodName    = "/smsclient.SeckillProductService/QuerySeckillProductList"
	SeckillProductService_QuerySeckillProductBySkuId_FullMethodName = "/smsclient.SeckillProductService/QuerySeckillProductBySkuId"
)

// SeckillProductServiceClient is the client API for SeckillProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillProductServiceClient interface {
	// 添加秒杀商品
	AddSeckillProduct(ctx context.Context, in *AddSeckillProductReq, opts ...grpc.CallOption) (*AddSeckillProductResp, error)
	// 删除秒杀商品
	DeleteSeckillProduct(ctx context.Context, in *DeleteSeckillProductReq, opts ...grpc.CallOption) (*DeleteSeckillProductResp, error)
	// 更新秒杀商品
	UpdateSeckillProduct(ctx context.Context, in *UpdateSeckillProductReq, opts ...grpc.CallOption) (*UpdateSeckillProductResp, error)
	// 更新秒杀商品状态
	UpdateSeckillProductStatus(ctx context.Context, in *UpdateSeckillProductStatusReq, opts ...grpc.CallOption) (*UpdateSeckillProductStatusResp, error)
	// 查询秒杀商品详情
	QuerySeckillProductDetail(ctx context.Context, in *QuerySeckillProductDetailReq, opts ...grpc.CallOption) (*QuerySeckillProductDetailResp, error)
	// 查询秒杀商品列表
	QuerySeckillProductList(ctx context.Context, in *QuerySeckillProductListReq, opts ...grpc.CallOption) (*QuerySeckillProductListResp, error)
	// 查询秒杀商品详情(app)
	QuerySeckillProductBySkuId(ctx context.Context, in *QuerySeckillProductBySkuIdReq, opts ...grpc.CallOption) (*QuerySeckillProductDetailResp, error)
}

type seckillProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillProductServiceClient(cc grpc.ClientConnInterface) SeckillProductServiceClient {
	return &seckillProductServiceClient{cc}
}

func (c *seckillProductServiceClient) AddSeckillProduct(ctx context.Context, in *AddSeckillProductReq, opts ...grpc.CallOption) (*AddSeckillProductResp, error) {
	out := new(AddSeckillProductResp)
	err := c.cc.Invoke(ctx, SeckillProductService_AddSeckillProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillProductServiceClient) DeleteSeckillProduct(ctx context.Context, in *DeleteSeckillProductReq, opts ...grpc.CallOption) (*DeleteSeckillProductResp, error) {
	out := new(DeleteSeckillProductResp)
	err := c.cc.Invoke(ctx, SeckillProductService_DeleteSeckillProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillProductServiceClient) UpdateSeckillProduct(ctx context.Context, in *UpdateSeckillProductReq, opts ...grpc.CallOption) (*UpdateSeckillProductResp, error) {
	out := new(UpdateSeckillProductResp)
	err := c.cc.Invoke(ctx, SeckillProductService_UpdateSeckillProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillProductServiceClient) UpdateSeckillProductStatus(ctx context.Context, in *UpdateSeckillProductStatusReq, opts ...grpc.CallOption) (*UpdateSeckillProductStatusResp, error) {
	out := new(UpdateSeckillProductStatusResp)
	err := c.cc.Invoke(ctx, SeckillProductService_UpdateSeckillProductStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillProductServiceClient) QuerySeckillProductDetail(ctx context.Context, in *QuerySeckillProductDetailReq, opts ...grpc.CallOption) (*QuerySeckillProductDetailResp, error) {
	out := new(QuerySeckillProductDetailResp)
	err := c.cc.Invoke(ctx, SeckillProductService_QuerySeckillProductDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillProductServiceClient) QuerySeckillProductList(ctx context.Context, in *QuerySeckillProductListReq, opts ...grpc.CallOption) (*QuerySeckillProductListResp, error) {
	out := new(QuerySeckillProductListResp)
	err := c.cc.Invoke(ctx, SeckillProductService_QuerySeckillProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillProductServiceClient) QuerySeckillProductBySkuId(ctx context.Context, in *QuerySeckillProductBySkuIdReq, opts ...grpc.CallOption) (*QuerySeckillProductDetailResp, error) {
	out := new(QuerySeckillProductDetailResp)
	err := c.cc.Invoke(ctx, SeckillProductService_QuerySeckillProductBySkuId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillProductServiceServer is the server API for SeckillProductService service.
// All implementations must embed UnimplementedSeckillProductServiceServer
// for forward compatibility
type SeckillProductServiceServer interface {
	// 添加秒杀商品
	AddSeckillProduct(context.Context, *AddSeckillProductReq) (*AddSeckillProductResp, error)
	// 删除秒杀商品
	DeleteSeckillProduct(context.Context, *DeleteSeckillProductReq) (*DeleteSeckillProductResp, error)
	// 更新秒杀商品
	UpdateSeckillProduct(context.Context, *UpdateSeckillProductReq) (*UpdateSeckillProductResp, error)
	// 更新秒杀商品状态
	UpdateSeckillProductStatus(context.Context, *UpdateSeckillProductStatusReq) (*UpdateSeckillProductStatusResp, error)
	// 查询秒杀商品详情
	QuerySeckillProductDetail(context.Context, *QuerySeckillProductDetailReq) (*QuerySeckillProductDetailResp, error)
	// 查询秒杀商品列表
	QuerySeckillProductList(context.Context, *QuerySeckillProductListReq) (*QuerySeckillProductListResp, error)
	// 查询秒杀商品详情(app)
	QuerySeckillProductBySkuId(context.Context, *QuerySeckillProductBySkuIdReq) (*QuerySeckillProductDetailResp, error)
	mustEmbedUnimplementedSeckillProductServiceServer()
}

// UnimplementedSeckillProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeckillProductServiceServer struct {
}

func (UnimplementedSeckillProductServiceServer) AddSeckillProduct(context.Context, *AddSeckillProductReq) (*AddSeckillProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeckillProduct not implemented")
}
func (UnimplementedSeckillProductServiceServer) DeleteSeckillProduct(context.Context, *DeleteSeckillProductReq) (*DeleteSeckillProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeckillProduct not implemented")
}
func (UnimplementedSeckillProductServiceServer) UpdateSeckillProduct(context.Context, *UpdateSeckillProductReq) (*UpdateSeckillProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillProduct not implemented")
}
func (UnimplementedSeckillProductServiceServer) UpdateSeckillProductStatus(context.Context, *UpdateSeckillProductStatusReq) (*UpdateSeckillProductStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillProductStatus not implemented")
}
func (UnimplementedSeckillProductServiceServer) QuerySeckillProductDetail(context.Context, *QuerySeckillProductDetailReq) (*QuerySeckillProductDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillProductDetail not implemented")
}
func (UnimplementedSeckillProductServiceServer) QuerySeckillProductList(context.Context, *QuerySeckillProductListReq) (*QuerySeckillProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillProductList not implemented")
}
func (UnimplementedSeckillProductServiceServer) QuerySeckillProductBySkuId(context.Context, *QuerySeckillProductBySkuIdReq) (*QuerySeckillProductDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillProductBySkuId not implemented")
}
func (UnimplementedSeckillProductServiceServer) mustEmbedUnimplementedSeckillProductServiceServer() {}

// UnsafeSeckillProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillProductServiceServer will
// result in compilation errors.
type UnsafeSeckillProductServiceServer interface {
	mustEmbedUnimplementedSeckillProductServiceServer()
}

func RegisterSeckillProductServiceServer(s grpc.ServiceRegistrar, srv SeckillProductServiceServer) {
	s.RegisterService(&SeckillProductService_ServiceDesc, srv)
}

func _SeckillProductService_AddSeckillProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeckillProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillProductServiceServer).AddSeckillProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillProductService_AddSeckillProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillProductServiceServer).AddSeckillProduct(ctx, req.(*AddSeckillProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillProductService_DeleteSeckillProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeckillProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillProductServiceServer).DeleteSeckillProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillProductService_DeleteSeckillProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillProductServiceServer).DeleteSeckillProduct(ctx, req.(*DeleteSeckillProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillProductService_UpdateSeckillProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillProductServiceServer).UpdateSeckillProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillProductService_UpdateSeckillProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillProductServiceServer).UpdateSeckillProduct(ctx, req.(*UpdateSeckillProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillProductService_UpdateSeckillProductStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillProductStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillProductServiceServer).UpdateSeckillProductStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillProductService_UpdateSeckillProductStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillProductServiceServer).UpdateSeckillProductStatus(ctx, req.(*UpdateSeckillProductStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillProductService_QuerySeckillProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillProductDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillProductServiceServer).QuerySeckillProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillProductService_QuerySeckillProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillProductServiceServer).QuerySeckillProductDetail(ctx, req.(*QuerySeckillProductDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillProductService_QuerySeckillProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillProductServiceServer).QuerySeckillProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillProductService_QuerySeckillProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillProductServiceServer).QuerySeckillProductList(ctx, req.(*QuerySeckillProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillProductService_QuerySeckillProductBySkuId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillProductBySkuIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillProductServiceServer).QuerySeckillProductBySkuId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillProductService_QuerySeckillProductBySkuId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillProductServiceServer).QuerySeckillProductBySkuId(ctx, req.(*QuerySeckillProductBySkuIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeckillProductService_ServiceDesc is the grpc.ServiceDesc for SeckillProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeckillProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.SeckillProductService",
	HandlerType: (*SeckillProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSeckillProduct",
			Handler:    _SeckillProductService_AddSeckillProduct_Handler,
		},
		{
			MethodName: "DeleteSeckillProduct",
			Handler:    _SeckillProductService_DeleteSeckillProduct_Handler,
		},
		{
			MethodName: "UpdateSeckillProduct",
			Handler:    _SeckillProductService_UpdateSeckillProduct_Handler,
		},
		{
			MethodName: "UpdateSeckillProductStatus",
			Handler:    _SeckillProductService_UpdateSeckillProductStatus_Handler,
		},
		{
			MethodName: "QuerySeckillProductDetail",
			Handler:    _SeckillProductService_QuerySeckillProductDetail_Handler,
		},
		{
			MethodName: "QuerySeckillProductList",
			Handler:    _SeckillProductService_QuerySeckillProductList_Handler,
		},
		{
			MethodName: "QuerySeckillProductBySkuId",
			Handler:    _SeckillProductService_QuerySeckillProductBySkuId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	SeckillReservationService_AddSeckillReservation_FullMethodName          = "/smsclient.SeckillReservationService/AddSeckillReservation"
	SeckillReservationService_DeleteSeckillReservation_FullMethodName       = "/smsclient.SeckillReservationService/DeleteSeckillReservation"
	SeckillReservationService_UpdateSeckillReservation_FullMethodName       = "/smsclient.SeckillReservationService/UpdateSeckillReservation"
	SeckillReservationService_UpdateSeckillReservationStatus_FullMethodName = "/smsclient.SeckillReservationService/UpdateSeckillReservationStatus"
	SeckillReservationService_QuerySeckillReservationDetail_FullMethodName  = "/smsclient.SeckillReservationService/QuerySeckillReservationDetail"
	SeckillReservationService_QuerySeckillReservationList_FullMethodName    = "/smsclient.SeckillReservationService/QuerySeckillReservationList"
)

// SeckillReservationServiceClient is the client API for SeckillReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillReservationServiceClient interface {
	// 添加秒杀预约
	AddSeckillReservation(ctx context.Context, in *AddSeckillReservationReq, opts ...grpc.CallOption) (*AddSeckillReservationResp, error)
	// 删除秒杀预约
	DeleteSeckillReservation(ctx context.Context, in *DeleteSeckillReservationReq, opts ...grpc.CallOption) (*DeleteSeckillReservationResp, error)
	// 更新秒杀预约
	UpdateSeckillReservation(ctx context.Context, in *UpdateSeckillReservationReq, opts ...grpc.CallOption) (*UpdateSeckillReservationResp, error)
	// 更新秒杀预约状态
	UpdateSeckillReservationStatus(ctx context.Context, in *UpdateSeckillReservationStatusReq, opts ...grpc.CallOption) (*UpdateSeckillReservationStatusResp, error)
	// 查询秒杀预约详情
	QuerySeckillReservationDetail(ctx context.Context, in *QuerySeckillReservationDetailReq, opts ...grpc.CallOption) (*QuerySeckillReservationDetailResp, error)
	// 查询秒杀预约列表
	QuerySeckillReservationList(ctx context.Context, in *QuerySeckillReservationListReq, opts ...grpc.CallOption) (*QuerySeckillReservationListResp, error)
}

type seckillReservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillReservationServiceClient(cc grpc.ClientConnInterface) SeckillReservationServiceClient {
	return &seckillReservationServiceClient{cc}
}

func (c *seckillReservationServiceClient) AddSeckillReservation(ctx context.Context, in *AddSeckillReservationReq, opts ...grpc.CallOption) (*AddSeckillReservationResp, error) {
	out := new(AddSeckillReservationResp)
	err := c.cc.Invoke(ctx, SeckillReservationService_AddSeckillReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillReservationServiceClient) DeleteSeckillReservation(ctx context.Context, in *DeleteSeckillReservationReq, opts ...grpc.CallOption) (*DeleteSeckillReservationResp, error) {
	out := new(DeleteSeckillReservationResp)
	err := c.cc.Invoke(ctx, SeckillReservationService_DeleteSeckillReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillReservationServiceClient) UpdateSeckillReservation(ctx context.Context, in *UpdateSeckillReservationReq, opts ...grpc.CallOption) (*UpdateSeckillReservationResp, error) {
	out := new(UpdateSeckillReservationResp)
	err := c.cc.Invoke(ctx, SeckillReservationService_UpdateSeckillReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillReservationServiceClient) UpdateSeckillReservationStatus(ctx context.Context, in *UpdateSeckillReservationStatusReq, opts ...grpc.CallOption) (*UpdateSeckillReservationStatusResp, error) {
	out := new(UpdateSeckillReservationStatusResp)
	err := c.cc.Invoke(ctx, SeckillReservationService_UpdateSeckillReservationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillReservationServiceClient) QuerySeckillReservationDetail(ctx context.Context, in *QuerySeckillReservationDetailReq, opts ...grpc.CallOption) (*QuerySeckillReservationDetailResp, error) {
	out := new(QuerySeckillReservationDetailResp)
	err := c.cc.Invoke(ctx, SeckillReservationService_QuerySeckillReservationDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillReservationServiceClient) QuerySeckillReservationList(ctx context.Context, in *QuerySeckillReservationListReq, opts ...grpc.CallOption) (*QuerySeckillReservationListResp, error) {
	out := new(QuerySeckillReservationListResp)
	err := c.cc.Invoke(ctx, SeckillReservationService_QuerySeckillReservationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillReservationServiceServer is the server API for SeckillReservationService service.
// All implementations must embed UnimplementedSeckillReservationServiceServer
// for forward compatibility
type SeckillReservationServiceServer interface {
	// 添加秒杀预约
	AddSeckillReservation(context.Context, *AddSeckillReservationReq) (*AddSeckillReservationResp, error)
	// 删除秒杀预约
	DeleteSeckillReservation(context.Context, *DeleteSeckillReservationReq) (*DeleteSeckillReservationResp, error)
	// 更新秒杀预约
	UpdateSeckillReservation(context.Context, *UpdateSeckillReservationReq) (*UpdateSeckillReservationResp, error)
	// 更新秒杀预约状态
	UpdateSeckillReservationStatus(context.Context, *UpdateSeckillReservationStatusReq) (*UpdateSeckillReservationStatusResp, error)
	// 查询秒杀预约详情
	QuerySeckillReservationDetail(context.Context, *QuerySeckillReservationDetailReq) (*QuerySeckillReservationDetailResp, error)
	// 查询秒杀预约列表
	QuerySeckillReservationList(context.Context, *QuerySeckillReservationListReq) (*QuerySeckillReservationListResp, error)
	mustEmbedUnimplementedSeckillReservationServiceServer()
}

// UnimplementedSeckillReservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeckillReservationServiceServer struct {
}

func (UnimplementedSeckillReservationServiceServer) AddSeckillReservation(context.Context, *AddSeckillReservationReq) (*AddSeckillReservationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeckillReservation not implemented")
}
func (UnimplementedSeckillReservationServiceServer) DeleteSeckillReservation(context.Context, *DeleteSeckillReservationReq) (*DeleteSeckillReservationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeckillReservation not implemented")
}
func (UnimplementedSeckillReservationServiceServer) UpdateSeckillReservation(context.Context, *UpdateSeckillReservationReq) (*UpdateSeckillReservationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillReservation not implemented")
}
func (UnimplementedSeckillReservationServiceServer) UpdateSeckillReservationStatus(context.Context, *UpdateSeckillReservationStatusReq) (*UpdateSeckillReservationStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillReservationStatus not implemented")
}
func (UnimplementedSeckillReservationServiceServer) QuerySeckillReservationDetail(context.Context, *QuerySeckillReservationDetailReq) (*QuerySeckillReservationDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillReservationDetail not implemented")
}
func (UnimplementedSeckillReservationServiceServer) QuerySeckillReservationList(context.Context, *QuerySeckillReservationListReq) (*QuerySeckillReservationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillReservationList not implemented")
}
func (UnimplementedSeckillReservationServiceServer) mustEmbedUnimplementedSeckillReservationServiceServer() {
}

// UnsafeSeckillReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillReservationServiceServer will
// result in compilation errors.
type UnsafeSeckillReservationServiceServer interface {
	mustEmbedUnimplementedSeckillReservationServiceServer()
}

func RegisterSeckillReservationServiceServer(s grpc.ServiceRegistrar, srv SeckillReservationServiceServer) {
	s.RegisterService(&SeckillReservationService_ServiceDesc, srv)
}

func _SeckillReservationService_AddSeckillReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeckillReservationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillReservationServiceServer).AddSeckillReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillReservationService_AddSeckillReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillReservationServiceServer).AddSeckillReservation(ctx, req.(*AddSeckillReservationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillReservationService_DeleteSeckillReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeckillReservationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillReservationServiceServer).DeleteSeckillReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillReservationService_DeleteSeckillReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillReservationServiceServer).DeleteSeckillReservation(ctx, req.(*DeleteSeckillReservationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillReservationService_UpdateSeckillReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillReservationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillReservationServiceServer).UpdateSeckillReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillReservationService_UpdateSeckillReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillReservationServiceServer).UpdateSeckillReservation(ctx, req.(*UpdateSeckillReservationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillReservationService_UpdateSeckillReservationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillReservationStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillReservationServiceServer).UpdateSeckillReservationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillReservationService_UpdateSeckillReservationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillReservationServiceServer).UpdateSeckillReservationStatus(ctx, req.(*UpdateSeckillReservationStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillReservationService_QuerySeckillReservationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillReservationDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillReservationServiceServer).QuerySeckillReservationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillReservationService_QuerySeckillReservationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillReservationServiceServer).QuerySeckillReservationDetail(ctx, req.(*QuerySeckillReservationDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillReservationService_QuerySeckillReservationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillReservationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillReservationServiceServer).QuerySeckillReservationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillReservationService_QuerySeckillReservationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillReservationServiceServer).QuerySeckillReservationList(ctx, req.(*QuerySeckillReservationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeckillReservationService_ServiceDesc is the grpc.ServiceDesc for SeckillReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeckillReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.SeckillReservationService",
	HandlerType: (*SeckillReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSeckillReservation",
			Handler:    _SeckillReservationService_AddSeckillReservation_Handler,
		},
		{
			MethodName: "DeleteSeckillReservation",
			Handler:    _SeckillReservationService_DeleteSeckillReservation_Handler,
		},
		{
			MethodName: "UpdateSeckillReservation",
			Handler:    _SeckillReservationService_UpdateSeckillReservation_Handler,
		},
		{
			MethodName: "UpdateSeckillReservationStatus",
			Handler:    _SeckillReservationService_UpdateSeckillReservationStatus_Handler,
		},
		{
			MethodName: "QuerySeckillReservationDetail",
			Handler:    _SeckillReservationService_QuerySeckillReservationDetail_Handler,
		},
		{
			MethodName: "QuerySeckillReservationList",
			Handler:    _SeckillReservationService_QuerySeckillReservationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}

const (
	SeckillSessionService_AddSeckillSession_FullMethodName             = "/smsclient.SeckillSessionService/AddSeckillSession"
	SeckillSessionService_DeleteSeckillSession_FullMethodName          = "/smsclient.SeckillSessionService/DeleteSeckillSession"
	SeckillSessionService_UpdateSeckillSession_FullMethodName          = "/smsclient.SeckillSessionService/UpdateSeckillSession"
	SeckillSessionService_UpdateSeckillSessionStatus_FullMethodName    = "/smsclient.SeckillSessionService/UpdateSeckillSessionStatus"
	SeckillSessionService_QuerySeckillSessionDetail_FullMethodName     = "/smsclient.SeckillSessionService/QuerySeckillSessionDetail"
	SeckillSessionService_QuerySeckillSessionList_FullMethodName       = "/smsclient.SeckillSessionService/QuerySeckillSessionList"
	SeckillSessionService_QuerySeckillSessionListByTime_FullMethodName = "/smsclient.SeckillSessionService/QuerySeckillSessionListByTime"
)

// SeckillSessionServiceClient is the client API for SeckillSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillSessionServiceClient interface {
	// 添加秒杀场次
	AddSeckillSession(ctx context.Context, in *AddSeckillSessionReq, opts ...grpc.CallOption) (*AddSeckillSessionResp, error)
	// 删除秒杀场次
	DeleteSeckillSession(ctx context.Context, in *DeleteSeckillSessionReq, opts ...grpc.CallOption) (*DeleteSeckillSessionResp, error)
	// 更新秒杀场次
	UpdateSeckillSession(ctx context.Context, in *UpdateSeckillSessionReq, opts ...grpc.CallOption) (*UpdateSeckillSessionResp, error)
	// 更新秒杀场次状态
	UpdateSeckillSessionStatus(ctx context.Context, in *UpdateSeckillSessionStatusReq, opts ...grpc.CallOption) (*UpdateSeckillSessionStatusResp, error)
	// 查询秒杀场次详情
	QuerySeckillSessionDetail(ctx context.Context, in *QuerySeckillSessionDetailReq, opts ...grpc.CallOption) (*QuerySeckillSessionDetailResp, error)
	// 查询秒杀场次列表
	QuerySeckillSessionList(ctx context.Context, in *QuerySeckillSessionListReq, opts ...grpc.CallOption) (*QuerySeckillSessionListResp, error)
	// 根据时间查询限时购场次
	QuerySeckillSessionListByTime(ctx context.Context, in *QuerySeckillSessionListByTimeReq, opts ...grpc.CallOption) (*QuerySeckillSessionListByTimeResp, error)
}

type seckillSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillSessionServiceClient(cc grpc.ClientConnInterface) SeckillSessionServiceClient {
	return &seckillSessionServiceClient{cc}
}

func (c *seckillSessionServiceClient) AddSeckillSession(ctx context.Context, in *AddSeckillSessionReq, opts ...grpc.CallOption) (*AddSeckillSessionResp, error) {
	out := new(AddSeckillSessionResp)
	err := c.cc.Invoke(ctx, SeckillSessionService_AddSeckillSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillSessionServiceClient) DeleteSeckillSession(ctx context.Context, in *DeleteSeckillSessionReq, opts ...grpc.CallOption) (*DeleteSeckillSessionResp, error) {
	out := new(DeleteSeckillSessionResp)
	err := c.cc.Invoke(ctx, SeckillSessionService_DeleteSeckillSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillSessionServiceClient) UpdateSeckillSession(ctx context.Context, in *UpdateSeckillSessionReq, opts ...grpc.CallOption) (*UpdateSeckillSessionResp, error) {
	out := new(UpdateSeckillSessionResp)
	err := c.cc.Invoke(ctx, SeckillSessionService_UpdateSeckillSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillSessionServiceClient) UpdateSeckillSessionStatus(ctx context.Context, in *UpdateSeckillSessionStatusReq, opts ...grpc.CallOption) (*UpdateSeckillSessionStatusResp, error) {
	out := new(UpdateSeckillSessionStatusResp)
	err := c.cc.Invoke(ctx, SeckillSessionService_UpdateSeckillSessionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillSessionServiceClient) QuerySeckillSessionDetail(ctx context.Context, in *QuerySeckillSessionDetailReq, opts ...grpc.CallOption) (*QuerySeckillSessionDetailResp, error) {
	out := new(QuerySeckillSessionDetailResp)
	err := c.cc.Invoke(ctx, SeckillSessionService_QuerySeckillSessionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillSessionServiceClient) QuerySeckillSessionList(ctx context.Context, in *QuerySeckillSessionListReq, opts ...grpc.CallOption) (*QuerySeckillSessionListResp, error) {
	out := new(QuerySeckillSessionListResp)
	err := c.cc.Invoke(ctx, SeckillSessionService_QuerySeckillSessionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillSessionServiceClient) QuerySeckillSessionListByTime(ctx context.Context, in *QuerySeckillSessionListByTimeReq, opts ...grpc.CallOption) (*QuerySeckillSessionListByTimeResp, error) {
	out := new(QuerySeckillSessionListByTimeResp)
	err := c.cc.Invoke(ctx, SeckillSessionService_QuerySeckillSessionListByTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillSessionServiceServer is the server API for SeckillSessionService service.
// All implementations must embed UnimplementedSeckillSessionServiceServer
// for forward compatibility
type SeckillSessionServiceServer interface {
	// 添加秒杀场次
	AddSeckillSession(context.Context, *AddSeckillSessionReq) (*AddSeckillSessionResp, error)
	// 删除秒杀场次
	DeleteSeckillSession(context.Context, *DeleteSeckillSessionReq) (*DeleteSeckillSessionResp, error)
	// 更新秒杀场次
	UpdateSeckillSession(context.Context, *UpdateSeckillSessionReq) (*UpdateSeckillSessionResp, error)
	// 更新秒杀场次状态
	UpdateSeckillSessionStatus(context.Context, *UpdateSeckillSessionStatusReq) (*UpdateSeckillSessionStatusResp, error)
	// 查询秒杀场次详情
	QuerySeckillSessionDetail(context.Context, *QuerySeckillSessionDetailReq) (*QuerySeckillSessionDetailResp, error)
	// 查询秒杀场次列表
	QuerySeckillSessionList(context.Context, *QuerySeckillSessionListReq) (*QuerySeckillSessionListResp, error)
	// 根据时间查询限时购场次
	QuerySeckillSessionListByTime(context.Context, *QuerySeckillSessionListByTimeReq) (*QuerySeckillSessionListByTimeResp, error)
	mustEmbedUnimplementedSeckillSessionServiceServer()
}

// UnimplementedSeckillSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeckillSessionServiceServer struct {
}

func (UnimplementedSeckillSessionServiceServer) AddSeckillSession(context.Context, *AddSeckillSessionReq) (*AddSeckillSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeckillSession not implemented")
}
func (UnimplementedSeckillSessionServiceServer) DeleteSeckillSession(context.Context, *DeleteSeckillSessionReq) (*DeleteSeckillSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeckillSession not implemented")
}
func (UnimplementedSeckillSessionServiceServer) UpdateSeckillSession(context.Context, *UpdateSeckillSessionReq) (*UpdateSeckillSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillSession not implemented")
}
func (UnimplementedSeckillSessionServiceServer) UpdateSeckillSessionStatus(context.Context, *UpdateSeckillSessionStatusReq) (*UpdateSeckillSessionStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeckillSessionStatus not implemented")
}
func (UnimplementedSeckillSessionServiceServer) QuerySeckillSessionDetail(context.Context, *QuerySeckillSessionDetailReq) (*QuerySeckillSessionDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillSessionDetail not implemented")
}
func (UnimplementedSeckillSessionServiceServer) QuerySeckillSessionList(context.Context, *QuerySeckillSessionListReq) (*QuerySeckillSessionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillSessionList not implemented")
}
func (UnimplementedSeckillSessionServiceServer) QuerySeckillSessionListByTime(context.Context, *QuerySeckillSessionListByTimeReq) (*QuerySeckillSessionListByTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySeckillSessionListByTime not implemented")
}
func (UnimplementedSeckillSessionServiceServer) mustEmbedUnimplementedSeckillSessionServiceServer() {}

// UnsafeSeckillSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillSessionServiceServer will
// result in compilation errors.
type UnsafeSeckillSessionServiceServer interface {
	mustEmbedUnimplementedSeckillSessionServiceServer()
}

func RegisterSeckillSessionServiceServer(s grpc.ServiceRegistrar, srv SeckillSessionServiceServer) {
	s.RegisterService(&SeckillSessionService_ServiceDesc, srv)
}

func _SeckillSessionService_AddSeckillSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeckillSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillSessionServiceServer).AddSeckillSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillSessionService_AddSeckillSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillSessionServiceServer).AddSeckillSession(ctx, req.(*AddSeckillSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillSessionService_DeleteSeckillSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeckillSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillSessionServiceServer).DeleteSeckillSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillSessionService_DeleteSeckillSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillSessionServiceServer).DeleteSeckillSession(ctx, req.(*DeleteSeckillSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillSessionService_UpdateSeckillSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillSessionServiceServer).UpdateSeckillSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillSessionService_UpdateSeckillSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillSessionServiceServer).UpdateSeckillSession(ctx, req.(*UpdateSeckillSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillSessionService_UpdateSeckillSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeckillSessionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillSessionServiceServer).UpdateSeckillSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillSessionService_UpdateSeckillSessionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillSessionServiceServer).UpdateSeckillSessionStatus(ctx, req.(*UpdateSeckillSessionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillSessionService_QuerySeckillSessionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillSessionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillSessionServiceServer).QuerySeckillSessionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillSessionService_QuerySeckillSessionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillSessionServiceServer).QuerySeckillSessionDetail(ctx, req.(*QuerySeckillSessionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillSessionService_QuerySeckillSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillSessionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillSessionServiceServer).QuerySeckillSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillSessionService_QuerySeckillSessionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillSessionServiceServer).QuerySeckillSessionList(ctx, req.(*QuerySeckillSessionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillSessionService_QuerySeckillSessionListByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeckillSessionListByTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillSessionServiceServer).QuerySeckillSessionListByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillSessionService_QuerySeckillSessionListByTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillSessionServiceServer).QuerySeckillSessionListByTime(ctx, req.(*QuerySeckillSessionListByTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeckillSessionService_ServiceDesc is the grpc.ServiceDesc for SeckillSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeckillSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsclient.SeckillSessionService",
	HandlerType: (*SeckillSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSeckillSession",
			Handler:    _SeckillSessionService_AddSeckillSession_Handler,
		},
		{
			MethodName: "DeleteSeckillSession",
			Handler:    _SeckillSessionService_DeleteSeckillSession_Handler,
		},
		{
			MethodName: "UpdateSeckillSession",
			Handler:    _SeckillSessionService_UpdateSeckillSession_Handler,
		},
		{
			MethodName: "UpdateSeckillSessionStatus",
			Handler:    _SeckillSessionService_UpdateSeckillSessionStatus_Handler,
		},
		{
			MethodName: "QuerySeckillSessionDetail",
			Handler:    _SeckillSessionService_QuerySeckillSessionDetail_Handler,
		},
		{
			MethodName: "QuerySeckillSessionList",
			Handler:    _SeckillSessionService_QuerySeckillSessionList_Handler,
		},
		{
			MethodName: "QuerySeckillSessionListByTime",
			Handler:    _SeckillSessionService_QuerySeckillSessionListByTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sms/sms.proto",
}
