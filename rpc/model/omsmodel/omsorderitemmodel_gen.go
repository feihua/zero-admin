// Code generated by goctl. DO NOT EDIT.

package omsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	omsOrderItemFieldNames          = builder.RawFieldNames(&OmsOrderItem{})
	omsOrderItemRows                = strings.Join(omsOrderItemFieldNames, ",")
	omsOrderItemRowsExpectAutoSet   = strings.Join(stringx.Remove(omsOrderItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	omsOrderItemRowsWithPlaceHolder = strings.Join(stringx.Remove(omsOrderItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroOmsOrderItemIdPrefix = "cache:gozero:omsOrderItem:id:"
)

type (
	omsOrderItemModel interface {
		Insert(ctx context.Context, data *OmsOrderItem) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *OmsOrderItem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OmsOrderItem, error)
		Update(ctx context.Context, data *OmsOrderItem) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *OmsOrderItem) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultOmsOrderItemModel struct {
		sqlc.CachedConn
		table string
	}

	OmsOrderItem struct {
		Id                int64   `db:"id"`
		OrderId           int64   `db:"order_id"` // 订单id
		OrderSn           string  `db:"order_sn"` // 订单编号
		ProductId         int64   `db:"product_id"`
		ProductPic        string  `db:"product_pic"`
		ProductName       string  `db:"product_name"`
		ProductBrand      string  `db:"product_brand"`
		ProductSn         string  `db:"product_sn"`
		ProductPrice      float64 `db:"product_price"`       // 销售价格
		ProductQuantity   int64   `db:"product_quantity"`    // 购买数量
		ProductSkuId      int64   `db:"product_sku_id"`      // 商品sku编号
		ProductSkuCode    string  `db:"product_sku_code"`    // 商品sku条码
		ProductCategoryId int64   `db:"product_category_id"` // 商品分类id
		PromotionName     string  `db:"promotion_name"`      // 商品促销名称
		PromotionAmount   float64 `db:"promotion_amount"`    // 商品促销分解金额
		CouponAmount      float64 `db:"coupon_amount"`       // 优惠券优惠分解金额
		IntegrationAmount float64 `db:"integration_amount"`  // 积分优惠分解金额
		RealAmount        float64 `db:"real_amount"`         // 该商品经过优惠后的分解金额
		GiftIntegration   int64   `db:"gift_integration"`
		GiftGrowth        int64   `db:"gift_growth"`
		ProductAttr       string  `db:"product_attr"` // 商品销售属性:[{"key":"颜色","value":"颜色"},{"key":"容量","value":"4G"}]
	}
)

func newOmsOrderItemModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOmsOrderItemModel {
	return &defaultOmsOrderItemModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`oms_order_item`",
	}
}

func (m *defaultOmsOrderItemModel) Delete(ctx context.Context, id int64) error {
	gozeroOmsOrderItemIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroOmsOrderItemIdKey)
	return err
}

func (m *defaultOmsOrderItemModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroOmsOrderItemIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroOmsOrderItemIdKey)
	return err
}

func (m *defaultOmsOrderItemModel) FindOne(ctx context.Context, id int64) (*OmsOrderItem, error) {
	gozeroOmsOrderItemIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, id)
	var resp OmsOrderItem
	err := m.QueryRowCtx(ctx, &resp, gozeroOmsOrderItemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", omsOrderItemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOmsOrderItemModel) Insert(ctx context.Context, data *OmsOrderItem) (sql.Result, error) {
	gozeroOmsOrderItemIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, omsOrderItemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.OrderSn, data.ProductId, data.ProductPic, data.ProductName, data.ProductBrand, data.ProductSn, data.ProductPrice, data.ProductQuantity, data.ProductSkuId, data.ProductSkuCode, data.ProductCategoryId, data.PromotionName, data.PromotionAmount, data.CouponAmount, data.IntegrationAmount, data.RealAmount, data.GiftIntegration, data.GiftGrowth, data.ProductAttr)
	}, gozeroOmsOrderItemIdKey)
	return ret, err
}

func (m *defaultOmsOrderItemModel) InsertTx(ctx context.Context, session sqlx.Session, data *OmsOrderItem) (sql.Result, error) {
	gozeroOmsOrderItemIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, omsOrderItemRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.OrderId, data.OrderSn, data.ProductId, data.ProductPic, data.ProductName, data.ProductBrand, data.ProductSn, data.ProductPrice, data.ProductQuantity, data.ProductSkuId, data.ProductSkuCode, data.ProductCategoryId, data.PromotionName, data.PromotionAmount, data.CouponAmount, data.IntegrationAmount, data.RealAmount, data.GiftIntegration, data.GiftGrowth, data.ProductAttr)
		}
		return conn.ExecCtx(ctx, query, data.OrderId, data.OrderSn, data.ProductId, data.ProductPic, data.ProductName, data.ProductBrand, data.ProductSn, data.ProductPrice, data.ProductQuantity, data.ProductSkuId, data.ProductSkuCode, data.ProductCategoryId, data.PromotionName, data.PromotionAmount, data.CouponAmount, data.IntegrationAmount, data.RealAmount, data.GiftIntegration, data.GiftGrowth, data.ProductAttr)
	}, gozeroOmsOrderItemIdKey)
	return ret, err
}
func (m *defaultOmsOrderItemModel) Update(ctx context.Context, data *OmsOrderItem) error {
	gozeroOmsOrderItemIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, omsOrderItemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.OrderSn, data.ProductId, data.ProductPic, data.ProductName, data.ProductBrand, data.ProductSn, data.ProductPrice, data.ProductQuantity, data.ProductSkuId, data.ProductSkuCode, data.ProductCategoryId, data.PromotionName, data.PromotionAmount, data.CouponAmount, data.IntegrationAmount, data.RealAmount, data.GiftIntegration, data.GiftGrowth, data.ProductAttr, data.Id)
	}, gozeroOmsOrderItemIdKey)
	return err
}

func (m *defaultOmsOrderItemModel) UpdateTx(ctx context.Context, session sqlx.Session, data *OmsOrderItem) error {
	gozeroOmsOrderItemIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, omsOrderItemRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.OrderId, data.OrderSn, data.ProductId, data.ProductPic, data.ProductName, data.ProductBrand, data.ProductSn, data.ProductPrice, data.ProductQuantity, data.ProductSkuId, data.ProductSkuCode, data.ProductCategoryId, data.PromotionName, data.PromotionAmount, data.CouponAmount, data.IntegrationAmount, data.RealAmount, data.GiftIntegration, data.GiftGrowth, data.ProductAttr, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.OrderId, data.OrderSn, data.ProductId, data.ProductPic, data.ProductName, data.ProductBrand, data.ProductSn, data.ProductPrice, data.ProductQuantity, data.ProductSkuId, data.ProductSkuCode, data.ProductCategoryId, data.PromotionName, data.PromotionAmount, data.CouponAmount, data.IntegrationAmount, data.RealAmount, data.GiftIntegration, data.GiftGrowth, data.ProductAttr, data.Id)
	}, gozeroOmsOrderItemIdKey)
	return err
}

func (m *defaultOmsOrderItemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroOmsOrderItemIdPrefix, primary)
}

func (m *defaultOmsOrderItemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", omsOrderItemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOmsOrderItemModel) tableName() string {
	return m.table
}
