// Code generated by goctl. DO NOT EDIT.

package omsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	omsCompanyAddressFieldNames          = builder.RawFieldNames(&OmsCompanyAddress{})
	omsCompanyAddressRows                = strings.Join(omsCompanyAddressFieldNames, ",")
	omsCompanyAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(omsCompanyAddressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	omsCompanyAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(omsCompanyAddressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroOmsCompanyAddressIdPrefix = "cache:gozero:omsCompanyAddress:id:"
)

type (
	omsCompanyAddressModel interface {
		Insert(ctx context.Context, data *OmsCompanyAddress) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *OmsCompanyAddress) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OmsCompanyAddress, error)
		Update(ctx context.Context, data *OmsCompanyAddress) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *OmsCompanyAddress) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultOmsCompanyAddressModel struct {
		sqlc.CachedConn
		table string
	}

	OmsCompanyAddress struct {
		Id            int64  `db:"id"`
		AddressName   string `db:"address_name"`   // 地址名称
		SendStatus    int64  `db:"send_status"`    // 默认发货地址：0->否；1->是
		ReceiveStatus int64  `db:"receive_status"` // 是否默认收货地址：0->否；1->是
		Name          string `db:"name"`           // 收发货人姓名
		Phone         string `db:"phone"`          // 收货人电话
		Province      string `db:"province"`       // 省/直辖市
		City          string `db:"city"`           // 市
		Region        string `db:"region"`         // 区
		DetailAddress string `db:"detail_address"` // 详细地址
	}
)

func newOmsCompanyAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOmsCompanyAddressModel {
	return &defaultOmsCompanyAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`oms_company_address`",
	}
}

func (m *defaultOmsCompanyAddressModel) Delete(ctx context.Context, id int64) error {
	gozeroOmsCompanyAddressIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroOmsCompanyAddressIdKey)
	return err
}

func (m *defaultOmsCompanyAddressModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroOmsCompanyAddressIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroOmsCompanyAddressIdKey)
	return err
}

func (m *defaultOmsCompanyAddressModel) FindOne(ctx context.Context, id int64) (*OmsCompanyAddress, error) {
	gozeroOmsCompanyAddressIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, id)
	var resp OmsCompanyAddress
	err := m.QueryRowCtx(ctx, &resp, gozeroOmsCompanyAddressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", omsCompanyAddressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOmsCompanyAddressModel) Insert(ctx context.Context, data *OmsCompanyAddress) (sql.Result, error) {
	gozeroOmsCompanyAddressIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, omsCompanyAddressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AddressName, data.SendStatus, data.ReceiveStatus, data.Name, data.Phone, data.Province, data.City, data.Region, data.DetailAddress)
	}, gozeroOmsCompanyAddressIdKey)
	return ret, err
}

func (m *defaultOmsCompanyAddressModel) InsertTx(ctx context.Context, session sqlx.Session, data *OmsCompanyAddress) (sql.Result, error) {
	gozeroOmsCompanyAddressIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, omsCompanyAddressRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.AddressName, data.SendStatus, data.ReceiveStatus, data.Name, data.Phone, data.Province, data.City, data.Region, data.DetailAddress)
		}
		return conn.ExecCtx(ctx, query, data.AddressName, data.SendStatus, data.ReceiveStatus, data.Name, data.Phone, data.Province, data.City, data.Region, data.DetailAddress)
	}, gozeroOmsCompanyAddressIdKey)
	return ret, err
}
func (m *defaultOmsCompanyAddressModel) Update(ctx context.Context, data *OmsCompanyAddress) error {
	gozeroOmsCompanyAddressIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, omsCompanyAddressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AddressName, data.SendStatus, data.ReceiveStatus, data.Name, data.Phone, data.Province, data.City, data.Region, data.DetailAddress, data.Id)
	}, gozeroOmsCompanyAddressIdKey)
	return err
}

func (m *defaultOmsCompanyAddressModel) UpdateTx(ctx context.Context, session sqlx.Session, data *OmsCompanyAddress) error {
	gozeroOmsCompanyAddressIdKey := fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, omsCompanyAddressRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.AddressName, data.SendStatus, data.ReceiveStatus, data.Name, data.Phone, data.Province, data.City, data.Region, data.DetailAddress, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.AddressName, data.SendStatus, data.ReceiveStatus, data.Name, data.Phone, data.Province, data.City, data.Region, data.DetailAddress, data.Id)
	}, gozeroOmsCompanyAddressIdKey)
	return err
}

func (m *defaultOmsCompanyAddressModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroOmsCompanyAddressIdPrefix, primary)
}

func (m *defaultOmsCompanyAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", omsCompanyAddressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOmsCompanyAddressModel) tableName() string {
	return m.table
}
