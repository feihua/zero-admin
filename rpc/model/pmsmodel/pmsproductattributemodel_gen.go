// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsProductAttributeFieldNames          = builder.RawFieldNames(&PmsProductAttribute{})
	pmsProductAttributeRows                = strings.Join(pmsProductAttributeFieldNames, ",")
	pmsProductAttributeRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsProductAttributeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsProductAttributeRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsProductAttributeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroPmsProductAttributeIdPrefix = "cache:gozero:pmsProductAttribute:id:"
)

type (
	pmsProductAttributeModel interface {
		Insert(ctx context.Context, data *PmsProductAttribute) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *PmsProductAttribute) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsProductAttribute, error)
		Update(ctx context.Context, data *PmsProductAttribute) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *PmsProductAttribute) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPmsProductAttributeModel struct {
		sqlc.CachedConn
		table string
	}

	PmsProductAttribute struct {
		Id                         int64  `db:"id"`
		ProductAttributeCategoryId int64  `db:"product_attribute_category_id"`
		Name                       string `db:"name"`
		SelectType                 int64  `db:"select_type"`     // 属性选择类型：0->唯一；1->单选；2->多选
		InputType                  int64  `db:"input_type"`      // 属性录入方式：0->手工录入；1->从列表中选取
		InputList                  string `db:"input_list"`      // 可选值列表，以逗号隔开
		Sort                       int64  `db:"sort"`            // 排序字段：最高的可以单独上传图片
		FilterType                 int64  `db:"filter_type"`     // 分类筛选样式：1->普通；1->颜色
		SearchType                 int64  `db:"search_type"`     // 检索类型；0->不需要进行检索；1->关键字检索；2->范围检索
		RelatedStatus              int64  `db:"related_status"`  // 相同属性产品是否关联；0->不关联；1->关联
		HandAddStatus              int64  `db:"hand_add_status"` // 是否支持手动新增；0->不支持；1->支持
		Type                       int64  `db:"type"`            // 属性的类型；0->规格；1->参数
	}
)

func newPmsProductAttributeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPmsProductAttributeModel {
	return &defaultPmsProductAttributeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`pms_product_attribute`",
	}
}

func (m *defaultPmsProductAttributeModel) Delete(ctx context.Context, id int64) error {
	gozeroPmsProductAttributeIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsProductAttributeIdKey)
	return err
}

func (m *defaultPmsProductAttributeModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroPmsProductAttributeIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsProductAttributeIdKey)
	return err
}

func (m *defaultPmsProductAttributeModel) FindOne(ctx context.Context, id int64) (*PmsProductAttribute, error) {
	gozeroPmsProductAttributeIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, id)
	var resp PmsProductAttribute
	err := m.QueryRowCtx(ctx, &resp, gozeroPmsProductAttributeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductAttributeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsProductAttributeModel) Insert(ctx context.Context, data *PmsProductAttribute) (sql.Result, error) {
	gozeroPmsProductAttributeIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pmsProductAttributeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductAttributeCategoryId, data.Name, data.SelectType, data.InputType, data.InputList, data.Sort, data.FilterType, data.SearchType, data.RelatedStatus, data.HandAddStatus, data.Type)
	}, gozeroPmsProductAttributeIdKey)
	return ret, err
}

func (m *defaultPmsProductAttributeModel) InsertTx(ctx context.Context, session sqlx.Session, data *PmsProductAttribute) (sql.Result, error) {
	gozeroPmsProductAttributeIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pmsProductAttributeRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ProductAttributeCategoryId, data.Name, data.SelectType, data.InputType, data.InputList, data.Sort, data.FilterType, data.SearchType, data.RelatedStatus, data.HandAddStatus, data.Type)
		}
		return conn.ExecCtx(ctx, query, data.ProductAttributeCategoryId, data.Name, data.SelectType, data.InputType, data.InputList, data.Sort, data.FilterType, data.SearchType, data.RelatedStatus, data.HandAddStatus, data.Type)
	}, gozeroPmsProductAttributeIdKey)
	return ret, err
}
func (m *defaultPmsProductAttributeModel) Update(ctx context.Context, data *PmsProductAttribute) error {
	gozeroPmsProductAttributeIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductAttributeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProductAttributeCategoryId, data.Name, data.SelectType, data.InputType, data.InputList, data.Sort, data.FilterType, data.SearchType, data.RelatedStatus, data.HandAddStatus, data.Type, data.Id)
	}, gozeroPmsProductAttributeIdKey)
	return err
}

func (m *defaultPmsProductAttributeModel) UpdateTx(ctx context.Context, session sqlx.Session, data *PmsProductAttribute) error {
	gozeroPmsProductAttributeIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductAttributeRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ProductAttributeCategoryId, data.Name, data.SelectType, data.InputType, data.InputList, data.Sort, data.FilterType, data.SearchType, data.RelatedStatus, data.HandAddStatus, data.Type, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.ProductAttributeCategoryId, data.Name, data.SelectType, data.InputType, data.InputList, data.Sort, data.FilterType, data.SearchType, data.RelatedStatus, data.HandAddStatus, data.Type, data.Id)
	}, gozeroPmsProductAttributeIdKey)
	return err
}

func (m *defaultPmsProductAttributeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroPmsProductAttributeIdPrefix, primary)
}

func (m *defaultPmsProductAttributeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductAttributeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPmsProductAttributeModel) tableName() string {
	return m.table
}
