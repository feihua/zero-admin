// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsProductOperateLogFieldNames          = builder.RawFieldNames(&PmsProductOperateLog{})
	pmsProductOperateLogRows                = strings.Join(pmsProductOperateLogFieldNames, ",")
	pmsProductOperateLogRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsProductOperateLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsProductOperateLogRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsProductOperateLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroPmsProductOperateLogIdPrefix = "cache:gozero:pmsProductOperateLog:id:"
)

type (
	pmsProductOperateLogModel interface {
		Insert(ctx context.Context, data *PmsProductOperateLog) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *PmsProductOperateLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsProductOperateLog, error)
		Update(ctx context.Context, data *PmsProductOperateLog) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *PmsProductOperateLog) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPmsProductOperateLogModel struct {
		sqlc.CachedConn
		table string
	}

	PmsProductOperateLog struct {
		Id               int64     `db:"id"`
		ProductId        int64     `db:"product_id"`
		PriceOld         float64   `db:"price_old"`
		PriceNew         float64   `db:"price_new"`
		SalePriceOld     float64   `db:"sale_price_old"`
		SalePriceNew     float64   `db:"sale_price_new"`
		GiftPointOld     int64     `db:"gift_point_old"` // 赠送的积分
		GiftPointNew     int64     `db:"gift_point_new"`
		UsePointLimitOld int64     `db:"use_point_limit_old"`
		UsePointLimitNew int64     `db:"use_point_limit_new"`
		OperateMan       string    `db:"operate_man"` // 操作人
		CreateTime       time.Time `db:"create_time"`
	}
)

func newPmsProductOperateLogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPmsProductOperateLogModel {
	return &defaultPmsProductOperateLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`pms_product_operate_log`",
	}
}

func (m *defaultPmsProductOperateLogModel) Delete(ctx context.Context, id int64) error {
	gozeroPmsProductOperateLogIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsProductOperateLogIdKey)
	return err
}

func (m *defaultPmsProductOperateLogModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroPmsProductOperateLogIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsProductOperateLogIdKey)
	return err
}

func (m *defaultPmsProductOperateLogModel) FindOne(ctx context.Context, id int64) (*PmsProductOperateLog, error) {
	gozeroPmsProductOperateLogIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, id)
	var resp PmsProductOperateLog
	err := m.QueryRowCtx(ctx, &resp, gozeroPmsProductOperateLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductOperateLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsProductOperateLogModel) Insert(ctx context.Context, data *PmsProductOperateLog) (sql.Result, error) {
	gozeroPmsProductOperateLogIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pmsProductOperateLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductId, data.PriceOld, data.PriceNew, data.SalePriceOld, data.SalePriceNew, data.GiftPointOld, data.GiftPointNew, data.UsePointLimitOld, data.UsePointLimitNew, data.OperateMan)
	}, gozeroPmsProductOperateLogIdKey)
	return ret, err
}

func (m *defaultPmsProductOperateLogModel) InsertTx(ctx context.Context, session sqlx.Session, data *PmsProductOperateLog) (sql.Result, error) {
	gozeroPmsProductOperateLogIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pmsProductOperateLogRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ProductId, data.PriceOld, data.PriceNew, data.SalePriceOld, data.SalePriceNew, data.GiftPointOld, data.GiftPointNew, data.UsePointLimitOld, data.UsePointLimitNew, data.OperateMan)
		}
		return conn.ExecCtx(ctx, query, data.ProductId, data.PriceOld, data.PriceNew, data.SalePriceOld, data.SalePriceNew, data.GiftPointOld, data.GiftPointNew, data.UsePointLimitOld, data.UsePointLimitNew, data.OperateMan)
	}, gozeroPmsProductOperateLogIdKey)
	return ret, err
}
func (m *defaultPmsProductOperateLogModel) Update(ctx context.Context, data *PmsProductOperateLog) error {
	gozeroPmsProductOperateLogIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductOperateLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProductId, data.PriceOld, data.PriceNew, data.SalePriceOld, data.SalePriceNew, data.GiftPointOld, data.GiftPointNew, data.UsePointLimitOld, data.UsePointLimitNew, data.OperateMan, data.Id)
	}, gozeroPmsProductOperateLogIdKey)
	return err
}

func (m *defaultPmsProductOperateLogModel) UpdateTx(ctx context.Context, session sqlx.Session, data *PmsProductOperateLog) error {
	gozeroPmsProductOperateLogIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductOperateLogRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ProductId, data.PriceOld, data.PriceNew, data.SalePriceOld, data.SalePriceNew, data.GiftPointOld, data.GiftPointNew, data.UsePointLimitOld, data.UsePointLimitNew, data.OperateMan, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.ProductId, data.PriceOld, data.PriceNew, data.SalePriceOld, data.SalePriceNew, data.GiftPointOld, data.GiftPointNew, data.UsePointLimitOld, data.UsePointLimitNew, data.OperateMan, data.Id)
	}, gozeroPmsProductOperateLogIdKey)
	return err
}

func (m *defaultPmsProductOperateLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroPmsProductOperateLogIdPrefix, primary)
}

func (m *defaultPmsProductOperateLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductOperateLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPmsProductOperateLogModel) tableName() string {
	return m.table
}
