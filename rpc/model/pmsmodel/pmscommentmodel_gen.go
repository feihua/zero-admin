// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsCommentFieldNames          = builder.RawFieldNames(&PmsComment{})
	pmsCommentRows                = strings.Join(pmsCommentFieldNames, ",")
	pmsCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroPmsCommentIdPrefix = "cache:gozero:pmsComment:id:"
)

type (
	pmsCommentModel interface {
		Insert(ctx context.Context, data *PmsComment) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *PmsComment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsComment, error)
		Update(ctx context.Context, data *PmsComment) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *PmsComment) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPmsCommentModel struct {
		sqlc.CachedConn
		table string
	}

	PmsComment struct {
		Id               int64     `db:"id"`
		ProductId        int64     `db:"product_id"`
		MemberNickName   string    `db:"member_nick_name"`
		ProductName      string    `db:"product_name"`
		Star             int64     `db:"star"`      // 评价星数：0->5
		MemberIp         string    `db:"member_ip"` // 评价的ip
		CreateTime       time.Time `db:"create_time"`
		ShowStatus       int64     `db:"show_status"`
		ProductAttribute string    `db:"product_attribute"` // 购买时的商品属性
		CollectCouont    int64     `db:"collect_couont"`
		ReadCount        int64     `db:"read_count"`
		Content          string    `db:"content"`
		Pics             string    `db:"pics"`        // 上传图片地址，以逗号隔开
		MemberIcon       string    `db:"member_icon"` // 评论用户头像
		ReplayCount      int64     `db:"replay_count"`
	}
)

func newPmsCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPmsCommentModel {
	return &defaultPmsCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`pms_comment`",
	}
}

func (m *defaultPmsCommentModel) Delete(ctx context.Context, id int64) error {
	gozeroPmsCommentIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsCommentIdKey)
	return err
}

func (m *defaultPmsCommentModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroPmsCommentIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsCommentIdKey)
	return err
}

func (m *defaultPmsCommentModel) FindOne(ctx context.Context, id int64) (*PmsComment, error) {
	gozeroPmsCommentIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, id)
	var resp PmsComment
	err := m.QueryRowCtx(ctx, &resp, gozeroPmsCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsCommentModel) Insert(ctx context.Context, data *PmsComment) (sql.Result, error) {
	gozeroPmsCommentIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pmsCommentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductId, data.MemberNickName, data.ProductName, data.Star, data.MemberIp, data.ShowStatus, data.ProductAttribute, data.CollectCouont, data.ReadCount, data.Content, data.Pics, data.MemberIcon, data.ReplayCount)
	}, gozeroPmsCommentIdKey)
	return ret, err
}

func (m *defaultPmsCommentModel) InsertTx(ctx context.Context, session sqlx.Session, data *PmsComment) (sql.Result, error) {
	gozeroPmsCommentIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pmsCommentRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ProductId, data.MemberNickName, data.ProductName, data.Star, data.MemberIp, data.ShowStatus, data.ProductAttribute, data.CollectCouont, data.ReadCount, data.Content, data.Pics, data.MemberIcon, data.ReplayCount)
		}
		return conn.ExecCtx(ctx, query, data.ProductId, data.MemberNickName, data.ProductName, data.Star, data.MemberIp, data.ShowStatus, data.ProductAttribute, data.CollectCouont, data.ReadCount, data.Content, data.Pics, data.MemberIcon, data.ReplayCount)
	}, gozeroPmsCommentIdKey)
	return ret, err
}
func (m *defaultPmsCommentModel) Update(ctx context.Context, data *PmsComment) error {
	gozeroPmsCommentIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsCommentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProductId, data.MemberNickName, data.ProductName, data.Star, data.MemberIp, data.ShowStatus, data.ProductAttribute, data.CollectCouont, data.ReadCount, data.Content, data.Pics, data.MemberIcon, data.ReplayCount, data.Id)
	}, gozeroPmsCommentIdKey)
	return err
}

func (m *defaultPmsCommentModel) UpdateTx(ctx context.Context, session sqlx.Session, data *PmsComment) error {
	gozeroPmsCommentIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsCommentRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ProductId, data.MemberNickName, data.ProductName, data.Star, data.MemberIp, data.ShowStatus, data.ProductAttribute, data.CollectCouont, data.ReadCount, data.Content, data.Pics, data.MemberIcon, data.ReplayCount, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.ProductId, data.MemberNickName, data.ProductName, data.Star, data.MemberIp, data.ShowStatus, data.ProductAttribute, data.CollectCouont, data.ReadCount, data.Content, data.Pics, data.MemberIcon, data.ReplayCount, data.Id)
	}, gozeroPmsCommentIdKey)
	return err
}

func (m *defaultPmsCommentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroPmsCommentIdPrefix, primary)
}

func (m *defaultPmsCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPmsCommentModel) tableName() string {
	return m.table
}
