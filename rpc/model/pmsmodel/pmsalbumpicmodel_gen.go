// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsAlbumPicFieldNames          = builder.RawFieldNames(&PmsAlbumPic{})
	pmsAlbumPicRows                = strings.Join(pmsAlbumPicFieldNames, ",")
	pmsAlbumPicRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsAlbumPicFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsAlbumPicRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsAlbumPicFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroPmsAlbumPicIdPrefix = "cache:gozero:pmsAlbumPic:id:"
)

type (
	pmsAlbumPicModel interface {
		Insert(ctx context.Context, data *PmsAlbumPic) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *PmsAlbumPic) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsAlbumPic, error)
		Update(ctx context.Context, data *PmsAlbumPic) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *PmsAlbumPic) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPmsAlbumPicModel struct {
		sqlc.CachedConn
		table string
	}

	PmsAlbumPic struct {
		Id      int64  `db:"id"`
		AlbumId int64  `db:"album_id"`
		Pic     string `db:"pic"`
	}
)

func newPmsAlbumPicModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPmsAlbumPicModel {
	return &defaultPmsAlbumPicModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`pms_album_pic`",
	}
}

func (m *defaultPmsAlbumPicModel) Delete(ctx context.Context, id int64) error {
	gozeroPmsAlbumPicIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsAlbumPicIdKey)
	return err
}

func (m *defaultPmsAlbumPicModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroPmsAlbumPicIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsAlbumPicIdKey)
	return err
}

func (m *defaultPmsAlbumPicModel) FindOne(ctx context.Context, id int64) (*PmsAlbumPic, error) {
	gozeroPmsAlbumPicIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, id)
	var resp PmsAlbumPic
	err := m.QueryRowCtx(ctx, &resp, gozeroPmsAlbumPicIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsAlbumPicRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsAlbumPicModel) Insert(ctx context.Context, data *PmsAlbumPic) (sql.Result, error) {
	gozeroPmsAlbumPicIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, pmsAlbumPicRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AlbumId, data.Pic)
	}, gozeroPmsAlbumPicIdKey)
	return ret, err
}

func (m *defaultPmsAlbumPicModel) InsertTx(ctx context.Context, session sqlx.Session, data *PmsAlbumPic) (sql.Result, error) {
	gozeroPmsAlbumPicIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, pmsAlbumPicRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.AlbumId, data.Pic)
		}
		return conn.ExecCtx(ctx, query, data.AlbumId, data.Pic)
	}, gozeroPmsAlbumPicIdKey)
	return ret, err
}
func (m *defaultPmsAlbumPicModel) Update(ctx context.Context, data *PmsAlbumPic) error {
	gozeroPmsAlbumPicIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsAlbumPicRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AlbumId, data.Pic, data.Id)
	}, gozeroPmsAlbumPicIdKey)
	return err
}

func (m *defaultPmsAlbumPicModel) UpdateTx(ctx context.Context, session sqlx.Session, data *PmsAlbumPic) error {
	gozeroPmsAlbumPicIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsAlbumPicRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.AlbumId, data.Pic, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.AlbumId, data.Pic, data.Id)
	}, gozeroPmsAlbumPicIdKey)
	return err
}

func (m *defaultPmsAlbumPicModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroPmsAlbumPicIdPrefix, primary)
}

func (m *defaultPmsAlbumPicModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsAlbumPicRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPmsAlbumPicModel) tableName() string {
	return m.table
}
