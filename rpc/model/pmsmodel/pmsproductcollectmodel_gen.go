// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsProductCollectFieldNames          = builder.RawFieldNames(&PmsProductCollect{})
	pmsProductCollectRows                = strings.Join(pmsProductCollectFieldNames, ",")
	pmsProductCollectRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsProductCollectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsProductCollectRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsProductCollectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroPmsProductCollectIdPrefix = "cache:gozero:pmsProductCollect:id:"
)

type (
	pmsProductCollectModel interface {
		Insert(ctx context.Context, data *PmsProductCollect) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *PmsProductCollect) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsProductCollect, error)
		Update(ctx context.Context, data *PmsProductCollect) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *PmsProductCollect) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPmsProductCollectModel struct {
		sqlc.CachedConn
		table string
	}

	PmsProductCollect struct {
		Id          int64     `db:"id"`
		UserId      int64     `db:"user_id"`      // 用户表的用户ID
		ValueId     int64     `db:"value_id"`     // 如果type=0，则是商品ID；如果type=1，则是专题ID
		CollectType int64     `db:"collect_type"` // 收藏类型，如果type=0，则是商品ID；如果type=1，则是专题ID
		AddTime     time.Time `db:"add_time"`     // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
		Deleted     int64     `db:"deleted"`      // 逻辑删除
	}
)

func newPmsProductCollectModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPmsProductCollectModel {
	return &defaultPmsProductCollectModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`pms_product_collect`",
	}
}

func (m *defaultPmsProductCollectModel) Delete(ctx context.Context, id int64) error {
	gozeroPmsProductCollectIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsProductCollectIdKey)
	return err
}

func (m *defaultPmsProductCollectModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroPmsProductCollectIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroPmsProductCollectIdKey)
	return err
}

func (m *defaultPmsProductCollectModel) FindOne(ctx context.Context, id int64) (*PmsProductCollect, error) {
	gozeroPmsProductCollectIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, id)
	var resp PmsProductCollect
	err := m.QueryRowCtx(ctx, &resp, gozeroPmsProductCollectIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductCollectRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsProductCollectModel) Insert(ctx context.Context, data *PmsProductCollect) (sql.Result, error) {
	gozeroPmsProductCollectIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, pmsProductCollectRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ValueId, data.CollectType, data.AddTime, data.Deleted)
	}, gozeroPmsProductCollectIdKey)
	return ret, err
}

func (m *defaultPmsProductCollectModel) InsertTx(ctx context.Context, session sqlx.Session, data *PmsProductCollect) (sql.Result, error) {
	gozeroPmsProductCollectIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, pmsProductCollectRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.ValueId, data.CollectType, data.AddTime, data.Deleted)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.ValueId, data.CollectType, data.AddTime, data.Deleted)
	}, gozeroPmsProductCollectIdKey)
	return ret, err
}
func (m *defaultPmsProductCollectModel) Update(ctx context.Context, data *PmsProductCollect) error {
	gozeroPmsProductCollectIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductCollectRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ValueId, data.CollectType, data.AddTime, data.Deleted, data.Id)
	}, gozeroPmsProductCollectIdKey)
	return err
}

func (m *defaultPmsProductCollectModel) UpdateTx(ctx context.Context, session sqlx.Session, data *PmsProductCollect) error {
	gozeroPmsProductCollectIdKey := fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductCollectRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.ValueId, data.CollectType, data.AddTime, data.Deleted, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.ValueId, data.CollectType, data.AddTime, data.Deleted, data.Id)
	}, gozeroPmsProductCollectIdKey)
	return err
}

func (m *defaultPmsProductCollectModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroPmsProductCollectIdPrefix, primary)
}

func (m *defaultPmsProductCollectModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductCollectRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPmsProductCollectModel) tableName() string {
	return m.table
}
