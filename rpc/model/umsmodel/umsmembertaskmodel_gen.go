// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberTaskFieldNames          = builder.RawFieldNames(&UmsMemberTask{})
	umsMemberTaskRows                = strings.Join(umsMemberTaskFieldNames, ",")
	umsMemberTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsMemberTaskIdPrefix = "cache:gozero:umsMemberTask:id:"
)

type (
	umsMemberTaskModel interface {
		Insert(ctx context.Context, data *UmsMemberTask) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberTask, error)
		Update(ctx context.Context, data *UmsMemberTask) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberTask) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsMemberTaskModel struct {
		sqlc.CachedConn
		table string
	}

	UmsMemberTask struct {
		Id           int64  `db:"id"`
		Name         string `db:"name"`
		Growth       int64  `db:"growth"`       // 赠送成长值
		Intergration int64  `db:"intergration"` // 赠送积分
		Type         int64  `db:"type"`         // 任务类型：0->新手任务；1->日常任务
	}
)

func newUmsMemberTaskModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsMemberTaskModel {
	return &defaultUmsMemberTaskModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_member_task`",
	}
}

func (m *defaultUmsMemberTaskModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsMemberTaskIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberTaskIdKey)
	return err
}

func (m *defaultUmsMemberTaskModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsMemberTaskIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberTaskIdKey)
	return err
}

func (m *defaultUmsMemberTaskModel) FindOne(ctx context.Context, id int64) (*UmsMemberTask, error) {
	gozeroUmsMemberTaskIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, id)
	var resp UmsMemberTask
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsMemberTaskIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberTaskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberTaskModel) Insert(ctx context.Context, data *UmsMemberTask) (sql.Result, error) {
	gozeroUmsMemberTaskIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, umsMemberTaskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Growth, data.Intergration, data.Type)
	}, gozeroUmsMemberTaskIdKey)
	return ret, err
}

func (m *defaultUmsMemberTaskModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberTask) (sql.Result, error) {
	gozeroUmsMemberTaskIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, umsMemberTaskRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.Growth, data.Intergration, data.Type)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.Growth, data.Intergration, data.Type)
	}, gozeroUmsMemberTaskIdKey)
	return ret, err
}
func (m *defaultUmsMemberTaskModel) Update(ctx context.Context, data *UmsMemberTask) error {
	gozeroUmsMemberTaskIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberTaskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Growth, data.Intergration, data.Type, data.Id)
	}, gozeroUmsMemberTaskIdKey)
	return err
}

func (m *defaultUmsMemberTaskModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberTask) error {
	gozeroUmsMemberTaskIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberTaskRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.Growth, data.Intergration, data.Type, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.Growth, data.Intergration, data.Type, data.Id)
	}, gozeroUmsMemberTaskIdKey)
	return err
}

func (m *defaultUmsMemberTaskModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsMemberTaskIdPrefix, primary)
}

func (m *defaultUmsMemberTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberTaskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsMemberTaskModel) tableName() string {
	return m.table
}
