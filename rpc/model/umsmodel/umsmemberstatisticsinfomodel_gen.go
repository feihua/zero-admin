// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberStatisticsInfoFieldNames          = builder.RawFieldNames(&UmsMemberStatisticsInfo{})
	umsMemberStatisticsInfoRows                = strings.Join(umsMemberStatisticsInfoFieldNames, ",")
	umsMemberStatisticsInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberStatisticsInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberStatisticsInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberStatisticsInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsMemberStatisticsInfoIdPrefix = "cache:gozero:umsMemberStatisticsInfo:id:"
)

type (
	umsMemberStatisticsInfoModel interface {
		Insert(ctx context.Context, data *UmsMemberStatisticsInfo) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberStatisticsInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberStatisticsInfo, error)
		Update(ctx context.Context, data *UmsMemberStatisticsInfo) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberStatisticsInfo) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsMemberStatisticsInfoModel struct {
		sqlc.CachedConn
		table string
	}

	UmsMemberStatisticsInfo struct {
		Id                  int64     `db:"id"`
		MemberId            int64     `db:"member_id"`
		ConsumeAmount       float64   `db:"consume_amount"`     // 累计消费金额
		OrderCount          int64     `db:"order_count"`        // 订单数量
		CouponCount         int64     `db:"coupon_count"`       // 优惠券数量
		CommentCount        int64     `db:"comment_count"`      // 评价数
		ReturnOrderCount    int64     `db:"return_order_count"` // 退货数量
		LoginCount          int64     `db:"login_count"`        // 登录次数
		AttendCount         int64     `db:"attend_count"`       // 关注数量
		FansCount           int64     `db:"fans_count"`         // 粉丝数量
		CollectProductCount int64     `db:"collect_product_count"`
		CollectSubjectCount int64     `db:"collect_subject_count"`
		CollectTopicCount   int64     `db:"collect_topic_count"`
		CollectCommentCount int64     `db:"collect_comment_count"`
		InviteFriendCount   int64     `db:"invite_friend_count"`
		RecentOrderTime     time.Time `db:"recent_order_time"` // 最后一次下订单时间
	}
)

func newUmsMemberStatisticsInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsMemberStatisticsInfoModel {
	return &defaultUmsMemberStatisticsInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_member_statistics_info`",
	}
}

func (m *defaultUmsMemberStatisticsInfoModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsMemberStatisticsInfoIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberStatisticsInfoIdKey)
	return err
}

func (m *defaultUmsMemberStatisticsInfoModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsMemberStatisticsInfoIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberStatisticsInfoIdKey)
	return err
}

func (m *defaultUmsMemberStatisticsInfoModel) FindOne(ctx context.Context, id int64) (*UmsMemberStatisticsInfo, error) {
	gozeroUmsMemberStatisticsInfoIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, id)
	var resp UmsMemberStatisticsInfo
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsMemberStatisticsInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberStatisticsInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberStatisticsInfoModel) Insert(ctx context.Context, data *UmsMemberStatisticsInfo) (sql.Result, error) {
	gozeroUmsMemberStatisticsInfoIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberStatisticsInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime)
	}, gozeroUmsMemberStatisticsInfoIdKey)
	return ret, err
}

func (m *defaultUmsMemberStatisticsInfoModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberStatisticsInfo) (sql.Result, error) {
	gozeroUmsMemberStatisticsInfoIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberStatisticsInfoRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime)
	}, gozeroUmsMemberStatisticsInfoIdKey)
	return ret, err
}
func (m *defaultUmsMemberStatisticsInfoModel) Update(ctx context.Context, data *UmsMemberStatisticsInfo) error {
	gozeroUmsMemberStatisticsInfoIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberStatisticsInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime, data.Id)
	}, gozeroUmsMemberStatisticsInfoIdKey)
	return err
}

func (m *defaultUmsMemberStatisticsInfoModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberStatisticsInfo) error {
	gozeroUmsMemberStatisticsInfoIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberStatisticsInfoRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime, data.Id)
	}, gozeroUmsMemberStatisticsInfoIdKey)
	return err
}

func (m *defaultUmsMemberStatisticsInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsMemberStatisticsInfoIdPrefix, primary)
}

func (m *defaultUmsMemberStatisticsInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberStatisticsInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsMemberStatisticsInfoModel) tableName() string {
	return m.table
}
