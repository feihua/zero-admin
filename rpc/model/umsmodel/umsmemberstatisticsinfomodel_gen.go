// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberStatisticsInfoFieldNames          = builder.RawFieldNames(&UmsMemberStatisticsInfo{})
	umsMemberStatisticsInfoRows                = strings.Join(umsMemberStatisticsInfoFieldNames, ",")
	umsMemberStatisticsInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberStatisticsInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberStatisticsInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberStatisticsInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	umsMemberStatisticsInfoModel interface {
		Insert(ctx context.Context, data *UmsMemberStatisticsInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberStatisticsInfo, error)
		FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberStatisticsInfo, error)
		Count(ctx context.Context) (int64, error)
		Update(ctx context.Context, data *UmsMemberStatisticsInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsMemberStatisticsInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UmsMemberStatisticsInfo struct {
		Id                  int64           `db:"id"`
		MemberId            sql.NullInt64   `db:"member_id"`
		ConsumeAmount       sql.NullFloat64 `db:"consume_amount"`     // 累计消费金额
		OrderCount          sql.NullInt64   `db:"order_count"`        // 订单数量
		CouponCount         sql.NullInt64   `db:"coupon_count"`       // 优惠券数量
		CommentCount        sql.NullInt64   `db:"comment_count"`      // 评价数
		ReturnOrderCount    sql.NullInt64   `db:"return_order_count"` // 退货数量
		LoginCount          sql.NullInt64   `db:"login_count"`        // 登录次数
		AttendCount         sql.NullInt64   `db:"attend_count"`       // 关注数量
		FansCount           sql.NullInt64   `db:"fans_count"`         // 粉丝数量
		CollectProductCount sql.NullInt64   `db:"collect_product_count"`
		CollectSubjectCount sql.NullInt64   `db:"collect_subject_count"`
		CollectTopicCount   sql.NullInt64   `db:"collect_topic_count"`
		CollectCommentCount sql.NullInt64   `db:"collect_comment_count"`
		InviteFriendCount   sql.NullInt64   `db:"invite_friend_count"`
		RecentOrderTime     sql.NullTime    `db:"recent_order_time"` // 最后一次下订单时间
	}
)

func newUmsMemberStatisticsInfoModel(conn sqlx.SqlConn) *defaultUmsMemberStatisticsInfoModel {
	return &defaultUmsMemberStatisticsInfoModel{
		conn:  conn,
		table: "`ums_member_statistics_info`",
	}
}

func (m *defaultUmsMemberStatisticsInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUmsMemberStatisticsInfoModel) FindOne(ctx context.Context, id int64) (*UmsMemberStatisticsInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberStatisticsInfoRows, m.table)
	var resp UmsMemberStatisticsInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberStatisticsInfoModel) FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberStatisticsInfo, error) {
	query := fmt.Sprintf("select %s from %s limit ?,?", umsMemberStatisticsInfoRows, m.table)
	var resp []UmsMemberStatisticsInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberStatisticsInfoModel) Count(ctx context.Context) (int64, error) {
	query := fmt.Sprintf("select count(*) as count from %s", m.table)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultUmsMemberStatisticsInfoModel) Insert(ctx context.Context, data *UmsMemberStatisticsInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberStatisticsInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime)
	return ret, err
}

func (m *defaultUmsMemberStatisticsInfoModel) Update(ctx context.Context, data *UmsMemberStatisticsInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberStatisticsInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.ConsumeAmount, data.OrderCount, data.CouponCount, data.CommentCount, data.ReturnOrderCount, data.LoginCount, data.AttendCount, data.FansCount, data.CollectProductCount, data.CollectSubjectCount, data.CollectTopicCount, data.CollectCommentCount, data.InviteFriendCount, data.RecentOrderTime, data.Id)
	return err
}

func (m *defaultUmsMemberStatisticsInfoModel) tableName() string {
	return m.table
}
