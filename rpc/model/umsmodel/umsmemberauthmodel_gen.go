// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberAuthFieldNames          = builder.RawFieldNames(&UmsMemberAuth{})
	umsMemberAuthRows                = strings.Join(umsMemberAuthFieldNames, ",")
	umsMemberAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsMemberAuthIdPrefix               = "cache:gozero:umsMemberAuth:id:"
	cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix  = "cache:gozero:umsMemberAuth:authType:authKey:"
	cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix = "cache:gozero:umsMemberAuth:memberId:authType:"
)

type (
	umsMemberAuthModel interface {
		Insert(ctx context.Context, data *UmsMemberAuth) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberAuth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberAuth, error)
		FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UmsMemberAuth, error)
		FindOneByMemberIdAuthType(ctx context.Context, memberId int64, authType string) (*UmsMemberAuth, error)
		Update(ctx context.Context, data *UmsMemberAuth) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberAuth) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsMemberAuthModel struct {
		sqlc.CachedConn
		table string
	}

	UmsMemberAuth struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		Version    int64     `db:"version"` // 版本号
		MemberId   int64     `db:"member_id"`
		AuthKey    string    `db:"auth_key"`  // 平台唯一id
		AuthType   string    `db:"auth_type"` // 平台类型
	}
)

func newUmsMemberAuthModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsMemberAuthModel {
	return &defaultUmsMemberAuthModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_member_auth`",
	}
}

func (m *defaultUmsMemberAuthModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	gozeroUmsMemberAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	gozeroUmsMemberAuthIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, id)
	gozeroUmsMemberAuthMemberIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix, data.MemberId, data.AuthType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberAuthAuthTypeAuthKeyKey, gozeroUmsMemberAuthIdKey, gozeroUmsMemberAuthMemberIdAuthTypeKey)
	return err
}

func (m *defaultUmsMemberAuthModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	gozeroUmsMemberAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	gozeroUmsMemberAuthIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, id)
	gozeroUmsMemberAuthMemberIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix, data.MemberId, data.AuthType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberAuthAuthTypeAuthKeyKey, gozeroUmsMemberAuthIdKey, gozeroUmsMemberAuthMemberIdAuthTypeKey)
	return err
}

func (m *defaultUmsMemberAuthModel) FindOne(ctx context.Context, id int64) (*UmsMemberAuth, error) {
	gozeroUmsMemberAuthIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, id)
	var resp UmsMemberAuth
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsMemberAuthIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberAuthRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberAuthModel) FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UmsMemberAuth, error) {
	gozeroUmsMemberAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix, authType, authKey)
	var resp UmsMemberAuth
	err := m.QueryRowIndexCtx(ctx, &resp, gozeroUmsMemberAuthAuthTypeAuthKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `auth_type` = ? and `auth_key` = ? limit 1", umsMemberAuthRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, authType, authKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberAuthModel) FindOneByMemberIdAuthType(ctx context.Context, memberId int64, authType string) (*UmsMemberAuth, error) {
	gozeroUmsMemberAuthMemberIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix, memberId, authType)
	var resp UmsMemberAuth
	err := m.QueryRowIndexCtx(ctx, &resp, gozeroUmsMemberAuthMemberIdAuthTypeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `member_id` = ? and `auth_type` = ? limit 1", umsMemberAuthRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, memberId, authType); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberAuthModel) Insert(ctx context.Context, data *UmsMemberAuth) (sql.Result, error) {
	gozeroUmsMemberAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	gozeroUmsMemberAuthIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, data.Id)
	gozeroUmsMemberAuthMemberIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix, data.MemberId, data.AuthType)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, umsMemberAuthRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.MemberId, data.AuthKey, data.AuthType)
	}, gozeroUmsMemberAuthAuthTypeAuthKeyKey, gozeroUmsMemberAuthIdKey, gozeroUmsMemberAuthMemberIdAuthTypeKey)
	return ret, err
}

func (m *defaultUmsMemberAuthModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberAuth) (sql.Result, error) {
	gozeroUmsMemberAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	gozeroUmsMemberAuthIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, data.Id)
	gozeroUmsMemberAuthMemberIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix, data.MemberId, data.AuthType)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, umsMemberAuthRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.MemberId, data.AuthKey, data.AuthType)
		}
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.MemberId, data.AuthKey, data.AuthType)
	}, gozeroUmsMemberAuthAuthTypeAuthKeyKey, gozeroUmsMemberAuthIdKey, gozeroUmsMemberAuthMemberIdAuthTypeKey)
	return ret, err
}
func (m *defaultUmsMemberAuthModel) Update(ctx context.Context, newData *UmsMemberAuth) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	gozeroUmsMemberAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	gozeroUmsMemberAuthIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, data.Id)
	gozeroUmsMemberAuthMemberIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix, data.MemberId, data.AuthType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberAuthRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.MemberId, newData.AuthKey, newData.AuthType, newData.Id)
	}, gozeroUmsMemberAuthAuthTypeAuthKeyKey, gozeroUmsMemberAuthIdKey, gozeroUmsMemberAuthMemberIdAuthTypeKey)
	return err
}

func (m *defaultUmsMemberAuthModel) UpdateTx(ctx context.Context, session sqlx.Session, newData *UmsMemberAuth) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	gozeroUmsMemberAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	gozeroUmsMemberAuthIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, data.Id)
	gozeroUmsMemberAuthMemberIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGozeroUmsMemberAuthMemberIdAuthTypePrefix, data.MemberId, data.AuthType)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberAuthRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.MemberId, newData.AuthKey, newData.AuthType, newData.Id)
		}
		return conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.MemberId, newData.AuthKey, newData.AuthType, newData.Id)
	}, gozeroUmsMemberAuthAuthTypeAuthKeyKey, gozeroUmsMemberAuthIdKey, gozeroUmsMemberAuthMemberIdAuthTypeKey)
	return err
}

func (m *defaultUmsMemberAuthModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsMemberAuthIdPrefix, primary)
}

func (m *defaultUmsMemberAuthModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberAuthRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsMemberAuthModel) tableName() string {
	return m.table
}
