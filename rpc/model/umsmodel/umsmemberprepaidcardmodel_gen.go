// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberPrepaidCardFieldNames          = builder.RawFieldNames(&UmsMemberPrepaidCard{})
	umsMemberPrepaidCardRows                = strings.Join(umsMemberPrepaidCardFieldNames, ",")
	umsMemberPrepaidCardRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberPrepaidCardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberPrepaidCardRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberPrepaidCardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsMemberPrepaidCardIdPrefix = "cache:gozero:umsMemberPrepaidCard:id:"
)

type (
	umsMemberPrepaidCardModel interface {
		Insert(ctx context.Context, data *UmsMemberPrepaidCard) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberPrepaidCard) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberPrepaidCard, error)
		Update(ctx context.Context, data *UmsMemberPrepaidCard) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberPrepaidCard) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsMemberPrepaidCardModel struct {
		sqlc.CachedConn
		table string
	}

	UmsMemberPrepaidCard struct {
		Id             int64   `db:"id"`
		Name           string  `db:"name"`
		FaceValue      float64 `db:"face_value"`      // 面值
		ExpiredDay     int64   `db:"expired_day"`     // 失效周期（天）
		Status         int64   `db:"status"`          // 状态：0->正常；1->禁用
		CommissionRate float64 `db:"commission_rate"` // 佣金率
		DiscountRate   float64 `db:"discount_rate"`   // 折扣率
		Note           string  `db:"note"`
	}
)

func newUmsMemberPrepaidCardModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsMemberPrepaidCardModel {
	return &defaultUmsMemberPrepaidCardModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_member_prepaid_card`",
	}
}

func (m *defaultUmsMemberPrepaidCardModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsMemberPrepaidCardIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberPrepaidCardIdKey)
	return err
}

func (m *defaultUmsMemberPrepaidCardModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsMemberPrepaidCardIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberPrepaidCardIdKey)
	return err
}

func (m *defaultUmsMemberPrepaidCardModel) FindOne(ctx context.Context, id int64) (*UmsMemberPrepaidCard, error) {
	gozeroUmsMemberPrepaidCardIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, id)
	var resp UmsMemberPrepaidCard
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsMemberPrepaidCardIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberPrepaidCardRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberPrepaidCardModel) Insert(ctx context.Context, data *UmsMemberPrepaidCard) (sql.Result, error) {
	gozeroUmsMemberPrepaidCardIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberPrepaidCardRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDay, data.Status, data.CommissionRate, data.DiscountRate, data.Note)
	}, gozeroUmsMemberPrepaidCardIdKey)
	return ret, err
}

func (m *defaultUmsMemberPrepaidCardModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberPrepaidCard) (sql.Result, error) {
	gozeroUmsMemberPrepaidCardIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberPrepaidCardRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDay, data.Status, data.CommissionRate, data.DiscountRate, data.Note)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDay, data.Status, data.CommissionRate, data.DiscountRate, data.Note)
	}, gozeroUmsMemberPrepaidCardIdKey)
	return ret, err
}
func (m *defaultUmsMemberPrepaidCardModel) Update(ctx context.Context, data *UmsMemberPrepaidCard) error {
	gozeroUmsMemberPrepaidCardIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberPrepaidCardRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDay, data.Status, data.CommissionRate, data.DiscountRate, data.Note, data.Id)
	}, gozeroUmsMemberPrepaidCardIdKey)
	return err
}

func (m *defaultUmsMemberPrepaidCardModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberPrepaidCard) error {
	gozeroUmsMemberPrepaidCardIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberPrepaidCardRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDay, data.Status, data.CommissionRate, data.DiscountRate, data.Note, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDay, data.Status, data.CommissionRate, data.DiscountRate, data.Note, data.Id)
	}, gozeroUmsMemberPrepaidCardIdKey)
	return err
}

func (m *defaultUmsMemberPrepaidCardModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsMemberPrepaidCardIdPrefix, primary)
}

func (m *defaultUmsMemberPrepaidCardModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberPrepaidCardRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsMemberPrepaidCardModel) tableName() string {
	return m.table
}
