// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberPrepaidCardFieldNames          = builder.RawFieldNames(&UmsMemberPrepaidCard{})
	umsMemberPrepaidCardRows                = strings.Join(umsMemberPrepaidCardFieldNames, ",")
	umsMemberPrepaidCardRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberPrepaidCardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberPrepaidCardRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberPrepaidCardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	umsMemberPrepaidCardModel interface {
		Insert(ctx context.Context, data *UmsMemberPrepaidCard) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberPrepaidCard, error)
		FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberPrepaidCard, error)
		Count(ctx context.Context) (int64, error)
		Update(ctx context.Context, data *UmsMemberPrepaidCard) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsMemberPrepaidCardModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UmsMemberPrepaidCard struct {
		Id              int64   `db:"id"`
		Name            string  `db:"name"`
		FaceValue       float64 `db:"face_value"`       // 面值
		ExpiredDays     int64   `db:"expired_days"`     // 失效天数
		Status          int64   `db:"status"`           // 状态：0->正常；1->禁用
		CommissionRate  float64 `db:"commission_rate"`  // 佣金率
		FirstCommission float64 `db:"first_commission"` // 首次出售佣金
		DiscountRate    float64 `db:"discount_rate"`    // 折扣率
		Note            string  `db:"note"`
	}
)

func newUmsMemberPrepaidCardModel(conn sqlx.SqlConn) *defaultUmsMemberPrepaidCardModel {
	return &defaultUmsMemberPrepaidCardModel{
		conn:  conn,
		table: "`ums_member_prepaid_card`",
	}
}

func (m *defaultUmsMemberPrepaidCardModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUmsMemberPrepaidCardModel) FindOne(ctx context.Context, id int64) (*UmsMemberPrepaidCard, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberPrepaidCardRows, m.table)
	var resp UmsMemberPrepaidCard
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberPrepaidCardModel) FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberPrepaidCard, error) {
	query := fmt.Sprintf("select %s from %s limit ?,?", umsMemberPrepaidCardRows, m.table)
	var resp []UmsMemberPrepaidCard
	err := m.conn.QueryRowsCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberPrepaidCardModel) Count(ctx context.Context) (int64, error) {
	query := fmt.Sprintf("select count(*) as count from %s", m.table)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultUmsMemberPrepaidCardModel) Insert(ctx context.Context, data *UmsMemberPrepaidCard) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberPrepaidCardRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDays, data.Status, data.CommissionRate, data.FirstCommission, data.DiscountRate, data.Note)
	return ret, err
}

func (m *defaultUmsMemberPrepaidCardModel) Update(ctx context.Context, data *UmsMemberPrepaidCard) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberPrepaidCardRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.FaceValue, data.ExpiredDays, data.Status, data.CommissionRate, data.FirstCommission, data.DiscountRate, data.Note, data.Id)
	return err
}

func (m *defaultUmsMemberPrepaidCardModel) tableName() string {
	return m.table
}
