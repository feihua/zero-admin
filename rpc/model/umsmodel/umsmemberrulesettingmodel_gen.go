// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberRuleSettingFieldNames          = builder.RawFieldNames(&UmsMemberRuleSetting{})
	umsMemberRuleSettingRows                = strings.Join(umsMemberRuleSettingFieldNames, ",")
	umsMemberRuleSettingRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberRuleSettingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberRuleSettingRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberRuleSettingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsMemberRuleSettingIdPrefix = "cache:gozero:umsMemberRuleSetting:id:"
)

type (
	umsMemberRuleSettingModel interface {
		Insert(ctx context.Context, data *UmsMemberRuleSetting) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberRuleSetting) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberRuleSetting, error)
		Update(ctx context.Context, data *UmsMemberRuleSetting) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberRuleSetting) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsMemberRuleSettingModel struct {
		sqlc.CachedConn
		table string
	}

	UmsMemberRuleSetting struct {
		Id                int64   `db:"id"`
		ContinueSignDay   int64   `db:"continue_sign_day"`   // 连续签到天数
		ContinueSignPoint int64   `db:"continue_sign_point"` // 连续签到赠送数量
		ConsumePerPoint   float64 `db:"consume_per_point"`   // 每消费多少元获取1个点
		LowOrderAmount    float64 `db:"low_order_amount"`    // 最低获取点数的订单金额
		MaxPointPerOrder  int64   `db:"max_point_per_order"` // 每笔订单最高获取点数
		Type              int64   `db:"type"`                // 类型：0->积分规则；1->成长值规则
	}
)

func newUmsMemberRuleSettingModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsMemberRuleSettingModel {
	return &defaultUmsMemberRuleSettingModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_member_rule_setting`",
	}
}

func (m *defaultUmsMemberRuleSettingModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsMemberRuleSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberRuleSettingIdKey)
	return err
}

func (m *defaultUmsMemberRuleSettingModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsMemberRuleSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberRuleSettingIdKey)
	return err
}

func (m *defaultUmsMemberRuleSettingModel) FindOne(ctx context.Context, id int64) (*UmsMemberRuleSetting, error) {
	gozeroUmsMemberRuleSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, id)
	var resp UmsMemberRuleSetting
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsMemberRuleSettingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberRuleSettingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberRuleSettingModel) Insert(ctx context.Context, data *UmsMemberRuleSetting) (sql.Result, error) {
	gozeroUmsMemberRuleSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, umsMemberRuleSettingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ContinueSignDay, data.ContinueSignPoint, data.ConsumePerPoint, data.LowOrderAmount, data.MaxPointPerOrder, data.Type)
	}, gozeroUmsMemberRuleSettingIdKey)
	return ret, err
}

func (m *defaultUmsMemberRuleSettingModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberRuleSetting) (sql.Result, error) {
	gozeroUmsMemberRuleSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, umsMemberRuleSettingRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ContinueSignDay, data.ContinueSignPoint, data.ConsumePerPoint, data.LowOrderAmount, data.MaxPointPerOrder, data.Type)
		}
		return conn.ExecCtx(ctx, query, data.ContinueSignDay, data.ContinueSignPoint, data.ConsumePerPoint, data.LowOrderAmount, data.MaxPointPerOrder, data.Type)
	}, gozeroUmsMemberRuleSettingIdKey)
	return ret, err
}
func (m *defaultUmsMemberRuleSettingModel) Update(ctx context.Context, data *UmsMemberRuleSetting) error {
	gozeroUmsMemberRuleSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberRuleSettingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ContinueSignDay, data.ContinueSignPoint, data.ConsumePerPoint, data.LowOrderAmount, data.MaxPointPerOrder, data.Type, data.Id)
	}, gozeroUmsMemberRuleSettingIdKey)
	return err
}

func (m *defaultUmsMemberRuleSettingModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberRuleSetting) error {
	gozeroUmsMemberRuleSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberRuleSettingRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.ContinueSignDay, data.ContinueSignPoint, data.ConsumePerPoint, data.LowOrderAmount, data.MaxPointPerOrder, data.Type, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.ContinueSignDay, data.ContinueSignPoint, data.ConsumePerPoint, data.LowOrderAmount, data.MaxPointPerOrder, data.Type, data.Id)
	}, gozeroUmsMemberRuleSettingIdKey)
	return err
}

func (m *defaultUmsMemberRuleSettingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsMemberRuleSettingIdPrefix, primary)
}

func (m *defaultUmsMemberRuleSettingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberRuleSettingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsMemberRuleSettingModel) tableName() string {
	return m.table
}
