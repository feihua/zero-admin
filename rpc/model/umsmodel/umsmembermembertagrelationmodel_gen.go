// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberMemberTagRelationFieldNames          = builder.RawFieldNames(&UmsMemberMemberTagRelation{})
	umsMemberMemberTagRelationRows                = strings.Join(umsMemberMemberTagRelationFieldNames, ",")
	umsMemberMemberTagRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberMemberTagRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberMemberTagRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberMemberTagRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	umsMemberMemberTagRelationModel interface {
		Insert(ctx context.Context, data *UmsMemberMemberTagRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberMemberTagRelation, error)
		FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberMemberTagRelation, error)
		Count(ctx context.Context) (int64, error)
		Update(ctx context.Context, data *UmsMemberMemberTagRelation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsMemberMemberTagRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UmsMemberMemberTagRelation struct {
		Id       int64 `db:"id"`
		MemberId int64 `db:"member_id"`
		TagId    int64 `db:"tag_id"`
	}
)

func newUmsMemberMemberTagRelationModel(conn sqlx.SqlConn) *defaultUmsMemberMemberTagRelationModel {
	return &defaultUmsMemberMemberTagRelationModel{
		conn:  conn,
		table: "`ums_member_member_tag_relation`",
	}
}

func (m *defaultUmsMemberMemberTagRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUmsMemberMemberTagRelationModel) FindOne(ctx context.Context, id int64) (*UmsMemberMemberTagRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberMemberTagRelationRows, m.table)
	var resp UmsMemberMemberTagRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberMemberTagRelationModel) FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberMemberTagRelation, error) {
	query := fmt.Sprintf("select %s from %s limit ?,?", umsMemberMemberTagRelationRows, m.table)
	var resp []UmsMemberMemberTagRelation
	err := m.conn.QueryRowsCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberMemberTagRelationModel) Count(ctx context.Context) (int64, error) {
	query := fmt.Sprintf("select count(*) as count from %s", m.table)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultUmsMemberMemberTagRelationModel) Insert(ctx context.Context, data *UmsMemberMemberTagRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, umsMemberMemberTagRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.TagId)
	return ret, err
}

func (m *defaultUmsMemberMemberTagRelationModel) Update(ctx context.Context, data *UmsMemberMemberTagRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberMemberTagRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.TagId, data.Id)
	return err
}

func (m *defaultUmsMemberMemberTagRelationModel) tableName() string {
	return m.table
}
