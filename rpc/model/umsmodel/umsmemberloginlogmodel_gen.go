// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberLoginLogFieldNames          = builder.RawFieldNames(&UmsMemberLoginLog{})
	umsMemberLoginLogRows                = strings.Join(umsMemberLoginLogFieldNames, ",")
	umsMemberLoginLogRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberLoginLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberLoginLogRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberLoginLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsMemberLoginLogIdPrefix = "cache:gozero:umsMemberLoginLog:id:"
)

type (
	umsMemberLoginLogModel interface {
		Insert(ctx context.Context, data *UmsMemberLoginLog) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberLoginLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberLoginLog, error)
		Update(ctx context.Context, data *UmsMemberLoginLog) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberLoginLog) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsMemberLoginLogModel struct {
		sqlc.CachedConn
		table string
	}

	UmsMemberLoginLog struct {
		Id         int64     `db:"id"`
		MemberId   int64     `db:"member_id"`
		CreateTime time.Time `db:"create_time"`
		Ip         string    `db:"ip"`
		City       string    `db:"city"`
		LoginType  int64     `db:"login_type"` // 登录类型：0->PC；1->android;2->ios;3->小程序
		Province   string    `db:"province"`
	}
)

func newUmsMemberLoginLogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsMemberLoginLogModel {
	return &defaultUmsMemberLoginLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_member_login_log`",
	}
}

func (m *defaultUmsMemberLoginLogModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsMemberLoginLogIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberLoginLogIdKey)
	return err
}

func (m *defaultUmsMemberLoginLogModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsMemberLoginLogIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberLoginLogIdKey)
	return err
}

func (m *defaultUmsMemberLoginLogModel) FindOne(ctx context.Context, id int64) (*UmsMemberLoginLog, error) {
	gozeroUmsMemberLoginLogIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, id)
	var resp UmsMemberLoginLog
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsMemberLoginLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberLoginLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberLoginLogModel) Insert(ctx context.Context, data *UmsMemberLoginLog) (sql.Result, error) {
	gozeroUmsMemberLoginLogIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, umsMemberLoginLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MemberId, data.Ip, data.City, data.LoginType, data.Province)
	}, gozeroUmsMemberLoginLogIdKey)
	return ret, err
}

func (m *defaultUmsMemberLoginLogModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberLoginLog) (sql.Result, error) {
	gozeroUmsMemberLoginLogIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, umsMemberLoginLogRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.Ip, data.City, data.LoginType, data.Province)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.Ip, data.City, data.LoginType, data.Province)
	}, gozeroUmsMemberLoginLogIdKey)
	return ret, err
}
func (m *defaultUmsMemberLoginLogModel) Update(ctx context.Context, data *UmsMemberLoginLog) error {
	gozeroUmsMemberLoginLogIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberLoginLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MemberId, data.Ip, data.City, data.LoginType, data.Province, data.Id)
	}, gozeroUmsMemberLoginLogIdKey)
	return err
}

func (m *defaultUmsMemberLoginLogModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberLoginLog) error {
	gozeroUmsMemberLoginLogIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberLoginLogRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.Ip, data.City, data.LoginType, data.Province, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.Ip, data.City, data.LoginType, data.Province, data.Id)
	}, gozeroUmsMemberLoginLogIdKey)
	return err
}

func (m *defaultUmsMemberLoginLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsMemberLoginLogIdPrefix, primary)
}

func (m *defaultUmsMemberLoginLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberLoginLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsMemberLoginLogModel) tableName() string {
	return m.table
}
