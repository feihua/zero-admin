// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberTagFieldNames          = builder.RawFieldNames(&UmsMemberTag{})
	umsMemberTagRows                = strings.Join(umsMemberTagFieldNames, ",")
	umsMemberTagRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberTagRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	umsMemberTagModel interface {
		Insert(ctx context.Context, data *UmsMemberTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberTag, error)
		FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberTag, error)
		Count(ctx context.Context) (int64, error)
		Update(ctx context.Context, data *UmsMemberTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsMemberTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UmsMemberTag struct {
		Id                int64           `db:"id"`
		Name              sql.NullString  `db:"name"`
		FinishOrderCount  sql.NullInt64   `db:"finish_order_count"`  // 自动打标签完成订单数量
		FinishOrderAmount sql.NullFloat64 `db:"finish_order_amount"` // 自动打标签完成订单金额
	}
)

func newUmsMemberTagModel(conn sqlx.SqlConn) *defaultUmsMemberTagModel {
	return &defaultUmsMemberTagModel{
		conn:  conn,
		table: "`ums_member_tag`",
	}
}

func (m *defaultUmsMemberTagModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUmsMemberTagModel) FindOne(ctx context.Context, id int64) (*UmsMemberTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberTagRows, m.table)
	var resp UmsMemberTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberTagModel) FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberTag, error) {
	query := fmt.Sprintf("select %s from %s limit ?,?", umsMemberTagRows, m.table)
	var resp []UmsMemberTag
	err := m.conn.QueryRowsCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberTagModel) Count(ctx context.Context) (int64, error) {
	query := fmt.Sprintf("select count(*) as count from %s", m.table)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultUmsMemberTagModel) Insert(ctx context.Context, data *UmsMemberTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, umsMemberTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.FinishOrderCount, data.FinishOrderAmount)
	return ret, err
}

func (m *defaultUmsMemberTagModel) Update(ctx context.Context, data *UmsMemberTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.FinishOrderCount, data.FinishOrderAmount, data.Id)
	return err
}

func (m *defaultUmsMemberTagModel) tableName() string {
	return m.table
}
