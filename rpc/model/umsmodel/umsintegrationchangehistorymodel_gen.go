// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsIntegrationChangeHistoryFieldNames          = builder.RawFieldNames(&UmsIntegrationChangeHistory{})
	umsIntegrationChangeHistoryRows                = strings.Join(umsIntegrationChangeHistoryFieldNames, ",")
	umsIntegrationChangeHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(umsIntegrationChangeHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsIntegrationChangeHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(umsIntegrationChangeHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsIntegrationChangeHistoryIdPrefix = "cache:gozero:umsIntegrationChangeHistory:id:"
)

type (
	umsIntegrationChangeHistoryModel interface {
		Insert(ctx context.Context, data *UmsIntegrationChangeHistory) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationChangeHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsIntegrationChangeHistory, error)
		Update(ctx context.Context, data *UmsIntegrationChangeHistory) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationChangeHistory) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsIntegrationChangeHistoryModel struct {
		sqlc.CachedConn
		table string
	}

	UmsIntegrationChangeHistory struct {
		Id          int64     `db:"id"`
		MemberId    int64     `db:"member_id"`
		CreateTime  time.Time `db:"create_time"`
		ChangeType  int64     `db:"change_type"`  // 改变类型：0->增加；1->减少
		ChangeCount int64     `db:"change_count"` // 积分改变数量
		OperateMan  string    `db:"operate_man"`  // 操作人员
		OperateNote string    `db:"operate_note"` // 操作备注
		SourceType  int64     `db:"source_type"`  // 积分来源：0->购物；1->管理员修改
	}
)

func newUmsIntegrationChangeHistoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsIntegrationChangeHistoryModel {
	return &defaultUmsIntegrationChangeHistoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_integration_change_history`",
	}
}

func (m *defaultUmsIntegrationChangeHistoryModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsIntegrationChangeHistoryIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsIntegrationChangeHistoryIdKey)
	return err
}

func (m *defaultUmsIntegrationChangeHistoryModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsIntegrationChangeHistoryIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsIntegrationChangeHistoryIdKey)
	return err
}

func (m *defaultUmsIntegrationChangeHistoryModel) FindOne(ctx context.Context, id int64) (*UmsIntegrationChangeHistory, error) {
	gozeroUmsIntegrationChangeHistoryIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, id)
	var resp UmsIntegrationChangeHistory
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsIntegrationChangeHistoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsIntegrationChangeHistoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsIntegrationChangeHistoryModel) Insert(ctx context.Context, data *UmsIntegrationChangeHistory) (sql.Result, error) {
	gozeroUmsIntegrationChangeHistoryIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, umsIntegrationChangeHistoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MemberId, data.ChangeType, data.ChangeCount, data.OperateMan, data.OperateNote, data.SourceType)
	}, gozeroUmsIntegrationChangeHistoryIdKey)
	return ret, err
}

func (m *defaultUmsIntegrationChangeHistoryModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationChangeHistory) (sql.Result, error) {
	gozeroUmsIntegrationChangeHistoryIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, umsIntegrationChangeHistoryRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.ChangeType, data.ChangeCount, data.OperateMan, data.OperateNote, data.SourceType)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.ChangeType, data.ChangeCount, data.OperateMan, data.OperateNote, data.SourceType)
	}, gozeroUmsIntegrationChangeHistoryIdKey)
	return ret, err
}
func (m *defaultUmsIntegrationChangeHistoryModel) Update(ctx context.Context, data *UmsIntegrationChangeHistory) error {
	gozeroUmsIntegrationChangeHistoryIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsIntegrationChangeHistoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MemberId, data.ChangeType, data.ChangeCount, data.OperateMan, data.OperateNote, data.SourceType, data.Id)
	}, gozeroUmsIntegrationChangeHistoryIdKey)
	return err
}

func (m *defaultUmsIntegrationChangeHistoryModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationChangeHistory) error {
	gozeroUmsIntegrationChangeHistoryIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsIntegrationChangeHistoryRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.ChangeType, data.ChangeCount, data.OperateMan, data.OperateNote, data.SourceType, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.ChangeType, data.ChangeCount, data.OperateMan, data.OperateNote, data.SourceType, data.Id)
	}, gozeroUmsIntegrationChangeHistoryIdKey)
	return err
}

func (m *defaultUmsIntegrationChangeHistoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationChangeHistoryIdPrefix, primary)
}

func (m *defaultUmsIntegrationChangeHistoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsIntegrationChangeHistoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsIntegrationChangeHistoryModel) tableName() string {
	return m.table
}
