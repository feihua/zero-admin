// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberLevelFieldNames          = builder.RawFieldNames(&UmsMemberLevel{})
	umsMemberLevelRows                = strings.Join(umsMemberLevelFieldNames, ",")
	umsMemberLevelRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberLevelFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberLevelRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberLevelFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsMemberLevelIdPrefix = "cache:gozero:umsMemberLevel:id:"
)

type (
	umsMemberLevelModel interface {
		Insert(ctx context.Context, data *UmsMemberLevel) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberLevel) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberLevel, error)
		Update(ctx context.Context, data *UmsMemberLevel) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberLevel) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsMemberLevelModel struct {
		sqlc.CachedConn
		table string
	}

	UmsMemberLevel struct {
		Id                    int64   `db:"id"`
		Name                  string  `db:"name"`
		GrowthPoint           int64   `db:"growth_point"`            // 成长点位
		DefaultStatus         int64   `db:"default_status"`          // 是否为默认等级：0->不是；1->是
		FreeFreightPoint      float64 `db:"free_freight_point"`      // 免运费标准
		CommentGrowthPoint    int64   `db:"comment_growth_point"`    // 每次评价获取的成长值
		PriviledgeFreeFreight int64   `db:"priviledge_free_freight"` // 是否有免邮特权
		PriviledgeSignIn      int64   `db:"priviledge_sign_in"`      // 是否有签到特权
		PriviledgeComment     int64   `db:"priviledge_comment"`      // 是否有评论获奖励特权
		PriviledgePromotion   int64   `db:"priviledge_promotion"`    // 是否有专享活动特权
		PriviledgeMemberPrice int64   `db:"priviledge_member_price"` // 是否有会员价格特权
		PriviledgeBirthday    int64   `db:"priviledge_birthday"`     // 是否有生日特权
		DiscountRate          float64 `db:"discount_rate"`           // 折扣率
		Note                  string  `db:"note"`
	}
)

func newUmsMemberLevelModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsMemberLevelModel {
	return &defaultUmsMemberLevelModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_member_level`",
	}
}

func (m *defaultUmsMemberLevelModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsMemberLevelIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberLevelIdKey)
	return err
}

func (m *defaultUmsMemberLevelModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsMemberLevelIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsMemberLevelIdKey)
	return err
}

func (m *defaultUmsMemberLevelModel) FindOne(ctx context.Context, id int64) (*UmsMemberLevel, error) {
	gozeroUmsMemberLevelIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, id)
	var resp UmsMemberLevel
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsMemberLevelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberLevelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberLevelModel) Insert(ctx context.Context, data *UmsMemberLevel) (sql.Result, error) {
	gozeroUmsMemberLevelIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberLevelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.GrowthPoint, data.DefaultStatus, data.FreeFreightPoint, data.CommentGrowthPoint, data.PriviledgeFreeFreight, data.PriviledgeSignIn, data.PriviledgeComment, data.PriviledgePromotion, data.PriviledgeMemberPrice, data.PriviledgeBirthday, data.DiscountRate, data.Note)
	}, gozeroUmsMemberLevelIdKey)
	return ret, err
}

func (m *defaultUmsMemberLevelModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsMemberLevel) (sql.Result, error) {
	gozeroUmsMemberLevelIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberLevelRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.GrowthPoint, data.DefaultStatus, data.FreeFreightPoint, data.CommentGrowthPoint, data.PriviledgeFreeFreight, data.PriviledgeSignIn, data.PriviledgeComment, data.PriviledgePromotion, data.PriviledgeMemberPrice, data.PriviledgeBirthday, data.DiscountRate, data.Note)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.GrowthPoint, data.DefaultStatus, data.FreeFreightPoint, data.CommentGrowthPoint, data.PriviledgeFreeFreight, data.PriviledgeSignIn, data.PriviledgeComment, data.PriviledgePromotion, data.PriviledgeMemberPrice, data.PriviledgeBirthday, data.DiscountRate, data.Note)
	}, gozeroUmsMemberLevelIdKey)
	return ret, err
}
func (m *defaultUmsMemberLevelModel) Update(ctx context.Context, data *UmsMemberLevel) error {
	gozeroUmsMemberLevelIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberLevelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.GrowthPoint, data.DefaultStatus, data.FreeFreightPoint, data.CommentGrowthPoint, data.PriviledgeFreeFreight, data.PriviledgeSignIn, data.PriviledgeComment, data.PriviledgePromotion, data.PriviledgeMemberPrice, data.PriviledgeBirthday, data.DiscountRate, data.Note, data.Id)
	}, gozeroUmsMemberLevelIdKey)
	return err
}

func (m *defaultUmsMemberLevelModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsMemberLevel) error {
	gozeroUmsMemberLevelIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberLevelRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.GrowthPoint, data.DefaultStatus, data.FreeFreightPoint, data.CommentGrowthPoint, data.PriviledgeFreeFreight, data.PriviledgeSignIn, data.PriviledgeComment, data.PriviledgePromotion, data.PriviledgeMemberPrice, data.PriviledgeBirthday, data.DiscountRate, data.Note, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.GrowthPoint, data.DefaultStatus, data.FreeFreightPoint, data.CommentGrowthPoint, data.PriviledgeFreeFreight, data.PriviledgeSignIn, data.PriviledgeComment, data.PriviledgePromotion, data.PriviledgeMemberPrice, data.PriviledgeBirthday, data.DiscountRate, data.Note, data.Id)
	}, gozeroUmsMemberLevelIdKey)
	return err
}

func (m *defaultUmsMemberLevelModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsMemberLevelIdPrefix, primary)
}

func (m *defaultUmsMemberLevelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberLevelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsMemberLevelModel) tableName() string {
	return m.table
}
