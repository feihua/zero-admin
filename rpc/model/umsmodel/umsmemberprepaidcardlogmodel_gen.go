// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsMemberPrepaidCardLogFieldNames          = builder.RawFieldNames(&UmsMemberPrepaidCardLog{})
	umsMemberPrepaidCardLogRows                = strings.Join(umsMemberPrepaidCardLogFieldNames, ",")
	umsMemberPrepaidCardLogRowsExpectAutoSet   = strings.Join(stringx.Remove(umsMemberPrepaidCardLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsMemberPrepaidCardLogRowsWithPlaceHolder = strings.Join(stringx.Remove(umsMemberPrepaidCardLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	umsMemberPrepaidCardLogModel interface {
		Insert(ctx context.Context, data *UmsMemberPrepaidCardLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsMemberPrepaidCardLog, error)
		FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberPrepaidCardLog, error)
		Count(ctx context.Context) (int64, error)
		Update(ctx context.Context, data *UmsMemberPrepaidCardLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsMemberPrepaidCardLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UmsMemberPrepaidCardLog struct {
		Id            int64   `db:"id"`
		MemberId      int64   `db:"member_id"`
		PrepaidCardId int64   `db:"prepaid_card_id"`
		OrderId       int64   `db:"order_id"`    // 订单编号
		OrderSn       string  `db:"order_sn"`    // 订单号码
		FundsType     int64   `db:"funds_type"`  // 资金类型：0进，1出
		Amount        float64 `db:"amount"`      // 金额
		CreateTime    int64   `db:"create_time"` // 创建时间
		UpdateTime    int64   `db:"update_time"` // 更新时间
		Note          string  `db:"note"`
	}
)

func newUmsMemberPrepaidCardLogModel(conn sqlx.SqlConn) *defaultUmsMemberPrepaidCardLogModel {
	return &defaultUmsMemberPrepaidCardLogModel{
		conn:  conn,
		table: "`ums_member_prepaid_card_log`",
	}
}

func (m *defaultUmsMemberPrepaidCardLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUmsMemberPrepaidCardLogModel) FindOne(ctx context.Context, id int64) (*UmsMemberPrepaidCardLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsMemberPrepaidCardLogRows, m.table)
	var resp UmsMemberPrepaidCardLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberPrepaidCardLogModel) FindAll(ctx context.Context, Current int64, PageSize int64) (*[]UmsMemberPrepaidCardLog, error) {
	query := fmt.Sprintf("select %s from %s limit ?,?", umsMemberPrepaidCardLogRows, m.table)
	var resp []UmsMemberPrepaidCardLog
	err := m.conn.QueryRowsCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberPrepaidCardLogModel) Count(ctx context.Context) (int64, error) {
	query := fmt.Sprintf("select count(*) as count from %s", m.table)
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)
	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultUmsMemberPrepaidCardLogModel) Insert(ctx context.Context, data *UmsMemberPrepaidCardLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, umsMemberPrepaidCardLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.PrepaidCardId, data.OrderId, data.OrderSn, data.FundsType, data.Amount, data.Note)
	return ret, err
}

func (m *defaultUmsMemberPrepaidCardLogModel) Update(ctx context.Context, data *UmsMemberPrepaidCardLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsMemberPrepaidCardLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MemberId, data.PrepaidCardId, data.OrderId, data.OrderSn, data.FundsType, data.Amount, data.Note, data.Id)
	return err
}

func (m *defaultUmsMemberPrepaidCardLogModel) tableName() string {
	return m.table
}
