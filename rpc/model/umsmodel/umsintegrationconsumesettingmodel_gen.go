// Code generated by goctl. DO NOT EDIT.

package umsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsIntegrationConsumeSettingFieldNames          = builder.RawFieldNames(&UmsIntegrationConsumeSetting{})
	umsIntegrationConsumeSettingRows                = strings.Join(umsIntegrationConsumeSettingFieldNames, ",")
	umsIntegrationConsumeSettingRowsExpectAutoSet   = strings.Join(stringx.Remove(umsIntegrationConsumeSettingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	umsIntegrationConsumeSettingRowsWithPlaceHolder = strings.Join(stringx.Remove(umsIntegrationConsumeSettingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGozeroUmsIntegrationConsumeSettingIdPrefix = "cache:gozero:umsIntegrationConsumeSetting:id:"
)

type (
	umsIntegrationConsumeSettingModel interface {
		Insert(ctx context.Context, data *UmsIntegrationConsumeSetting) (sql.Result, error)
		InsertTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationConsumeSetting) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsIntegrationConsumeSetting, error)
		Update(ctx context.Context, data *UmsIntegrationConsumeSetting) error
		UpdateTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationConsumeSetting) error
		Delete(ctx context.Context, id int64) error
		DeleteTx(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultUmsIntegrationConsumeSettingModel struct {
		sqlc.CachedConn
		table string
	}

	UmsIntegrationConsumeSetting struct {
		Id                 int64 `db:"id"`
		DeductionPerAmount int64 `db:"deduction_per_amount"`  // 每一元需要抵扣的积分数量
		MaxPercentPerOrder int64 `db:"max_percent_per_order"` // 每笔订单最高抵用百分比
		UseUnit            int64 `db:"use_unit"`              // 每次使用积分最小单位100
		CouponStatus       int64 `db:"coupon_status"`         // 是否可以和优惠券同用；0->不可以；1->可以
	}
)

func newUmsIntegrationConsumeSettingModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsIntegrationConsumeSettingModel {
	return &defaultUmsIntegrationConsumeSettingModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_integration_consume_setting`",
	}
}

func (m *defaultUmsIntegrationConsumeSettingModel) Delete(ctx context.Context, id int64) error {
	gozeroUmsIntegrationConsumeSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsIntegrationConsumeSettingIdKey)
	return err
}

func (m *defaultUmsIntegrationConsumeSettingModel) DeleteTx(ctx context.Context, session sqlx.Session, id int64) error {
	gozeroUmsIntegrationConsumeSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, gozeroUmsIntegrationConsumeSettingIdKey)
	return err
}

func (m *defaultUmsIntegrationConsumeSettingModel) FindOne(ctx context.Context, id int64) (*UmsIntegrationConsumeSetting, error) {
	gozeroUmsIntegrationConsumeSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, id)
	var resp UmsIntegrationConsumeSetting
	err := m.QueryRowCtx(ctx, &resp, gozeroUmsIntegrationConsumeSettingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsIntegrationConsumeSettingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsIntegrationConsumeSettingModel) Insert(ctx context.Context, data *UmsIntegrationConsumeSetting) (sql.Result, error) {
	gozeroUmsIntegrationConsumeSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, umsIntegrationConsumeSettingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeductionPerAmount, data.MaxPercentPerOrder, data.UseUnit, data.CouponStatus)
	}, gozeroUmsIntegrationConsumeSettingIdKey)
	return ret, err
}

func (m *defaultUmsIntegrationConsumeSettingModel) InsertTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationConsumeSetting) (sql.Result, error) {
	gozeroUmsIntegrationConsumeSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, umsIntegrationConsumeSettingRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.DeductionPerAmount, data.MaxPercentPerOrder, data.UseUnit, data.CouponStatus)
		}
		return conn.ExecCtx(ctx, query, data.DeductionPerAmount, data.MaxPercentPerOrder, data.UseUnit, data.CouponStatus)
	}, gozeroUmsIntegrationConsumeSettingIdKey)
	return ret, err
}
func (m *defaultUmsIntegrationConsumeSettingModel) Update(ctx context.Context, data *UmsIntegrationConsumeSetting) error {
	gozeroUmsIntegrationConsumeSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsIntegrationConsumeSettingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeductionPerAmount, data.MaxPercentPerOrder, data.UseUnit, data.CouponStatus, data.Id)
	}, gozeroUmsIntegrationConsumeSettingIdKey)
	return err
}

func (m *defaultUmsIntegrationConsumeSettingModel) UpdateTx(ctx context.Context, session sqlx.Session, data *UmsIntegrationConsumeSetting) error {
	gozeroUmsIntegrationConsumeSettingIdKey := fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsIntegrationConsumeSettingRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.DeductionPerAmount, data.MaxPercentPerOrder, data.UseUnit, data.CouponStatus, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.DeductionPerAmount, data.MaxPercentPerOrder, data.UseUnit, data.CouponStatus, data.Id)
	}, gozeroUmsIntegrationConsumeSettingIdKey)
	return err
}

func (m *defaultUmsIntegrationConsumeSettingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGozeroUmsIntegrationConsumeSettingIdPrefix, primary)
}

func (m *defaultUmsIntegrationConsumeSettingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsIntegrationConsumeSettingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsIntegrationConsumeSettingModel) tableName() string {
	return m.table
}
