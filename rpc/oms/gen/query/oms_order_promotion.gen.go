// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderPromotion(db *gorm.DB, opts ...gen.DOOption) omsOrderPromotion {
	_omsOrderPromotion := omsOrderPromotion{}

	_omsOrderPromotion.omsOrderPromotionDo.UseDB(db, opts...)
	_omsOrderPromotion.omsOrderPromotionDo.UseModel(&model.OmsOrderPromotion{})

	tableName := _omsOrderPromotion.omsOrderPromotionDo.TableName()
	_omsOrderPromotion.ALL = field.NewAsterisk(tableName)
	_omsOrderPromotion.ID = field.NewInt64(tableName, "id")
	_omsOrderPromotion.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderPromotion.OrderNo = field.NewString(tableName, "order_no")
	_omsOrderPromotion.PromotionType = field.NewInt32(tableName, "promotion_type")
	_omsOrderPromotion.PromotionID = field.NewInt64(tableName, "promotion_id")
	_omsOrderPromotion.PromotionName = field.NewString(tableName, "promotion_name")
	_omsOrderPromotion.DiscountAmount = field.NewFloat64(tableName, "discount_amount")
	_omsOrderPromotion.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrderPromotion.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_omsOrderPromotion.fillFieldMap()

	return _omsOrderPromotion
}

// omsOrderPromotion 订单优惠信息表
type omsOrderPromotion struct {
	omsOrderPromotionDo omsOrderPromotionDo

	ALL            field.Asterisk
	ID             field.Int64   // 主键ID
	OrderID        field.Int64   // 订单ID
	OrderNo        field.String  // 订单编号
	PromotionType  field.Int32   // 优惠类型：1-优惠券，2-积分抵扣，3-会员折扣，4-促销活动
	PromotionID    field.Int64   // 优惠ID
	PromotionName  field.String  // 优惠名称
	DiscountAmount field.Float64 // 优惠金额
	CreateTime     field.Time
	IsDeleted      field.Int32 // 是否删除

	fieldMap map[string]field.Expr
}

func (o omsOrderPromotion) Table(newTableName string) *omsOrderPromotion {
	o.omsOrderPromotionDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderPromotion) As(alias string) *omsOrderPromotion {
	o.omsOrderPromotionDo.DO = *(o.omsOrderPromotionDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderPromotion) updateTableName(table string) *omsOrderPromotion {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.PromotionType = field.NewInt32(table, "promotion_type")
	o.PromotionID = field.NewInt64(table, "promotion_id")
	o.PromotionName = field.NewString(table, "promotion_name")
	o.DiscountAmount = field.NewFloat64(table, "discount_amount")
	o.CreateTime = field.NewTime(table, "create_time")
	o.IsDeleted = field.NewInt32(table, "is_deleted")

	o.fillFieldMap()

	return o
}

func (o *omsOrderPromotion) WithContext(ctx context.Context) IOmsOrderPromotionDo {
	return o.omsOrderPromotionDo.WithContext(ctx)
}

func (o omsOrderPromotion) TableName() string { return o.omsOrderPromotionDo.TableName() }

func (o omsOrderPromotion) Alias() string { return o.omsOrderPromotionDo.Alias() }

func (o omsOrderPromotion) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderPromotionDo.Columns(cols...)
}

func (o *omsOrderPromotion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderPromotion) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["promotion_type"] = o.PromotionType
	o.fieldMap["promotion_id"] = o.PromotionID
	o.fieldMap["promotion_name"] = o.PromotionName
	o.fieldMap["discount_amount"] = o.DiscountAmount
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["is_deleted"] = o.IsDeleted
}

func (o omsOrderPromotion) clone(db *gorm.DB) omsOrderPromotion {
	o.omsOrderPromotionDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderPromotion) replaceDB(db *gorm.DB) omsOrderPromotion {
	o.omsOrderPromotionDo.ReplaceDB(db)
	return o
}

type omsOrderPromotionDo struct{ gen.DO }

type IOmsOrderPromotionDo interface {
	gen.SubQuery
	Debug() IOmsOrderPromotionDo
	WithContext(ctx context.Context) IOmsOrderPromotionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderPromotionDo
	WriteDB() IOmsOrderPromotionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderPromotionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderPromotionDo
	Not(conds ...gen.Condition) IOmsOrderPromotionDo
	Or(conds ...gen.Condition) IOmsOrderPromotionDo
	Select(conds ...field.Expr) IOmsOrderPromotionDo
	Where(conds ...gen.Condition) IOmsOrderPromotionDo
	Order(conds ...field.Expr) IOmsOrderPromotionDo
	Distinct(cols ...field.Expr) IOmsOrderPromotionDo
	Omit(cols ...field.Expr) IOmsOrderPromotionDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderPromotionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPromotionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPromotionDo
	Group(cols ...field.Expr) IOmsOrderPromotionDo
	Having(conds ...gen.Condition) IOmsOrderPromotionDo
	Limit(limit int) IOmsOrderPromotionDo
	Offset(offset int) IOmsOrderPromotionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderPromotionDo
	Unscoped() IOmsOrderPromotionDo
	Create(values ...*model.OmsOrderPromotion) error
	CreateInBatches(values []*model.OmsOrderPromotion, batchSize int) error
	Save(values ...*model.OmsOrderPromotion) error
	First() (*model.OmsOrderPromotion, error)
	Take() (*model.OmsOrderPromotion, error)
	Last() (*model.OmsOrderPromotion, error)
	Find() ([]*model.OmsOrderPromotion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderPromotion, err error)
	FindInBatches(result *[]*model.OmsOrderPromotion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderPromotion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderPromotionDo
	Assign(attrs ...field.AssignExpr) IOmsOrderPromotionDo
	Joins(fields ...field.RelationField) IOmsOrderPromotionDo
	Preload(fields ...field.RelationField) IOmsOrderPromotionDo
	FirstOrInit() (*model.OmsOrderPromotion, error)
	FirstOrCreate() (*model.OmsOrderPromotion, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderPromotion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderPromotionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderPromotionDo) Debug() IOmsOrderPromotionDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderPromotionDo) WithContext(ctx context.Context) IOmsOrderPromotionDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderPromotionDo) ReadDB() IOmsOrderPromotionDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderPromotionDo) WriteDB() IOmsOrderPromotionDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderPromotionDo) Session(config *gorm.Session) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderPromotionDo) Clauses(conds ...clause.Expression) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderPromotionDo) Returning(value interface{}, columns ...string) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderPromotionDo) Not(conds ...gen.Condition) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderPromotionDo) Or(conds ...gen.Condition) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderPromotionDo) Select(conds ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderPromotionDo) Where(conds ...gen.Condition) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderPromotionDo) Order(conds ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderPromotionDo) Distinct(cols ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderPromotionDo) Omit(cols ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderPromotionDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderPromotionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderPromotionDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderPromotionDo) Group(cols ...field.Expr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderPromotionDo) Having(conds ...gen.Condition) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderPromotionDo) Limit(limit int) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderPromotionDo) Offset(offset int) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderPromotionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderPromotionDo) Unscoped() IOmsOrderPromotionDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderPromotionDo) Create(values ...*model.OmsOrderPromotion) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderPromotionDo) CreateInBatches(values []*model.OmsOrderPromotion, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderPromotionDo) Save(values ...*model.OmsOrderPromotion) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderPromotionDo) First() (*model.OmsOrderPromotion, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPromotion), nil
	}
}

func (o omsOrderPromotionDo) Take() (*model.OmsOrderPromotion, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPromotion), nil
	}
}

func (o omsOrderPromotionDo) Last() (*model.OmsOrderPromotion, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPromotion), nil
	}
}

func (o omsOrderPromotionDo) Find() ([]*model.OmsOrderPromotion, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderPromotion), err
}

func (o omsOrderPromotionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderPromotion, err error) {
	buf := make([]*model.OmsOrderPromotion, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderPromotionDo) FindInBatches(result *[]*model.OmsOrderPromotion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderPromotionDo) Attrs(attrs ...field.AssignExpr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderPromotionDo) Assign(attrs ...field.AssignExpr) IOmsOrderPromotionDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderPromotionDo) Joins(fields ...field.RelationField) IOmsOrderPromotionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderPromotionDo) Preload(fields ...field.RelationField) IOmsOrderPromotionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderPromotionDo) FirstOrInit() (*model.OmsOrderPromotion, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPromotion), nil
	}
}

func (o omsOrderPromotionDo) FirstOrCreate() (*model.OmsOrderPromotion, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPromotion), nil
	}
}

func (o omsOrderPromotionDo) FindByPage(offset int, limit int) (result []*model.OmsOrderPromotion, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderPromotionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderPromotionDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderPromotionDo) Delete(models ...*model.OmsOrderPromotion) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderPromotionDo) withDO(do gen.Dao) *omsOrderPromotionDo {
	o.DO = *do.(*gen.DO)
	return o
}
