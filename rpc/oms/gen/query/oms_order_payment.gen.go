// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderPayment(db *gorm.DB, opts ...gen.DOOption) omsOrderPayment {
	_omsOrderPayment := omsOrderPayment{}

	_omsOrderPayment.omsOrderPaymentDo.UseDB(db, opts...)
	_omsOrderPayment.omsOrderPaymentDo.UseModel(&model.OmsOrderPayment{})

	tableName := _omsOrderPayment.omsOrderPaymentDo.TableName()
	_omsOrderPayment.ALL = field.NewAsterisk(tableName)
	_omsOrderPayment.ID = field.NewInt64(tableName, "id")
	_omsOrderPayment.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderPayment.OrderNo = field.NewString(tableName, "order_no")
	_omsOrderPayment.PayType = field.NewInt32(tableName, "pay_type")
	_omsOrderPayment.TransactionID = field.NewString(tableName, "transaction_id")
	_omsOrderPayment.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_omsOrderPayment.PayAmount = field.NewFloat64(tableName, "pay_amount")
	_omsOrderPayment.PayStatus = field.NewInt32(tableName, "pay_status")
	_omsOrderPayment.PayTime = field.NewTime(tableName, "pay_time")
	_omsOrderPayment.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrderPayment.UpdateTime = field.NewTime(tableName, "update_time")
	_omsOrderPayment.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_omsOrderPayment.fillFieldMap()

	return _omsOrderPayment
}

// omsOrderPayment 订单支付表
type omsOrderPayment struct {
	omsOrderPaymentDo omsOrderPaymentDo

	ALL           field.Asterisk
	ID            field.Int64   // 主键ID
	OrderID       field.Int64   // 订单ID
	OrderNo       field.String  // 订单编号
	PayType       field.Int32   // 支付方式：1-支付宝，2-微信，3-银联
	TransactionID field.String  // 支付流水号
	TotalAmount   field.Float64 // 订单金额
	PayAmount     field.Float64 // 支付金额
	PayStatus     field.Int32   // 支付状态：0-待支付，1-支付成功，2-支付失败
	PayTime       field.Time    // 支付时间
	CreateTime    field.Time    // 创建时间
	UpdateTime    field.Time
	IsDeleted     field.Int32 // 是否删除

	fieldMap map[string]field.Expr
}

func (o omsOrderPayment) Table(newTableName string) *omsOrderPayment {
	o.omsOrderPaymentDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderPayment) As(alias string) *omsOrderPayment {
	o.omsOrderPaymentDo.DO = *(o.omsOrderPaymentDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderPayment) updateTableName(table string) *omsOrderPayment {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.PayType = field.NewInt32(table, "pay_type")
	o.TransactionID = field.NewString(table, "transaction_id")
	o.TotalAmount = field.NewFloat64(table, "total_amount")
	o.PayAmount = field.NewFloat64(table, "pay_amount")
	o.PayStatus = field.NewInt32(table, "pay_status")
	o.PayTime = field.NewTime(table, "pay_time")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")
	o.IsDeleted = field.NewInt32(table, "is_deleted")

	o.fillFieldMap()

	return o
}

func (o *omsOrderPayment) WithContext(ctx context.Context) IOmsOrderPaymentDo {
	return o.omsOrderPaymentDo.WithContext(ctx)
}

func (o omsOrderPayment) TableName() string { return o.omsOrderPaymentDo.TableName() }

func (o omsOrderPayment) Alias() string { return o.omsOrderPaymentDo.Alias() }

func (o omsOrderPayment) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderPaymentDo.Columns(cols...)
}

func (o *omsOrderPayment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderPayment) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 12)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["transaction_id"] = o.TransactionID
	o.fieldMap["total_amount"] = o.TotalAmount
	o.fieldMap["pay_amount"] = o.PayAmount
	o.fieldMap["pay_status"] = o.PayStatus
	o.fieldMap["pay_time"] = o.PayTime
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
	o.fieldMap["is_deleted"] = o.IsDeleted
}

func (o omsOrderPayment) clone(db *gorm.DB) omsOrderPayment {
	o.omsOrderPaymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderPayment) replaceDB(db *gorm.DB) omsOrderPayment {
	o.omsOrderPaymentDo.ReplaceDB(db)
	return o
}

type omsOrderPaymentDo struct{ gen.DO }

type IOmsOrderPaymentDo interface {
	gen.SubQuery
	Debug() IOmsOrderPaymentDo
	WithContext(ctx context.Context) IOmsOrderPaymentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderPaymentDo
	WriteDB() IOmsOrderPaymentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderPaymentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderPaymentDo
	Not(conds ...gen.Condition) IOmsOrderPaymentDo
	Or(conds ...gen.Condition) IOmsOrderPaymentDo
	Select(conds ...field.Expr) IOmsOrderPaymentDo
	Where(conds ...gen.Condition) IOmsOrderPaymentDo
	Order(conds ...field.Expr) IOmsOrderPaymentDo
	Distinct(cols ...field.Expr) IOmsOrderPaymentDo
	Omit(cols ...field.Expr) IOmsOrderPaymentDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderPaymentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPaymentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPaymentDo
	Group(cols ...field.Expr) IOmsOrderPaymentDo
	Having(conds ...gen.Condition) IOmsOrderPaymentDo
	Limit(limit int) IOmsOrderPaymentDo
	Offset(offset int) IOmsOrderPaymentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderPaymentDo
	Unscoped() IOmsOrderPaymentDo
	Create(values ...*model.OmsOrderPayment) error
	CreateInBatches(values []*model.OmsOrderPayment, batchSize int) error
	Save(values ...*model.OmsOrderPayment) error
	First() (*model.OmsOrderPayment, error)
	Take() (*model.OmsOrderPayment, error)
	Last() (*model.OmsOrderPayment, error)
	Find() ([]*model.OmsOrderPayment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderPayment, err error)
	FindInBatches(result *[]*model.OmsOrderPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderPayment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderPaymentDo
	Assign(attrs ...field.AssignExpr) IOmsOrderPaymentDo
	Joins(fields ...field.RelationField) IOmsOrderPaymentDo
	Preload(fields ...field.RelationField) IOmsOrderPaymentDo
	FirstOrInit() (*model.OmsOrderPayment, error)
	FirstOrCreate() (*model.OmsOrderPayment, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderPayment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderPaymentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderPaymentDo) Debug() IOmsOrderPaymentDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderPaymentDo) WithContext(ctx context.Context) IOmsOrderPaymentDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderPaymentDo) ReadDB() IOmsOrderPaymentDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderPaymentDo) WriteDB() IOmsOrderPaymentDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderPaymentDo) Session(config *gorm.Session) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderPaymentDo) Clauses(conds ...clause.Expression) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderPaymentDo) Returning(value interface{}, columns ...string) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderPaymentDo) Not(conds ...gen.Condition) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderPaymentDo) Or(conds ...gen.Condition) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderPaymentDo) Select(conds ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderPaymentDo) Where(conds ...gen.Condition) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderPaymentDo) Order(conds ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderPaymentDo) Distinct(cols ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderPaymentDo) Omit(cols ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderPaymentDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderPaymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderPaymentDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderPaymentDo) Group(cols ...field.Expr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderPaymentDo) Having(conds ...gen.Condition) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderPaymentDo) Limit(limit int) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderPaymentDo) Offset(offset int) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderPaymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderPaymentDo) Unscoped() IOmsOrderPaymentDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderPaymentDo) Create(values ...*model.OmsOrderPayment) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderPaymentDo) CreateInBatches(values []*model.OmsOrderPayment, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderPaymentDo) Save(values ...*model.OmsOrderPayment) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderPaymentDo) First() (*model.OmsOrderPayment, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPayment), nil
	}
}

func (o omsOrderPaymentDo) Take() (*model.OmsOrderPayment, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPayment), nil
	}
}

func (o omsOrderPaymentDo) Last() (*model.OmsOrderPayment, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPayment), nil
	}
}

func (o omsOrderPaymentDo) Find() ([]*model.OmsOrderPayment, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderPayment), err
}

func (o omsOrderPaymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderPayment, err error) {
	buf := make([]*model.OmsOrderPayment, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderPaymentDo) FindInBatches(result *[]*model.OmsOrderPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderPaymentDo) Attrs(attrs ...field.AssignExpr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderPaymentDo) Assign(attrs ...field.AssignExpr) IOmsOrderPaymentDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderPaymentDo) Joins(fields ...field.RelationField) IOmsOrderPaymentDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderPaymentDo) Preload(fields ...field.RelationField) IOmsOrderPaymentDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderPaymentDo) FirstOrInit() (*model.OmsOrderPayment, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPayment), nil
	}
}

func (o omsOrderPaymentDo) FirstOrCreate() (*model.OmsOrderPayment, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderPayment), nil
	}
}

func (o omsOrderPaymentDo) FindByPage(offset int, limit int) (result []*model.OmsOrderPayment, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderPaymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderPaymentDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderPaymentDo) Delete(models ...*model.OmsOrderPayment) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderPaymentDo) withDO(do gen.Dao) *omsOrderPaymentDo {
	o.DO = *do.(*gen.DO)
	return o
}
