// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderMain(db *gorm.DB, opts ...gen.DOOption) omsOrderMain {
	_omsOrderMain := omsOrderMain{}

	_omsOrderMain.omsOrderMainDo.UseDB(db, opts...)
	_omsOrderMain.omsOrderMainDo.UseModel(&model.OmsOrderMain{})

	tableName := _omsOrderMain.omsOrderMainDo.TableName()
	_omsOrderMain.ALL = field.NewAsterisk(tableName)
	_omsOrderMain.ID = field.NewInt64(tableName, "id")
	_omsOrderMain.OrderNo = field.NewString(tableName, "order_no")
	_omsOrderMain.UserID = field.NewInt64(tableName, "user_id")
	_omsOrderMain.OrderStatus = field.NewInt32(tableName, "order_status")
	_omsOrderMain.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_omsOrderMain.PromotionAmount = field.NewFloat64(tableName, "promotion_amount")
	_omsOrderMain.CouponAmount = field.NewFloat64(tableName, "coupon_amount")
	_omsOrderMain.PointsAmount = field.NewFloat64(tableName, "points_amount")
	_omsOrderMain.DiscountAmount = field.NewFloat64(tableName, "discount_amount")
	_omsOrderMain.FreightAmount = field.NewFloat64(tableName, "freight_amount")
	_omsOrderMain.PayAmount = field.NewFloat64(tableName, "pay_amount")
	_omsOrderMain.PayType = field.NewInt32(tableName, "pay_type")
	_omsOrderMain.PayTime = field.NewTime(tableName, "pay_time")
	_omsOrderMain.DeliveryTime = field.NewTime(tableName, "delivery_time")
	_omsOrderMain.ReceiveTime = field.NewTime(tableName, "receive_time")
	_omsOrderMain.CommentTime = field.NewTime(tableName, "comment_time")
	_omsOrderMain.SourceType = field.NewInt32(tableName, "source_type")
	_omsOrderMain.ExpressOrderNumber = field.NewString(tableName, "express_order_number")
	_omsOrderMain.UsePoints = field.NewInt32(tableName, "use_points")
	_omsOrderMain.ReceiveStatus = field.NewInt32(tableName, "receive_status")
	_omsOrderMain.Remark = field.NewString(tableName, "remark")
	_omsOrderMain.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrderMain.UpdateTime = field.NewTime(tableName, "update_time")
	_omsOrderMain.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_omsOrderMain.fillFieldMap()

	return _omsOrderMain
}

// omsOrderMain 订单主表
type omsOrderMain struct {
	omsOrderMainDo omsOrderMainDo

	ALL                field.Asterisk
	ID                 field.Int64
	OrderNo            field.String  // 订单编号
	UserID             field.Int64   // 用户ID
	OrderStatus        field.Int32   // 订单状态：1-待支付,2-已支付,3-已发货,4-已完成,5-已取消,6-已退款,7-售后中
	TotalAmount        field.Float64 // 订单总金额
	PromotionAmount    field.Float64 // 促销金额
	CouponAmount       field.Float64 // 优惠券金额
	PointsAmount       field.Float64 // 积分金额
	DiscountAmount     field.Float64 // 优惠金额
	FreightAmount      field.Float64 // 运费金额
	PayAmount          field.Float64 // 实付金额
	PayType            field.Int32   // 支付方式：1-支付宝,2-微信,3-银联
	PayTime            field.Time    // 支付时间
	DeliveryTime       field.Time    // 发货时间
	ReceiveTime        field.Time    // 收货时间
	CommentTime        field.Time    // 评价时间
	SourceType         field.Int32   // 订单来源：1-APP,2-PC,3-小程序
	ExpressOrderNumber field.String  // 快递单号
	UsePoints          field.Int32   // 下单时使用的积分
	ReceiveStatus      field.Int32   // 是否确认收货：0->否,1->是
	Remark             field.String  // 订单备注
	CreateTime         field.Time    // 提交时间
	UpdateTime         field.Time
	IsDeleted          field.Int32 // 是否删除

	fieldMap map[string]field.Expr
}

func (o omsOrderMain) Table(newTableName string) *omsOrderMain {
	o.omsOrderMainDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderMain) As(alias string) *omsOrderMain {
	o.omsOrderMainDo.DO = *(o.omsOrderMainDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderMain) updateTableName(table string) *omsOrderMain {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderNo = field.NewString(table, "order_no")
	o.UserID = field.NewInt64(table, "user_id")
	o.OrderStatus = field.NewInt32(table, "order_status")
	o.TotalAmount = field.NewFloat64(table, "total_amount")
	o.PromotionAmount = field.NewFloat64(table, "promotion_amount")
	o.CouponAmount = field.NewFloat64(table, "coupon_amount")
	o.PointsAmount = field.NewFloat64(table, "points_amount")
	o.DiscountAmount = field.NewFloat64(table, "discount_amount")
	o.FreightAmount = field.NewFloat64(table, "freight_amount")
	o.PayAmount = field.NewFloat64(table, "pay_amount")
	o.PayType = field.NewInt32(table, "pay_type")
	o.PayTime = field.NewTime(table, "pay_time")
	o.DeliveryTime = field.NewTime(table, "delivery_time")
	o.ReceiveTime = field.NewTime(table, "receive_time")
	o.CommentTime = field.NewTime(table, "comment_time")
	o.SourceType = field.NewInt32(table, "source_type")
	o.ExpressOrderNumber = field.NewString(table, "express_order_number")
	o.UsePoints = field.NewInt32(table, "use_points")
	o.ReceiveStatus = field.NewInt32(table, "receive_status")
	o.Remark = field.NewString(table, "remark")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")
	o.IsDeleted = field.NewInt32(table, "is_deleted")

	o.fillFieldMap()

	return o
}

func (o *omsOrderMain) WithContext(ctx context.Context) IOmsOrderMainDo {
	return o.omsOrderMainDo.WithContext(ctx)
}

func (o omsOrderMain) TableName() string { return o.omsOrderMainDo.TableName() }

func (o omsOrderMain) Alias() string { return o.omsOrderMainDo.Alias() }

func (o omsOrderMain) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderMainDo.Columns(cols...)
}

func (o *omsOrderMain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderMain) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 24)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["order_status"] = o.OrderStatus
	o.fieldMap["total_amount"] = o.TotalAmount
	o.fieldMap["promotion_amount"] = o.PromotionAmount
	o.fieldMap["coupon_amount"] = o.CouponAmount
	o.fieldMap["points_amount"] = o.PointsAmount
	o.fieldMap["discount_amount"] = o.DiscountAmount
	o.fieldMap["freight_amount"] = o.FreightAmount
	o.fieldMap["pay_amount"] = o.PayAmount
	o.fieldMap["pay_type"] = o.PayType
	o.fieldMap["pay_time"] = o.PayTime
	o.fieldMap["delivery_time"] = o.DeliveryTime
	o.fieldMap["receive_time"] = o.ReceiveTime
	o.fieldMap["comment_time"] = o.CommentTime
	o.fieldMap["source_type"] = o.SourceType
	o.fieldMap["express_order_number"] = o.ExpressOrderNumber
	o.fieldMap["use_points"] = o.UsePoints
	o.fieldMap["receive_status"] = o.ReceiveStatus
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
	o.fieldMap["is_deleted"] = o.IsDeleted
}

func (o omsOrderMain) clone(db *gorm.DB) omsOrderMain {
	o.omsOrderMainDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderMain) replaceDB(db *gorm.DB) omsOrderMain {
	o.omsOrderMainDo.ReplaceDB(db)
	return o
}

type omsOrderMainDo struct{ gen.DO }

type IOmsOrderMainDo interface {
	gen.SubQuery
	Debug() IOmsOrderMainDo
	WithContext(ctx context.Context) IOmsOrderMainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderMainDo
	WriteDB() IOmsOrderMainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderMainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderMainDo
	Not(conds ...gen.Condition) IOmsOrderMainDo
	Or(conds ...gen.Condition) IOmsOrderMainDo
	Select(conds ...field.Expr) IOmsOrderMainDo
	Where(conds ...gen.Condition) IOmsOrderMainDo
	Order(conds ...field.Expr) IOmsOrderMainDo
	Distinct(cols ...field.Expr) IOmsOrderMainDo
	Omit(cols ...field.Expr) IOmsOrderMainDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderMainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderMainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderMainDo
	Group(cols ...field.Expr) IOmsOrderMainDo
	Having(conds ...gen.Condition) IOmsOrderMainDo
	Limit(limit int) IOmsOrderMainDo
	Offset(offset int) IOmsOrderMainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderMainDo
	Unscoped() IOmsOrderMainDo
	Create(values ...*model.OmsOrderMain) error
	CreateInBatches(values []*model.OmsOrderMain, batchSize int) error
	Save(values ...*model.OmsOrderMain) error
	First() (*model.OmsOrderMain, error)
	Take() (*model.OmsOrderMain, error)
	Last() (*model.OmsOrderMain, error)
	Find() ([]*model.OmsOrderMain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderMain, err error)
	FindInBatches(result *[]*model.OmsOrderMain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderMain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderMainDo
	Assign(attrs ...field.AssignExpr) IOmsOrderMainDo
	Joins(fields ...field.RelationField) IOmsOrderMainDo
	Preload(fields ...field.RelationField) IOmsOrderMainDo
	FirstOrInit() (*model.OmsOrderMain, error)
	FirstOrCreate() (*model.OmsOrderMain, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderMain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderMainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderMainDo) Debug() IOmsOrderMainDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderMainDo) WithContext(ctx context.Context) IOmsOrderMainDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderMainDo) ReadDB() IOmsOrderMainDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderMainDo) WriteDB() IOmsOrderMainDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderMainDo) Session(config *gorm.Session) IOmsOrderMainDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderMainDo) Clauses(conds ...clause.Expression) IOmsOrderMainDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderMainDo) Returning(value interface{}, columns ...string) IOmsOrderMainDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderMainDo) Not(conds ...gen.Condition) IOmsOrderMainDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderMainDo) Or(conds ...gen.Condition) IOmsOrderMainDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderMainDo) Select(conds ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderMainDo) Where(conds ...gen.Condition) IOmsOrderMainDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderMainDo) Order(conds ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderMainDo) Distinct(cols ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderMainDo) Omit(cols ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderMainDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderMainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderMainDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderMainDo) Group(cols ...field.Expr) IOmsOrderMainDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderMainDo) Having(conds ...gen.Condition) IOmsOrderMainDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderMainDo) Limit(limit int) IOmsOrderMainDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderMainDo) Offset(offset int) IOmsOrderMainDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderMainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderMainDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderMainDo) Unscoped() IOmsOrderMainDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderMainDo) Create(values ...*model.OmsOrderMain) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderMainDo) CreateInBatches(values []*model.OmsOrderMain, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderMainDo) Save(values ...*model.OmsOrderMain) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderMainDo) First() (*model.OmsOrderMain, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderMain), nil
	}
}

func (o omsOrderMainDo) Take() (*model.OmsOrderMain, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderMain), nil
	}
}

func (o omsOrderMainDo) Last() (*model.OmsOrderMain, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderMain), nil
	}
}

func (o omsOrderMainDo) Find() ([]*model.OmsOrderMain, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderMain), err
}

func (o omsOrderMainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderMain, err error) {
	buf := make([]*model.OmsOrderMain, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderMainDo) FindInBatches(result *[]*model.OmsOrderMain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderMainDo) Attrs(attrs ...field.AssignExpr) IOmsOrderMainDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderMainDo) Assign(attrs ...field.AssignExpr) IOmsOrderMainDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderMainDo) Joins(fields ...field.RelationField) IOmsOrderMainDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderMainDo) Preload(fields ...field.RelationField) IOmsOrderMainDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderMainDo) FirstOrInit() (*model.OmsOrderMain, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderMain), nil
	}
}

func (o omsOrderMainDo) FirstOrCreate() (*model.OmsOrderMain, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderMain), nil
	}
}

func (o omsOrderMainDo) FindByPage(offset int, limit int) (result []*model.OmsOrderMain, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderMainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderMainDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderMainDo) Delete(models ...*model.OmsOrderMain) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderMainDo) withDO(do gen.Dao) *omsOrderMainDo {
	o.DO = *do.(*gen.DO)
	return o
}
