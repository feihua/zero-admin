// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderOperationLog(db *gorm.DB, opts ...gen.DOOption) omsOrderOperationLog {
	_omsOrderOperationLog := omsOrderOperationLog{}

	_omsOrderOperationLog.omsOrderOperationLogDo.UseDB(db, opts...)
	_omsOrderOperationLog.omsOrderOperationLogDo.UseModel(&model.OmsOrderOperationLog{})

	tableName := _omsOrderOperationLog.omsOrderOperationLogDo.TableName()
	_omsOrderOperationLog.ALL = field.NewAsterisk(tableName)
	_omsOrderOperationLog.ID = field.NewInt64(tableName, "id")
	_omsOrderOperationLog.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderOperationLog.OrderNo = field.NewString(tableName, "order_no")
	_omsOrderOperationLog.OperationType = field.NewInt32(tableName, "operation_type")
	_omsOrderOperationLog.OperatorID = field.NewInt64(tableName, "operator_id")
	_omsOrderOperationLog.OperatorType = field.NewInt32(tableName, "operator_type")
	_omsOrderOperationLog.OperatorNote = field.NewString(tableName, "operator_note")
	_omsOrderOperationLog.CreateTime = field.NewTime(tableName, "create_time")

	_omsOrderOperationLog.fillFieldMap()

	return _omsOrderOperationLog
}

// omsOrderOperationLog 订单操作记录表
type omsOrderOperationLog struct {
	omsOrderOperationLogDo omsOrderOperationLogDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键ID
	OrderID       field.Int64  // 订单ID
	OrderNo       field.String // 订单编号
	OperationType field.Int32  // 操作类型：1-创建订单，2-支付订单，3-发货，4-确认收货，5-取消订单，6-退款
	OperatorID    field.Int64  // 操作人ID
	OperatorType  field.Int32  // 操作人类型：1-用户，2-系统，3-管理员
	OperatorNote  field.String // 操作备注
	CreateTime    field.Time   // 操作时间

	fieldMap map[string]field.Expr
}

func (o omsOrderOperationLog) Table(newTableName string) *omsOrderOperationLog {
	o.omsOrderOperationLogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderOperationLog) As(alias string) *omsOrderOperationLog {
	o.omsOrderOperationLogDo.DO = *(o.omsOrderOperationLogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderOperationLog) updateTableName(table string) *omsOrderOperationLog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.OperationType = field.NewInt32(table, "operation_type")
	o.OperatorID = field.NewInt64(table, "operator_id")
	o.OperatorType = field.NewInt32(table, "operator_type")
	o.OperatorNote = field.NewString(table, "operator_note")
	o.CreateTime = field.NewTime(table, "create_time")

	o.fillFieldMap()

	return o
}

func (o *omsOrderOperationLog) WithContext(ctx context.Context) IOmsOrderOperationLogDo {
	return o.omsOrderOperationLogDo.WithContext(ctx)
}

func (o omsOrderOperationLog) TableName() string { return o.omsOrderOperationLogDo.TableName() }

func (o omsOrderOperationLog) Alias() string { return o.omsOrderOperationLogDo.Alias() }

func (o omsOrderOperationLog) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderOperationLogDo.Columns(cols...)
}

func (o *omsOrderOperationLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderOperationLog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["operation_type"] = o.OperationType
	o.fieldMap["operator_id"] = o.OperatorID
	o.fieldMap["operator_type"] = o.OperatorType
	o.fieldMap["operator_note"] = o.OperatorNote
	o.fieldMap["create_time"] = o.CreateTime
}

func (o omsOrderOperationLog) clone(db *gorm.DB) omsOrderOperationLog {
	o.omsOrderOperationLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderOperationLog) replaceDB(db *gorm.DB) omsOrderOperationLog {
	o.omsOrderOperationLogDo.ReplaceDB(db)
	return o
}

type omsOrderOperationLogDo struct{ gen.DO }

type IOmsOrderOperationLogDo interface {
	gen.SubQuery
	Debug() IOmsOrderOperationLogDo
	WithContext(ctx context.Context) IOmsOrderOperationLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderOperationLogDo
	WriteDB() IOmsOrderOperationLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderOperationLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderOperationLogDo
	Not(conds ...gen.Condition) IOmsOrderOperationLogDo
	Or(conds ...gen.Condition) IOmsOrderOperationLogDo
	Select(conds ...field.Expr) IOmsOrderOperationLogDo
	Where(conds ...gen.Condition) IOmsOrderOperationLogDo
	Order(conds ...field.Expr) IOmsOrderOperationLogDo
	Distinct(cols ...field.Expr) IOmsOrderOperationLogDo
	Omit(cols ...field.Expr) IOmsOrderOperationLogDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderOperationLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderOperationLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderOperationLogDo
	Group(cols ...field.Expr) IOmsOrderOperationLogDo
	Having(conds ...gen.Condition) IOmsOrderOperationLogDo
	Limit(limit int) IOmsOrderOperationLogDo
	Offset(offset int) IOmsOrderOperationLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderOperationLogDo
	Unscoped() IOmsOrderOperationLogDo
	Create(values ...*model.OmsOrderOperationLog) error
	CreateInBatches(values []*model.OmsOrderOperationLog, batchSize int) error
	Save(values ...*model.OmsOrderOperationLog) error
	First() (*model.OmsOrderOperationLog, error)
	Take() (*model.OmsOrderOperationLog, error)
	Last() (*model.OmsOrderOperationLog, error)
	Find() ([]*model.OmsOrderOperationLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderOperationLog, err error)
	FindInBatches(result *[]*model.OmsOrderOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderOperationLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderOperationLogDo
	Assign(attrs ...field.AssignExpr) IOmsOrderOperationLogDo
	Joins(fields ...field.RelationField) IOmsOrderOperationLogDo
	Preload(fields ...field.RelationField) IOmsOrderOperationLogDo
	FirstOrInit() (*model.OmsOrderOperationLog, error)
	FirstOrCreate() (*model.OmsOrderOperationLog, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderOperationLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderOperationLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderOperationLogDo) Debug() IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderOperationLogDo) WithContext(ctx context.Context) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderOperationLogDo) ReadDB() IOmsOrderOperationLogDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderOperationLogDo) WriteDB() IOmsOrderOperationLogDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderOperationLogDo) Session(config *gorm.Session) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderOperationLogDo) Clauses(conds ...clause.Expression) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderOperationLogDo) Returning(value interface{}, columns ...string) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderOperationLogDo) Not(conds ...gen.Condition) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderOperationLogDo) Or(conds ...gen.Condition) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderOperationLogDo) Select(conds ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderOperationLogDo) Where(conds ...gen.Condition) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderOperationLogDo) Order(conds ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderOperationLogDo) Distinct(cols ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderOperationLogDo) Omit(cols ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderOperationLogDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderOperationLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderOperationLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderOperationLogDo) Group(cols ...field.Expr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderOperationLogDo) Having(conds ...gen.Condition) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderOperationLogDo) Limit(limit int) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderOperationLogDo) Offset(offset int) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderOperationLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderOperationLogDo) Unscoped() IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderOperationLogDo) Create(values ...*model.OmsOrderOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderOperationLogDo) CreateInBatches(values []*model.OmsOrderOperationLog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderOperationLogDo) Save(values ...*model.OmsOrderOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderOperationLogDo) First() (*model.OmsOrderOperationLog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderOperationLog), nil
	}
}

func (o omsOrderOperationLogDo) Take() (*model.OmsOrderOperationLog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderOperationLog), nil
	}
}

func (o omsOrderOperationLogDo) Last() (*model.OmsOrderOperationLog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderOperationLog), nil
	}
}

func (o omsOrderOperationLogDo) Find() ([]*model.OmsOrderOperationLog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderOperationLog), err
}

func (o omsOrderOperationLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderOperationLog, err error) {
	buf := make([]*model.OmsOrderOperationLog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderOperationLogDo) FindInBatches(result *[]*model.OmsOrderOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderOperationLogDo) Attrs(attrs ...field.AssignExpr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderOperationLogDo) Assign(attrs ...field.AssignExpr) IOmsOrderOperationLogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderOperationLogDo) Joins(fields ...field.RelationField) IOmsOrderOperationLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderOperationLogDo) Preload(fields ...field.RelationField) IOmsOrderOperationLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderOperationLogDo) FirstOrInit() (*model.OmsOrderOperationLog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderOperationLog), nil
	}
}

func (o omsOrderOperationLogDo) FirstOrCreate() (*model.OmsOrderOperationLog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderOperationLog), nil
	}
}

func (o omsOrderOperationLogDo) FindByPage(offset int, limit int) (result []*model.OmsOrderOperationLog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderOperationLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderOperationLogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderOperationLogDo) Delete(models ...*model.OmsOrderOperationLog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderOperationLogDo) withDO(do gen.Dao) *omsOrderOperationLogDo {
	o.DO = *do.(*gen.DO)
	return o
}
