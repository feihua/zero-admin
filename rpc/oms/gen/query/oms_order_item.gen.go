// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderItem(db *gorm.DB, opts ...gen.DOOption) omsOrderItem {
	_omsOrderItem := omsOrderItem{}

	_omsOrderItem.omsOrderItemDo.UseDB(db, opts...)
	_omsOrderItem.omsOrderItemDo.UseModel(&model.OmsOrderItem{})

	tableName := _omsOrderItem.omsOrderItemDo.TableName()
	_omsOrderItem.ALL = field.NewAsterisk(tableName)
	_omsOrderItem.ID = field.NewInt64(tableName, "id")
	_omsOrderItem.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderItem.OrderNo = field.NewString(tableName, "order_no")
	_omsOrderItem.OrderItemStatus = field.NewInt32(tableName, "order_item_status")
	_omsOrderItem.SkuID = field.NewInt64(tableName, "sku_id")
	_omsOrderItem.SkuName = field.NewString(tableName, "sku_name")
	_omsOrderItem.SkuPic = field.NewString(tableName, "sku_pic")
	_omsOrderItem.SkuPrice = field.NewFloat64(tableName, "sku_price")
	_omsOrderItem.SkuQuantity = field.NewInt32(tableName, "sku_quantity")
	_omsOrderItem.SpecData = field.NewString(tableName, "spec_data")
	_omsOrderItem.SkuTotalAmount = field.NewFloat64(tableName, "sku_total_amount")
	_omsOrderItem.PromotionAmount = field.NewFloat64(tableName, "promotion_amount")
	_omsOrderItem.CouponAmount = field.NewFloat64(tableName, "coupon_amount")
	_omsOrderItem.PointsAmount = field.NewFloat64(tableName, "points_amount")
	_omsOrderItem.DiscountAmount = field.NewFloat64(tableName, "discount_amount")
	_omsOrderItem.RealAmount = field.NewFloat64(tableName, "real_amount")
	_omsOrderItem.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrderItem.IsDeleted = field.NewBool(tableName, "is_deleted")

	_omsOrderItem.fillFieldMap()

	return _omsOrderItem
}

// omsOrderItem 订单商品表
type omsOrderItem struct {
	omsOrderItemDo omsOrderItemDo

	ALL             field.Asterisk
	ID              field.Int64
	OrderID         field.Int64   // 订单ID
	OrderNo         field.String  // 订单编号
	OrderItemStatus field.Int32   // 订单商品状态：1-正常,2-退货申请中,3-已退货,4-已拒绝
	SkuID           field.Int64   // 商品SKU ID
	SkuName         field.String  // 商品名称
	SkuPic          field.String  // 商品图片
	SkuPrice        field.Float64 // 商品单价
	SkuQuantity     field.Int32   // 商品数量
	SpecData        field.String  // 规格数据
	SkuTotalAmount  field.Float64 // 商品总金额
	PromotionAmount field.Float64 // 促销分摊金额
	CouponAmount    field.Float64 // 优惠券分摊金额
	PointsAmount    field.Float64 // 积分分摊金额
	DiscountAmount  field.Float64 // 优惠分摊金额
	RealAmount      field.Float64 // 实付金额
	CreateTime      field.Time    // 创建时间
	IsDeleted       field.Bool    // 是否删除

	fieldMap map[string]field.Expr
}

func (o omsOrderItem) Table(newTableName string) *omsOrderItem {
	o.omsOrderItemDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderItem) As(alias string) *omsOrderItem {
	o.omsOrderItemDo.DO = *(o.omsOrderItemDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderItem) updateTableName(table string) *omsOrderItem {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.OrderItemStatus = field.NewInt32(table, "order_item_status")
	o.SkuID = field.NewInt64(table, "sku_id")
	o.SkuName = field.NewString(table, "sku_name")
	o.SkuPic = field.NewString(table, "sku_pic")
	o.SkuPrice = field.NewFloat64(table, "sku_price")
	o.SkuQuantity = field.NewInt32(table, "sku_quantity")
	o.SpecData = field.NewString(table, "spec_data")
	o.SkuTotalAmount = field.NewFloat64(table, "sku_total_amount")
	o.PromotionAmount = field.NewFloat64(table, "promotion_amount")
	o.CouponAmount = field.NewFloat64(table, "coupon_amount")
	o.PointsAmount = field.NewFloat64(table, "points_amount")
	o.DiscountAmount = field.NewFloat64(table, "discount_amount")
	o.RealAmount = field.NewFloat64(table, "real_amount")
	o.CreateTime = field.NewTime(table, "create_time")
	o.IsDeleted = field.NewBool(table, "is_deleted")

	o.fillFieldMap()

	return o
}

func (o *omsOrderItem) WithContext(ctx context.Context) IOmsOrderItemDo {
	return o.omsOrderItemDo.WithContext(ctx)
}

func (o omsOrderItem) TableName() string { return o.omsOrderItemDo.TableName() }

func (o omsOrderItem) Alias() string { return o.omsOrderItemDo.Alias() }

func (o omsOrderItem) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderItemDo.Columns(cols...)
}

func (o *omsOrderItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderItem) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 18)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["order_item_status"] = o.OrderItemStatus
	o.fieldMap["sku_id"] = o.SkuID
	o.fieldMap["sku_name"] = o.SkuName
	o.fieldMap["sku_pic"] = o.SkuPic
	o.fieldMap["sku_price"] = o.SkuPrice
	o.fieldMap["sku_quantity"] = o.SkuQuantity
	o.fieldMap["spec_data"] = o.SpecData
	o.fieldMap["sku_total_amount"] = o.SkuTotalAmount
	o.fieldMap["promotion_amount"] = o.PromotionAmount
	o.fieldMap["coupon_amount"] = o.CouponAmount
	o.fieldMap["points_amount"] = o.PointsAmount
	o.fieldMap["discount_amount"] = o.DiscountAmount
	o.fieldMap["real_amount"] = o.RealAmount
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["is_deleted"] = o.IsDeleted
}

func (o omsOrderItem) clone(db *gorm.DB) omsOrderItem {
	o.omsOrderItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderItem) replaceDB(db *gorm.DB) omsOrderItem {
	o.omsOrderItemDo.ReplaceDB(db)
	return o
}

type omsOrderItemDo struct{ gen.DO }

type IOmsOrderItemDo interface {
	gen.SubQuery
	Debug() IOmsOrderItemDo
	WithContext(ctx context.Context) IOmsOrderItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderItemDo
	WriteDB() IOmsOrderItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderItemDo
	Not(conds ...gen.Condition) IOmsOrderItemDo
	Or(conds ...gen.Condition) IOmsOrderItemDo
	Select(conds ...field.Expr) IOmsOrderItemDo
	Where(conds ...gen.Condition) IOmsOrderItemDo
	Order(conds ...field.Expr) IOmsOrderItemDo
	Distinct(cols ...field.Expr) IOmsOrderItemDo
	Omit(cols ...field.Expr) IOmsOrderItemDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderItemDo
	Group(cols ...field.Expr) IOmsOrderItemDo
	Having(conds ...gen.Condition) IOmsOrderItemDo
	Limit(limit int) IOmsOrderItemDo
	Offset(offset int) IOmsOrderItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderItemDo
	Unscoped() IOmsOrderItemDo
	Create(values ...*model.OmsOrderItem) error
	CreateInBatches(values []*model.OmsOrderItem, batchSize int) error
	Save(values ...*model.OmsOrderItem) error
	First() (*model.OmsOrderItem, error)
	Take() (*model.OmsOrderItem, error)
	Last() (*model.OmsOrderItem, error)
	Find() ([]*model.OmsOrderItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderItem, err error)
	FindInBatches(result *[]*model.OmsOrderItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderItemDo
	Assign(attrs ...field.AssignExpr) IOmsOrderItemDo
	Joins(fields ...field.RelationField) IOmsOrderItemDo
	Preload(fields ...field.RelationField) IOmsOrderItemDo
	FirstOrInit() (*model.OmsOrderItem, error)
	FirstOrCreate() (*model.OmsOrderItem, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderItemDo) Debug() IOmsOrderItemDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderItemDo) WithContext(ctx context.Context) IOmsOrderItemDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderItemDo) ReadDB() IOmsOrderItemDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderItemDo) WriteDB() IOmsOrderItemDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderItemDo) Session(config *gorm.Session) IOmsOrderItemDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderItemDo) Clauses(conds ...clause.Expression) IOmsOrderItemDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderItemDo) Returning(value interface{}, columns ...string) IOmsOrderItemDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderItemDo) Not(conds ...gen.Condition) IOmsOrderItemDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderItemDo) Or(conds ...gen.Condition) IOmsOrderItemDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderItemDo) Select(conds ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderItemDo) Where(conds ...gen.Condition) IOmsOrderItemDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderItemDo) Order(conds ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderItemDo) Distinct(cols ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderItemDo) Omit(cols ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderItemDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderItemDo) Group(cols ...field.Expr) IOmsOrderItemDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderItemDo) Having(conds ...gen.Condition) IOmsOrderItemDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderItemDo) Limit(limit int) IOmsOrderItemDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderItemDo) Offset(offset int) IOmsOrderItemDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderItemDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderItemDo) Unscoped() IOmsOrderItemDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderItemDo) Create(values ...*model.OmsOrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderItemDo) CreateInBatches(values []*model.OmsOrderItem, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderItemDo) Save(values ...*model.OmsOrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderItemDo) First() (*model.OmsOrderItem, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderItem), nil
	}
}

func (o omsOrderItemDo) Take() (*model.OmsOrderItem, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderItem), nil
	}
}

func (o omsOrderItemDo) Last() (*model.OmsOrderItem, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderItem), nil
	}
}

func (o omsOrderItemDo) Find() ([]*model.OmsOrderItem, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderItem), err
}

func (o omsOrderItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderItem, err error) {
	buf := make([]*model.OmsOrderItem, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderItemDo) FindInBatches(result *[]*model.OmsOrderItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderItemDo) Attrs(attrs ...field.AssignExpr) IOmsOrderItemDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderItemDo) Assign(attrs ...field.AssignExpr) IOmsOrderItemDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderItemDo) Joins(fields ...field.RelationField) IOmsOrderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderItemDo) Preload(fields ...field.RelationField) IOmsOrderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderItemDo) FirstOrInit() (*model.OmsOrderItem, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderItem), nil
	}
}

func (o omsOrderItemDo) FirstOrCreate() (*model.OmsOrderItem, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderItem), nil
	}
}

func (o omsOrderItemDo) FindByPage(offset int, limit int) (result []*model.OmsOrderItem, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderItemDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderItemDo) Delete(models ...*model.OmsOrderItem) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderItemDo) withDO(do gen.Dao) *omsOrderItemDo {
	o.DO = *do.(*gen.DO)
	return o
}
