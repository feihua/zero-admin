// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderReturnItem(db *gorm.DB, opts ...gen.DOOption) omsOrderReturnItem {
	_omsOrderReturnItem := omsOrderReturnItem{}

	_omsOrderReturnItem.omsOrderReturnItemDo.UseDB(db, opts...)
	_omsOrderReturnItem.omsOrderReturnItemDo.UseModel(&model.OmsOrderReturnItem{})

	tableName := _omsOrderReturnItem.omsOrderReturnItemDo.TableName()
	_omsOrderReturnItem.ALL = field.NewAsterisk(tableName)
	_omsOrderReturnItem.ID = field.NewInt64(tableName, "id")
	_omsOrderReturnItem.ReturnID = field.NewInt64(tableName, "return_id")
	_omsOrderReturnItem.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderReturnItem.OrderItemID = field.NewInt64(tableName, "order_item_id")
	_omsOrderReturnItem.SkuID = field.NewInt64(tableName, "sku_id")
	_omsOrderReturnItem.SkuName = field.NewString(tableName, "sku_name")
	_omsOrderReturnItem.SkuPic = field.NewString(tableName, "sku_pic")
	_omsOrderReturnItem.SkuAttrs = field.NewString(tableName, "sku_attrs")
	_omsOrderReturnItem.Quantity = field.NewInt32(tableName, "quantity")
	_omsOrderReturnItem.ProductPrice = field.NewFloat64(tableName, "product_price")
	_omsOrderReturnItem.RealAmount = field.NewFloat64(tableName, "real_amount")
	_omsOrderReturnItem.Reason = field.NewString(tableName, "reason")
	_omsOrderReturnItem.Remark = field.NewString(tableName, "remark")

	_omsOrderReturnItem.fillFieldMap()

	return _omsOrderReturnItem
}

// omsOrderReturnItem 退货/售后明细表
type omsOrderReturnItem struct {
	omsOrderReturnItemDo omsOrderReturnItemDo

	ALL          field.Asterisk
	ID           field.Int64   // 主键ID
	ReturnID     field.Int64   // 退货单ID（关联oms_order_return.id）
	OrderID      field.Int64   // 订单ID
	OrderItemID  field.Int64   // 订单明细ID
	SkuID        field.Int64   // 商品SKU ID
	SkuName      field.String  // 商品名称
	SkuPic       field.String  // 商品图片
	SkuAttrs     field.String  // 商品销售属性
	Quantity     field.Int32   // 退货数量
	ProductPrice field.Float64 // 商品单价
	RealAmount   field.Float64 // 实际退款金额
	Reason       field.String  // 退货原因
	Remark       field.String  // 备注

	fieldMap map[string]field.Expr
}

func (o omsOrderReturnItem) Table(newTableName string) *omsOrderReturnItem {
	o.omsOrderReturnItemDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderReturnItem) As(alias string) *omsOrderReturnItem {
	o.omsOrderReturnItemDo.DO = *(o.omsOrderReturnItemDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderReturnItem) updateTableName(table string) *omsOrderReturnItem {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.ReturnID = field.NewInt64(table, "return_id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.OrderItemID = field.NewInt64(table, "order_item_id")
	o.SkuID = field.NewInt64(table, "sku_id")
	o.SkuName = field.NewString(table, "sku_name")
	o.SkuPic = field.NewString(table, "sku_pic")
	o.SkuAttrs = field.NewString(table, "sku_attrs")
	o.Quantity = field.NewInt32(table, "quantity")
	o.ProductPrice = field.NewFloat64(table, "product_price")
	o.RealAmount = field.NewFloat64(table, "real_amount")
	o.Reason = field.NewString(table, "reason")
	o.Remark = field.NewString(table, "remark")

	o.fillFieldMap()

	return o
}

func (o *omsOrderReturnItem) WithContext(ctx context.Context) IOmsOrderReturnItemDo {
	return o.omsOrderReturnItemDo.WithContext(ctx)
}

func (o omsOrderReturnItem) TableName() string { return o.omsOrderReturnItemDo.TableName() }

func (o omsOrderReturnItem) Alias() string { return o.omsOrderReturnItemDo.Alias() }

func (o omsOrderReturnItem) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderReturnItemDo.Columns(cols...)
}

func (o *omsOrderReturnItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderReturnItem) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 13)
	o.fieldMap["id"] = o.ID
	o.fieldMap["return_id"] = o.ReturnID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_item_id"] = o.OrderItemID
	o.fieldMap["sku_id"] = o.SkuID
	o.fieldMap["sku_name"] = o.SkuName
	o.fieldMap["sku_pic"] = o.SkuPic
	o.fieldMap["sku_attrs"] = o.SkuAttrs
	o.fieldMap["quantity"] = o.Quantity
	o.fieldMap["product_price"] = o.ProductPrice
	o.fieldMap["real_amount"] = o.RealAmount
	o.fieldMap["reason"] = o.Reason
	o.fieldMap["remark"] = o.Remark
}

func (o omsOrderReturnItem) clone(db *gorm.DB) omsOrderReturnItem {
	o.omsOrderReturnItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderReturnItem) replaceDB(db *gorm.DB) omsOrderReturnItem {
	o.omsOrderReturnItemDo.ReplaceDB(db)
	return o
}

type omsOrderReturnItemDo struct{ gen.DO }

type IOmsOrderReturnItemDo interface {
	gen.SubQuery
	Debug() IOmsOrderReturnItemDo
	WithContext(ctx context.Context) IOmsOrderReturnItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderReturnItemDo
	WriteDB() IOmsOrderReturnItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderReturnItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderReturnItemDo
	Not(conds ...gen.Condition) IOmsOrderReturnItemDo
	Or(conds ...gen.Condition) IOmsOrderReturnItemDo
	Select(conds ...field.Expr) IOmsOrderReturnItemDo
	Where(conds ...gen.Condition) IOmsOrderReturnItemDo
	Order(conds ...field.Expr) IOmsOrderReturnItemDo
	Distinct(cols ...field.Expr) IOmsOrderReturnItemDo
	Omit(cols ...field.Expr) IOmsOrderReturnItemDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderReturnItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnItemDo
	Group(cols ...field.Expr) IOmsOrderReturnItemDo
	Having(conds ...gen.Condition) IOmsOrderReturnItemDo
	Limit(limit int) IOmsOrderReturnItemDo
	Offset(offset int) IOmsOrderReturnItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderReturnItemDo
	Unscoped() IOmsOrderReturnItemDo
	Create(values ...*model.OmsOrderReturnItem) error
	CreateInBatches(values []*model.OmsOrderReturnItem, batchSize int) error
	Save(values ...*model.OmsOrderReturnItem) error
	First() (*model.OmsOrderReturnItem, error)
	Take() (*model.OmsOrderReturnItem, error)
	Last() (*model.OmsOrderReturnItem, error)
	Find() ([]*model.OmsOrderReturnItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderReturnItem, err error)
	FindInBatches(result *[]*model.OmsOrderReturnItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderReturnItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderReturnItemDo
	Assign(attrs ...field.AssignExpr) IOmsOrderReturnItemDo
	Joins(fields ...field.RelationField) IOmsOrderReturnItemDo
	Preload(fields ...field.RelationField) IOmsOrderReturnItemDo
	FirstOrInit() (*model.OmsOrderReturnItem, error)
	FirstOrCreate() (*model.OmsOrderReturnItem, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderReturnItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderReturnItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderReturnItemDo) Debug() IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderReturnItemDo) WithContext(ctx context.Context) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderReturnItemDo) ReadDB() IOmsOrderReturnItemDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderReturnItemDo) WriteDB() IOmsOrderReturnItemDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderReturnItemDo) Session(config *gorm.Session) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderReturnItemDo) Clauses(conds ...clause.Expression) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderReturnItemDo) Returning(value interface{}, columns ...string) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderReturnItemDo) Not(conds ...gen.Condition) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderReturnItemDo) Or(conds ...gen.Condition) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderReturnItemDo) Select(conds ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderReturnItemDo) Where(conds ...gen.Condition) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderReturnItemDo) Order(conds ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderReturnItemDo) Distinct(cols ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderReturnItemDo) Omit(cols ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderReturnItemDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderReturnItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderReturnItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderReturnItemDo) Group(cols ...field.Expr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderReturnItemDo) Having(conds ...gen.Condition) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderReturnItemDo) Limit(limit int) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderReturnItemDo) Offset(offset int) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderReturnItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderReturnItemDo) Unscoped() IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderReturnItemDo) Create(values ...*model.OmsOrderReturnItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderReturnItemDo) CreateInBatches(values []*model.OmsOrderReturnItem, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderReturnItemDo) Save(values ...*model.OmsOrderReturnItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderReturnItemDo) First() (*model.OmsOrderReturnItem, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnItem), nil
	}
}

func (o omsOrderReturnItemDo) Take() (*model.OmsOrderReturnItem, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnItem), nil
	}
}

func (o omsOrderReturnItemDo) Last() (*model.OmsOrderReturnItem, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnItem), nil
	}
}

func (o omsOrderReturnItemDo) Find() ([]*model.OmsOrderReturnItem, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderReturnItem), err
}

func (o omsOrderReturnItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderReturnItem, err error) {
	buf := make([]*model.OmsOrderReturnItem, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderReturnItemDo) FindInBatches(result *[]*model.OmsOrderReturnItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderReturnItemDo) Attrs(attrs ...field.AssignExpr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderReturnItemDo) Assign(attrs ...field.AssignExpr) IOmsOrderReturnItemDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderReturnItemDo) Joins(fields ...field.RelationField) IOmsOrderReturnItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderReturnItemDo) Preload(fields ...field.RelationField) IOmsOrderReturnItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderReturnItemDo) FirstOrInit() (*model.OmsOrderReturnItem, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnItem), nil
	}
}

func (o omsOrderReturnItemDo) FirstOrCreate() (*model.OmsOrderReturnItem, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderReturnItem), nil
	}
}

func (o omsOrderReturnItemDo) FindByPage(offset int, limit int) (result []*model.OmsOrderReturnItem, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderReturnItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderReturnItemDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderReturnItemDo) Delete(models ...*model.OmsOrderReturnItem) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderReturnItemDo) withDO(do gen.Dao) *omsOrderReturnItemDo {
	o.DO = *do.(*gen.DO)
	return o
}
