// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/oms/oms.proto

package omsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CartItemService_AddCartItem_FullMethodName            = "/omsclient.CartItemService/AddCartItem"
	CartItemService_DeleteCartItem_FullMethodName         = "/omsclient.CartItemService/DeleteCartItem"
	CartItemService_UpdateCartItem_FullMethodName         = "/omsclient.CartItemService/UpdateCartItem"
	CartItemService_UpdateCartItemQuantity_FullMethodName = "/omsclient.CartItemService/UpdateCartItemQuantity"
	CartItemService_QueryCartItemDetail_FullMethodName    = "/omsclient.CartItemService/QueryCartItemDetail"
	CartItemService_QueryCartItemList_FullMethodName      = "/omsclient.CartItemService/QueryCartItemList"
)

// CartItemServiceClient is the client API for CartItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartItemServiceClient interface {
	// 添加购物车表
	AddCartItem(ctx context.Context, in *AddCartItemReq, opts ...grpc.CallOption) (*AddCartItemResp, error)
	// 删除购物车表
	DeleteCartItem(ctx context.Context, in *DeleteCartItemReq, opts ...grpc.CallOption) (*DeleteCartItemResp, error)
	// 更新购物车表
	UpdateCartItem(ctx context.Context, in *UpdateCartItemReq, opts ...grpc.CallOption) (*UpdateCartItemResp, error)
	// 修改购物车中某个商品的数量
	UpdateCartItemQuantity(ctx context.Context, in *UpdateCartItemQuantityReq, opts ...grpc.CallOption) (*UpdateCartItemQuantityResp, error)
	// 查询购物车表详情
	QueryCartItemDetail(ctx context.Context, in *QueryCartItemDetailReq, opts ...grpc.CallOption) (*QueryCartItemDetailResp, error)
	// 查询购物车表列表
	QueryCartItemList(ctx context.Context, in *QueryCartItemListReq, opts ...grpc.CallOption) (*QueryCartItemListResp, error)
}

type cartItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartItemServiceClient(cc grpc.ClientConnInterface) CartItemServiceClient {
	return &cartItemServiceClient{cc}
}

func (c *cartItemServiceClient) AddCartItem(ctx context.Context, in *AddCartItemReq, opts ...grpc.CallOption) (*AddCartItemResp, error) {
	out := new(AddCartItemResp)
	err := c.cc.Invoke(ctx, CartItemService_AddCartItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) DeleteCartItem(ctx context.Context, in *DeleteCartItemReq, opts ...grpc.CallOption) (*DeleteCartItemResp, error) {
	out := new(DeleteCartItemResp)
	err := c.cc.Invoke(ctx, CartItemService_DeleteCartItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) UpdateCartItem(ctx context.Context, in *UpdateCartItemReq, opts ...grpc.CallOption) (*UpdateCartItemResp, error) {
	out := new(UpdateCartItemResp)
	err := c.cc.Invoke(ctx, CartItemService_UpdateCartItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) UpdateCartItemQuantity(ctx context.Context, in *UpdateCartItemQuantityReq, opts ...grpc.CallOption) (*UpdateCartItemQuantityResp, error) {
	out := new(UpdateCartItemQuantityResp)
	err := c.cc.Invoke(ctx, CartItemService_UpdateCartItemQuantity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) QueryCartItemDetail(ctx context.Context, in *QueryCartItemDetailReq, opts ...grpc.CallOption) (*QueryCartItemDetailResp, error) {
	out := new(QueryCartItemDetailResp)
	err := c.cc.Invoke(ctx, CartItemService_QueryCartItemDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) QueryCartItemList(ctx context.Context, in *QueryCartItemListReq, opts ...grpc.CallOption) (*QueryCartItemListResp, error) {
	out := new(QueryCartItemListResp)
	err := c.cc.Invoke(ctx, CartItemService_QueryCartItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartItemServiceServer is the server API for CartItemService service.
// All implementations must embed UnimplementedCartItemServiceServer
// for forward compatibility
type CartItemServiceServer interface {
	// 添加购物车表
	AddCartItem(context.Context, *AddCartItemReq) (*AddCartItemResp, error)
	// 删除购物车表
	DeleteCartItem(context.Context, *DeleteCartItemReq) (*DeleteCartItemResp, error)
	// 更新购物车表
	UpdateCartItem(context.Context, *UpdateCartItemReq) (*UpdateCartItemResp, error)
	// 修改购物车中某个商品的数量
	UpdateCartItemQuantity(context.Context, *UpdateCartItemQuantityReq) (*UpdateCartItemQuantityResp, error)
	// 查询购物车表详情
	QueryCartItemDetail(context.Context, *QueryCartItemDetailReq) (*QueryCartItemDetailResp, error)
	// 查询购物车表列表
	QueryCartItemList(context.Context, *QueryCartItemListReq) (*QueryCartItemListResp, error)
	mustEmbedUnimplementedCartItemServiceServer()
}

// UnimplementedCartItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartItemServiceServer struct {
}

func (UnimplementedCartItemServiceServer) AddCartItem(context.Context, *AddCartItemReq) (*AddCartItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedCartItemServiceServer) DeleteCartItem(context.Context, *DeleteCartItemReq) (*DeleteCartItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItem not implemented")
}
func (UnimplementedCartItemServiceServer) UpdateCartItem(context.Context, *UpdateCartItemReq) (*UpdateCartItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedCartItemServiceServer) UpdateCartItemQuantity(context.Context, *UpdateCartItemQuantityReq) (*UpdateCartItemQuantityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItemQuantity not implemented")
}
func (UnimplementedCartItemServiceServer) QueryCartItemDetail(context.Context, *QueryCartItemDetailReq) (*QueryCartItemDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCartItemDetail not implemented")
}
func (UnimplementedCartItemServiceServer) QueryCartItemList(context.Context, *QueryCartItemListReq) (*QueryCartItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCartItemList not implemented")
}
func (UnimplementedCartItemServiceServer) mustEmbedUnimplementedCartItemServiceServer() {}

// UnsafeCartItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartItemServiceServer will
// result in compilation errors.
type UnsafeCartItemServiceServer interface {
	mustEmbedUnimplementedCartItemServiceServer()
}

func RegisterCartItemServiceServer(s grpc.ServiceRegistrar, srv CartItemServiceServer) {
	s.RegisterService(&CartItemService_ServiceDesc, srv)
}

func _CartItemService_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_AddCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).AddCartItem(ctx, req.(*AddCartItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_DeleteCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).DeleteCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_DeleteCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).DeleteCartItem(ctx, req.(*DeleteCartItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_UpdateCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).UpdateCartItem(ctx, req.(*UpdateCartItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_UpdateCartItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).UpdateCartItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_UpdateCartItemQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).UpdateCartItemQuantity(ctx, req.(*UpdateCartItemQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_QueryCartItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCartItemDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).QueryCartItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_QueryCartItemDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).QueryCartItemDetail(ctx, req.(*QueryCartItemDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_QueryCartItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCartItemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).QueryCartItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_QueryCartItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).QueryCartItemList(ctx, req.(*QueryCartItemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CartItemService_ServiceDesc is the grpc.ServiceDesc for CartItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.CartItemService",
	HandlerType: (*CartItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCartItem",
			Handler:    _CartItemService_AddCartItem_Handler,
		},
		{
			MethodName: "DeleteCartItem",
			Handler:    _CartItemService_DeleteCartItem_Handler,
		},
		{
			MethodName: "UpdateCartItem",
			Handler:    _CartItemService_UpdateCartItem_Handler,
		},
		{
			MethodName: "UpdateCartItemQuantity",
			Handler:    _CartItemService_UpdateCartItemQuantity_Handler,
		},
		{
			MethodName: "QueryCartItemDetail",
			Handler:    _CartItemService_QueryCartItemDetail_Handler,
		},
		{
			MethodName: "QueryCartItemList",
			Handler:    _CartItemService_QueryCartItemList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	CompanyAddressService_AddCompanyAddress_FullMethodName                 = "/omsclient.CompanyAddressService/AddCompanyAddress"
	CompanyAddressService_DeleteCompanyAddress_FullMethodName              = "/omsclient.CompanyAddressService/DeleteCompanyAddress"
	CompanyAddressService_UpdateCompanyAddress_FullMethodName              = "/omsclient.CompanyAddressService/UpdateCompanyAddress"
	CompanyAddressService_QueryCompanyAddressDetail_FullMethodName         = "/omsclient.CompanyAddressService/QueryCompanyAddressDetail"
	CompanyAddressService_QueryCompanyAddressList_FullMethodName           = "/omsclient.CompanyAddressService/QueryCompanyAddressList"
	CompanyAddressService_UpdateCompanyAddressSendStatus_FullMethodName    = "/omsclient.CompanyAddressService/UpdateCompanyAddressSendStatus"
	CompanyAddressService_UpdateCompanyAddressReceiveStatus_FullMethodName = "/omsclient.CompanyAddressService/UpdateCompanyAddressReceiveStatus"
)

// CompanyAddressServiceClient is the client API for CompanyAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyAddressServiceClient interface {
	// 添加公司收发货地址
	AddCompanyAddress(ctx context.Context, in *AddCompanyAddressReq, opts ...grpc.CallOption) (*AddCompanyAddressResp, error)
	// 删除公司收发货地址
	DeleteCompanyAddress(ctx context.Context, in *DeleteCompanyAddressReq, opts ...grpc.CallOption) (*DeleteCompanyAddressResp, error)
	// 更新公司收发货地址
	UpdateCompanyAddress(ctx context.Context, in *UpdateCompanyAddressReq, opts ...grpc.CallOption) (*UpdateCompanyAddressResp, error)
	// 查询公司收发货地址详情
	QueryCompanyAddressDetail(ctx context.Context, in *QueryCompanyAddressDetailReq, opts ...grpc.CallOption) (*QueryCompanyAddressDetailResp, error)
	// 查询公司收发货地址列表
	QueryCompanyAddressList(ctx context.Context, in *QueryCompanyAddressListReq, opts ...grpc.CallOption) (*QueryCompanyAddressListResp, error)
	// 更新公司默认发货地址
	UpdateCompanyAddressSendStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error)
	// 更新公司默认收货地址
	UpdateCompanyAddressReceiveStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error)
}

type companyAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyAddressServiceClient(cc grpc.ClientConnInterface) CompanyAddressServiceClient {
	return &companyAddressServiceClient{cc}
}

func (c *companyAddressServiceClient) AddCompanyAddress(ctx context.Context, in *AddCompanyAddressReq, opts ...grpc.CallOption) (*AddCompanyAddressResp, error) {
	out := new(AddCompanyAddressResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_AddCompanyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) DeleteCompanyAddress(ctx context.Context, in *DeleteCompanyAddressReq, opts ...grpc.CallOption) (*DeleteCompanyAddressResp, error) {
	out := new(DeleteCompanyAddressResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_DeleteCompanyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) UpdateCompanyAddress(ctx context.Context, in *UpdateCompanyAddressReq, opts ...grpc.CallOption) (*UpdateCompanyAddressResp, error) {
	out := new(UpdateCompanyAddressResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_UpdateCompanyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) QueryCompanyAddressDetail(ctx context.Context, in *QueryCompanyAddressDetailReq, opts ...grpc.CallOption) (*QueryCompanyAddressDetailResp, error) {
	out := new(QueryCompanyAddressDetailResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_QueryCompanyAddressDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) QueryCompanyAddressList(ctx context.Context, in *QueryCompanyAddressListReq, opts ...grpc.CallOption) (*QueryCompanyAddressListResp, error) {
	out := new(QueryCompanyAddressListResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_QueryCompanyAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) UpdateCompanyAddressSendStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error) {
	out := new(UpdateCompanyAddressStatusResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_UpdateCompanyAddressSendStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) UpdateCompanyAddressReceiveStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error) {
	out := new(UpdateCompanyAddressStatusResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_UpdateCompanyAddressReceiveStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyAddressServiceServer is the server API for CompanyAddressService service.
// All implementations must embed UnimplementedCompanyAddressServiceServer
// for forward compatibility
type CompanyAddressServiceServer interface {
	// 添加公司收发货地址
	AddCompanyAddress(context.Context, *AddCompanyAddressReq) (*AddCompanyAddressResp, error)
	// 删除公司收发货地址
	DeleteCompanyAddress(context.Context, *DeleteCompanyAddressReq) (*DeleteCompanyAddressResp, error)
	// 更新公司收发货地址
	UpdateCompanyAddress(context.Context, *UpdateCompanyAddressReq) (*UpdateCompanyAddressResp, error)
	// 查询公司收发货地址详情
	QueryCompanyAddressDetail(context.Context, *QueryCompanyAddressDetailReq) (*QueryCompanyAddressDetailResp, error)
	// 查询公司收发货地址列表
	QueryCompanyAddressList(context.Context, *QueryCompanyAddressListReq) (*QueryCompanyAddressListResp, error)
	// 更新公司默认发货地址
	UpdateCompanyAddressSendStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error)
	// 更新公司默认收货地址
	UpdateCompanyAddressReceiveStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error)
	mustEmbedUnimplementedCompanyAddressServiceServer()
}

// UnimplementedCompanyAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyAddressServiceServer struct {
}

func (UnimplementedCompanyAddressServiceServer) AddCompanyAddress(context.Context, *AddCompanyAddressReq) (*AddCompanyAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompanyAddress not implemented")
}
func (UnimplementedCompanyAddressServiceServer) DeleteCompanyAddress(context.Context, *DeleteCompanyAddressReq) (*DeleteCompanyAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyAddress not implemented")
}
func (UnimplementedCompanyAddressServiceServer) UpdateCompanyAddress(context.Context, *UpdateCompanyAddressReq) (*UpdateCompanyAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyAddress not implemented")
}
func (UnimplementedCompanyAddressServiceServer) QueryCompanyAddressDetail(context.Context, *QueryCompanyAddressDetailReq) (*QueryCompanyAddressDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCompanyAddressDetail not implemented")
}
func (UnimplementedCompanyAddressServiceServer) QueryCompanyAddressList(context.Context, *QueryCompanyAddressListReq) (*QueryCompanyAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCompanyAddressList not implemented")
}
func (UnimplementedCompanyAddressServiceServer) UpdateCompanyAddressSendStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyAddressSendStatus not implemented")
}
func (UnimplementedCompanyAddressServiceServer) UpdateCompanyAddressReceiveStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyAddressReceiveStatus not implemented")
}
func (UnimplementedCompanyAddressServiceServer) mustEmbedUnimplementedCompanyAddressServiceServer() {}

// UnsafeCompanyAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyAddressServiceServer will
// result in compilation errors.
type UnsafeCompanyAddressServiceServer interface {
	mustEmbedUnimplementedCompanyAddressServiceServer()
}

func RegisterCompanyAddressServiceServer(s grpc.ServiceRegistrar, srv CompanyAddressServiceServer) {
	s.RegisterService(&CompanyAddressService_ServiceDesc, srv)
}

func _CompanyAddressService_AddCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompanyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).AddCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_AddCompanyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).AddCompanyAddress(ctx, req.(*AddCompanyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_DeleteCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).DeleteCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_DeleteCompanyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).DeleteCompanyAddress(ctx, req.(*DeleteCompanyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_UpdateCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_UpdateCompanyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddress(ctx, req.(*UpdateCompanyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_QueryCompanyAddressDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCompanyAddressDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_QueryCompanyAddressDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressDetail(ctx, req.(*QueryCompanyAddressDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_QueryCompanyAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCompanyAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_QueryCompanyAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressList(ctx, req.(*QueryCompanyAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_UpdateCompanyAddressSendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyAddressStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressSendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_UpdateCompanyAddressSendStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressSendStatus(ctx, req.(*UpdateCompanyAddressStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_UpdateCompanyAddressReceiveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyAddressStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressReceiveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_UpdateCompanyAddressReceiveStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressReceiveStatus(ctx, req.(*UpdateCompanyAddressStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyAddressService_ServiceDesc is the grpc.ServiceDesc for CompanyAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.CompanyAddressService",
	HandlerType: (*CompanyAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCompanyAddress",
			Handler:    _CompanyAddressService_AddCompanyAddress_Handler,
		},
		{
			MethodName: "DeleteCompanyAddress",
			Handler:    _CompanyAddressService_DeleteCompanyAddress_Handler,
		},
		{
			MethodName: "UpdateCompanyAddress",
			Handler:    _CompanyAddressService_UpdateCompanyAddress_Handler,
		},
		{
			MethodName: "QueryCompanyAddressDetail",
			Handler:    _CompanyAddressService_QueryCompanyAddressDetail_Handler,
		},
		{
			MethodName: "QueryCompanyAddressList",
			Handler:    _CompanyAddressService_QueryCompanyAddressList_Handler,
		},
		{
			MethodName: "UpdateCompanyAddressSendStatus",
			Handler:    _CompanyAddressService_UpdateCompanyAddressSendStatus_Handler,
		},
		{
			MethodName: "UpdateCompanyAddressReceiveStatus",
			Handler:    _CompanyAddressService_UpdateCompanyAddressReceiveStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderService_Delivery_FullMethodName                      = "/omsclient.OrderService/Delivery"
	OrderService_CloseOrder_FullMethodName                    = "/omsclient.OrderService/CloseOrder"
	OrderService_OrderDetail_FullMethodName                   = "/omsclient.OrderService/OrderDetail"
	OrderService_UpdateReceiverInfo_FullMethodName            = "/omsclient.OrderService/UpdateReceiverInfo"
	OrderService_UpdateMoneyInfo_FullMethodName               = "/omsclient.OrderService/UpdateMoneyInfo"
	OrderService_UpdateNote_FullMethodName                    = "/omsclient.OrderService/UpdateNote"
	OrderService_OrderList_FullMethodName                     = "/omsclient.OrderService/OrderList"
	OrderService_OrderDelete_FullMethodName                   = "/omsclient.OrderService/OrderDelete"
	OrderService_OrderAdd_FullMethodName                      = "/omsclient.OrderService/OrderAdd"
	OrderService_OrderUpdate_FullMethodName                   = "/omsclient.OrderService/OrderUpdate"
	OrderService_OrderListByMemberId_FullMethodName           = "/omsclient.OrderService/OrderListByMemberId"
	OrderService_OrderCancel_FullMethodName                   = "/omsclient.OrderService/OrderCancel"
	OrderService_OrderConfirm_FullMethodName                  = "/omsclient.OrderService/OrderConfirm"
	OrderService_OrderRefund_FullMethodName                   = "/omsclient.OrderService/OrderRefund"
	OrderService_OrderDeleteById_FullMethodName               = "/omsclient.OrderService/OrderDeleteById"
	OrderService_QueryOrderList_FullMethodName                = "/omsclient.OrderService/QueryOrderList"
	OrderService_UpdateOrderStatusByOutTradeNo_FullMethodName = "/omsclient.OrderService/UpdateOrderStatusByOutTradeNo"
	OrderService_QueryTimeOutOrderList_FullMethodName         = "/omsclient.OrderService/QueryTimeOutOrderList"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// pc
	// 批量发货
	Delivery(ctx context.Context, in *DeliveryReq, opts ...grpc.CallOption) (*DeliveryResp, error)
	// 批量关闭订单
	CloseOrder(ctx context.Context, in *CloseOrderReq, opts ...grpc.CallOption) (*CloseOrderResp, error)
	// 获取订单详情：订单信息、商品信息、操作记录
	OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailResp, error)
	// 修改收货人信息
	UpdateReceiverInfo(ctx context.Context, in *UpdateReceiverInfoReq, opts ...grpc.CallOption) (*UpdateReceiverInfoResp, error)
	// 修改订单费用信息
	UpdateMoneyInfo(ctx context.Context, in *UpdateMoneyInfoReq, opts ...grpc.CallOption) (*UpdateMoneyInfoResp, error)
	// 备注订单
	UpdateNote(ctx context.Context, in *UpdateNoteReq, opts ...grpc.CallOption) (*UpdateNoteResp, error)
	// 查询订单
	OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
	// 批量删除订单
	OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error)
	// app
	OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error)
	OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error)
	OrderListByMemberId(ctx context.Context, in *OrderListByMemberIdReq, opts ...grpc.CallOption) (*OrderListByMemberIdResp, error)
	OrderCancel(ctx context.Context, in *OrderCancelReq, opts ...grpc.CallOption) (*OrderCancelResp, error)
	OrderConfirm(ctx context.Context, in *OrderConfirmReq, opts ...grpc.CallOption) (*OrderConfirmResp, error)
	OrderRefund(ctx context.Context, in *OrderRefundReq, opts ...grpc.CallOption) (*OrderRefundResp, error)
	OrderDeleteById(ctx context.Context, in *OrderDeleteByIdReq, opts ...grpc.CallOption) (*OrderDeleteResp, error)
	// app端查询会员的订单列表信息
	QueryOrderList(ctx context.Context, in *QueryOrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
	// 更新订单状态
	UpdateOrderStatusByOutTradeNo(ctx context.Context, in *UpdateOrderStatusByOutTradeNoReq, opts ...grpc.CallOption) (*UpdateOrderStatusByOutTradeNoResp, error)
	// 查询超时、未支付的订单及订单详情
	QueryTimeOutOrderList(ctx context.Context, in *QueryTimeOutOrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Delivery(ctx context.Context, in *DeliveryReq, opts ...grpc.CallOption) (*DeliveryResp, error) {
	out := new(DeliveryResp)
	err := c.cc.Invoke(ctx, OrderService_Delivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CloseOrder(ctx context.Context, in *CloseOrderReq, opts ...grpc.CallOption) (*CloseOrderResp, error) {
	out := new(CloseOrderResp)
	err := c.cc.Invoke(ctx, OrderService_CloseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailResp, error) {
	out := new(OrderDetailResp)
	err := c.cc.Invoke(ctx, OrderService_OrderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateReceiverInfo(ctx context.Context, in *UpdateReceiverInfoReq, opts ...grpc.CallOption) (*UpdateReceiverInfoResp, error) {
	out := new(UpdateReceiverInfoResp)
	err := c.cc.Invoke(ctx, OrderService_UpdateReceiverInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateMoneyInfo(ctx context.Context, in *UpdateMoneyInfoReq, opts ...grpc.CallOption) (*UpdateMoneyInfoResp, error) {
	out := new(UpdateMoneyInfoResp)
	err := c.cc.Invoke(ctx, OrderService_UpdateMoneyInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateNote(ctx context.Context, in *UpdateNoteReq, opts ...grpc.CallOption) (*UpdateNoteResp, error) {
	out := new(UpdateNoteResp)
	err := c.cc.Invoke(ctx, OrderService_UpdateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, OrderService_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error) {
	out := new(OrderDeleteResp)
	err := c.cc.Invoke(ctx, OrderService_OrderDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error) {
	out := new(OrderAddResp)
	err := c.cc.Invoke(ctx, OrderService_OrderAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error) {
	out := new(OrderUpdateResp)
	err := c.cc.Invoke(ctx, OrderService_OrderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderListByMemberId(ctx context.Context, in *OrderListByMemberIdReq, opts ...grpc.CallOption) (*OrderListByMemberIdResp, error) {
	out := new(OrderListByMemberIdResp)
	err := c.cc.Invoke(ctx, OrderService_OrderListByMemberId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderCancel(ctx context.Context, in *OrderCancelReq, opts ...grpc.CallOption) (*OrderCancelResp, error) {
	out := new(OrderCancelResp)
	err := c.cc.Invoke(ctx, OrderService_OrderCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderConfirm(ctx context.Context, in *OrderConfirmReq, opts ...grpc.CallOption) (*OrderConfirmResp, error) {
	out := new(OrderConfirmResp)
	err := c.cc.Invoke(ctx, OrderService_OrderConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderRefund(ctx context.Context, in *OrderRefundReq, opts ...grpc.CallOption) (*OrderRefundResp, error) {
	out := new(OrderRefundResp)
	err := c.cc.Invoke(ctx, OrderService_OrderRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderDeleteById(ctx context.Context, in *OrderDeleteByIdReq, opts ...grpc.CallOption) (*OrderDeleteResp, error) {
	out := new(OrderDeleteResp)
	err := c.cc.Invoke(ctx, OrderService_OrderDeleteById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) QueryOrderList(ctx context.Context, in *QueryOrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, OrderService_QueryOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderStatusByOutTradeNo(ctx context.Context, in *UpdateOrderStatusByOutTradeNoReq, opts ...grpc.CallOption) (*UpdateOrderStatusByOutTradeNoResp, error) {
	out := new(UpdateOrderStatusByOutTradeNoResp)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderStatusByOutTradeNo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) QueryTimeOutOrderList(ctx context.Context, in *QueryTimeOutOrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, OrderService_QueryTimeOutOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// pc
	// 批量发货
	Delivery(context.Context, *DeliveryReq) (*DeliveryResp, error)
	// 批量关闭订单
	CloseOrder(context.Context, *CloseOrderReq) (*CloseOrderResp, error)
	// 获取订单详情：订单信息、商品信息、操作记录
	OrderDetail(context.Context, *OrderDetailReq) (*OrderDetailResp, error)
	// 修改收货人信息
	UpdateReceiverInfo(context.Context, *UpdateReceiverInfoReq) (*UpdateReceiverInfoResp, error)
	// 修改订单费用信息
	UpdateMoneyInfo(context.Context, *UpdateMoneyInfoReq) (*UpdateMoneyInfoResp, error)
	// 备注订单
	UpdateNote(context.Context, *UpdateNoteReq) (*UpdateNoteResp, error)
	// 查询订单
	OrderList(context.Context, *OrderListReq) (*OrderListResp, error)
	// 批量删除订单
	OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error)
	// app
	OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error)
	OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error)
	OrderListByMemberId(context.Context, *OrderListByMemberIdReq) (*OrderListByMemberIdResp, error)
	OrderCancel(context.Context, *OrderCancelReq) (*OrderCancelResp, error)
	OrderConfirm(context.Context, *OrderConfirmReq) (*OrderConfirmResp, error)
	OrderRefund(context.Context, *OrderRefundReq) (*OrderRefundResp, error)
	OrderDeleteById(context.Context, *OrderDeleteByIdReq) (*OrderDeleteResp, error)
	// app端查询会员的订单列表信息
	QueryOrderList(context.Context, *QueryOrderListReq) (*OrderListResp, error)
	// 更新订单状态
	UpdateOrderStatusByOutTradeNo(context.Context, *UpdateOrderStatusByOutTradeNoReq) (*UpdateOrderStatusByOutTradeNoResp, error)
	// 查询超时、未支付的订单及订单详情
	QueryTimeOutOrderList(context.Context, *QueryTimeOutOrderListReq) (*OrderListResp, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Delivery(context.Context, *DeliveryReq) (*DeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delivery not implemented")
}
func (UnimplementedOrderServiceServer) CloseOrder(context.Context, *CloseOrderReq) (*CloseOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOrder not implemented")
}
func (UnimplementedOrderServiceServer) OrderDetail(context.Context, *OrderDetailReq) (*OrderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDetail not implemented")
}
func (UnimplementedOrderServiceServer) UpdateReceiverInfo(context.Context, *UpdateReceiverInfoReq) (*UpdateReceiverInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceiverInfo not implemented")
}
func (UnimplementedOrderServiceServer) UpdateMoneyInfo(context.Context, *UpdateMoneyInfoReq) (*UpdateMoneyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoneyInfo not implemented")
}
func (UnimplementedOrderServiceServer) UpdateNote(context.Context, *UpdateNoteReq) (*UpdateNoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedOrderServiceServer) OrderList(context.Context, *OrderListReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedOrderServiceServer) OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDelete not implemented")
}
func (UnimplementedOrderServiceServer) OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAdd not implemented")
}
func (UnimplementedOrderServiceServer) OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderUpdate not implemented")
}
func (UnimplementedOrderServiceServer) OrderListByMemberId(context.Context, *OrderListByMemberIdReq) (*OrderListByMemberIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderListByMemberId not implemented")
}
func (UnimplementedOrderServiceServer) OrderCancel(context.Context, *OrderCancelReq) (*OrderCancelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCancel not implemented")
}
func (UnimplementedOrderServiceServer) OrderConfirm(context.Context, *OrderConfirmReq) (*OrderConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderConfirm not implemented")
}
func (UnimplementedOrderServiceServer) OrderRefund(context.Context, *OrderRefundReq) (*OrderRefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderRefund not implemented")
}
func (UnimplementedOrderServiceServer) OrderDeleteById(context.Context, *OrderDeleteByIdReq) (*OrderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDeleteById not implemented")
}
func (UnimplementedOrderServiceServer) QueryOrderList(context.Context, *QueryOrderListReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderList not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderStatusByOutTradeNo(context.Context, *UpdateOrderStatusByOutTradeNoReq) (*UpdateOrderStatusByOutTradeNoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatusByOutTradeNo not implemented")
}
func (UnimplementedOrderServiceServer) QueryTimeOutOrderList(context.Context, *QueryTimeOutOrderListReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTimeOutOrderList not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Delivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Delivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Delivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Delivery(ctx, req.(*DeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CloseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CloseOrder(ctx, req.(*CloseOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderDetail(ctx, req.(*OrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateReceiverInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiverInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateReceiverInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateReceiverInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateReceiverInfo(ctx, req.(*UpdateReceiverInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateMoneyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoneyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateMoneyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateMoneyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateMoneyInfo(ctx, req.(*UpdateMoneyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateNote(ctx, req.(*UpdateNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderList(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderDelete(ctx, req.(*OrderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderAdd(ctx, req.(*OrderAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderUpdate(ctx, req.(*OrderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderListByMemberId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListByMemberIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderListByMemberId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderListByMemberId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderListByMemberId(ctx, req.(*OrderListByMemberIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderCancel(ctx, req.(*OrderCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderConfirm(ctx, req.(*OrderConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderRefund(ctx, req.(*OrderRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderDeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDeleteByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderDeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_OrderDeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderDeleteById(ctx, req.(*OrderDeleteByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_QueryOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueryOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_QueryOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueryOrderList(ctx, req.(*QueryOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderStatusByOutTradeNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusByOutTradeNoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderStatusByOutTradeNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderStatusByOutTradeNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderStatusByOutTradeNo(ctx, req.(*UpdateOrderStatusByOutTradeNoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_QueryTimeOutOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimeOutOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueryTimeOutOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_QueryTimeOutOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueryTimeOutOrderList(ctx, req.(*QueryTimeOutOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delivery",
			Handler:    _OrderService_Delivery_Handler,
		},
		{
			MethodName: "CloseOrder",
			Handler:    _OrderService_CloseOrder_Handler,
		},
		{
			MethodName: "OrderDetail",
			Handler:    _OrderService_OrderDetail_Handler,
		},
		{
			MethodName: "UpdateReceiverInfo",
			Handler:    _OrderService_UpdateReceiverInfo_Handler,
		},
		{
			MethodName: "UpdateMoneyInfo",
			Handler:    _OrderService_UpdateMoneyInfo_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _OrderService_UpdateNote_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _OrderService_OrderList_Handler,
		},
		{
			MethodName: "OrderDelete",
			Handler:    _OrderService_OrderDelete_Handler,
		},
		{
			MethodName: "OrderAdd",
			Handler:    _OrderService_OrderAdd_Handler,
		},
		{
			MethodName: "OrderUpdate",
			Handler:    _OrderService_OrderUpdate_Handler,
		},
		{
			MethodName: "OrderListByMemberId",
			Handler:    _OrderService_OrderListByMemberId_Handler,
		},
		{
			MethodName: "OrderCancel",
			Handler:    _OrderService_OrderCancel_Handler,
		},
		{
			MethodName: "OrderConfirm",
			Handler:    _OrderService_OrderConfirm_Handler,
		},
		{
			MethodName: "OrderRefund",
			Handler:    _OrderService_OrderRefund_Handler,
		},
		{
			MethodName: "OrderDeleteById",
			Handler:    _OrderService_OrderDeleteById_Handler,
		},
		{
			MethodName: "QueryOrderList",
			Handler:    _OrderService_QueryOrderList_Handler,
		},
		{
			MethodName: "UpdateOrderStatusByOutTradeNo",
			Handler:    _OrderService_UpdateOrderStatusByOutTradeNo_Handler,
		},
		{
			MethodName: "QueryTimeOutOrderList",
			Handler:    _OrderService_QueryTimeOutOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderDeliveryService_AddOrderDelivery_FullMethodName         = "/omsclient.OrderDeliveryService/AddOrderDelivery"
	OrderDeliveryService_DeleteOrderDelivery_FullMethodName      = "/omsclient.OrderDeliveryService/DeleteOrderDelivery"
	OrderDeliveryService_UpdateOrderDelivery_FullMethodName      = "/omsclient.OrderDeliveryService/UpdateOrderDelivery"
	OrderDeliveryService_QueryOrderDeliveryDetail_FullMethodName = "/omsclient.OrderDeliveryService/QueryOrderDeliveryDetail"
	OrderDeliveryService_QueryOrderDeliveryList_FullMethodName   = "/omsclient.OrderDeliveryService/QueryOrderDeliveryList"
)

// OrderDeliveryServiceClient is the client API for OrderDeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderDeliveryServiceClient interface {
	// 添加订单收货地址
	AddOrderDelivery(ctx context.Context, in *AddOrderDeliveryReq, opts ...grpc.CallOption) (*AddOrderDeliveryResp, error)
	// 删除订单收货地址
	DeleteOrderDelivery(ctx context.Context, in *DeleteOrderDeliveryReq, opts ...grpc.CallOption) (*DeleteOrderDeliveryResp, error)
	// 更新订单收货地址
	UpdateOrderDelivery(ctx context.Context, in *UpdateOrderDeliveryReq, opts ...grpc.CallOption) (*UpdateOrderDeliveryResp, error)
	// 查询订单收货地址详情
	QueryOrderDeliveryDetail(ctx context.Context, in *QueryOrderDeliveryDetailReq, opts ...grpc.CallOption) (*QueryOrderDeliveryDetailResp, error)
	// 查询订单收货地址列表
	QueryOrderDeliveryList(ctx context.Context, in *QueryOrderDeliveryListReq, opts ...grpc.CallOption) (*QueryOrderDeliveryListResp, error)
}

type orderDeliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderDeliveryServiceClient(cc grpc.ClientConnInterface) OrderDeliveryServiceClient {
	return &orderDeliveryServiceClient{cc}
}

func (c *orderDeliveryServiceClient) AddOrderDelivery(ctx context.Context, in *AddOrderDeliveryReq, opts ...grpc.CallOption) (*AddOrderDeliveryResp, error) {
	out := new(AddOrderDeliveryResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_AddOrderDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) DeleteOrderDelivery(ctx context.Context, in *DeleteOrderDeliveryReq, opts ...grpc.CallOption) (*DeleteOrderDeliveryResp, error) {
	out := new(DeleteOrderDeliveryResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_DeleteOrderDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) UpdateOrderDelivery(ctx context.Context, in *UpdateOrderDeliveryReq, opts ...grpc.CallOption) (*UpdateOrderDeliveryResp, error) {
	out := new(UpdateOrderDeliveryResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_UpdateOrderDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) QueryOrderDeliveryDetail(ctx context.Context, in *QueryOrderDeliveryDetailReq, opts ...grpc.CallOption) (*QueryOrderDeliveryDetailResp, error) {
	out := new(QueryOrderDeliveryDetailResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_QueryOrderDeliveryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) QueryOrderDeliveryList(ctx context.Context, in *QueryOrderDeliveryListReq, opts ...grpc.CallOption) (*QueryOrderDeliveryListResp, error) {
	out := new(QueryOrderDeliveryListResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_QueryOrderDeliveryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderDeliveryServiceServer is the server API for OrderDeliveryService service.
// All implementations must embed UnimplementedOrderDeliveryServiceServer
// for forward compatibility
type OrderDeliveryServiceServer interface {
	// 添加订单收货地址
	AddOrderDelivery(context.Context, *AddOrderDeliveryReq) (*AddOrderDeliveryResp, error)
	// 删除订单收货地址
	DeleteOrderDelivery(context.Context, *DeleteOrderDeliveryReq) (*DeleteOrderDeliveryResp, error)
	// 更新订单收货地址
	UpdateOrderDelivery(context.Context, *UpdateOrderDeliveryReq) (*UpdateOrderDeliveryResp, error)
	// 查询订单收货地址详情
	QueryOrderDeliveryDetail(context.Context, *QueryOrderDeliveryDetailReq) (*QueryOrderDeliveryDetailResp, error)
	// 查询订单收货地址列表
	QueryOrderDeliveryList(context.Context, *QueryOrderDeliveryListReq) (*QueryOrderDeliveryListResp, error)
	mustEmbedUnimplementedOrderDeliveryServiceServer()
}

// UnimplementedOrderDeliveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderDeliveryServiceServer struct {
}

func (UnimplementedOrderDeliveryServiceServer) AddOrderDelivery(context.Context, *AddOrderDeliveryReq) (*AddOrderDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderDelivery not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) DeleteOrderDelivery(context.Context, *DeleteOrderDeliveryReq) (*DeleteOrderDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderDelivery not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) UpdateOrderDelivery(context.Context, *UpdateOrderDeliveryReq) (*UpdateOrderDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderDelivery not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) QueryOrderDeliveryDetail(context.Context, *QueryOrderDeliveryDetailReq) (*QueryOrderDeliveryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderDeliveryDetail not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) QueryOrderDeliveryList(context.Context, *QueryOrderDeliveryListReq) (*QueryOrderDeliveryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderDeliveryList not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) mustEmbedUnimplementedOrderDeliveryServiceServer() {}

// UnsafeOrderDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderDeliveryServiceServer will
// result in compilation errors.
type UnsafeOrderDeliveryServiceServer interface {
	mustEmbedUnimplementedOrderDeliveryServiceServer()
}

func RegisterOrderDeliveryServiceServer(s grpc.ServiceRegistrar, srv OrderDeliveryServiceServer) {
	s.RegisterService(&OrderDeliveryService_ServiceDesc, srv)
}

func _OrderDeliveryService_AddOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).AddOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_AddOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).AddOrderDelivery(ctx, req.(*AddOrderDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_DeleteOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).DeleteOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_DeleteOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).DeleteOrderDelivery(ctx, req.(*DeleteOrderDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_UpdateOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).UpdateOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_UpdateOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).UpdateOrderDelivery(ctx, req.(*UpdateOrderDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_QueryOrderDeliveryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderDeliveryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_QueryOrderDeliveryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryDetail(ctx, req.(*QueryOrderDeliveryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_QueryOrderDeliveryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderDeliveryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_QueryOrderDeliveryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryList(ctx, req.(*QueryOrderDeliveryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderDeliveryService_ServiceDesc is the grpc.ServiceDesc for OrderDeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderDeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderDeliveryService",
	HandlerType: (*OrderDeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderDelivery",
			Handler:    _OrderDeliveryService_AddOrderDelivery_Handler,
		},
		{
			MethodName: "DeleteOrderDelivery",
			Handler:    _OrderDeliveryService_DeleteOrderDelivery_Handler,
		},
		{
			MethodName: "UpdateOrderDelivery",
			Handler:    _OrderDeliveryService_UpdateOrderDelivery_Handler,
		},
		{
			MethodName: "QueryOrderDeliveryDetail",
			Handler:    _OrderDeliveryService_QueryOrderDeliveryDetail_Handler,
		},
		{
			MethodName: "QueryOrderDeliveryList",
			Handler:    _OrderDeliveryService_QueryOrderDeliveryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderItemService_AddOrderItem_FullMethodName         = "/omsclient.OrderItemService/AddOrderItem"
	OrderItemService_QueryOrderItemDetail_FullMethodName = "/omsclient.OrderItemService/QueryOrderItemDetail"
	OrderItemService_QueryOrderItemList_FullMethodName   = "/omsclient.OrderItemService/QueryOrderItemList"
)

// OrderItemServiceClient is the client API for OrderItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemServiceClient interface {
	// 添加订单中所包含的商品
	AddOrderItem(ctx context.Context, in *AddOrderItemReq, opts ...grpc.CallOption) (*AddOrderItemResp, error)
	// 查询订单中所包含的商品详情
	QueryOrderItemDetail(ctx context.Context, in *QueryOrderItemDetailReq, opts ...grpc.CallOption) (*QueryOrderItemDetailResp, error)
	// 查询订单中所包含的商品列表
	QueryOrderItemList(ctx context.Context, in *QueryOrderItemListReq, opts ...grpc.CallOption) (*QueryOrderItemListResp, error)
}

type orderItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemServiceClient(cc grpc.ClientConnInterface) OrderItemServiceClient {
	return &orderItemServiceClient{cc}
}

func (c *orderItemServiceClient) AddOrderItem(ctx context.Context, in *AddOrderItemReq, opts ...grpc.CallOption) (*AddOrderItemResp, error) {
	out := new(AddOrderItemResp)
	err := c.cc.Invoke(ctx, OrderItemService_AddOrderItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) QueryOrderItemDetail(ctx context.Context, in *QueryOrderItemDetailReq, opts ...grpc.CallOption) (*QueryOrderItemDetailResp, error) {
	out := new(QueryOrderItemDetailResp)
	err := c.cc.Invoke(ctx, OrderItemService_QueryOrderItemDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) QueryOrderItemList(ctx context.Context, in *QueryOrderItemListReq, opts ...grpc.CallOption) (*QueryOrderItemListResp, error) {
	out := new(QueryOrderItemListResp)
	err := c.cc.Invoke(ctx, OrderItemService_QueryOrderItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderItemServiceServer is the server API for OrderItemService service.
// All implementations must embed UnimplementedOrderItemServiceServer
// for forward compatibility
type OrderItemServiceServer interface {
	// 添加订单中所包含的商品
	AddOrderItem(context.Context, *AddOrderItemReq) (*AddOrderItemResp, error)
	// 查询订单中所包含的商品详情
	QueryOrderItemDetail(context.Context, *QueryOrderItemDetailReq) (*QueryOrderItemDetailResp, error)
	// 查询订单中所包含的商品列表
	QueryOrderItemList(context.Context, *QueryOrderItemListReq) (*QueryOrderItemListResp, error)
	mustEmbedUnimplementedOrderItemServiceServer()
}

// UnimplementedOrderItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderItemServiceServer struct {
}

func (UnimplementedOrderItemServiceServer) AddOrderItem(context.Context, *AddOrderItemReq) (*AddOrderItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderItem not implemented")
}
func (UnimplementedOrderItemServiceServer) QueryOrderItemDetail(context.Context, *QueryOrderItemDetailReq) (*QueryOrderItemDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderItemDetail not implemented")
}
func (UnimplementedOrderItemServiceServer) QueryOrderItemList(context.Context, *QueryOrderItemListReq) (*QueryOrderItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderItemList not implemented")
}
func (UnimplementedOrderItemServiceServer) mustEmbedUnimplementedOrderItemServiceServer() {}

// UnsafeOrderItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemServiceServer will
// result in compilation errors.
type UnsafeOrderItemServiceServer interface {
	mustEmbedUnimplementedOrderItemServiceServer()
}

func RegisterOrderItemServiceServer(s grpc.ServiceRegistrar, srv OrderItemServiceServer) {
	s.RegisterService(&OrderItemService_ServiceDesc, srv)
}

func _OrderItemService_AddOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).AddOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_AddOrderItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).AddOrderItem(ctx, req.(*AddOrderItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_QueryOrderItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderItemDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).QueryOrderItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_QueryOrderItemDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).QueryOrderItemDetail(ctx, req.(*QueryOrderItemDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_QueryOrderItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderItemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).QueryOrderItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_QueryOrderItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).QueryOrderItemList(ctx, req.(*QueryOrderItemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderItemService_ServiceDesc is the grpc.ServiceDesc for OrderItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderItemService",
	HandlerType: (*OrderItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderItem",
			Handler:    _OrderItemService_AddOrderItem_Handler,
		},
		{
			MethodName: "QueryOrderItemDetail",
			Handler:    _OrderItemService_QueryOrderItemDetail_Handler,
		},
		{
			MethodName: "QueryOrderItemList",
			Handler:    _OrderItemService_QueryOrderItemList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderOperateHistoryService_AddOrderOperateHistory_FullMethodName       = "/omsclient.OrderOperateHistoryService/AddOrderOperateHistory"
	OrderOperateHistoryService_DeleteOrderOperateHistory_FullMethodName    = "/omsclient.OrderOperateHistoryService/DeleteOrderOperateHistory"
	OrderOperateHistoryService_QueryOrderOperateHistoryList_FullMethodName = "/omsclient.OrderOperateHistoryService/QueryOrderOperateHistoryList"
)

// OrderOperateHistoryServiceClient is the client API for OrderOperateHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderOperateHistoryServiceClient interface {
	// 添加订单操作历史记录
	AddOrderOperateHistory(ctx context.Context, in *AddOrderOperateHistoryReq, opts ...grpc.CallOption) (*AddOrderOperateHistoryResp, error)
	// 删除订单操作历史记录
	DeleteOrderOperateHistory(ctx context.Context, in *DeleteOrderOperateHistoryReq, opts ...grpc.CallOption) (*DeleteOrderOperateHistoryResp, error)
	// 查询订单操作历史记录列表
	QueryOrderOperateHistoryList(ctx context.Context, in *QueryOrderOperateHistoryListReq, opts ...grpc.CallOption) (*QueryOrderOperateHistoryListResp, error)
}

type orderOperateHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderOperateHistoryServiceClient(cc grpc.ClientConnInterface) OrderOperateHistoryServiceClient {
	return &orderOperateHistoryServiceClient{cc}
}

func (c *orderOperateHistoryServiceClient) AddOrderOperateHistory(ctx context.Context, in *AddOrderOperateHistoryReq, opts ...grpc.CallOption) (*AddOrderOperateHistoryResp, error) {
	out := new(AddOrderOperateHistoryResp)
	err := c.cc.Invoke(ctx, OrderOperateHistoryService_AddOrderOperateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderOperateHistoryServiceClient) DeleteOrderOperateHistory(ctx context.Context, in *DeleteOrderOperateHistoryReq, opts ...grpc.CallOption) (*DeleteOrderOperateHistoryResp, error) {
	out := new(DeleteOrderOperateHistoryResp)
	err := c.cc.Invoke(ctx, OrderOperateHistoryService_DeleteOrderOperateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderOperateHistoryServiceClient) QueryOrderOperateHistoryList(ctx context.Context, in *QueryOrderOperateHistoryListReq, opts ...grpc.CallOption) (*QueryOrderOperateHistoryListResp, error) {
	out := new(QueryOrderOperateHistoryListResp)
	err := c.cc.Invoke(ctx, OrderOperateHistoryService_QueryOrderOperateHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderOperateHistoryServiceServer is the server API for OrderOperateHistoryService service.
// All implementations must embed UnimplementedOrderOperateHistoryServiceServer
// for forward compatibility
type OrderOperateHistoryServiceServer interface {
	// 添加订单操作历史记录
	AddOrderOperateHistory(context.Context, *AddOrderOperateHistoryReq) (*AddOrderOperateHistoryResp, error)
	// 删除订单操作历史记录
	DeleteOrderOperateHistory(context.Context, *DeleteOrderOperateHistoryReq) (*DeleteOrderOperateHistoryResp, error)
	// 查询订单操作历史记录列表
	QueryOrderOperateHistoryList(context.Context, *QueryOrderOperateHistoryListReq) (*QueryOrderOperateHistoryListResp, error)
	mustEmbedUnimplementedOrderOperateHistoryServiceServer()
}

// UnimplementedOrderOperateHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderOperateHistoryServiceServer struct {
}

func (UnimplementedOrderOperateHistoryServiceServer) AddOrderOperateHistory(context.Context, *AddOrderOperateHistoryReq) (*AddOrderOperateHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderOperateHistory not implemented")
}
func (UnimplementedOrderOperateHistoryServiceServer) DeleteOrderOperateHistory(context.Context, *DeleteOrderOperateHistoryReq) (*DeleteOrderOperateHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderOperateHistory not implemented")
}
func (UnimplementedOrderOperateHistoryServiceServer) QueryOrderOperateHistoryList(context.Context, *QueryOrderOperateHistoryListReq) (*QueryOrderOperateHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderOperateHistoryList not implemented")
}
func (UnimplementedOrderOperateHistoryServiceServer) mustEmbedUnimplementedOrderOperateHistoryServiceServer() {
}

// UnsafeOrderOperateHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderOperateHistoryServiceServer will
// result in compilation errors.
type UnsafeOrderOperateHistoryServiceServer interface {
	mustEmbedUnimplementedOrderOperateHistoryServiceServer()
}

func RegisterOrderOperateHistoryServiceServer(s grpc.ServiceRegistrar, srv OrderOperateHistoryServiceServer) {
	s.RegisterService(&OrderOperateHistoryService_ServiceDesc, srv)
}

func _OrderOperateHistoryService_AddOrderOperateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderOperateHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderOperateHistoryServiceServer).AddOrderOperateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderOperateHistoryService_AddOrderOperateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderOperateHistoryServiceServer).AddOrderOperateHistory(ctx, req.(*AddOrderOperateHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderOperateHistoryService_DeleteOrderOperateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderOperateHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderOperateHistoryServiceServer).DeleteOrderOperateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderOperateHistoryService_DeleteOrderOperateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderOperateHistoryServiceServer).DeleteOrderOperateHistory(ctx, req.(*DeleteOrderOperateHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderOperateHistoryService_QueryOrderOperateHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderOperateHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderOperateHistoryServiceServer).QueryOrderOperateHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderOperateHistoryService_QueryOrderOperateHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderOperateHistoryServiceServer).QueryOrderOperateHistoryList(ctx, req.(*QueryOrderOperateHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderOperateHistoryService_ServiceDesc is the grpc.ServiceDesc for OrderOperateHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderOperateHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderOperateHistoryService",
	HandlerType: (*OrderOperateHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderOperateHistory",
			Handler:    _OrderOperateHistoryService_AddOrderOperateHistory_Handler,
		},
		{
			MethodName: "DeleteOrderOperateHistory",
			Handler:    _OrderOperateHistoryService_DeleteOrderOperateHistory_Handler,
		},
		{
			MethodName: "QueryOrderOperateHistoryList",
			Handler:    _OrderOperateHistoryService_QueryOrderOperateHistoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderReturnApplyService_AddOrderReturnApply_FullMethodName         = "/omsclient.OrderReturnApplyService/AddOrderReturnApply"
	OrderReturnApplyService_DeleteOrderReturnApply_FullMethodName      = "/omsclient.OrderReturnApplyService/DeleteOrderReturnApply"
	OrderReturnApplyService_UpdateOrderReturnApply_FullMethodName      = "/omsclient.OrderReturnApplyService/UpdateOrderReturnApply"
	OrderReturnApplyService_QueryOrderReturnApplyDetail_FullMethodName = "/omsclient.OrderReturnApplyService/QueryOrderReturnApplyDetail"
	OrderReturnApplyService_QueryOrderReturnApplyList_FullMethodName   = "/omsclient.OrderReturnApplyService/QueryOrderReturnApplyList"
)

// OrderReturnApplyServiceClient is the client API for OrderReturnApplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderReturnApplyServiceClient interface {
	// 添加订单退货申请
	AddOrderReturnApply(ctx context.Context, in *AddOrderReturnApplyReq, opts ...grpc.CallOption) (*AddOrderReturnApplyResp, error)
	// 删除订单退货申请
	DeleteOrderReturnApply(ctx context.Context, in *DeleteOrderReturnApplyReq, opts ...grpc.CallOption) (*DeleteOrderReturnApplyResp, error)
	// 更新订单退货申请
	UpdateOrderReturnApply(ctx context.Context, in *UpdateOrderReturnApplyReq, opts ...grpc.CallOption) (*UpdateOrderReturnApplyResp, error)
	// 查询订单退货申请详情
	QueryOrderReturnApplyDetail(ctx context.Context, in *QueryOrderReturnApplyDetailReq, opts ...grpc.CallOption) (*QueryOrderReturnApplyDetailResp, error)
	// 查询订单退货申请列表
	QueryOrderReturnApplyList(ctx context.Context, in *QueryOrderReturnApplyListReq, opts ...grpc.CallOption) (*QueryOrderReturnApplyListResp, error)
}

type orderReturnApplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderReturnApplyServiceClient(cc grpc.ClientConnInterface) OrderReturnApplyServiceClient {
	return &orderReturnApplyServiceClient{cc}
}

func (c *orderReturnApplyServiceClient) AddOrderReturnApply(ctx context.Context, in *AddOrderReturnApplyReq, opts ...grpc.CallOption) (*AddOrderReturnApplyResp, error) {
	out := new(AddOrderReturnApplyResp)
	err := c.cc.Invoke(ctx, OrderReturnApplyService_AddOrderReturnApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnApplyServiceClient) DeleteOrderReturnApply(ctx context.Context, in *DeleteOrderReturnApplyReq, opts ...grpc.CallOption) (*DeleteOrderReturnApplyResp, error) {
	out := new(DeleteOrderReturnApplyResp)
	err := c.cc.Invoke(ctx, OrderReturnApplyService_DeleteOrderReturnApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnApplyServiceClient) UpdateOrderReturnApply(ctx context.Context, in *UpdateOrderReturnApplyReq, opts ...grpc.CallOption) (*UpdateOrderReturnApplyResp, error) {
	out := new(UpdateOrderReturnApplyResp)
	err := c.cc.Invoke(ctx, OrderReturnApplyService_UpdateOrderReturnApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnApplyServiceClient) QueryOrderReturnApplyDetail(ctx context.Context, in *QueryOrderReturnApplyDetailReq, opts ...grpc.CallOption) (*QueryOrderReturnApplyDetailResp, error) {
	out := new(QueryOrderReturnApplyDetailResp)
	err := c.cc.Invoke(ctx, OrderReturnApplyService_QueryOrderReturnApplyDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnApplyServiceClient) QueryOrderReturnApplyList(ctx context.Context, in *QueryOrderReturnApplyListReq, opts ...grpc.CallOption) (*QueryOrderReturnApplyListResp, error) {
	out := new(QueryOrderReturnApplyListResp)
	err := c.cc.Invoke(ctx, OrderReturnApplyService_QueryOrderReturnApplyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderReturnApplyServiceServer is the server API for OrderReturnApplyService service.
// All implementations must embed UnimplementedOrderReturnApplyServiceServer
// for forward compatibility
type OrderReturnApplyServiceServer interface {
	// 添加订单退货申请
	AddOrderReturnApply(context.Context, *AddOrderReturnApplyReq) (*AddOrderReturnApplyResp, error)
	// 删除订单退货申请
	DeleteOrderReturnApply(context.Context, *DeleteOrderReturnApplyReq) (*DeleteOrderReturnApplyResp, error)
	// 更新订单退货申请
	UpdateOrderReturnApply(context.Context, *UpdateOrderReturnApplyReq) (*UpdateOrderReturnApplyResp, error)
	// 查询订单退货申请详情
	QueryOrderReturnApplyDetail(context.Context, *QueryOrderReturnApplyDetailReq) (*QueryOrderReturnApplyDetailResp, error)
	// 查询订单退货申请列表
	QueryOrderReturnApplyList(context.Context, *QueryOrderReturnApplyListReq) (*QueryOrderReturnApplyListResp, error)
	mustEmbedUnimplementedOrderReturnApplyServiceServer()
}

// UnimplementedOrderReturnApplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderReturnApplyServiceServer struct {
}

func (UnimplementedOrderReturnApplyServiceServer) AddOrderReturnApply(context.Context, *AddOrderReturnApplyReq) (*AddOrderReturnApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderReturnApply not implemented")
}
func (UnimplementedOrderReturnApplyServiceServer) DeleteOrderReturnApply(context.Context, *DeleteOrderReturnApplyReq) (*DeleteOrderReturnApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderReturnApply not implemented")
}
func (UnimplementedOrderReturnApplyServiceServer) UpdateOrderReturnApply(context.Context, *UpdateOrderReturnApplyReq) (*UpdateOrderReturnApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturnApply not implemented")
}
func (UnimplementedOrderReturnApplyServiceServer) QueryOrderReturnApplyDetail(context.Context, *QueryOrderReturnApplyDetailReq) (*QueryOrderReturnApplyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnApplyDetail not implemented")
}
func (UnimplementedOrderReturnApplyServiceServer) QueryOrderReturnApplyList(context.Context, *QueryOrderReturnApplyListReq) (*QueryOrderReturnApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnApplyList not implemented")
}
func (UnimplementedOrderReturnApplyServiceServer) mustEmbedUnimplementedOrderReturnApplyServiceServer() {
}

// UnsafeOrderReturnApplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderReturnApplyServiceServer will
// result in compilation errors.
type UnsafeOrderReturnApplyServiceServer interface {
	mustEmbedUnimplementedOrderReturnApplyServiceServer()
}

func RegisterOrderReturnApplyServiceServer(s grpc.ServiceRegistrar, srv OrderReturnApplyServiceServer) {
	s.RegisterService(&OrderReturnApplyService_ServiceDesc, srv)
}

func _OrderReturnApplyService_AddOrderReturnApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReturnApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnApplyServiceServer).AddOrderReturnApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnApplyService_AddOrderReturnApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnApplyServiceServer).AddOrderReturnApply(ctx, req.(*AddOrderReturnApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnApplyService_DeleteOrderReturnApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReturnApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnApplyServiceServer).DeleteOrderReturnApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnApplyService_DeleteOrderReturnApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnApplyServiceServer).DeleteOrderReturnApply(ctx, req.(*DeleteOrderReturnApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnApplyService_UpdateOrderReturnApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReturnApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnApplyServiceServer).UpdateOrderReturnApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnApplyService_UpdateOrderReturnApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnApplyServiceServer).UpdateOrderReturnApply(ctx, req.(*UpdateOrderReturnApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnApplyService_QueryOrderReturnApplyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnApplyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnApplyServiceServer).QueryOrderReturnApplyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnApplyService_QueryOrderReturnApplyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnApplyServiceServer).QueryOrderReturnApplyDetail(ctx, req.(*QueryOrderReturnApplyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnApplyService_QueryOrderReturnApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnApplyServiceServer).QueryOrderReturnApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnApplyService_QueryOrderReturnApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnApplyServiceServer).QueryOrderReturnApplyList(ctx, req.(*QueryOrderReturnApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderReturnApplyService_ServiceDesc is the grpc.ServiceDesc for OrderReturnApplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderReturnApplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderReturnApplyService",
	HandlerType: (*OrderReturnApplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderReturnApply",
			Handler:    _OrderReturnApplyService_AddOrderReturnApply_Handler,
		},
		{
			MethodName: "DeleteOrderReturnApply",
			Handler:    _OrderReturnApplyService_DeleteOrderReturnApply_Handler,
		},
		{
			MethodName: "UpdateOrderReturnApply",
			Handler:    _OrderReturnApplyService_UpdateOrderReturnApply_Handler,
		},
		{
			MethodName: "QueryOrderReturnApplyDetail",
			Handler:    _OrderReturnApplyService_QueryOrderReturnApplyDetail_Handler,
		},
		{
			MethodName: "QueryOrderReturnApplyList",
			Handler:    _OrderReturnApplyService_QueryOrderReturnApplyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderReturnReasonService_AddOrderReturnReason_FullMethodName          = "/omsclient.OrderReturnReasonService/AddOrderReturnReason"
	OrderReturnReasonService_DeleteOrderReturnReason_FullMethodName       = "/omsclient.OrderReturnReasonService/DeleteOrderReturnReason"
	OrderReturnReasonService_UpdateOrderReturnReason_FullMethodName       = "/omsclient.OrderReturnReasonService/UpdateOrderReturnReason"
	OrderReturnReasonService_UpdateOrderReturnReasonStatus_FullMethodName = "/omsclient.OrderReturnReasonService/UpdateOrderReturnReasonStatus"
	OrderReturnReasonService_QueryOrderReturnReasonDetail_FullMethodName  = "/omsclient.OrderReturnReasonService/QueryOrderReturnReasonDetail"
	OrderReturnReasonService_QueryOrderReturnReasonList_FullMethodName    = "/omsclient.OrderReturnReasonService/QueryOrderReturnReasonList"
)

// OrderReturnReasonServiceClient is the client API for OrderReturnReasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderReturnReasonServiceClient interface {
	// 添加退货原因
	AddOrderReturnReason(ctx context.Context, in *AddOrderReturnReasonReq, opts ...grpc.CallOption) (*AddOrderReturnReasonResp, error)
	// 删除退货原因
	DeleteOrderReturnReason(ctx context.Context, in *DeleteOrderReturnReasonReq, opts ...grpc.CallOption) (*DeleteOrderReturnReasonResp, error)
	// 更新退货原因
	UpdateOrderReturnReason(ctx context.Context, in *UpdateOrderReturnReasonReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonResp, error)
	// 更新退货原因状态
	UpdateOrderReturnReasonStatus(ctx context.Context, in *UpdateOrderReturnReasonStatusReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonStatusResp, error)
	// 查询退货原因详情
	QueryOrderReturnReasonDetail(ctx context.Context, in *QueryOrderReturnReasonDetailReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonDetailResp, error)
	// 查询退货原因列表
	QueryOrderReturnReasonList(ctx context.Context, in *QueryOrderReturnReasonListReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonListResp, error)
}

type orderReturnReasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderReturnReasonServiceClient(cc grpc.ClientConnInterface) OrderReturnReasonServiceClient {
	return &orderReturnReasonServiceClient{cc}
}

func (c *orderReturnReasonServiceClient) AddOrderReturnReason(ctx context.Context, in *AddOrderReturnReasonReq, opts ...grpc.CallOption) (*AddOrderReturnReasonResp, error) {
	out := new(AddOrderReturnReasonResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_AddOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) DeleteOrderReturnReason(ctx context.Context, in *DeleteOrderReturnReasonReq, opts ...grpc.CallOption) (*DeleteOrderReturnReasonResp, error) {
	out := new(DeleteOrderReturnReasonResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_DeleteOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) UpdateOrderReturnReason(ctx context.Context, in *UpdateOrderReturnReasonReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonResp, error) {
	out := new(UpdateOrderReturnReasonResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_UpdateOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) UpdateOrderReturnReasonStatus(ctx context.Context, in *UpdateOrderReturnReasonStatusReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonStatusResp, error) {
	out := new(UpdateOrderReturnReasonStatusResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_UpdateOrderReturnReasonStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) QueryOrderReturnReasonDetail(ctx context.Context, in *QueryOrderReturnReasonDetailReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonDetailResp, error) {
	out := new(QueryOrderReturnReasonDetailResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_QueryOrderReturnReasonDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) QueryOrderReturnReasonList(ctx context.Context, in *QueryOrderReturnReasonListReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonListResp, error) {
	out := new(QueryOrderReturnReasonListResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_QueryOrderReturnReasonList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderReturnReasonServiceServer is the server API for OrderReturnReasonService service.
// All implementations must embed UnimplementedOrderReturnReasonServiceServer
// for forward compatibility
type OrderReturnReasonServiceServer interface {
	// 添加退货原因
	AddOrderReturnReason(context.Context, *AddOrderReturnReasonReq) (*AddOrderReturnReasonResp, error)
	// 删除退货原因
	DeleteOrderReturnReason(context.Context, *DeleteOrderReturnReasonReq) (*DeleteOrderReturnReasonResp, error)
	// 更新退货原因
	UpdateOrderReturnReason(context.Context, *UpdateOrderReturnReasonReq) (*UpdateOrderReturnReasonResp, error)
	// 更新退货原因状态
	UpdateOrderReturnReasonStatus(context.Context, *UpdateOrderReturnReasonStatusReq) (*UpdateOrderReturnReasonStatusResp, error)
	// 查询退货原因详情
	QueryOrderReturnReasonDetail(context.Context, *QueryOrderReturnReasonDetailReq) (*QueryOrderReturnReasonDetailResp, error)
	// 查询退货原因列表
	QueryOrderReturnReasonList(context.Context, *QueryOrderReturnReasonListReq) (*QueryOrderReturnReasonListResp, error)
	mustEmbedUnimplementedOrderReturnReasonServiceServer()
}

// UnimplementedOrderReturnReasonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderReturnReasonServiceServer struct {
}

func (UnimplementedOrderReturnReasonServiceServer) AddOrderReturnReason(context.Context, *AddOrderReturnReasonReq) (*AddOrderReturnReasonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderReturnReason not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) DeleteOrderReturnReason(context.Context, *DeleteOrderReturnReasonReq) (*DeleteOrderReturnReasonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderReturnReason not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) UpdateOrderReturnReason(context.Context, *UpdateOrderReturnReasonReq) (*UpdateOrderReturnReasonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturnReason not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) UpdateOrderReturnReasonStatus(context.Context, *UpdateOrderReturnReasonStatusReq) (*UpdateOrderReturnReasonStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturnReasonStatus not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) QueryOrderReturnReasonDetail(context.Context, *QueryOrderReturnReasonDetailReq) (*QueryOrderReturnReasonDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnReasonDetail not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) QueryOrderReturnReasonList(context.Context, *QueryOrderReturnReasonListReq) (*QueryOrderReturnReasonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnReasonList not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) mustEmbedUnimplementedOrderReturnReasonServiceServer() {
}

// UnsafeOrderReturnReasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderReturnReasonServiceServer will
// result in compilation errors.
type UnsafeOrderReturnReasonServiceServer interface {
	mustEmbedUnimplementedOrderReturnReasonServiceServer()
}

func RegisterOrderReturnReasonServiceServer(s grpc.ServiceRegistrar, srv OrderReturnReasonServiceServer) {
	s.RegisterService(&OrderReturnReasonService_ServiceDesc, srv)
}

func _OrderReturnReasonService_AddOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).AddOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_AddOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).AddOrderReturnReason(ctx, req.(*AddOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_DeleteOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).DeleteOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_DeleteOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).DeleteOrderReturnReason(ctx, req.(*DeleteOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_UpdateOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_UpdateOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReason(ctx, req.(*UpdateOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_UpdateOrderReturnReasonStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReturnReasonStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReasonStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_UpdateOrderReturnReasonStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReasonStatus(ctx, req.(*UpdateOrderReturnReasonStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_QueryOrderReturnReasonDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnReasonDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_QueryOrderReturnReasonDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonDetail(ctx, req.(*QueryOrderReturnReasonDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_QueryOrderReturnReasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnReasonListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_QueryOrderReturnReasonList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonList(ctx, req.(*QueryOrderReturnReasonListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderReturnReasonService_ServiceDesc is the grpc.ServiceDesc for OrderReturnReasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderReturnReasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderReturnReasonService",
	HandlerType: (*OrderReturnReasonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderReturnReason",
			Handler:    _OrderReturnReasonService_AddOrderReturnReason_Handler,
		},
		{
			MethodName: "DeleteOrderReturnReason",
			Handler:    _OrderReturnReasonService_DeleteOrderReturnReason_Handler,
		},
		{
			MethodName: "UpdateOrderReturnReason",
			Handler:    _OrderReturnReasonService_UpdateOrderReturnReason_Handler,
		},
		{
			MethodName: "UpdateOrderReturnReasonStatus",
			Handler:    _OrderReturnReasonService_UpdateOrderReturnReasonStatus_Handler,
		},
		{
			MethodName: "QueryOrderReturnReasonDetail",
			Handler:    _OrderReturnReasonService_QueryOrderReturnReasonDetail_Handler,
		},
		{
			MethodName: "QueryOrderReturnReasonList",
			Handler:    _OrderReturnReasonService_QueryOrderReturnReasonList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderSettingService_AddOrderSetting_FullMethodName                 = "/omsclient.OrderSettingService/AddOrderSetting"
	OrderSettingService_DeleteOrderSetting_FullMethodName              = "/omsclient.OrderSettingService/DeleteOrderSetting"
	OrderSettingService_UpdateOrderSetting_FullMethodName              = "/omsclient.OrderSettingService/UpdateOrderSetting"
	OrderSettingService_UpdateOrderSettingStatus_FullMethodName        = "/omsclient.OrderSettingService/UpdateOrderSettingStatus"
	OrderSettingService_QueryOrderSettingDetail_FullMethodName         = "/omsclient.OrderSettingService/QueryOrderSettingDetail"
	OrderSettingService_QueryOrderSettingList_FullMethodName           = "/omsclient.OrderSettingService/QueryOrderSettingList"
	OrderSettingService_UpdateOrderSettingDefaultStatus_FullMethodName = "/omsclient.OrderSettingService/UpdateOrderSettingDefaultStatus"
	OrderSettingService_QueryDefaultSetting_FullMethodName             = "/omsclient.OrderSettingService/QueryDefaultSetting"
)

// OrderSettingServiceClient is the client API for OrderSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderSettingServiceClient interface {
	// 添加订单设置
	AddOrderSetting(ctx context.Context, in *AddOrderSettingReq, opts ...grpc.CallOption) (*AddOrderSettingResp, error)
	// 删除订单设置
	DeleteOrderSetting(ctx context.Context, in *DeleteOrderSettingReq, opts ...grpc.CallOption) (*DeleteOrderSettingResp, error)
	// 更新订单设置
	UpdateOrderSetting(ctx context.Context, in *UpdateOrderSettingReq, opts ...grpc.CallOption) (*UpdateOrderSettingResp, error)
	// 更新订单设置状态
	UpdateOrderSettingStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error)
	// 查询订单设置详情
	QueryOrderSettingDetail(ctx context.Context, in *QueryOrderSettingDetailReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error)
	// 查询订单设置列表
	QueryOrderSettingList(ctx context.Context, in *QueryOrderSettingListReq, opts ...grpc.CallOption) (*QueryOrderSettingListResp, error)
	// 更新订单设置默认状态
	UpdateOrderSettingDefaultStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error)
	// 查询默认的订单设置
	QueryDefaultSetting(ctx context.Context, in *QueryDefaultSettingReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error)
}

type orderSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderSettingServiceClient(cc grpc.ClientConnInterface) OrderSettingServiceClient {
	return &orderSettingServiceClient{cc}
}

func (c *orderSettingServiceClient) AddOrderSetting(ctx context.Context, in *AddOrderSettingReq, opts ...grpc.CallOption) (*AddOrderSettingResp, error) {
	out := new(AddOrderSettingResp)
	err := c.cc.Invoke(ctx, OrderSettingService_AddOrderSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) DeleteOrderSetting(ctx context.Context, in *DeleteOrderSettingReq, opts ...grpc.CallOption) (*DeleteOrderSettingResp, error) {
	out := new(DeleteOrderSettingResp)
	err := c.cc.Invoke(ctx, OrderSettingService_DeleteOrderSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) UpdateOrderSetting(ctx context.Context, in *UpdateOrderSettingReq, opts ...grpc.CallOption) (*UpdateOrderSettingResp, error) {
	out := new(UpdateOrderSettingResp)
	err := c.cc.Invoke(ctx, OrderSettingService_UpdateOrderSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) UpdateOrderSettingStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error) {
	out := new(UpdateOrderSettingStatusResp)
	err := c.cc.Invoke(ctx, OrderSettingService_UpdateOrderSettingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) QueryOrderSettingDetail(ctx context.Context, in *QueryOrderSettingDetailReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error) {
	out := new(QueryOrderSettingDetailResp)
	err := c.cc.Invoke(ctx, OrderSettingService_QueryOrderSettingDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) QueryOrderSettingList(ctx context.Context, in *QueryOrderSettingListReq, opts ...grpc.CallOption) (*QueryOrderSettingListResp, error) {
	out := new(QueryOrderSettingListResp)
	err := c.cc.Invoke(ctx, OrderSettingService_QueryOrderSettingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) UpdateOrderSettingDefaultStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error) {
	out := new(UpdateOrderSettingStatusResp)
	err := c.cc.Invoke(ctx, OrderSettingService_UpdateOrderSettingDefaultStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) QueryDefaultSetting(ctx context.Context, in *QueryDefaultSettingReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error) {
	out := new(QueryOrderSettingDetailResp)
	err := c.cc.Invoke(ctx, OrderSettingService_QueryDefaultSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderSettingServiceServer is the server API for OrderSettingService service.
// All implementations must embed UnimplementedOrderSettingServiceServer
// for forward compatibility
type OrderSettingServiceServer interface {
	// 添加订单设置
	AddOrderSetting(context.Context, *AddOrderSettingReq) (*AddOrderSettingResp, error)
	// 删除订单设置
	DeleteOrderSetting(context.Context, *DeleteOrderSettingReq) (*DeleteOrderSettingResp, error)
	// 更新订单设置
	UpdateOrderSetting(context.Context, *UpdateOrderSettingReq) (*UpdateOrderSettingResp, error)
	// 更新订单设置状态
	UpdateOrderSettingStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error)
	// 查询订单设置详情
	QueryOrderSettingDetail(context.Context, *QueryOrderSettingDetailReq) (*QueryOrderSettingDetailResp, error)
	// 查询订单设置列表
	QueryOrderSettingList(context.Context, *QueryOrderSettingListReq) (*QueryOrderSettingListResp, error)
	// 更新订单设置默认状态
	UpdateOrderSettingDefaultStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error)
	// 查询默认的订单设置
	QueryDefaultSetting(context.Context, *QueryDefaultSettingReq) (*QueryOrderSettingDetailResp, error)
	mustEmbedUnimplementedOrderSettingServiceServer()
}

// UnimplementedOrderSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderSettingServiceServer struct {
}

func (UnimplementedOrderSettingServiceServer) AddOrderSetting(context.Context, *AddOrderSettingReq) (*AddOrderSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) DeleteOrderSetting(context.Context, *DeleteOrderSettingReq) (*DeleteOrderSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) UpdateOrderSetting(context.Context, *UpdateOrderSettingReq) (*UpdateOrderSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) UpdateOrderSettingStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderSettingStatus not implemented")
}
func (UnimplementedOrderSettingServiceServer) QueryOrderSettingDetail(context.Context, *QueryOrderSettingDetailReq) (*QueryOrderSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderSettingDetail not implemented")
}
func (UnimplementedOrderSettingServiceServer) QueryOrderSettingList(context.Context, *QueryOrderSettingListReq) (*QueryOrderSettingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderSettingList not implemented")
}
func (UnimplementedOrderSettingServiceServer) UpdateOrderSettingDefaultStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderSettingDefaultStatus not implemented")
}
func (UnimplementedOrderSettingServiceServer) QueryDefaultSetting(context.Context, *QueryDefaultSettingReq) (*QueryOrderSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDefaultSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) mustEmbedUnimplementedOrderSettingServiceServer() {}

// UnsafeOrderSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderSettingServiceServer will
// result in compilation errors.
type UnsafeOrderSettingServiceServer interface {
	mustEmbedUnimplementedOrderSettingServiceServer()
}

func RegisterOrderSettingServiceServer(s grpc.ServiceRegistrar, srv OrderSettingServiceServer) {
	s.RegisterService(&OrderSettingService_ServiceDesc, srv)
}

func _OrderSettingService_AddOrderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).AddOrderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_AddOrderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).AddOrderSetting(ctx, req.(*AddOrderSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_DeleteOrderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).DeleteOrderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_DeleteOrderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).DeleteOrderSetting(ctx, req.(*DeleteOrderSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_UpdateOrderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).UpdateOrderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_UpdateOrderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).UpdateOrderSetting(ctx, req.(*UpdateOrderSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_UpdateOrderSettingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderSettingStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_UpdateOrderSettingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingStatus(ctx, req.(*UpdateOrderSettingStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_QueryOrderSettingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderSettingDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).QueryOrderSettingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_QueryOrderSettingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).QueryOrderSettingDetail(ctx, req.(*QueryOrderSettingDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_QueryOrderSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderSettingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).QueryOrderSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_QueryOrderSettingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).QueryOrderSettingList(ctx, req.(*QueryOrderSettingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_UpdateOrderSettingDefaultStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderSettingStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingDefaultStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_UpdateOrderSettingDefaultStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingDefaultStatus(ctx, req.(*UpdateOrderSettingStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_QueryDefaultSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDefaultSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).QueryDefaultSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_QueryDefaultSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).QueryDefaultSetting(ctx, req.(*QueryDefaultSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderSettingService_ServiceDesc is the grpc.ServiceDesc for OrderSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderSettingService",
	HandlerType: (*OrderSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderSetting",
			Handler:    _OrderSettingService_AddOrderSetting_Handler,
		},
		{
			MethodName: "DeleteOrderSetting",
			Handler:    _OrderSettingService_DeleteOrderSetting_Handler,
		},
		{
			MethodName: "UpdateOrderSetting",
			Handler:    _OrderSettingService_UpdateOrderSetting_Handler,
		},
		{
			MethodName: "UpdateOrderSettingStatus",
			Handler:    _OrderSettingService_UpdateOrderSettingStatus_Handler,
		},
		{
			MethodName: "QueryOrderSettingDetail",
			Handler:    _OrderSettingService_QueryOrderSettingDetail_Handler,
		},
		{
			MethodName: "QueryOrderSettingList",
			Handler:    _OrderSettingService_QueryOrderSettingList_Handler,
		},
		{
			MethodName: "UpdateOrderSettingDefaultStatus",
			Handler:    _OrderSettingService_UpdateOrderSettingDefaultStatus_Handler,
		},
		{
			MethodName: "QueryDefaultSetting",
			Handler:    _OrderSettingService_QueryDefaultSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}
