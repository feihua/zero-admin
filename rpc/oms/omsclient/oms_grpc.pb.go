// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/oms/oms.proto

package omsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CartItemService_AddCartItem_FullMethodName            = "/omsclient.CartItemService/AddCartItem"
	CartItemService_DeleteCartItem_FullMethodName         = "/omsclient.CartItemService/DeleteCartItem"
	CartItemService_UpdateCartItem_FullMethodName         = "/omsclient.CartItemService/UpdateCartItem"
	CartItemService_UpdateCartItemQuantity_FullMethodName = "/omsclient.CartItemService/UpdateCartItemQuantity"
	CartItemService_QueryCartItemDetail_FullMethodName    = "/omsclient.CartItemService/QueryCartItemDetail"
	CartItemService_QueryCartItemList_FullMethodName      = "/omsclient.CartItemService/QueryCartItemList"
)

// CartItemServiceClient is the client API for CartItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartItemServiceClient interface {
	// 添加购物车表
	AddCartItem(ctx context.Context, in *AddCartItemReq, opts ...grpc.CallOption) (*AddCartItemResp, error)
	// 删除购物车表
	DeleteCartItem(ctx context.Context, in *DeleteCartItemReq, opts ...grpc.CallOption) (*DeleteCartItemResp, error)
	// 更新购物车表
	UpdateCartItem(ctx context.Context, in *UpdateCartItemReq, opts ...grpc.CallOption) (*UpdateCartItemResp, error)
	// 修改购物车中某个商品的数量
	UpdateCartItemQuantity(ctx context.Context, in *UpdateCartItemQuantityReq, opts ...grpc.CallOption) (*UpdateCartItemQuantityResp, error)
	// 查询购物车表详情
	QueryCartItemDetail(ctx context.Context, in *QueryCartItemDetailReq, opts ...grpc.CallOption) (*QueryCartItemDetailResp, error)
	// 查询购物车表列表
	QueryCartItemList(ctx context.Context, in *QueryCartItemListReq, opts ...grpc.CallOption) (*QueryCartItemListResp, error)
}

type cartItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartItemServiceClient(cc grpc.ClientConnInterface) CartItemServiceClient {
	return &cartItemServiceClient{cc}
}

func (c *cartItemServiceClient) AddCartItem(ctx context.Context, in *AddCartItemReq, opts ...grpc.CallOption) (*AddCartItemResp, error) {
	out := new(AddCartItemResp)
	err := c.cc.Invoke(ctx, CartItemService_AddCartItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) DeleteCartItem(ctx context.Context, in *DeleteCartItemReq, opts ...grpc.CallOption) (*DeleteCartItemResp, error) {
	out := new(DeleteCartItemResp)
	err := c.cc.Invoke(ctx, CartItemService_DeleteCartItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) UpdateCartItem(ctx context.Context, in *UpdateCartItemReq, opts ...grpc.CallOption) (*UpdateCartItemResp, error) {
	out := new(UpdateCartItemResp)
	err := c.cc.Invoke(ctx, CartItemService_UpdateCartItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) UpdateCartItemQuantity(ctx context.Context, in *UpdateCartItemQuantityReq, opts ...grpc.CallOption) (*UpdateCartItemQuantityResp, error) {
	out := new(UpdateCartItemQuantityResp)
	err := c.cc.Invoke(ctx, CartItemService_UpdateCartItemQuantity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) QueryCartItemDetail(ctx context.Context, in *QueryCartItemDetailReq, opts ...grpc.CallOption) (*QueryCartItemDetailResp, error) {
	out := new(QueryCartItemDetailResp)
	err := c.cc.Invoke(ctx, CartItemService_QueryCartItemDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) QueryCartItemList(ctx context.Context, in *QueryCartItemListReq, opts ...grpc.CallOption) (*QueryCartItemListResp, error) {
	out := new(QueryCartItemListResp)
	err := c.cc.Invoke(ctx, CartItemService_QueryCartItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartItemServiceServer is the server API for CartItemService service.
// All implementations must embed UnimplementedCartItemServiceServer
// for forward compatibility
type CartItemServiceServer interface {
	// 添加购物车表
	AddCartItem(context.Context, *AddCartItemReq) (*AddCartItemResp, error)
	// 删除购物车表
	DeleteCartItem(context.Context, *DeleteCartItemReq) (*DeleteCartItemResp, error)
	// 更新购物车表
	UpdateCartItem(context.Context, *UpdateCartItemReq) (*UpdateCartItemResp, error)
	// 修改购物车中某个商品的数量
	UpdateCartItemQuantity(context.Context, *UpdateCartItemQuantityReq) (*UpdateCartItemQuantityResp, error)
	// 查询购物车表详情
	QueryCartItemDetail(context.Context, *QueryCartItemDetailReq) (*QueryCartItemDetailResp, error)
	// 查询购物车表列表
	QueryCartItemList(context.Context, *QueryCartItemListReq) (*QueryCartItemListResp, error)
	mustEmbedUnimplementedCartItemServiceServer()
}

// UnimplementedCartItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartItemServiceServer struct {
}

func (UnimplementedCartItemServiceServer) AddCartItem(context.Context, *AddCartItemReq) (*AddCartItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedCartItemServiceServer) DeleteCartItem(context.Context, *DeleteCartItemReq) (*DeleteCartItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItem not implemented")
}
func (UnimplementedCartItemServiceServer) UpdateCartItem(context.Context, *UpdateCartItemReq) (*UpdateCartItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedCartItemServiceServer) UpdateCartItemQuantity(context.Context, *UpdateCartItemQuantityReq) (*UpdateCartItemQuantityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItemQuantity not implemented")
}
func (UnimplementedCartItemServiceServer) QueryCartItemDetail(context.Context, *QueryCartItemDetailReq) (*QueryCartItemDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCartItemDetail not implemented")
}
func (UnimplementedCartItemServiceServer) QueryCartItemList(context.Context, *QueryCartItemListReq) (*QueryCartItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCartItemList not implemented")
}
func (UnimplementedCartItemServiceServer) mustEmbedUnimplementedCartItemServiceServer() {}

// UnsafeCartItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartItemServiceServer will
// result in compilation errors.
type UnsafeCartItemServiceServer interface {
	mustEmbedUnimplementedCartItemServiceServer()
}

func RegisterCartItemServiceServer(s grpc.ServiceRegistrar, srv CartItemServiceServer) {
	s.RegisterService(&CartItemService_ServiceDesc, srv)
}

func _CartItemService_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_AddCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).AddCartItem(ctx, req.(*AddCartItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_DeleteCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).DeleteCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_DeleteCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).DeleteCartItem(ctx, req.(*DeleteCartItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_UpdateCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).UpdateCartItem(ctx, req.(*UpdateCartItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_UpdateCartItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).UpdateCartItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_UpdateCartItemQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).UpdateCartItemQuantity(ctx, req.(*UpdateCartItemQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_QueryCartItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCartItemDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).QueryCartItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_QueryCartItemDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).QueryCartItemDetail(ctx, req.(*QueryCartItemDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_QueryCartItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCartItemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).QueryCartItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_QueryCartItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).QueryCartItemList(ctx, req.(*QueryCartItemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CartItemService_ServiceDesc is the grpc.ServiceDesc for CartItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.CartItemService",
	HandlerType: (*CartItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCartItem",
			Handler:    _CartItemService_AddCartItem_Handler,
		},
		{
			MethodName: "DeleteCartItem",
			Handler:    _CartItemService_DeleteCartItem_Handler,
		},
		{
			MethodName: "UpdateCartItem",
			Handler:    _CartItemService_UpdateCartItem_Handler,
		},
		{
			MethodName: "UpdateCartItemQuantity",
			Handler:    _CartItemService_UpdateCartItemQuantity_Handler,
		},
		{
			MethodName: "QueryCartItemDetail",
			Handler:    _CartItemService_QueryCartItemDetail_Handler,
		},
		{
			MethodName: "QueryCartItemList",
			Handler:    _CartItemService_QueryCartItemList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	CompanyAddressService_AddCompanyAddress_FullMethodName                 = "/omsclient.CompanyAddressService/AddCompanyAddress"
	CompanyAddressService_DeleteCompanyAddress_FullMethodName              = "/omsclient.CompanyAddressService/DeleteCompanyAddress"
	CompanyAddressService_UpdateCompanyAddress_FullMethodName              = "/omsclient.CompanyAddressService/UpdateCompanyAddress"
	CompanyAddressService_QueryCompanyAddressDetail_FullMethodName         = "/omsclient.CompanyAddressService/QueryCompanyAddressDetail"
	CompanyAddressService_QueryCompanyAddressList_FullMethodName           = "/omsclient.CompanyAddressService/QueryCompanyAddressList"
	CompanyAddressService_UpdateCompanyAddressSendStatus_FullMethodName    = "/omsclient.CompanyAddressService/UpdateCompanyAddressSendStatus"
	CompanyAddressService_UpdateCompanyAddressReceiveStatus_FullMethodName = "/omsclient.CompanyAddressService/UpdateCompanyAddressReceiveStatus"
)

// CompanyAddressServiceClient is the client API for CompanyAddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyAddressServiceClient interface {
	// 添加公司收发货地址
	AddCompanyAddress(ctx context.Context, in *AddCompanyAddressReq, opts ...grpc.CallOption) (*AddCompanyAddressResp, error)
	// 删除公司收发货地址
	DeleteCompanyAddress(ctx context.Context, in *DeleteCompanyAddressReq, opts ...grpc.CallOption) (*DeleteCompanyAddressResp, error)
	// 更新公司收发货地址
	UpdateCompanyAddress(ctx context.Context, in *UpdateCompanyAddressReq, opts ...grpc.CallOption) (*UpdateCompanyAddressResp, error)
	// 查询公司收发货地址详情
	QueryCompanyAddressDetail(ctx context.Context, in *QueryCompanyAddressDetailReq, opts ...grpc.CallOption) (*QueryCompanyAddressDetailResp, error)
	// 查询公司收发货地址列表
	QueryCompanyAddressList(ctx context.Context, in *QueryCompanyAddressListReq, opts ...grpc.CallOption) (*QueryCompanyAddressListResp, error)
	// 更新公司默认发货地址
	UpdateCompanyAddressSendStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error)
	// 更新公司默认收货地址
	UpdateCompanyAddressReceiveStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error)
}

type companyAddressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyAddressServiceClient(cc grpc.ClientConnInterface) CompanyAddressServiceClient {
	return &companyAddressServiceClient{cc}
}

func (c *companyAddressServiceClient) AddCompanyAddress(ctx context.Context, in *AddCompanyAddressReq, opts ...grpc.CallOption) (*AddCompanyAddressResp, error) {
	out := new(AddCompanyAddressResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_AddCompanyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) DeleteCompanyAddress(ctx context.Context, in *DeleteCompanyAddressReq, opts ...grpc.CallOption) (*DeleteCompanyAddressResp, error) {
	out := new(DeleteCompanyAddressResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_DeleteCompanyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) UpdateCompanyAddress(ctx context.Context, in *UpdateCompanyAddressReq, opts ...grpc.CallOption) (*UpdateCompanyAddressResp, error) {
	out := new(UpdateCompanyAddressResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_UpdateCompanyAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) QueryCompanyAddressDetail(ctx context.Context, in *QueryCompanyAddressDetailReq, opts ...grpc.CallOption) (*QueryCompanyAddressDetailResp, error) {
	out := new(QueryCompanyAddressDetailResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_QueryCompanyAddressDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) QueryCompanyAddressList(ctx context.Context, in *QueryCompanyAddressListReq, opts ...grpc.CallOption) (*QueryCompanyAddressListResp, error) {
	out := new(QueryCompanyAddressListResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_QueryCompanyAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) UpdateCompanyAddressSendStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error) {
	out := new(UpdateCompanyAddressStatusResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_UpdateCompanyAddressSendStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAddressServiceClient) UpdateCompanyAddressReceiveStatus(ctx context.Context, in *UpdateCompanyAddressStatusReq, opts ...grpc.CallOption) (*UpdateCompanyAddressStatusResp, error) {
	out := new(UpdateCompanyAddressStatusResp)
	err := c.cc.Invoke(ctx, CompanyAddressService_UpdateCompanyAddressReceiveStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyAddressServiceServer is the server API for CompanyAddressService service.
// All implementations must embed UnimplementedCompanyAddressServiceServer
// for forward compatibility
type CompanyAddressServiceServer interface {
	// 添加公司收发货地址
	AddCompanyAddress(context.Context, *AddCompanyAddressReq) (*AddCompanyAddressResp, error)
	// 删除公司收发货地址
	DeleteCompanyAddress(context.Context, *DeleteCompanyAddressReq) (*DeleteCompanyAddressResp, error)
	// 更新公司收发货地址
	UpdateCompanyAddress(context.Context, *UpdateCompanyAddressReq) (*UpdateCompanyAddressResp, error)
	// 查询公司收发货地址详情
	QueryCompanyAddressDetail(context.Context, *QueryCompanyAddressDetailReq) (*QueryCompanyAddressDetailResp, error)
	// 查询公司收发货地址列表
	QueryCompanyAddressList(context.Context, *QueryCompanyAddressListReq) (*QueryCompanyAddressListResp, error)
	// 更新公司默认发货地址
	UpdateCompanyAddressSendStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error)
	// 更新公司默认收货地址
	UpdateCompanyAddressReceiveStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error)
	mustEmbedUnimplementedCompanyAddressServiceServer()
}

// UnimplementedCompanyAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyAddressServiceServer struct {
}

func (UnimplementedCompanyAddressServiceServer) AddCompanyAddress(context.Context, *AddCompanyAddressReq) (*AddCompanyAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompanyAddress not implemented")
}
func (UnimplementedCompanyAddressServiceServer) DeleteCompanyAddress(context.Context, *DeleteCompanyAddressReq) (*DeleteCompanyAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyAddress not implemented")
}
func (UnimplementedCompanyAddressServiceServer) UpdateCompanyAddress(context.Context, *UpdateCompanyAddressReq) (*UpdateCompanyAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyAddress not implemented")
}
func (UnimplementedCompanyAddressServiceServer) QueryCompanyAddressDetail(context.Context, *QueryCompanyAddressDetailReq) (*QueryCompanyAddressDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCompanyAddressDetail not implemented")
}
func (UnimplementedCompanyAddressServiceServer) QueryCompanyAddressList(context.Context, *QueryCompanyAddressListReq) (*QueryCompanyAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCompanyAddressList not implemented")
}
func (UnimplementedCompanyAddressServiceServer) UpdateCompanyAddressSendStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyAddressSendStatus not implemented")
}
func (UnimplementedCompanyAddressServiceServer) UpdateCompanyAddressReceiveStatus(context.Context, *UpdateCompanyAddressStatusReq) (*UpdateCompanyAddressStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyAddressReceiveStatus not implemented")
}
func (UnimplementedCompanyAddressServiceServer) mustEmbedUnimplementedCompanyAddressServiceServer() {}

// UnsafeCompanyAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyAddressServiceServer will
// result in compilation errors.
type UnsafeCompanyAddressServiceServer interface {
	mustEmbedUnimplementedCompanyAddressServiceServer()
}

func RegisterCompanyAddressServiceServer(s grpc.ServiceRegistrar, srv CompanyAddressServiceServer) {
	s.RegisterService(&CompanyAddressService_ServiceDesc, srv)
}

func _CompanyAddressService_AddCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompanyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).AddCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_AddCompanyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).AddCompanyAddress(ctx, req.(*AddCompanyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_DeleteCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).DeleteCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_DeleteCompanyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).DeleteCompanyAddress(ctx, req.(*DeleteCompanyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_UpdateCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_UpdateCompanyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddress(ctx, req.(*UpdateCompanyAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_QueryCompanyAddressDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCompanyAddressDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_QueryCompanyAddressDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressDetail(ctx, req.(*QueryCompanyAddressDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_QueryCompanyAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCompanyAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_QueryCompanyAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).QueryCompanyAddressList(ctx, req.(*QueryCompanyAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_UpdateCompanyAddressSendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyAddressStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressSendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_UpdateCompanyAddressSendStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressSendStatus(ctx, req.(*UpdateCompanyAddressStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAddressService_UpdateCompanyAddressReceiveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyAddressStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressReceiveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyAddressService_UpdateCompanyAddressReceiveStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAddressServiceServer).UpdateCompanyAddressReceiveStatus(ctx, req.(*UpdateCompanyAddressStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyAddressService_ServiceDesc is the grpc.ServiceDesc for CompanyAddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyAddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.CompanyAddressService",
	HandlerType: (*CompanyAddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCompanyAddress",
			Handler:    _CompanyAddressService_AddCompanyAddress_Handler,
		},
		{
			MethodName: "DeleteCompanyAddress",
			Handler:    _CompanyAddressService_DeleteCompanyAddress_Handler,
		},
		{
			MethodName: "UpdateCompanyAddress",
			Handler:    _CompanyAddressService_UpdateCompanyAddress_Handler,
		},
		{
			MethodName: "QueryCompanyAddressDetail",
			Handler:    _CompanyAddressService_QueryCompanyAddressDetail_Handler,
		},
		{
			MethodName: "QueryCompanyAddressList",
			Handler:    _CompanyAddressService_QueryCompanyAddressList_Handler,
		},
		{
			MethodName: "UpdateCompanyAddressSendStatus",
			Handler:    _CompanyAddressService_UpdateCompanyAddressSendStatus_Handler,
		},
		{
			MethodName: "UpdateCompanyAddressReceiveStatus",
			Handler:    _CompanyAddressService_UpdateCompanyAddressReceiveStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderDeliveryService_AddOrderDelivery_FullMethodName         = "/omsclient.OrderDeliveryService/AddOrderDelivery"
	OrderDeliveryService_DeleteOrderDelivery_FullMethodName      = "/omsclient.OrderDeliveryService/DeleteOrderDelivery"
	OrderDeliveryService_UpdateOrderDelivery_FullMethodName      = "/omsclient.OrderDeliveryService/UpdateOrderDelivery"
	OrderDeliveryService_QueryOrderDeliveryDetail_FullMethodName = "/omsclient.OrderDeliveryService/QueryOrderDeliveryDetail"
	OrderDeliveryService_QueryOrderDeliveryList_FullMethodName   = "/omsclient.OrderDeliveryService/QueryOrderDeliveryList"
)

// OrderDeliveryServiceClient is the client API for OrderDeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderDeliveryServiceClient interface {
	// 添加订单收货地址
	AddOrderDelivery(ctx context.Context, in *AddOrderDeliveryReq, opts ...grpc.CallOption) (*AddOrderDeliveryResp, error)
	// 删除订单收货地址
	DeleteOrderDelivery(ctx context.Context, in *DeleteOrderDeliveryReq, opts ...grpc.CallOption) (*DeleteOrderDeliveryResp, error)
	// 更新订单收货地址
	UpdateOrderDelivery(ctx context.Context, in *UpdateOrderDeliveryReq, opts ...grpc.CallOption) (*UpdateOrderDeliveryResp, error)
	// 查询订单收货地址详情
	QueryOrderDeliveryDetail(ctx context.Context, in *QueryOrderDeliveryDetailReq, opts ...grpc.CallOption) (*QueryOrderDeliveryDetailResp, error)
	// 查询订单收货地址列表
	QueryOrderDeliveryList(ctx context.Context, in *QueryOrderDeliveryListReq, opts ...grpc.CallOption) (*QueryOrderDeliveryListResp, error)
}

type orderDeliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderDeliveryServiceClient(cc grpc.ClientConnInterface) OrderDeliveryServiceClient {
	return &orderDeliveryServiceClient{cc}
}

func (c *orderDeliveryServiceClient) AddOrderDelivery(ctx context.Context, in *AddOrderDeliveryReq, opts ...grpc.CallOption) (*AddOrderDeliveryResp, error) {
	out := new(AddOrderDeliveryResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_AddOrderDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) DeleteOrderDelivery(ctx context.Context, in *DeleteOrderDeliveryReq, opts ...grpc.CallOption) (*DeleteOrderDeliveryResp, error) {
	out := new(DeleteOrderDeliveryResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_DeleteOrderDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) UpdateOrderDelivery(ctx context.Context, in *UpdateOrderDeliveryReq, opts ...grpc.CallOption) (*UpdateOrderDeliveryResp, error) {
	out := new(UpdateOrderDeliveryResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_UpdateOrderDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) QueryOrderDeliveryDetail(ctx context.Context, in *QueryOrderDeliveryDetailReq, opts ...grpc.CallOption) (*QueryOrderDeliveryDetailResp, error) {
	out := new(QueryOrderDeliveryDetailResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_QueryOrderDeliveryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDeliveryServiceClient) QueryOrderDeliveryList(ctx context.Context, in *QueryOrderDeliveryListReq, opts ...grpc.CallOption) (*QueryOrderDeliveryListResp, error) {
	out := new(QueryOrderDeliveryListResp)
	err := c.cc.Invoke(ctx, OrderDeliveryService_QueryOrderDeliveryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderDeliveryServiceServer is the server API for OrderDeliveryService service.
// All implementations must embed UnimplementedOrderDeliveryServiceServer
// for forward compatibility
type OrderDeliveryServiceServer interface {
	// 添加订单收货地址
	AddOrderDelivery(context.Context, *AddOrderDeliveryReq) (*AddOrderDeliveryResp, error)
	// 删除订单收货地址
	DeleteOrderDelivery(context.Context, *DeleteOrderDeliveryReq) (*DeleteOrderDeliveryResp, error)
	// 更新订单收货地址
	UpdateOrderDelivery(context.Context, *UpdateOrderDeliveryReq) (*UpdateOrderDeliveryResp, error)
	// 查询订单收货地址详情
	QueryOrderDeliveryDetail(context.Context, *QueryOrderDeliveryDetailReq) (*QueryOrderDeliveryDetailResp, error)
	// 查询订单收货地址列表
	QueryOrderDeliveryList(context.Context, *QueryOrderDeliveryListReq) (*QueryOrderDeliveryListResp, error)
	mustEmbedUnimplementedOrderDeliveryServiceServer()
}

// UnimplementedOrderDeliveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderDeliveryServiceServer struct {
}

func (UnimplementedOrderDeliveryServiceServer) AddOrderDelivery(context.Context, *AddOrderDeliveryReq) (*AddOrderDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderDelivery not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) DeleteOrderDelivery(context.Context, *DeleteOrderDeliveryReq) (*DeleteOrderDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderDelivery not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) UpdateOrderDelivery(context.Context, *UpdateOrderDeliveryReq) (*UpdateOrderDeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderDelivery not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) QueryOrderDeliveryDetail(context.Context, *QueryOrderDeliveryDetailReq) (*QueryOrderDeliveryDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderDeliveryDetail not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) QueryOrderDeliveryList(context.Context, *QueryOrderDeliveryListReq) (*QueryOrderDeliveryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderDeliveryList not implemented")
}
func (UnimplementedOrderDeliveryServiceServer) mustEmbedUnimplementedOrderDeliveryServiceServer() {}

// UnsafeOrderDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderDeliveryServiceServer will
// result in compilation errors.
type UnsafeOrderDeliveryServiceServer interface {
	mustEmbedUnimplementedOrderDeliveryServiceServer()
}

func RegisterOrderDeliveryServiceServer(s grpc.ServiceRegistrar, srv OrderDeliveryServiceServer) {
	s.RegisterService(&OrderDeliveryService_ServiceDesc, srv)
}

func _OrderDeliveryService_AddOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).AddOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_AddOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).AddOrderDelivery(ctx, req.(*AddOrderDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_DeleteOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).DeleteOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_DeleteOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).DeleteOrderDelivery(ctx, req.(*DeleteOrderDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_UpdateOrderDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderDeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).UpdateOrderDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_UpdateOrderDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).UpdateOrderDelivery(ctx, req.(*UpdateOrderDeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_QueryOrderDeliveryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderDeliveryDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_QueryOrderDeliveryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryDetail(ctx, req.(*QueryOrderDeliveryDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDeliveryService_QueryOrderDeliveryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderDeliveryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDeliveryService_QueryOrderDeliveryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDeliveryServiceServer).QueryOrderDeliveryList(ctx, req.(*QueryOrderDeliveryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderDeliveryService_ServiceDesc is the grpc.ServiceDesc for OrderDeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderDeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderDeliveryService",
	HandlerType: (*OrderDeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderDelivery",
			Handler:    _OrderDeliveryService_AddOrderDelivery_Handler,
		},
		{
			MethodName: "DeleteOrderDelivery",
			Handler:    _OrderDeliveryService_DeleteOrderDelivery_Handler,
		},
		{
			MethodName: "UpdateOrderDelivery",
			Handler:    _OrderDeliveryService_UpdateOrderDelivery_Handler,
		},
		{
			MethodName: "QueryOrderDeliveryDetail",
			Handler:    _OrderDeliveryService_QueryOrderDeliveryDetail_Handler,
		},
		{
			MethodName: "QueryOrderDeliveryList",
			Handler:    _OrderDeliveryService_QueryOrderDeliveryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderService_AddOrder_FullMethodName              = "/omsclient.OrderService/AddOrder"
	OrderService_DeleteOrder_FullMethodName           = "/omsclient.OrderService/DeleteOrder"
	OrderService_UpdateOrder_FullMethodName           = "/omsclient.OrderService/UpdateOrder"
	OrderService_UpdateOrderStatus_FullMethodName     = "/omsclient.OrderService/UpdateOrderStatus"
	OrderService_QueryOrderDetail_FullMethodName      = "/omsclient.OrderService/QueryOrderDetail"
	OrderService_QueryOrderList_FullMethodName        = "/omsclient.OrderService/QueryOrderList"
	OrderService_Delivery_FullMethodName              = "/omsclient.OrderService/Delivery"
	OrderService_CloseOrder_FullMethodName            = "/omsclient.OrderService/CloseOrder"
	OrderService_CancelOrder_FullMethodName           = "/omsclient.OrderService/CancelOrder"
	OrderService_ConfirmOrder_FullMethodName          = "/omsclient.OrderService/ConfirmOrder"
	OrderService_QueryTimeOutOrderList_FullMethodName = "/omsclient.OrderService/QueryTimeOutOrderList"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// 添加订单(app)
	AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
	// 删除订单
	DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderResp, error)
	// 更新订单
	UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
	// 更新订单状态
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error)
	// 查询订单详情:订单信息、商品信息、操作记录
	QueryOrderDetail(ctx context.Context, in *QueryOrderDetailReq, opts ...grpc.CallOption) (*QueryOrderDetailResp, error)
	// 查询订单列表
	QueryOrderList(ctx context.Context, in *QueryOrderListReq, opts ...grpc.CallOption) (*QueryOrderListResp, error)
	// 订单发货
	Delivery(ctx context.Context, in *DeliveryReq, opts ...grpc.CallOption) (*DeliveryResp, error)
	// 关闭订单
	CloseOrder(ctx context.Context, in *CloseOrderReq, opts ...grpc.CallOption) (*CloseOrderResp, error)
	// 取消订单(app)
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderResp, error)
	// 确认收货(app)
	ConfirmOrder(ctx context.Context, in *ConfirmOrderReq, opts ...grpc.CallOption) (*ConfirmOrderResp, error)
	// 查询超时、未支付的订单及订单详情
	QueryTimeOutOrderList(ctx context.Context, in *QueryTimeOutOrderListReq, opts ...grpc.CallOption) (*QueryOrderListResp, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	out := new(AddOrderResp)
	err := c.cc.Invoke(ctx, OrderService_AddOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderResp, error) {
	out := new(DeleteOrderResp)
	err := c.cc.Invoke(ctx, OrderService_DeleteOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	out := new(UpdateOrderResp)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error) {
	out := new(UpdateOrderStatusResp)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) QueryOrderDetail(ctx context.Context, in *QueryOrderDetailReq, opts ...grpc.CallOption) (*QueryOrderDetailResp, error) {
	out := new(QueryOrderDetailResp)
	err := c.cc.Invoke(ctx, OrderService_QueryOrderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) QueryOrderList(ctx context.Context, in *QueryOrderListReq, opts ...grpc.CallOption) (*QueryOrderListResp, error) {
	out := new(QueryOrderListResp)
	err := c.cc.Invoke(ctx, OrderService_QueryOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Delivery(ctx context.Context, in *DeliveryReq, opts ...grpc.CallOption) (*DeliveryResp, error) {
	out := new(DeliveryResp)
	err := c.cc.Invoke(ctx, OrderService_Delivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CloseOrder(ctx context.Context, in *CloseOrderReq, opts ...grpc.CallOption) (*CloseOrderResp, error) {
	out := new(CloseOrderResp)
	err := c.cc.Invoke(ctx, OrderService_CloseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderResp, error) {
	out := new(CancelOrderResp)
	err := c.cc.Invoke(ctx, OrderService_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ConfirmOrder(ctx context.Context, in *ConfirmOrderReq, opts ...grpc.CallOption) (*ConfirmOrderResp, error) {
	out := new(ConfirmOrderResp)
	err := c.cc.Invoke(ctx, OrderService_ConfirmOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) QueryTimeOutOrderList(ctx context.Context, in *QueryTimeOutOrderListReq, opts ...grpc.CallOption) (*QueryOrderListResp, error) {
	out := new(QueryOrderListResp)
	err := c.cc.Invoke(ctx, OrderService_QueryTimeOutOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// 添加订单(app)
	AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error)
	// 删除订单
	DeleteOrder(context.Context, *DeleteOrderReq) (*DeleteOrderResp, error)
	// 更新订单
	UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error)
	// 更新订单状态
	UpdateOrderStatus(context.Context, *UpdateOrderStatusReq) (*UpdateOrderStatusResp, error)
	// 查询订单详情:订单信息、商品信息、操作记录
	QueryOrderDetail(context.Context, *QueryOrderDetailReq) (*QueryOrderDetailResp, error)
	// 查询订单列表
	QueryOrderList(context.Context, *QueryOrderListReq) (*QueryOrderListResp, error)
	// 订单发货
	Delivery(context.Context, *DeliveryReq) (*DeliveryResp, error)
	// 关闭订单
	CloseOrder(context.Context, *CloseOrderReq) (*CloseOrderResp, error)
	// 取消订单(app)
	CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderResp, error)
	// 确认收货(app)
	ConfirmOrder(context.Context, *ConfirmOrderReq) (*ConfirmOrderResp, error)
	// 查询超时、未支付的订单及订单详情
	QueryTimeOutOrderList(context.Context, *QueryTimeOutOrderListReq) (*QueryOrderListResp, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedOrderServiceServer) DeleteOrder(context.Context, *DeleteOrderReq) (*DeleteOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusReq) (*UpdateOrderStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) QueryOrderDetail(context.Context, *QueryOrderDetailReq) (*QueryOrderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderDetail not implemented")
}
func (UnimplementedOrderServiceServer) QueryOrderList(context.Context, *QueryOrderListReq) (*QueryOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderList not implemented")
}
func (UnimplementedOrderServiceServer) Delivery(context.Context, *DeliveryReq) (*DeliveryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delivery not implemented")
}
func (UnimplementedOrderServiceServer) CloseOrder(context.Context, *CloseOrderReq) (*CloseOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) ConfirmOrder(context.Context, *ConfirmOrderReq) (*ConfirmOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmOrder not implemented")
}
func (UnimplementedOrderServiceServer) QueryTimeOutOrderList(context.Context, *QueryTimeOutOrderListReq) (*QueryOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTimeOutOrderList not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddOrder(ctx, req.(*AddOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteOrder(ctx, req.(*DeleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrder(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_QueryOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueryOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_QueryOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueryOrderDetail(ctx, req.(*QueryOrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_QueryOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueryOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_QueryOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueryOrderList(ctx, req.(*QueryOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Delivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Delivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Delivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Delivery(ctx, req.(*DeliveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CloseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CloseOrder(ctx, req.(*CloseOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ConfirmOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ConfirmOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ConfirmOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ConfirmOrder(ctx, req.(*ConfirmOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_QueryTimeOutOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimeOutOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueryTimeOutOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_QueryTimeOutOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueryTimeOutOrderList(ctx, req.(*QueryTimeOutOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _OrderService_AddOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _OrderService_DeleteOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderService_UpdateOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _OrderService_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "QueryOrderDetail",
			Handler:    _OrderService_QueryOrderDetail_Handler,
		},
		{
			MethodName: "QueryOrderList",
			Handler:    _OrderService_QueryOrderList_Handler,
		},
		{
			MethodName: "Delivery",
			Handler:    _OrderService_Delivery_Handler,
		},
		{
			MethodName: "CloseOrder",
			Handler:    _OrderService_CloseOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "ConfirmOrder",
			Handler:    _OrderService_ConfirmOrder_Handler,
		},
		{
			MethodName: "QueryTimeOutOrderList",
			Handler:    _OrderService_QueryTimeOutOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderOperationLogService_AddOrderOperationLog_FullMethodName         = "/omsclient.OrderOperationLogService/AddOrderOperationLog"
	OrderOperationLogService_QueryOrderOperationLogDetail_FullMethodName = "/omsclient.OrderOperationLogService/QueryOrderOperationLogDetail"
	OrderOperationLogService_QueryOrderOperationLogList_FullMethodName   = "/omsclient.OrderOperationLogService/QueryOrderOperationLogList"
)

// OrderOperationLogServiceClient is the client API for OrderOperationLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderOperationLogServiceClient interface {
	// 添加订单操作记录
	AddOrderOperationLog(ctx context.Context, in *AddOrderOperationLogReq, opts ...grpc.CallOption) (*AddOrderOperationLogResp, error)
	// 查询订单操作记录详情
	QueryOrderOperationLogDetail(ctx context.Context, in *QueryOrderOperationLogDetailReq, opts ...grpc.CallOption) (*OrderOperationLogData, error)
	// 查询订单操作记录列表
	QueryOrderOperationLogList(ctx context.Context, in *QueryOrderOperationLogListReq, opts ...grpc.CallOption) (*QueryOrderOperationLogListResp, error)
}

type orderOperationLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderOperationLogServiceClient(cc grpc.ClientConnInterface) OrderOperationLogServiceClient {
	return &orderOperationLogServiceClient{cc}
}

func (c *orderOperationLogServiceClient) AddOrderOperationLog(ctx context.Context, in *AddOrderOperationLogReq, opts ...grpc.CallOption) (*AddOrderOperationLogResp, error) {
	out := new(AddOrderOperationLogResp)
	err := c.cc.Invoke(ctx, OrderOperationLogService_AddOrderOperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderOperationLogServiceClient) QueryOrderOperationLogDetail(ctx context.Context, in *QueryOrderOperationLogDetailReq, opts ...grpc.CallOption) (*OrderOperationLogData, error) {
	out := new(OrderOperationLogData)
	err := c.cc.Invoke(ctx, OrderOperationLogService_QueryOrderOperationLogDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderOperationLogServiceClient) QueryOrderOperationLogList(ctx context.Context, in *QueryOrderOperationLogListReq, opts ...grpc.CallOption) (*QueryOrderOperationLogListResp, error) {
	out := new(QueryOrderOperationLogListResp)
	err := c.cc.Invoke(ctx, OrderOperationLogService_QueryOrderOperationLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderOperationLogServiceServer is the server API for OrderOperationLogService service.
// All implementations must embed UnimplementedOrderOperationLogServiceServer
// for forward compatibility
type OrderOperationLogServiceServer interface {
	// 添加订单操作记录
	AddOrderOperationLog(context.Context, *AddOrderOperationLogReq) (*AddOrderOperationLogResp, error)
	// 查询订单操作记录详情
	QueryOrderOperationLogDetail(context.Context, *QueryOrderOperationLogDetailReq) (*OrderOperationLogData, error)
	// 查询订单操作记录列表
	QueryOrderOperationLogList(context.Context, *QueryOrderOperationLogListReq) (*QueryOrderOperationLogListResp, error)
	mustEmbedUnimplementedOrderOperationLogServiceServer()
}

// UnimplementedOrderOperationLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderOperationLogServiceServer struct {
}

func (UnimplementedOrderOperationLogServiceServer) AddOrderOperationLog(context.Context, *AddOrderOperationLogReq) (*AddOrderOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderOperationLog not implemented")
}
func (UnimplementedOrderOperationLogServiceServer) QueryOrderOperationLogDetail(context.Context, *QueryOrderOperationLogDetailReq) (*OrderOperationLogData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderOperationLogDetail not implemented")
}
func (UnimplementedOrderOperationLogServiceServer) QueryOrderOperationLogList(context.Context, *QueryOrderOperationLogListReq) (*QueryOrderOperationLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderOperationLogList not implemented")
}
func (UnimplementedOrderOperationLogServiceServer) mustEmbedUnimplementedOrderOperationLogServiceServer() {
}

// UnsafeOrderOperationLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderOperationLogServiceServer will
// result in compilation errors.
type UnsafeOrderOperationLogServiceServer interface {
	mustEmbedUnimplementedOrderOperationLogServiceServer()
}

func RegisterOrderOperationLogServiceServer(s grpc.ServiceRegistrar, srv OrderOperationLogServiceServer) {
	s.RegisterService(&OrderOperationLogService_ServiceDesc, srv)
}

func _OrderOperationLogService_AddOrderOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderOperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderOperationLogServiceServer).AddOrderOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderOperationLogService_AddOrderOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderOperationLogServiceServer).AddOrderOperationLog(ctx, req.(*AddOrderOperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderOperationLogService_QueryOrderOperationLogDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderOperationLogDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderOperationLogServiceServer).QueryOrderOperationLogDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderOperationLogService_QueryOrderOperationLogDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderOperationLogServiceServer).QueryOrderOperationLogDetail(ctx, req.(*QueryOrderOperationLogDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderOperationLogService_QueryOrderOperationLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderOperationLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderOperationLogServiceServer).QueryOrderOperationLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderOperationLogService_QueryOrderOperationLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderOperationLogServiceServer).QueryOrderOperationLogList(ctx, req.(*QueryOrderOperationLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderOperationLogService_ServiceDesc is the grpc.ServiceDesc for OrderOperationLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderOperationLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderOperationLogService",
	HandlerType: (*OrderOperationLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderOperationLog",
			Handler:    _OrderOperationLogService_AddOrderOperationLog_Handler,
		},
		{
			MethodName: "QueryOrderOperationLogDetail",
			Handler:    _OrderOperationLogService_QueryOrderOperationLogDetail_Handler,
		},
		{
			MethodName: "QueryOrderOperationLogList",
			Handler:    _OrderOperationLogService_QueryOrderOperationLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderPaymentService_AddOrderPayment_FullMethodName          = "/omsclient.OrderPaymentService/AddOrderPayment"
	OrderPaymentService_UpdateOrderPaymentStatus_FullMethodName = "/omsclient.OrderPaymentService/UpdateOrderPaymentStatus"
	OrderPaymentService_QueryOrderPaymentDetail_FullMethodName  = "/omsclient.OrderPaymentService/QueryOrderPaymentDetail"
	OrderPaymentService_QueryOrderPaymentList_FullMethodName    = "/omsclient.OrderPaymentService/QueryOrderPaymentList"
)

// OrderPaymentServiceClient is the client API for OrderPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderPaymentServiceClient interface {
	// 添加订单支付
	AddOrderPayment(ctx context.Context, in *OrderPaymentReq, opts ...grpc.CallOption) (*OrderPaymentResp, error)
	// 更新订单支付状态
	UpdateOrderPaymentStatus(ctx context.Context, in *UpdateOrderPaymentStatusReq, opts ...grpc.CallOption) (*OrderPaymentResp, error)
	// 查询订单支付详情
	QueryOrderPaymentDetail(ctx context.Context, in *QueryOrderPaymentDetailReq, opts ...grpc.CallOption) (*OrderPaymentData, error)
	// 查询订单支付列表
	QueryOrderPaymentList(ctx context.Context, in *QueryOrderPaymentListReq, opts ...grpc.CallOption) (*QueryOrderPaymentListResp, error)
}

type orderPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderPaymentServiceClient(cc grpc.ClientConnInterface) OrderPaymentServiceClient {
	return &orderPaymentServiceClient{cc}
}

func (c *orderPaymentServiceClient) AddOrderPayment(ctx context.Context, in *OrderPaymentReq, opts ...grpc.CallOption) (*OrderPaymentResp, error) {
	out := new(OrderPaymentResp)
	err := c.cc.Invoke(ctx, OrderPaymentService_AddOrderPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPaymentServiceClient) UpdateOrderPaymentStatus(ctx context.Context, in *UpdateOrderPaymentStatusReq, opts ...grpc.CallOption) (*OrderPaymentResp, error) {
	out := new(OrderPaymentResp)
	err := c.cc.Invoke(ctx, OrderPaymentService_UpdateOrderPaymentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPaymentServiceClient) QueryOrderPaymentDetail(ctx context.Context, in *QueryOrderPaymentDetailReq, opts ...grpc.CallOption) (*OrderPaymentData, error) {
	out := new(OrderPaymentData)
	err := c.cc.Invoke(ctx, OrderPaymentService_QueryOrderPaymentDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPaymentServiceClient) QueryOrderPaymentList(ctx context.Context, in *QueryOrderPaymentListReq, opts ...grpc.CallOption) (*QueryOrderPaymentListResp, error) {
	out := new(QueryOrderPaymentListResp)
	err := c.cc.Invoke(ctx, OrderPaymentService_QueryOrderPaymentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderPaymentServiceServer is the server API for OrderPaymentService service.
// All implementations must embed UnimplementedOrderPaymentServiceServer
// for forward compatibility
type OrderPaymentServiceServer interface {
	// 添加订单支付
	AddOrderPayment(context.Context, *OrderPaymentReq) (*OrderPaymentResp, error)
	// 更新订单支付状态
	UpdateOrderPaymentStatus(context.Context, *UpdateOrderPaymentStatusReq) (*OrderPaymentResp, error)
	// 查询订单支付详情
	QueryOrderPaymentDetail(context.Context, *QueryOrderPaymentDetailReq) (*OrderPaymentData, error)
	// 查询订单支付列表
	QueryOrderPaymentList(context.Context, *QueryOrderPaymentListReq) (*QueryOrderPaymentListResp, error)
	mustEmbedUnimplementedOrderPaymentServiceServer()
}

// UnimplementedOrderPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderPaymentServiceServer struct {
}

func (UnimplementedOrderPaymentServiceServer) AddOrderPayment(context.Context, *OrderPaymentReq) (*OrderPaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderPayment not implemented")
}
func (UnimplementedOrderPaymentServiceServer) UpdateOrderPaymentStatus(context.Context, *UpdateOrderPaymentStatusReq) (*OrderPaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderPaymentStatus not implemented")
}
func (UnimplementedOrderPaymentServiceServer) QueryOrderPaymentDetail(context.Context, *QueryOrderPaymentDetailReq) (*OrderPaymentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderPaymentDetail not implemented")
}
func (UnimplementedOrderPaymentServiceServer) QueryOrderPaymentList(context.Context, *QueryOrderPaymentListReq) (*QueryOrderPaymentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderPaymentList not implemented")
}
func (UnimplementedOrderPaymentServiceServer) mustEmbedUnimplementedOrderPaymentServiceServer() {}

// UnsafeOrderPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderPaymentServiceServer will
// result in compilation errors.
type UnsafeOrderPaymentServiceServer interface {
	mustEmbedUnimplementedOrderPaymentServiceServer()
}

func RegisterOrderPaymentServiceServer(s grpc.ServiceRegistrar, srv OrderPaymentServiceServer) {
	s.RegisterService(&OrderPaymentService_ServiceDesc, srv)
}

func _OrderPaymentService_AddOrderPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPaymentServiceServer).AddOrderPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPaymentService_AddOrderPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPaymentServiceServer).AddOrderPayment(ctx, req.(*OrderPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPaymentService_UpdateOrderPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderPaymentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPaymentServiceServer).UpdateOrderPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPaymentService_UpdateOrderPaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPaymentServiceServer).UpdateOrderPaymentStatus(ctx, req.(*UpdateOrderPaymentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPaymentService_QueryOrderPaymentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderPaymentDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPaymentServiceServer).QueryOrderPaymentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPaymentService_QueryOrderPaymentDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPaymentServiceServer).QueryOrderPaymentDetail(ctx, req.(*QueryOrderPaymentDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderPaymentService_QueryOrderPaymentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderPaymentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderPaymentServiceServer).QueryOrderPaymentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderPaymentService_QueryOrderPaymentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderPaymentServiceServer).QueryOrderPaymentList(ctx, req.(*QueryOrderPaymentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderPaymentService_ServiceDesc is the grpc.ServiceDesc for OrderPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderPaymentService",
	HandlerType: (*OrderPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderPayment",
			Handler:    _OrderPaymentService_AddOrderPayment_Handler,
		},
		{
			MethodName: "UpdateOrderPaymentStatus",
			Handler:    _OrderPaymentService_UpdateOrderPaymentStatus_Handler,
		},
		{
			MethodName: "QueryOrderPaymentDetail",
			Handler:    _OrderPaymentService_QueryOrderPaymentDetail_Handler,
		},
		{
			MethodName: "QueryOrderPaymentList",
			Handler:    _OrderPaymentService_QueryOrderPaymentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderReturnService_AddOrderReturn_FullMethodName          = "/omsclient.OrderReturnService/AddOrderReturn"
	OrderReturnService_DeleteOrderReturn_FullMethodName       = "/omsclient.OrderReturnService/DeleteOrderReturn"
	OrderReturnService_UpdateOrderReturn_FullMethodName       = "/omsclient.OrderReturnService/UpdateOrderReturn"
	OrderReturnService_UpdateOrderReturnStatus_FullMethodName = "/omsclient.OrderReturnService/UpdateOrderReturnStatus"
	OrderReturnService_QueryOrderReturnDetail_FullMethodName  = "/omsclient.OrderReturnService/QueryOrderReturnDetail"
	OrderReturnService_QueryOrderReturnList_FullMethodName    = "/omsclient.OrderReturnService/QueryOrderReturnList"
)

// OrderReturnServiceClient is the client API for OrderReturnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderReturnServiceClient interface {
	// 添加退货/售后
	AddOrderReturn(ctx context.Context, in *OrderReturnReq, opts ...grpc.CallOption) (*OrderReturnResp, error)
	// 删除退货/售后
	DeleteOrderReturn(ctx context.Context, in *DeleteOrderReturnReq, opts ...grpc.CallOption) (*OrderReturnResp, error)
	// 更新退货/售后
	UpdateOrderReturn(ctx context.Context, in *OrderReturnReq, opts ...grpc.CallOption) (*OrderReturnResp, error)
	// 更新退货/售后状态
	UpdateOrderReturnStatus(ctx context.Context, in *UpdateOrderReturnStatusReq, opts ...grpc.CallOption) (*OrderReturnResp, error)
	// 查询退货/售后详情
	QueryOrderReturnDetail(ctx context.Context, in *QueryOrderReturnDetailReq, opts ...grpc.CallOption) (*OrderReturnData, error)
	// 查询退货/售后列表
	QueryOrderReturnList(ctx context.Context, in *QueryOrderReturnListReq, opts ...grpc.CallOption) (*QueryOrderReturnListResp, error)
}

type orderReturnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderReturnServiceClient(cc grpc.ClientConnInterface) OrderReturnServiceClient {
	return &orderReturnServiceClient{cc}
}

func (c *orderReturnServiceClient) AddOrderReturn(ctx context.Context, in *OrderReturnReq, opts ...grpc.CallOption) (*OrderReturnResp, error) {
	out := new(OrderReturnResp)
	err := c.cc.Invoke(ctx, OrderReturnService_AddOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnServiceClient) DeleteOrderReturn(ctx context.Context, in *DeleteOrderReturnReq, opts ...grpc.CallOption) (*OrderReturnResp, error) {
	out := new(OrderReturnResp)
	err := c.cc.Invoke(ctx, OrderReturnService_DeleteOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnServiceClient) UpdateOrderReturn(ctx context.Context, in *OrderReturnReq, opts ...grpc.CallOption) (*OrderReturnResp, error) {
	out := new(OrderReturnResp)
	err := c.cc.Invoke(ctx, OrderReturnService_UpdateOrderReturn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnServiceClient) UpdateOrderReturnStatus(ctx context.Context, in *UpdateOrderReturnStatusReq, opts ...grpc.CallOption) (*OrderReturnResp, error) {
	out := new(OrderReturnResp)
	err := c.cc.Invoke(ctx, OrderReturnService_UpdateOrderReturnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnServiceClient) QueryOrderReturnDetail(ctx context.Context, in *QueryOrderReturnDetailReq, opts ...grpc.CallOption) (*OrderReturnData, error) {
	out := new(OrderReturnData)
	err := c.cc.Invoke(ctx, OrderReturnService_QueryOrderReturnDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnServiceClient) QueryOrderReturnList(ctx context.Context, in *QueryOrderReturnListReq, opts ...grpc.CallOption) (*QueryOrderReturnListResp, error) {
	out := new(QueryOrderReturnListResp)
	err := c.cc.Invoke(ctx, OrderReturnService_QueryOrderReturnList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderReturnServiceServer is the server API for OrderReturnService service.
// All implementations must embed UnimplementedOrderReturnServiceServer
// for forward compatibility
type OrderReturnServiceServer interface {
	// 添加退货/售后
	AddOrderReturn(context.Context, *OrderReturnReq) (*OrderReturnResp, error)
	// 删除退货/售后
	DeleteOrderReturn(context.Context, *DeleteOrderReturnReq) (*OrderReturnResp, error)
	// 更新退货/售后
	UpdateOrderReturn(context.Context, *OrderReturnReq) (*OrderReturnResp, error)
	// 更新退货/售后状态
	UpdateOrderReturnStatus(context.Context, *UpdateOrderReturnStatusReq) (*OrderReturnResp, error)
	// 查询退货/售后详情
	QueryOrderReturnDetail(context.Context, *QueryOrderReturnDetailReq) (*OrderReturnData, error)
	// 查询退货/售后列表
	QueryOrderReturnList(context.Context, *QueryOrderReturnListReq) (*QueryOrderReturnListResp, error)
	mustEmbedUnimplementedOrderReturnServiceServer()
}

// UnimplementedOrderReturnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderReturnServiceServer struct {
}

func (UnimplementedOrderReturnServiceServer) AddOrderReturn(context.Context, *OrderReturnReq) (*OrderReturnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderReturn not implemented")
}
func (UnimplementedOrderReturnServiceServer) DeleteOrderReturn(context.Context, *DeleteOrderReturnReq) (*OrderReturnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderReturn not implemented")
}
func (UnimplementedOrderReturnServiceServer) UpdateOrderReturn(context.Context, *OrderReturnReq) (*OrderReturnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturn not implemented")
}
func (UnimplementedOrderReturnServiceServer) UpdateOrderReturnStatus(context.Context, *UpdateOrderReturnStatusReq) (*OrderReturnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturnStatus not implemented")
}
func (UnimplementedOrderReturnServiceServer) QueryOrderReturnDetail(context.Context, *QueryOrderReturnDetailReq) (*OrderReturnData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnDetail not implemented")
}
func (UnimplementedOrderReturnServiceServer) QueryOrderReturnList(context.Context, *QueryOrderReturnListReq) (*QueryOrderReturnListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnList not implemented")
}
func (UnimplementedOrderReturnServiceServer) mustEmbedUnimplementedOrderReturnServiceServer() {}

// UnsafeOrderReturnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderReturnServiceServer will
// result in compilation errors.
type UnsafeOrderReturnServiceServer interface {
	mustEmbedUnimplementedOrderReturnServiceServer()
}

func RegisterOrderReturnServiceServer(s grpc.ServiceRegistrar, srv OrderReturnServiceServer) {
	s.RegisterService(&OrderReturnService_ServiceDesc, srv)
}

func _OrderReturnService_AddOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnServiceServer).AddOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnService_AddOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnServiceServer).AddOrderReturn(ctx, req.(*OrderReturnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnService_DeleteOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReturnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnServiceServer).DeleteOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnService_DeleteOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnServiceServer).DeleteOrderReturn(ctx, req.(*DeleteOrderReturnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnService_UpdateOrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnServiceServer).UpdateOrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnService_UpdateOrderReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnServiceServer).UpdateOrderReturn(ctx, req.(*OrderReturnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnService_UpdateOrderReturnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReturnStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnServiceServer).UpdateOrderReturnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnService_UpdateOrderReturnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnServiceServer).UpdateOrderReturnStatus(ctx, req.(*UpdateOrderReturnStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnService_QueryOrderReturnDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnServiceServer).QueryOrderReturnDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnService_QueryOrderReturnDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnServiceServer).QueryOrderReturnDetail(ctx, req.(*QueryOrderReturnDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnService_QueryOrderReturnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnServiceServer).QueryOrderReturnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnService_QueryOrderReturnList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnServiceServer).QueryOrderReturnList(ctx, req.(*QueryOrderReturnListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderReturnService_ServiceDesc is the grpc.ServiceDesc for OrderReturnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderReturnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderReturnService",
	HandlerType: (*OrderReturnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderReturn",
			Handler:    _OrderReturnService_AddOrderReturn_Handler,
		},
		{
			MethodName: "DeleteOrderReturn",
			Handler:    _OrderReturnService_DeleteOrderReturn_Handler,
		},
		{
			MethodName: "UpdateOrderReturn",
			Handler:    _OrderReturnService_UpdateOrderReturn_Handler,
		},
		{
			MethodName: "UpdateOrderReturnStatus",
			Handler:    _OrderReturnService_UpdateOrderReturnStatus_Handler,
		},
		{
			MethodName: "QueryOrderReturnDetail",
			Handler:    _OrderReturnService_QueryOrderReturnDetail_Handler,
		},
		{
			MethodName: "QueryOrderReturnList",
			Handler:    _OrderReturnService_QueryOrderReturnList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderReturnReasonService_AddOrderReturnReason_FullMethodName          = "/omsclient.OrderReturnReasonService/AddOrderReturnReason"
	OrderReturnReasonService_DeleteOrderReturnReason_FullMethodName       = "/omsclient.OrderReturnReasonService/DeleteOrderReturnReason"
	OrderReturnReasonService_UpdateOrderReturnReason_FullMethodName       = "/omsclient.OrderReturnReasonService/UpdateOrderReturnReason"
	OrderReturnReasonService_UpdateOrderReturnReasonStatus_FullMethodName = "/omsclient.OrderReturnReasonService/UpdateOrderReturnReasonStatus"
	OrderReturnReasonService_QueryOrderReturnReasonDetail_FullMethodName  = "/omsclient.OrderReturnReasonService/QueryOrderReturnReasonDetail"
	OrderReturnReasonService_QueryOrderReturnReasonList_FullMethodName    = "/omsclient.OrderReturnReasonService/QueryOrderReturnReasonList"
)

// OrderReturnReasonServiceClient is the client API for OrderReturnReasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderReturnReasonServiceClient interface {
	// 添加退货原因
	AddOrderReturnReason(ctx context.Context, in *AddOrderReturnReasonReq, opts ...grpc.CallOption) (*AddOrderReturnReasonResp, error)
	// 删除退货原因
	DeleteOrderReturnReason(ctx context.Context, in *DeleteOrderReturnReasonReq, opts ...grpc.CallOption) (*DeleteOrderReturnReasonResp, error)
	// 更新退货原因
	UpdateOrderReturnReason(ctx context.Context, in *UpdateOrderReturnReasonReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonResp, error)
	// 更新退货原因状态
	UpdateOrderReturnReasonStatus(ctx context.Context, in *UpdateOrderReturnReasonStatusReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonStatusResp, error)
	// 查询退货原因详情
	QueryOrderReturnReasonDetail(ctx context.Context, in *QueryOrderReturnReasonDetailReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonDetailResp, error)
	// 查询退货原因列表
	QueryOrderReturnReasonList(ctx context.Context, in *QueryOrderReturnReasonListReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonListResp, error)
}

type orderReturnReasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderReturnReasonServiceClient(cc grpc.ClientConnInterface) OrderReturnReasonServiceClient {
	return &orderReturnReasonServiceClient{cc}
}

func (c *orderReturnReasonServiceClient) AddOrderReturnReason(ctx context.Context, in *AddOrderReturnReasonReq, opts ...grpc.CallOption) (*AddOrderReturnReasonResp, error) {
	out := new(AddOrderReturnReasonResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_AddOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) DeleteOrderReturnReason(ctx context.Context, in *DeleteOrderReturnReasonReq, opts ...grpc.CallOption) (*DeleteOrderReturnReasonResp, error) {
	out := new(DeleteOrderReturnReasonResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_DeleteOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) UpdateOrderReturnReason(ctx context.Context, in *UpdateOrderReturnReasonReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonResp, error) {
	out := new(UpdateOrderReturnReasonResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_UpdateOrderReturnReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) UpdateOrderReturnReasonStatus(ctx context.Context, in *UpdateOrderReturnReasonStatusReq, opts ...grpc.CallOption) (*UpdateOrderReturnReasonStatusResp, error) {
	out := new(UpdateOrderReturnReasonStatusResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_UpdateOrderReturnReasonStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) QueryOrderReturnReasonDetail(ctx context.Context, in *QueryOrderReturnReasonDetailReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonDetailResp, error) {
	out := new(QueryOrderReturnReasonDetailResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_QueryOrderReturnReasonDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderReturnReasonServiceClient) QueryOrderReturnReasonList(ctx context.Context, in *QueryOrderReturnReasonListReq, opts ...grpc.CallOption) (*QueryOrderReturnReasonListResp, error) {
	out := new(QueryOrderReturnReasonListResp)
	err := c.cc.Invoke(ctx, OrderReturnReasonService_QueryOrderReturnReasonList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderReturnReasonServiceServer is the server API for OrderReturnReasonService service.
// All implementations must embed UnimplementedOrderReturnReasonServiceServer
// for forward compatibility
type OrderReturnReasonServiceServer interface {
	// 添加退货原因
	AddOrderReturnReason(context.Context, *AddOrderReturnReasonReq) (*AddOrderReturnReasonResp, error)
	// 删除退货原因
	DeleteOrderReturnReason(context.Context, *DeleteOrderReturnReasonReq) (*DeleteOrderReturnReasonResp, error)
	// 更新退货原因
	UpdateOrderReturnReason(context.Context, *UpdateOrderReturnReasonReq) (*UpdateOrderReturnReasonResp, error)
	// 更新退货原因状态
	UpdateOrderReturnReasonStatus(context.Context, *UpdateOrderReturnReasonStatusReq) (*UpdateOrderReturnReasonStatusResp, error)
	// 查询退货原因详情
	QueryOrderReturnReasonDetail(context.Context, *QueryOrderReturnReasonDetailReq) (*QueryOrderReturnReasonDetailResp, error)
	// 查询退货原因列表
	QueryOrderReturnReasonList(context.Context, *QueryOrderReturnReasonListReq) (*QueryOrderReturnReasonListResp, error)
	mustEmbedUnimplementedOrderReturnReasonServiceServer()
}

// UnimplementedOrderReturnReasonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderReturnReasonServiceServer struct {
}

func (UnimplementedOrderReturnReasonServiceServer) AddOrderReturnReason(context.Context, *AddOrderReturnReasonReq) (*AddOrderReturnReasonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderReturnReason not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) DeleteOrderReturnReason(context.Context, *DeleteOrderReturnReasonReq) (*DeleteOrderReturnReasonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderReturnReason not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) UpdateOrderReturnReason(context.Context, *UpdateOrderReturnReasonReq) (*UpdateOrderReturnReasonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturnReason not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) UpdateOrderReturnReasonStatus(context.Context, *UpdateOrderReturnReasonStatusReq) (*UpdateOrderReturnReasonStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderReturnReasonStatus not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) QueryOrderReturnReasonDetail(context.Context, *QueryOrderReturnReasonDetailReq) (*QueryOrderReturnReasonDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnReasonDetail not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) QueryOrderReturnReasonList(context.Context, *QueryOrderReturnReasonListReq) (*QueryOrderReturnReasonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderReturnReasonList not implemented")
}
func (UnimplementedOrderReturnReasonServiceServer) mustEmbedUnimplementedOrderReturnReasonServiceServer() {
}

// UnsafeOrderReturnReasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderReturnReasonServiceServer will
// result in compilation errors.
type UnsafeOrderReturnReasonServiceServer interface {
	mustEmbedUnimplementedOrderReturnReasonServiceServer()
}

func RegisterOrderReturnReasonServiceServer(s grpc.ServiceRegistrar, srv OrderReturnReasonServiceServer) {
	s.RegisterService(&OrderReturnReasonService_ServiceDesc, srv)
}

func _OrderReturnReasonService_AddOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).AddOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_AddOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).AddOrderReturnReason(ctx, req.(*AddOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_DeleteOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).DeleteOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_DeleteOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).DeleteOrderReturnReason(ctx, req.(*DeleteOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_UpdateOrderReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReturnReasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_UpdateOrderReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReason(ctx, req.(*UpdateOrderReturnReasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_UpdateOrderReturnReasonStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReturnReasonStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReasonStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_UpdateOrderReturnReasonStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).UpdateOrderReturnReasonStatus(ctx, req.(*UpdateOrderReturnReasonStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_QueryOrderReturnReasonDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnReasonDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_QueryOrderReturnReasonDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonDetail(ctx, req.(*QueryOrderReturnReasonDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderReturnReasonService_QueryOrderReturnReasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReturnReasonListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderReturnReasonService_QueryOrderReturnReasonList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReturnReasonServiceServer).QueryOrderReturnReasonList(ctx, req.(*QueryOrderReturnReasonListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderReturnReasonService_ServiceDesc is the grpc.ServiceDesc for OrderReturnReasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderReturnReasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderReturnReasonService",
	HandlerType: (*OrderReturnReasonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderReturnReason",
			Handler:    _OrderReturnReasonService_AddOrderReturnReason_Handler,
		},
		{
			MethodName: "DeleteOrderReturnReason",
			Handler:    _OrderReturnReasonService_DeleteOrderReturnReason_Handler,
		},
		{
			MethodName: "UpdateOrderReturnReason",
			Handler:    _OrderReturnReasonService_UpdateOrderReturnReason_Handler,
		},
		{
			MethodName: "UpdateOrderReturnReasonStatus",
			Handler:    _OrderReturnReasonService_UpdateOrderReturnReasonStatus_Handler,
		},
		{
			MethodName: "QueryOrderReturnReasonDetail",
			Handler:    _OrderReturnReasonService_QueryOrderReturnReasonDetail_Handler,
		},
		{
			MethodName: "QueryOrderReturnReasonList",
			Handler:    _OrderReturnReasonService_QueryOrderReturnReasonList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}

const (
	OrderSettingService_AddOrderSetting_FullMethodName                 = "/omsclient.OrderSettingService/AddOrderSetting"
	OrderSettingService_DeleteOrderSetting_FullMethodName              = "/omsclient.OrderSettingService/DeleteOrderSetting"
	OrderSettingService_UpdateOrderSetting_FullMethodName              = "/omsclient.OrderSettingService/UpdateOrderSetting"
	OrderSettingService_UpdateOrderSettingStatus_FullMethodName        = "/omsclient.OrderSettingService/UpdateOrderSettingStatus"
	OrderSettingService_QueryOrderSettingDetail_FullMethodName         = "/omsclient.OrderSettingService/QueryOrderSettingDetail"
	OrderSettingService_QueryOrderSettingList_FullMethodName           = "/omsclient.OrderSettingService/QueryOrderSettingList"
	OrderSettingService_UpdateOrderSettingDefaultStatus_FullMethodName = "/omsclient.OrderSettingService/UpdateOrderSettingDefaultStatus"
	OrderSettingService_QueryDefaultSetting_FullMethodName             = "/omsclient.OrderSettingService/QueryDefaultSetting"
)

// OrderSettingServiceClient is the client API for OrderSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderSettingServiceClient interface {
	// 添加订单设置
	AddOrderSetting(ctx context.Context, in *AddOrderSettingReq, opts ...grpc.CallOption) (*AddOrderSettingResp, error)
	// 删除订单设置
	DeleteOrderSetting(ctx context.Context, in *DeleteOrderSettingReq, opts ...grpc.CallOption) (*DeleteOrderSettingResp, error)
	// 更新订单设置
	UpdateOrderSetting(ctx context.Context, in *UpdateOrderSettingReq, opts ...grpc.CallOption) (*UpdateOrderSettingResp, error)
	// 更新订单设置状态
	UpdateOrderSettingStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error)
	// 查询订单设置详情
	QueryOrderSettingDetail(ctx context.Context, in *QueryOrderSettingDetailReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error)
	// 查询订单设置列表
	QueryOrderSettingList(ctx context.Context, in *QueryOrderSettingListReq, opts ...grpc.CallOption) (*QueryOrderSettingListResp, error)
	// 更新订单设置默认状态
	UpdateOrderSettingDefaultStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error)
	// 查询默认的订单设置
	QueryDefaultSetting(ctx context.Context, in *QueryDefaultSettingReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error)
}

type orderSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderSettingServiceClient(cc grpc.ClientConnInterface) OrderSettingServiceClient {
	return &orderSettingServiceClient{cc}
}

func (c *orderSettingServiceClient) AddOrderSetting(ctx context.Context, in *AddOrderSettingReq, opts ...grpc.CallOption) (*AddOrderSettingResp, error) {
	out := new(AddOrderSettingResp)
	err := c.cc.Invoke(ctx, OrderSettingService_AddOrderSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) DeleteOrderSetting(ctx context.Context, in *DeleteOrderSettingReq, opts ...grpc.CallOption) (*DeleteOrderSettingResp, error) {
	out := new(DeleteOrderSettingResp)
	err := c.cc.Invoke(ctx, OrderSettingService_DeleteOrderSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) UpdateOrderSetting(ctx context.Context, in *UpdateOrderSettingReq, opts ...grpc.CallOption) (*UpdateOrderSettingResp, error) {
	out := new(UpdateOrderSettingResp)
	err := c.cc.Invoke(ctx, OrderSettingService_UpdateOrderSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) UpdateOrderSettingStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error) {
	out := new(UpdateOrderSettingStatusResp)
	err := c.cc.Invoke(ctx, OrderSettingService_UpdateOrderSettingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) QueryOrderSettingDetail(ctx context.Context, in *QueryOrderSettingDetailReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error) {
	out := new(QueryOrderSettingDetailResp)
	err := c.cc.Invoke(ctx, OrderSettingService_QueryOrderSettingDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) QueryOrderSettingList(ctx context.Context, in *QueryOrderSettingListReq, opts ...grpc.CallOption) (*QueryOrderSettingListResp, error) {
	out := new(QueryOrderSettingListResp)
	err := c.cc.Invoke(ctx, OrderSettingService_QueryOrderSettingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) UpdateOrderSettingDefaultStatus(ctx context.Context, in *UpdateOrderSettingStatusReq, opts ...grpc.CallOption) (*UpdateOrderSettingStatusResp, error) {
	out := new(UpdateOrderSettingStatusResp)
	err := c.cc.Invoke(ctx, OrderSettingService_UpdateOrderSettingDefaultStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSettingServiceClient) QueryDefaultSetting(ctx context.Context, in *QueryDefaultSettingReq, opts ...grpc.CallOption) (*QueryOrderSettingDetailResp, error) {
	out := new(QueryOrderSettingDetailResp)
	err := c.cc.Invoke(ctx, OrderSettingService_QueryDefaultSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderSettingServiceServer is the server API for OrderSettingService service.
// All implementations must embed UnimplementedOrderSettingServiceServer
// for forward compatibility
type OrderSettingServiceServer interface {
	// 添加订单设置
	AddOrderSetting(context.Context, *AddOrderSettingReq) (*AddOrderSettingResp, error)
	// 删除订单设置
	DeleteOrderSetting(context.Context, *DeleteOrderSettingReq) (*DeleteOrderSettingResp, error)
	// 更新订单设置
	UpdateOrderSetting(context.Context, *UpdateOrderSettingReq) (*UpdateOrderSettingResp, error)
	// 更新订单设置状态
	UpdateOrderSettingStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error)
	// 查询订单设置详情
	QueryOrderSettingDetail(context.Context, *QueryOrderSettingDetailReq) (*QueryOrderSettingDetailResp, error)
	// 查询订单设置列表
	QueryOrderSettingList(context.Context, *QueryOrderSettingListReq) (*QueryOrderSettingListResp, error)
	// 更新订单设置默认状态
	UpdateOrderSettingDefaultStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error)
	// 查询默认的订单设置
	QueryDefaultSetting(context.Context, *QueryDefaultSettingReq) (*QueryOrderSettingDetailResp, error)
	mustEmbedUnimplementedOrderSettingServiceServer()
}

// UnimplementedOrderSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderSettingServiceServer struct {
}

func (UnimplementedOrderSettingServiceServer) AddOrderSetting(context.Context, *AddOrderSettingReq) (*AddOrderSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) DeleteOrderSetting(context.Context, *DeleteOrderSettingReq) (*DeleteOrderSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) UpdateOrderSetting(context.Context, *UpdateOrderSettingReq) (*UpdateOrderSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) UpdateOrderSettingStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderSettingStatus not implemented")
}
func (UnimplementedOrderSettingServiceServer) QueryOrderSettingDetail(context.Context, *QueryOrderSettingDetailReq) (*QueryOrderSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderSettingDetail not implemented")
}
func (UnimplementedOrderSettingServiceServer) QueryOrderSettingList(context.Context, *QueryOrderSettingListReq) (*QueryOrderSettingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderSettingList not implemented")
}
func (UnimplementedOrderSettingServiceServer) UpdateOrderSettingDefaultStatus(context.Context, *UpdateOrderSettingStatusReq) (*UpdateOrderSettingStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderSettingDefaultStatus not implemented")
}
func (UnimplementedOrderSettingServiceServer) QueryDefaultSetting(context.Context, *QueryDefaultSettingReq) (*QueryOrderSettingDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDefaultSetting not implemented")
}
func (UnimplementedOrderSettingServiceServer) mustEmbedUnimplementedOrderSettingServiceServer() {}

// UnsafeOrderSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderSettingServiceServer will
// result in compilation errors.
type UnsafeOrderSettingServiceServer interface {
	mustEmbedUnimplementedOrderSettingServiceServer()
}

func RegisterOrderSettingServiceServer(s grpc.ServiceRegistrar, srv OrderSettingServiceServer) {
	s.RegisterService(&OrderSettingService_ServiceDesc, srv)
}

func _OrderSettingService_AddOrderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).AddOrderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_AddOrderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).AddOrderSetting(ctx, req.(*AddOrderSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_DeleteOrderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).DeleteOrderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_DeleteOrderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).DeleteOrderSetting(ctx, req.(*DeleteOrderSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_UpdateOrderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).UpdateOrderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_UpdateOrderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).UpdateOrderSetting(ctx, req.(*UpdateOrderSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_UpdateOrderSettingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderSettingStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_UpdateOrderSettingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingStatus(ctx, req.(*UpdateOrderSettingStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_QueryOrderSettingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderSettingDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).QueryOrderSettingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_QueryOrderSettingDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).QueryOrderSettingDetail(ctx, req.(*QueryOrderSettingDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_QueryOrderSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderSettingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).QueryOrderSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_QueryOrderSettingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).QueryOrderSettingList(ctx, req.(*QueryOrderSettingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_UpdateOrderSettingDefaultStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderSettingStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingDefaultStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_UpdateOrderSettingDefaultStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).UpdateOrderSettingDefaultStatus(ctx, req.(*UpdateOrderSettingStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSettingService_QueryDefaultSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDefaultSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSettingServiceServer).QueryDefaultSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSettingService_QueryDefaultSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSettingServiceServer).QueryDefaultSetting(ctx, req.(*QueryDefaultSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderSettingService_ServiceDesc is the grpc.ServiceDesc for OrderSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.OrderSettingService",
	HandlerType: (*OrderSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderSetting",
			Handler:    _OrderSettingService_AddOrderSetting_Handler,
		},
		{
			MethodName: "DeleteOrderSetting",
			Handler:    _OrderSettingService_DeleteOrderSetting_Handler,
		},
		{
			MethodName: "UpdateOrderSetting",
			Handler:    _OrderSettingService_UpdateOrderSetting_Handler,
		},
		{
			MethodName: "UpdateOrderSettingStatus",
			Handler:    _OrderSettingService_UpdateOrderSettingStatus_Handler,
		},
		{
			MethodName: "QueryOrderSettingDetail",
			Handler:    _OrderSettingService_QueryOrderSettingDetail_Handler,
		},
		{
			MethodName: "QueryOrderSettingList",
			Handler:    _OrderSettingService_QueryOrderSettingList_Handler,
		},
		{
			MethodName: "UpdateOrderSettingDefaultStatus",
			Handler:    _OrderSettingService_UpdateOrderSettingDefaultStatus_Handler,
		},
		{
			MethodName: "QueryDefaultSetting",
			Handler:    _OrderSettingService_QueryDefaultSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/oms/oms.proto",
}
