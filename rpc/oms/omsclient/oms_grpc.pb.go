// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: oms.proto

package omsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Oms_OrderAdd_FullMethodName                  = "/omsclient.Oms/OrderAdd"
	Oms_OrderList_FullMethodName                 = "/omsclient.Oms/OrderList"
	Oms_OrderUpdate_FullMethodName               = "/omsclient.Oms/OrderUpdate"
	Oms_OrderDelete_FullMethodName               = "/omsclient.Oms/OrderDelete"
	Oms_OrderListByMemberId_FullMethodName       = "/omsclient.Oms/OrderListByMemberId"
	Oms_OrderCancel_FullMethodName               = "/omsclient.Oms/OrderCancel"
	Oms_OrderConfirm_FullMethodName              = "/omsclient.Oms/OrderConfirm"
	Oms_OrderRefund_FullMethodName               = "/omsclient.Oms/OrderRefund"
	Oms_CartItemAdd_FullMethodName               = "/omsclient.Oms/CartItemAdd"
	Oms_CartItemList_FullMethodName              = "/omsclient.Oms/CartItemList"
	Oms_CartItemUpdate_FullMethodName            = "/omsclient.Oms/CartItemUpdate"
	Oms_CartItemDelete_FullMethodName            = "/omsclient.Oms/CartItemDelete"
	Oms_CartItemChecked_FullMethodName           = "/omsclient.Oms/CartItemChecked"
	Oms_CartItemCheckOut_FullMethodName          = "/omsclient.Oms/CartItemCheckOut"
	Oms_CartItemFastAdd_FullMethodName           = "/omsclient.Oms/CartItemFastAdd"
	Oms_CompanyAddressAdd_FullMethodName         = "/omsclient.Oms/CompanyAddressAdd"
	Oms_CompanyAddressList_FullMethodName        = "/omsclient.Oms/CompanyAddressList"
	Oms_CompanyAddressUpdate_FullMethodName      = "/omsclient.Oms/CompanyAddressUpdate"
	Oms_CompanyAddressDelete_FullMethodName      = "/omsclient.Oms/CompanyAddressDelete"
	Oms_OrderItemAdd_FullMethodName              = "/omsclient.Oms/OrderItemAdd"
	Oms_OrderItemList_FullMethodName             = "/omsclient.Oms/OrderItemList"
	Oms_OrderItemUpdate_FullMethodName           = "/omsclient.Oms/OrderItemUpdate"
	Oms_OrderItemDelete_FullMethodName           = "/omsclient.Oms/OrderItemDelete"
	Oms_OrderOperateHistoryAdd_FullMethodName    = "/omsclient.Oms/OrderOperateHistoryAdd"
	Oms_OrderOperateHistoryList_FullMethodName   = "/omsclient.Oms/OrderOperateHistoryList"
	Oms_OrderOperateHistoryUpdate_FullMethodName = "/omsclient.Oms/OrderOperateHistoryUpdate"
	Oms_OrderOperateHistoryDelete_FullMethodName = "/omsclient.Oms/OrderOperateHistoryDelete"
	Oms_OrderReturnApplyAdd_FullMethodName       = "/omsclient.Oms/OrderReturnApplyAdd"
	Oms_OrderReturnApplyList_FullMethodName      = "/omsclient.Oms/OrderReturnApplyList"
	Oms_OrderReturnApplyUpdate_FullMethodName    = "/omsclient.Oms/OrderReturnApplyUpdate"
	Oms_OrderReturnApplyDelete_FullMethodName    = "/omsclient.Oms/OrderReturnApplyDelete"
	Oms_OrderReturnReasonAdd_FullMethodName      = "/omsclient.Oms/OrderReturnReasonAdd"
	Oms_OrderReturnReasonList_FullMethodName     = "/omsclient.Oms/OrderReturnReasonList"
	Oms_OrderReturnReasonUpdate_FullMethodName   = "/omsclient.Oms/OrderReturnReasonUpdate"
	Oms_OrderReturnReasonDelete_FullMethodName   = "/omsclient.Oms/OrderReturnReasonDelete"
	Oms_OrderSettingAdd_FullMethodName           = "/omsclient.Oms/OrderSettingAdd"
	Oms_OrderSettingList_FullMethodName          = "/omsclient.Oms/OrderSettingList"
	Oms_OrderSettingUpdate_FullMethodName        = "/omsclient.Oms/OrderSettingUpdate"
	Oms_OrderSettingDelete_FullMethodName        = "/omsclient.Oms/OrderSettingDelete"
)

// OmsClient is the client API for Oms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmsClient interface {
	OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error)
	OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
	OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error)
	OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error)
	OrderListByMemberId(ctx context.Context, in *OrderListByMemberIdReq, opts ...grpc.CallOption) (*OrderListByMemberIdResp, error)
	OrderCancel(ctx context.Context, in *OrderCancelReq, opts ...grpc.CallOption) (*OrderCancelResp, error)
	OrderConfirm(ctx context.Context, in *OrderConfirmReq, opts ...grpc.CallOption) (*OrderConfirmResp, error)
	OrderRefund(ctx context.Context, in *OrderRefundReq, opts ...grpc.CallOption) (*OrderRefundResp, error)
	CartItemAdd(ctx context.Context, in *CartItemAddReq, opts ...grpc.CallOption) (*CartItemAddResp, error)
	CartItemList(ctx context.Context, in *CartItemListReq, opts ...grpc.CallOption) (*CartItemListResp, error)
	CartItemUpdate(ctx context.Context, in *CartItemUpdateReq, opts ...grpc.CallOption) (*CartItemUpdateResp, error)
	CartItemDelete(ctx context.Context, in *CartItemDeleteReq, opts ...grpc.CallOption) (*CartItemDeleteResp, error)
	CartItemChecked(ctx context.Context, in *CartItemCheckedReq, opts ...grpc.CallOption) (*CartItemCheckedResp, error)
	CartItemCheckOut(ctx context.Context, in *CartItemCheckOutReq, opts ...grpc.CallOption) (*CartItemCheckOutResp, error)
	CartItemFastAdd(ctx context.Context, in *CartItemFastAddReq, opts ...grpc.CallOption) (*CartItemFastAddResp, error)
	CompanyAddressAdd(ctx context.Context, in *CompanyAddressAddReq, opts ...grpc.CallOption) (*CompanyAddressAddResp, error)
	CompanyAddressList(ctx context.Context, in *CompanyAddressListReq, opts ...grpc.CallOption) (*CompanyAddressListResp, error)
	CompanyAddressUpdate(ctx context.Context, in *CompanyAddressUpdateReq, opts ...grpc.CallOption) (*CompanyAddressUpdateResp, error)
	CompanyAddressDelete(ctx context.Context, in *CompanyAddressDeleteReq, opts ...grpc.CallOption) (*CompanyAddressDeleteResp, error)
	OrderItemAdd(ctx context.Context, in *OrderItemAddReq, opts ...grpc.CallOption) (*OrderItemAddResp, error)
	OrderItemList(ctx context.Context, in *OrderItemListReq, opts ...grpc.CallOption) (*OrderItemListResp, error)
	OrderItemUpdate(ctx context.Context, in *OrderItemUpdateReq, opts ...grpc.CallOption) (*OrderItemUpdateResp, error)
	OrderItemDelete(ctx context.Context, in *OrderItemDeleteReq, opts ...grpc.CallOption) (*OrderItemDeleteResp, error)
	OrderOperateHistoryAdd(ctx context.Context, in *OrderOperateHistoryAddReq, opts ...grpc.CallOption) (*OrderOperateHistoryAddResp, error)
	OrderOperateHistoryList(ctx context.Context, in *OrderOperateHistoryListReq, opts ...grpc.CallOption) (*OrderOperateHistoryListResp, error)
	OrderOperateHistoryUpdate(ctx context.Context, in *OrderOperateHistoryUpdateReq, opts ...grpc.CallOption) (*OrderOperateHistoryUpdateResp, error)
	OrderOperateHistoryDelete(ctx context.Context, in *OrderOperateHistoryDeleteReq, opts ...grpc.CallOption) (*OrderOperateHistoryDeleteResp, error)
	OrderReturnApplyAdd(ctx context.Context, in *OrderReturnApplyAddReq, opts ...grpc.CallOption) (*OrderReturnApplyAddResp, error)
	OrderReturnApplyList(ctx context.Context, in *OrderReturnApplyListReq, opts ...grpc.CallOption) (*OrderReturnApplyListResp, error)
	OrderReturnApplyUpdate(ctx context.Context, in *OrderReturnApplyUpdateReq, opts ...grpc.CallOption) (*OrderReturnApplyUpdateResp, error)
	OrderReturnApplyDelete(ctx context.Context, in *OrderReturnApplyDeleteReq, opts ...grpc.CallOption) (*OrderReturnApplyDeleteResp, error)
	OrderReturnReasonAdd(ctx context.Context, in *OrderReturnReasonAddReq, opts ...grpc.CallOption) (*OrderReturnReasonAddResp, error)
	OrderReturnReasonList(ctx context.Context, in *OrderReturnReasonListReq, opts ...grpc.CallOption) (*OrderReturnReasonListResp, error)
	OrderReturnReasonUpdate(ctx context.Context, in *OrderReturnReasonUpdateReq, opts ...grpc.CallOption) (*OrderReturnReasonUpdateResp, error)
	OrderReturnReasonDelete(ctx context.Context, in *OrderReturnReasonDeleteReq, opts ...grpc.CallOption) (*OrderReturnReasonDeleteResp, error)
	OrderSettingAdd(ctx context.Context, in *OrderSettingAddReq, opts ...grpc.CallOption) (*OrderSettingAddResp, error)
	OrderSettingList(ctx context.Context, in *OrderSettingListReq, opts ...grpc.CallOption) (*OrderSettingListResp, error)
	OrderSettingUpdate(ctx context.Context, in *OrderSettingUpdateReq, opts ...grpc.CallOption) (*OrderSettingUpdateResp, error)
	OrderSettingDelete(ctx context.Context, in *OrderSettingDeleteReq, opts ...grpc.CallOption) (*OrderSettingDeleteResp, error)
}

type omsClient struct {
	cc grpc.ClientConnInterface
}

func NewOmsClient(cc grpc.ClientConnInterface) OmsClient {
	return &omsClient{cc}
}

func (c *omsClient) OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error) {
	out := new(OrderAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, Oms_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error) {
	out := new(OrderUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error) {
	out := new(OrderDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderListByMemberId(ctx context.Context, in *OrderListByMemberIdReq, opts ...grpc.CallOption) (*OrderListByMemberIdResp, error) {
	out := new(OrderListByMemberIdResp)
	err := c.cc.Invoke(ctx, Oms_OrderListByMemberId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderCancel(ctx context.Context, in *OrderCancelReq, opts ...grpc.CallOption) (*OrderCancelResp, error) {
	out := new(OrderCancelResp)
	err := c.cc.Invoke(ctx, Oms_OrderCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderConfirm(ctx context.Context, in *OrderConfirmReq, opts ...grpc.CallOption) (*OrderConfirmResp, error) {
	out := new(OrderConfirmResp)
	err := c.cc.Invoke(ctx, Oms_OrderConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderRefund(ctx context.Context, in *OrderRefundReq, opts ...grpc.CallOption) (*OrderRefundResp, error) {
	out := new(OrderRefundResp)
	err := c.cc.Invoke(ctx, Oms_OrderRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartItemAdd(ctx context.Context, in *CartItemAddReq, opts ...grpc.CallOption) (*CartItemAddResp, error) {
	out := new(CartItemAddResp)
	err := c.cc.Invoke(ctx, Oms_CartItemAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartItemList(ctx context.Context, in *CartItemListReq, opts ...grpc.CallOption) (*CartItemListResp, error) {
	out := new(CartItemListResp)
	err := c.cc.Invoke(ctx, Oms_CartItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartItemUpdate(ctx context.Context, in *CartItemUpdateReq, opts ...grpc.CallOption) (*CartItemUpdateResp, error) {
	out := new(CartItemUpdateResp)
	err := c.cc.Invoke(ctx, Oms_CartItemUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartItemDelete(ctx context.Context, in *CartItemDeleteReq, opts ...grpc.CallOption) (*CartItemDeleteResp, error) {
	out := new(CartItemDeleteResp)
	err := c.cc.Invoke(ctx, Oms_CartItemDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartItemChecked(ctx context.Context, in *CartItemCheckedReq, opts ...grpc.CallOption) (*CartItemCheckedResp, error) {
	out := new(CartItemCheckedResp)
	err := c.cc.Invoke(ctx, Oms_CartItemChecked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartItemCheckOut(ctx context.Context, in *CartItemCheckOutReq, opts ...grpc.CallOption) (*CartItemCheckOutResp, error) {
	out := new(CartItemCheckOutResp)
	err := c.cc.Invoke(ctx, Oms_CartItemCheckOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartItemFastAdd(ctx context.Context, in *CartItemFastAddReq, opts ...grpc.CallOption) (*CartItemFastAddResp, error) {
	out := new(CartItemFastAddResp)
	err := c.cc.Invoke(ctx, Oms_CartItemFastAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CompanyAddressAdd(ctx context.Context, in *CompanyAddressAddReq, opts ...grpc.CallOption) (*CompanyAddressAddResp, error) {
	out := new(CompanyAddressAddResp)
	err := c.cc.Invoke(ctx, Oms_CompanyAddressAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CompanyAddressList(ctx context.Context, in *CompanyAddressListReq, opts ...grpc.CallOption) (*CompanyAddressListResp, error) {
	out := new(CompanyAddressListResp)
	err := c.cc.Invoke(ctx, Oms_CompanyAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CompanyAddressUpdate(ctx context.Context, in *CompanyAddressUpdateReq, opts ...grpc.CallOption) (*CompanyAddressUpdateResp, error) {
	out := new(CompanyAddressUpdateResp)
	err := c.cc.Invoke(ctx, Oms_CompanyAddressUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CompanyAddressDelete(ctx context.Context, in *CompanyAddressDeleteReq, opts ...grpc.CallOption) (*CompanyAddressDeleteResp, error) {
	out := new(CompanyAddressDeleteResp)
	err := c.cc.Invoke(ctx, Oms_CompanyAddressDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderItemAdd(ctx context.Context, in *OrderItemAddReq, opts ...grpc.CallOption) (*OrderItemAddResp, error) {
	out := new(OrderItemAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderItemAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderItemList(ctx context.Context, in *OrderItemListReq, opts ...grpc.CallOption) (*OrderItemListResp, error) {
	out := new(OrderItemListResp)
	err := c.cc.Invoke(ctx, Oms_OrderItemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderItemUpdate(ctx context.Context, in *OrderItemUpdateReq, opts ...grpc.CallOption) (*OrderItemUpdateResp, error) {
	out := new(OrderItemUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderItemUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderItemDelete(ctx context.Context, in *OrderItemDeleteReq, opts ...grpc.CallOption) (*OrderItemDeleteResp, error) {
	out := new(OrderItemDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderItemDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderOperateHistoryAdd(ctx context.Context, in *OrderOperateHistoryAddReq, opts ...grpc.CallOption) (*OrderOperateHistoryAddResp, error) {
	out := new(OrderOperateHistoryAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderOperateHistoryAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderOperateHistoryList(ctx context.Context, in *OrderOperateHistoryListReq, opts ...grpc.CallOption) (*OrderOperateHistoryListResp, error) {
	out := new(OrderOperateHistoryListResp)
	err := c.cc.Invoke(ctx, Oms_OrderOperateHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderOperateHistoryUpdate(ctx context.Context, in *OrderOperateHistoryUpdateReq, opts ...grpc.CallOption) (*OrderOperateHistoryUpdateResp, error) {
	out := new(OrderOperateHistoryUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderOperateHistoryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderOperateHistoryDelete(ctx context.Context, in *OrderOperateHistoryDeleteReq, opts ...grpc.CallOption) (*OrderOperateHistoryDeleteResp, error) {
	out := new(OrderOperateHistoryDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderOperateHistoryDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnApplyAdd(ctx context.Context, in *OrderReturnApplyAddReq, opts ...grpc.CallOption) (*OrderReturnApplyAddResp, error) {
	out := new(OrderReturnApplyAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnApplyAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnApplyList(ctx context.Context, in *OrderReturnApplyListReq, opts ...grpc.CallOption) (*OrderReturnApplyListResp, error) {
	out := new(OrderReturnApplyListResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnApplyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnApplyUpdate(ctx context.Context, in *OrderReturnApplyUpdateReq, opts ...grpc.CallOption) (*OrderReturnApplyUpdateResp, error) {
	out := new(OrderReturnApplyUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnApplyUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnApplyDelete(ctx context.Context, in *OrderReturnApplyDeleteReq, opts ...grpc.CallOption) (*OrderReturnApplyDeleteResp, error) {
	out := new(OrderReturnApplyDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnApplyDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnReasonAdd(ctx context.Context, in *OrderReturnReasonAddReq, opts ...grpc.CallOption) (*OrderReturnReasonAddResp, error) {
	out := new(OrderReturnReasonAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnReasonAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnReasonList(ctx context.Context, in *OrderReturnReasonListReq, opts ...grpc.CallOption) (*OrderReturnReasonListResp, error) {
	out := new(OrderReturnReasonListResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnReasonList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnReasonUpdate(ctx context.Context, in *OrderReturnReasonUpdateReq, opts ...grpc.CallOption) (*OrderReturnReasonUpdateResp, error) {
	out := new(OrderReturnReasonUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnReasonUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderReturnReasonDelete(ctx context.Context, in *OrderReturnReasonDeleteReq, opts ...grpc.CallOption) (*OrderReturnReasonDeleteResp, error) {
	out := new(OrderReturnReasonDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderReturnReasonDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderSettingAdd(ctx context.Context, in *OrderSettingAddReq, opts ...grpc.CallOption) (*OrderSettingAddResp, error) {
	out := new(OrderSettingAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderSettingAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderSettingList(ctx context.Context, in *OrderSettingListReq, opts ...grpc.CallOption) (*OrderSettingListResp, error) {
	out := new(OrderSettingListResp)
	err := c.cc.Invoke(ctx, Oms_OrderSettingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderSettingUpdate(ctx context.Context, in *OrderSettingUpdateReq, opts ...grpc.CallOption) (*OrderSettingUpdateResp, error) {
	out := new(OrderSettingUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderSettingUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderSettingDelete(ctx context.Context, in *OrderSettingDeleteReq, opts ...grpc.CallOption) (*OrderSettingDeleteResp, error) {
	out := new(OrderSettingDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderSettingDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmsServer is the server API for Oms service.
// All implementations must embed UnimplementedOmsServer
// for forward compatibility
type OmsServer interface {
	OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error)
	OrderList(context.Context, *OrderListReq) (*OrderListResp, error)
	OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error)
	OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error)
	OrderListByMemberId(context.Context, *OrderListByMemberIdReq) (*OrderListByMemberIdResp, error)
	OrderCancel(context.Context, *OrderCancelReq) (*OrderCancelResp, error)
	OrderConfirm(context.Context, *OrderConfirmReq) (*OrderConfirmResp, error)
	OrderRefund(context.Context, *OrderRefundReq) (*OrderRefundResp, error)
	CartItemAdd(context.Context, *CartItemAddReq) (*CartItemAddResp, error)
	CartItemList(context.Context, *CartItemListReq) (*CartItemListResp, error)
	CartItemUpdate(context.Context, *CartItemUpdateReq) (*CartItemUpdateResp, error)
	CartItemDelete(context.Context, *CartItemDeleteReq) (*CartItemDeleteResp, error)
	CartItemChecked(context.Context, *CartItemCheckedReq) (*CartItemCheckedResp, error)
	CartItemCheckOut(context.Context, *CartItemCheckOutReq) (*CartItemCheckOutResp, error)
	CartItemFastAdd(context.Context, *CartItemFastAddReq) (*CartItemFastAddResp, error)
	CompanyAddressAdd(context.Context, *CompanyAddressAddReq) (*CompanyAddressAddResp, error)
	CompanyAddressList(context.Context, *CompanyAddressListReq) (*CompanyAddressListResp, error)
	CompanyAddressUpdate(context.Context, *CompanyAddressUpdateReq) (*CompanyAddressUpdateResp, error)
	CompanyAddressDelete(context.Context, *CompanyAddressDeleteReq) (*CompanyAddressDeleteResp, error)
	OrderItemAdd(context.Context, *OrderItemAddReq) (*OrderItemAddResp, error)
	OrderItemList(context.Context, *OrderItemListReq) (*OrderItemListResp, error)
	OrderItemUpdate(context.Context, *OrderItemUpdateReq) (*OrderItemUpdateResp, error)
	OrderItemDelete(context.Context, *OrderItemDeleteReq) (*OrderItemDeleteResp, error)
	OrderOperateHistoryAdd(context.Context, *OrderOperateHistoryAddReq) (*OrderOperateHistoryAddResp, error)
	OrderOperateHistoryList(context.Context, *OrderOperateHistoryListReq) (*OrderOperateHistoryListResp, error)
	OrderOperateHistoryUpdate(context.Context, *OrderOperateHistoryUpdateReq) (*OrderOperateHistoryUpdateResp, error)
	OrderOperateHistoryDelete(context.Context, *OrderOperateHistoryDeleteReq) (*OrderOperateHistoryDeleteResp, error)
	OrderReturnApplyAdd(context.Context, *OrderReturnApplyAddReq) (*OrderReturnApplyAddResp, error)
	OrderReturnApplyList(context.Context, *OrderReturnApplyListReq) (*OrderReturnApplyListResp, error)
	OrderReturnApplyUpdate(context.Context, *OrderReturnApplyUpdateReq) (*OrderReturnApplyUpdateResp, error)
	OrderReturnApplyDelete(context.Context, *OrderReturnApplyDeleteReq) (*OrderReturnApplyDeleteResp, error)
	OrderReturnReasonAdd(context.Context, *OrderReturnReasonAddReq) (*OrderReturnReasonAddResp, error)
	OrderReturnReasonList(context.Context, *OrderReturnReasonListReq) (*OrderReturnReasonListResp, error)
	OrderReturnReasonUpdate(context.Context, *OrderReturnReasonUpdateReq) (*OrderReturnReasonUpdateResp, error)
	OrderReturnReasonDelete(context.Context, *OrderReturnReasonDeleteReq) (*OrderReturnReasonDeleteResp, error)
	OrderSettingAdd(context.Context, *OrderSettingAddReq) (*OrderSettingAddResp, error)
	OrderSettingList(context.Context, *OrderSettingListReq) (*OrderSettingListResp, error)
	OrderSettingUpdate(context.Context, *OrderSettingUpdateReq) (*OrderSettingUpdateResp, error)
	OrderSettingDelete(context.Context, *OrderSettingDeleteReq) (*OrderSettingDeleteResp, error)
	mustEmbedUnimplementedOmsServer()
}

// UnimplementedOmsServer must be embedded to have forward compatible implementations.
type UnimplementedOmsServer struct {
}

func (UnimplementedOmsServer) OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAdd not implemented")
}
func (UnimplementedOmsServer) OrderList(context.Context, *OrderListReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedOmsServer) OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderUpdate not implemented")
}
func (UnimplementedOmsServer) OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDelete not implemented")
}
func (UnimplementedOmsServer) OrderListByMemberId(context.Context, *OrderListByMemberIdReq) (*OrderListByMemberIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderListByMemberId not implemented")
}
func (UnimplementedOmsServer) OrderCancel(context.Context, *OrderCancelReq) (*OrderCancelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCancel not implemented")
}
func (UnimplementedOmsServer) OrderConfirm(context.Context, *OrderConfirmReq) (*OrderConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderConfirm not implemented")
}
func (UnimplementedOmsServer) OrderRefund(context.Context, *OrderRefundReq) (*OrderRefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderRefund not implemented")
}
func (UnimplementedOmsServer) CartItemAdd(context.Context, *CartItemAddReq) (*CartItemAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartItemAdd not implemented")
}
func (UnimplementedOmsServer) CartItemList(context.Context, *CartItemListReq) (*CartItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartItemList not implemented")
}
func (UnimplementedOmsServer) CartItemUpdate(context.Context, *CartItemUpdateReq) (*CartItemUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartItemUpdate not implemented")
}
func (UnimplementedOmsServer) CartItemDelete(context.Context, *CartItemDeleteReq) (*CartItemDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartItemDelete not implemented")
}
func (UnimplementedOmsServer) CartItemChecked(context.Context, *CartItemCheckedReq) (*CartItemCheckedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartItemChecked not implemented")
}
func (UnimplementedOmsServer) CartItemCheckOut(context.Context, *CartItemCheckOutReq) (*CartItemCheckOutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartItemCheckOut not implemented")
}
func (UnimplementedOmsServer) CartItemFastAdd(context.Context, *CartItemFastAddReq) (*CartItemFastAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartItemFastAdd not implemented")
}
func (UnimplementedOmsServer) CompanyAddressAdd(context.Context, *CompanyAddressAddReq) (*CompanyAddressAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyAddressAdd not implemented")
}
func (UnimplementedOmsServer) CompanyAddressList(context.Context, *CompanyAddressListReq) (*CompanyAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyAddressList not implemented")
}
func (UnimplementedOmsServer) CompanyAddressUpdate(context.Context, *CompanyAddressUpdateReq) (*CompanyAddressUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyAddressUpdate not implemented")
}
func (UnimplementedOmsServer) CompanyAddressDelete(context.Context, *CompanyAddressDeleteReq) (*CompanyAddressDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyAddressDelete not implemented")
}
func (UnimplementedOmsServer) OrderItemAdd(context.Context, *OrderItemAddReq) (*OrderItemAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemAdd not implemented")
}
func (UnimplementedOmsServer) OrderItemList(context.Context, *OrderItemListReq) (*OrderItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemList not implemented")
}
func (UnimplementedOmsServer) OrderItemUpdate(context.Context, *OrderItemUpdateReq) (*OrderItemUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemUpdate not implemented")
}
func (UnimplementedOmsServer) OrderItemDelete(context.Context, *OrderItemDeleteReq) (*OrderItemDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderItemDelete not implemented")
}
func (UnimplementedOmsServer) OrderOperateHistoryAdd(context.Context, *OrderOperateHistoryAddReq) (*OrderOperateHistoryAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderOperateHistoryAdd not implemented")
}
func (UnimplementedOmsServer) OrderOperateHistoryList(context.Context, *OrderOperateHistoryListReq) (*OrderOperateHistoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderOperateHistoryList not implemented")
}
func (UnimplementedOmsServer) OrderOperateHistoryUpdate(context.Context, *OrderOperateHistoryUpdateReq) (*OrderOperateHistoryUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderOperateHistoryUpdate not implemented")
}
func (UnimplementedOmsServer) OrderOperateHistoryDelete(context.Context, *OrderOperateHistoryDeleteReq) (*OrderOperateHistoryDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderOperateHistoryDelete not implemented")
}
func (UnimplementedOmsServer) OrderReturnApplyAdd(context.Context, *OrderReturnApplyAddReq) (*OrderReturnApplyAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnApplyAdd not implemented")
}
func (UnimplementedOmsServer) OrderReturnApplyList(context.Context, *OrderReturnApplyListReq) (*OrderReturnApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnApplyList not implemented")
}
func (UnimplementedOmsServer) OrderReturnApplyUpdate(context.Context, *OrderReturnApplyUpdateReq) (*OrderReturnApplyUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnApplyUpdate not implemented")
}
func (UnimplementedOmsServer) OrderReturnApplyDelete(context.Context, *OrderReturnApplyDeleteReq) (*OrderReturnApplyDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnApplyDelete not implemented")
}
func (UnimplementedOmsServer) OrderReturnReasonAdd(context.Context, *OrderReturnReasonAddReq) (*OrderReturnReasonAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnReasonAdd not implemented")
}
func (UnimplementedOmsServer) OrderReturnReasonList(context.Context, *OrderReturnReasonListReq) (*OrderReturnReasonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnReasonList not implemented")
}
func (UnimplementedOmsServer) OrderReturnReasonUpdate(context.Context, *OrderReturnReasonUpdateReq) (*OrderReturnReasonUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnReasonUpdate not implemented")
}
func (UnimplementedOmsServer) OrderReturnReasonDelete(context.Context, *OrderReturnReasonDeleteReq) (*OrderReturnReasonDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturnReasonDelete not implemented")
}
func (UnimplementedOmsServer) OrderSettingAdd(context.Context, *OrderSettingAddReq) (*OrderSettingAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSettingAdd not implemented")
}
func (UnimplementedOmsServer) OrderSettingList(context.Context, *OrderSettingListReq) (*OrderSettingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSettingList not implemented")
}
func (UnimplementedOmsServer) OrderSettingUpdate(context.Context, *OrderSettingUpdateReq) (*OrderSettingUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSettingUpdate not implemented")
}
func (UnimplementedOmsServer) OrderSettingDelete(context.Context, *OrderSettingDeleteReq) (*OrderSettingDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSettingDelete not implemented")
}
func (UnimplementedOmsServer) mustEmbedUnimplementedOmsServer() {}

// UnsafeOmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmsServer will
// result in compilation errors.
type UnsafeOmsServer interface {
	mustEmbedUnimplementedOmsServer()
}

func RegisterOmsServer(s grpc.ServiceRegistrar, srv OmsServer) {
	s.RegisterService(&Oms_ServiceDesc, srv)
}

func _Oms_OrderAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderAdd(ctx, req.(*OrderAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderList(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderUpdate(ctx, req.(*OrderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderDelete(ctx, req.(*OrderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderListByMemberId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListByMemberIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderListByMemberId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderListByMemberId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderListByMemberId(ctx, req.(*OrderListByMemberIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderCancel(ctx, req.(*OrderCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderConfirm(ctx, req.(*OrderConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderRefund(ctx, req.(*OrderRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartItemAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartItemAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartItemAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartItemAdd(ctx, req.(*CartItemAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartItemList(ctx, req.(*CartItemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartItemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartItemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartItemUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartItemUpdate(ctx, req.(*CartItemUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartItemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartItemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartItemDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartItemDelete(ctx, req.(*CartItemDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartItemChecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemCheckedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartItemChecked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartItemChecked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartItemChecked(ctx, req.(*CartItemCheckedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartItemCheckOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemCheckOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartItemCheckOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartItemCheckOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartItemCheckOut(ctx, req.(*CartItemCheckOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartItemFastAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemFastAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartItemFastAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartItemFastAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartItemFastAdd(ctx, req.(*CartItemFastAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CompanyAddressAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyAddressAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CompanyAddressAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CompanyAddressAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CompanyAddressAdd(ctx, req.(*CompanyAddressAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CompanyAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CompanyAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CompanyAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CompanyAddressList(ctx, req.(*CompanyAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CompanyAddressUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyAddressUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CompanyAddressUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CompanyAddressUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CompanyAddressUpdate(ctx, req.(*CompanyAddressUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CompanyAddressDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyAddressDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CompanyAddressDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CompanyAddressDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CompanyAddressDelete(ctx, req.(*CompanyAddressDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderItemAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderItemAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderItemAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderItemAdd(ctx, req.(*OrderItemAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderItemList(ctx, req.(*OrderItemListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderItemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderItemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderItemUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderItemUpdate(ctx, req.(*OrderItemUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderItemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderItemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderItemDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderItemDelete(ctx, req.(*OrderItemDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderOperateHistoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderOperateHistoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderOperateHistoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderOperateHistoryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderOperateHistoryAdd(ctx, req.(*OrderOperateHistoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderOperateHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderOperateHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderOperateHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderOperateHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderOperateHistoryList(ctx, req.(*OrderOperateHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderOperateHistoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderOperateHistoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderOperateHistoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderOperateHistoryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderOperateHistoryUpdate(ctx, req.(*OrderOperateHistoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderOperateHistoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderOperateHistoryDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderOperateHistoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderOperateHistoryDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderOperateHistoryDelete(ctx, req.(*OrderOperateHistoryDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnApplyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnApplyAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnApplyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnApplyAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnApplyAdd(ctx, req.(*OrderReturnApplyAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnApplyList(ctx, req.(*OrderReturnApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnApplyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnApplyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnApplyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnApplyUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnApplyUpdate(ctx, req.(*OrderReturnApplyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnApplyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnApplyDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnApplyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnApplyDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnApplyDelete(ctx, req.(*OrderReturnApplyDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnReasonAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnReasonAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnReasonAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnReasonAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnReasonAdd(ctx, req.(*OrderReturnReasonAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnReasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnReasonListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnReasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnReasonList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnReasonList(ctx, req.(*OrderReturnReasonListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnReasonUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnReasonUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnReasonUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnReasonUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnReasonUpdate(ctx, req.(*OrderReturnReasonUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderReturnReasonDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnReasonDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderReturnReasonDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderReturnReasonDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderReturnReasonDelete(ctx, req.(*OrderReturnReasonDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderSettingAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSettingAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderSettingAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderSettingAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderSettingAdd(ctx, req.(*OrderSettingAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSettingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderSettingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderSettingList(ctx, req.(*OrderSettingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderSettingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSettingUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderSettingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderSettingUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderSettingUpdate(ctx, req.(*OrderSettingUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderSettingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSettingDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderSettingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderSettingDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderSettingDelete(ctx, req.(*OrderSettingDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Oms_ServiceDesc is the grpc.ServiceDesc for Oms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omsclient.Oms",
	HandlerType: (*OmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderAdd",
			Handler:    _Oms_OrderAdd_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _Oms_OrderList_Handler,
		},
		{
			MethodName: "OrderUpdate",
			Handler:    _Oms_OrderUpdate_Handler,
		},
		{
			MethodName: "OrderDelete",
			Handler:    _Oms_OrderDelete_Handler,
		},
		{
			MethodName: "OrderListByMemberId",
			Handler:    _Oms_OrderListByMemberId_Handler,
		},
		{
			MethodName: "OrderCancel",
			Handler:    _Oms_OrderCancel_Handler,
		},
		{
			MethodName: "OrderConfirm",
			Handler:    _Oms_OrderConfirm_Handler,
		},
		{
			MethodName: "OrderRefund",
			Handler:    _Oms_OrderRefund_Handler,
		},
		{
			MethodName: "CartItemAdd",
			Handler:    _Oms_CartItemAdd_Handler,
		},
		{
			MethodName: "CartItemList",
			Handler:    _Oms_CartItemList_Handler,
		},
		{
			MethodName: "CartItemUpdate",
			Handler:    _Oms_CartItemUpdate_Handler,
		},
		{
			MethodName: "CartItemDelete",
			Handler:    _Oms_CartItemDelete_Handler,
		},
		{
			MethodName: "CartItemChecked",
			Handler:    _Oms_CartItemChecked_Handler,
		},
		{
			MethodName: "CartItemCheckOut",
			Handler:    _Oms_CartItemCheckOut_Handler,
		},
		{
			MethodName: "CartItemFastAdd",
			Handler:    _Oms_CartItemFastAdd_Handler,
		},
		{
			MethodName: "CompanyAddressAdd",
			Handler:    _Oms_CompanyAddressAdd_Handler,
		},
		{
			MethodName: "CompanyAddressList",
			Handler:    _Oms_CompanyAddressList_Handler,
		},
		{
			MethodName: "CompanyAddressUpdate",
			Handler:    _Oms_CompanyAddressUpdate_Handler,
		},
		{
			MethodName: "CompanyAddressDelete",
			Handler:    _Oms_CompanyAddressDelete_Handler,
		},
		{
			MethodName: "OrderItemAdd",
			Handler:    _Oms_OrderItemAdd_Handler,
		},
		{
			MethodName: "OrderItemList",
			Handler:    _Oms_OrderItemList_Handler,
		},
		{
			MethodName: "OrderItemUpdate",
			Handler:    _Oms_OrderItemUpdate_Handler,
		},
		{
			MethodName: "OrderItemDelete",
			Handler:    _Oms_OrderItemDelete_Handler,
		},
		{
			MethodName: "OrderOperateHistoryAdd",
			Handler:    _Oms_OrderOperateHistoryAdd_Handler,
		},
		{
			MethodName: "OrderOperateHistoryList",
			Handler:    _Oms_OrderOperateHistoryList_Handler,
		},
		{
			MethodName: "OrderOperateHistoryUpdate",
			Handler:    _Oms_OrderOperateHistoryUpdate_Handler,
		},
		{
			MethodName: "OrderOperateHistoryDelete",
			Handler:    _Oms_OrderOperateHistoryDelete_Handler,
		},
		{
			MethodName: "OrderReturnApplyAdd",
			Handler:    _Oms_OrderReturnApplyAdd_Handler,
		},
		{
			MethodName: "OrderReturnApplyList",
			Handler:    _Oms_OrderReturnApplyList_Handler,
		},
		{
			MethodName: "OrderReturnApplyUpdate",
			Handler:    _Oms_OrderReturnApplyUpdate_Handler,
		},
		{
			MethodName: "OrderReturnApplyDelete",
			Handler:    _Oms_OrderReturnApplyDelete_Handler,
		},
		{
			MethodName: "OrderReturnReasonAdd",
			Handler:    _Oms_OrderReturnReasonAdd_Handler,
		},
		{
			MethodName: "OrderReturnReasonList",
			Handler:    _Oms_OrderReturnReasonList_Handler,
		},
		{
			MethodName: "OrderReturnReasonUpdate",
			Handler:    _Oms_OrderReturnReasonUpdate_Handler,
		},
		{
			MethodName: "OrderReturnReasonDelete",
			Handler:    _Oms_OrderReturnReasonDelete_Handler,
		},
		{
			MethodName: "OrderSettingAdd",
			Handler:    _Oms_OrderSettingAdd_Handler,
		},
		{
			MethodName: "OrderSettingList",
			Handler:    _Oms_OrderSettingList_Handler,
		},
		{
			MethodName: "OrderSettingUpdate",
			Handler:    _Oms_OrderSettingUpdate_Handler,
		},
		{
			MethodName: "OrderSettingDelete",
			Handler:    _Oms_OrderSettingDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oms.proto",
}
