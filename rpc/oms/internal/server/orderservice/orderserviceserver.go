// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: oms.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/oms/internal/logic/orderservice"
	"github.com/feihua/zero-admin/rpc/oms/internal/svc"
	"github.com/feihua/zero-admin/rpc/oms/omsclient"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	omsclient.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

// pc
func (s *OrderServiceServer) Delivery(ctx context.Context, in *omsclient.DeliveryReq) (*omsclient.DeliveryResp, error) {
	l := orderservicelogic.NewDeliveryLogic(ctx, s.svcCtx)
	return l.Delivery(in)
}

// 批量关闭订单
func (s *OrderServiceServer) CloseOrder(ctx context.Context, in *omsclient.CloseOrderReq) (*omsclient.CloseOrderResp, error) {
	l := orderservicelogic.NewCloseOrderLogic(ctx, s.svcCtx)
	return l.CloseOrder(in)
}

// 获取订单详情：订单信息、商品信息、操作记录
func (s *OrderServiceServer) OrderDetail(ctx context.Context, in *omsclient.OrderDetailReq) (*omsclient.OrderDetailResp, error) {
	l := orderservicelogic.NewOrderDetailLogic(ctx, s.svcCtx)
	return l.OrderDetail(in)
}

// 修改收货人信息
func (s *OrderServiceServer) UpdateReceiverInfo(ctx context.Context, in *omsclient.UpdateReceiverInfoReq) (*omsclient.UpdateReceiverInfoResp, error) {
	l := orderservicelogic.NewUpdateReceiverInfoLogic(ctx, s.svcCtx)
	return l.UpdateReceiverInfo(in)
}

// 修改订单费用信息
func (s *OrderServiceServer) UpdateMoneyInfo(ctx context.Context, in *omsclient.UpdateMoneyInfoReq) (*omsclient.UpdateMoneyInfoResp, error) {
	l := orderservicelogic.NewUpdateMoneyInfoLogic(ctx, s.svcCtx)
	return l.UpdateMoneyInfo(in)
}

// 备注订单
func (s *OrderServiceServer) UpdateNote(ctx context.Context, in *omsclient.UpdateNoteReq) (*omsclient.UpdateNoteResp, error) {
	l := orderservicelogic.NewUpdateNoteLogic(ctx, s.svcCtx)
	return l.UpdateNote(in)
}

// 查询订单
func (s *OrderServiceServer) OrderList(ctx context.Context, in *omsclient.OrderListReq) (*omsclient.OrderListResp, error) {
	l := orderservicelogic.NewOrderListLogic(ctx, s.svcCtx)
	return l.OrderList(in)
}

// 批量删除订单
func (s *OrderServiceServer) OrderDelete(ctx context.Context, in *omsclient.OrderDeleteReq) (*omsclient.OrderDeleteResp, error) {
	l := orderservicelogic.NewOrderDeleteLogic(ctx, s.svcCtx)
	return l.OrderDelete(in)
}

// app
func (s *OrderServiceServer) OrderAdd(ctx context.Context, in *omsclient.OrderAddReq) (*omsclient.OrderAddResp, error) {
	l := orderservicelogic.NewOrderAddLogic(ctx, s.svcCtx)
	return l.OrderAdd(in)
}

func (s *OrderServiceServer) OrderUpdate(ctx context.Context, in *omsclient.OrderUpdateReq) (*omsclient.OrderUpdateResp, error) {
	l := orderservicelogic.NewOrderUpdateLogic(ctx, s.svcCtx)
	return l.OrderUpdate(in)
}

func (s *OrderServiceServer) OrderListByMemberId(ctx context.Context, in *omsclient.OrderListByMemberIdReq) (*omsclient.OrderListByMemberIdResp, error) {
	l := orderservicelogic.NewOrderListByMemberIdLogic(ctx, s.svcCtx)
	return l.OrderListByMemberId(in)
}

func (s *OrderServiceServer) OrderCancel(ctx context.Context, in *omsclient.OrderCancelReq) (*omsclient.OrderCancelResp, error) {
	l := orderservicelogic.NewOrderCancelLogic(ctx, s.svcCtx)
	return l.OrderCancel(in)
}

func (s *OrderServiceServer) OrderConfirm(ctx context.Context, in *omsclient.OrderConfirmReq) (*omsclient.OrderConfirmResp, error) {
	l := orderservicelogic.NewOrderConfirmLogic(ctx, s.svcCtx)
	return l.OrderConfirm(in)
}

func (s *OrderServiceServer) OrderRefund(ctx context.Context, in *omsclient.OrderRefundReq) (*omsclient.OrderRefundResp, error) {
	l := orderservicelogic.NewOrderRefundLogic(ctx, s.svcCtx)
	return l.OrderRefund(in)
}

func (s *OrderServiceServer) OrderDeleteById(ctx context.Context, in *omsclient.OrderDeleteByIdReq) (*omsclient.OrderDeleteResp, error) {
	l := orderservicelogic.NewOrderDeleteByIdLogic(ctx, s.svcCtx)
	return l.OrderDeleteById(in)
}

// app端查询会员的订单列表信息
func (s *OrderServiceServer) QueryOrderList(ctx context.Context, in *omsclient.QueryOrderListReq) (*omsclient.OrderListResp, error) {
	l := orderservicelogic.NewQueryOrderListLogic(ctx, s.svcCtx)
	return l.QueryOrderList(in)
}

// 更新订单状态
func (s *OrderServiceServer) UpdateOrderStatusByOutTradeNo(ctx context.Context, in *omsclient.UpdateOrderStatusByOutTradeNoReq) (*omsclient.UpdateOrderStatusByOutTradeNoResp, error) {
	l := orderservicelogic.NewUpdateOrderStatusByOutTradeNoLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatusByOutTradeNo(in)
}

// 查询超时、未支付的订单及订单详情
func (s *OrderServiceServer) QueryTimeOutOrderList(ctx context.Context, in *omsclient.QueryTimeOutOrderListReq) (*omsclient.OrderListResp, error) {
	l := orderservicelogic.NewQueryTimeOutOrderListLogic(ctx, s.svcCtx)
	return l.QueryTimeOutOrderList(in)
}
