// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: oms.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/oms/internal/logic/orderservice"
	"github.com/feihua/zero-admin/rpc/oms/internal/svc"
	"github.com/feihua/zero-admin/rpc/oms/omsclient"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	omsclient.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

// 添加订单(app)
func (s *OrderServiceServer) AddOrder(ctx context.Context, in *omsclient.AddOrderReq) (*omsclient.AddOrderResp, error) {
	l := orderservicelogic.NewAddOrderLogic(ctx, s.svcCtx)
	return l.AddOrder(in)
}

// 删除订单
func (s *OrderServiceServer) DeleteOrder(ctx context.Context, in *omsclient.DeleteOrderReq) (*omsclient.DeleteOrderResp, error) {
	l := orderservicelogic.NewDeleteOrderLogic(ctx, s.svcCtx)
	return l.DeleteOrder(in)
}

// 更新订单
func (s *OrderServiceServer) UpdateOrder(ctx context.Context, in *omsclient.UpdateOrderReq) (*omsclient.UpdateOrderResp, error) {
	l := orderservicelogic.NewUpdateOrderLogic(ctx, s.svcCtx)
	return l.UpdateOrder(in)
}

// 更新订单状态
func (s *OrderServiceServer) UpdateOrderStatus(ctx context.Context, in *omsclient.UpdateOrderStatusReq) (*omsclient.UpdateOrderStatusResp, error) {
	l := orderservicelogic.NewUpdateOrderStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatus(in)
}

// 查询订单详情:订单信息、商品信息、操作记录
func (s *OrderServiceServer) QueryOrderDetail(ctx context.Context, in *omsclient.QueryOrderDetailReq) (*omsclient.QueryOrderDetailResp, error) {
	l := orderservicelogic.NewQueryOrderDetailLogic(ctx, s.svcCtx)
	return l.QueryOrderDetail(in)
}

// 查询订单列表
func (s *OrderServiceServer) QueryOrderList(ctx context.Context, in *omsclient.QueryOrderListReq) (*omsclient.QueryOrderListResp, error) {
	l := orderservicelogic.NewQueryOrderListLogic(ctx, s.svcCtx)
	return l.QueryOrderList(in)
}

// 订单发货
func (s *OrderServiceServer) Delivery(ctx context.Context, in *omsclient.DeliveryReq) (*omsclient.DeliveryResp, error) {
	l := orderservicelogic.NewDeliveryLogic(ctx, s.svcCtx)
	return l.Delivery(in)
}

// 关闭订单
func (s *OrderServiceServer) CloseOrder(ctx context.Context, in *omsclient.CloseOrderReq) (*omsclient.CloseOrderResp, error) {
	l := orderservicelogic.NewCloseOrderLogic(ctx, s.svcCtx)
	return l.CloseOrder(in)
}

// 取消订单(app)
func (s *OrderServiceServer) CancelOrder(ctx context.Context, in *omsclient.CancelOrderReq) (*omsclient.CancelOrderResp, error) {
	l := orderservicelogic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

// 确认收货(app)
func (s *OrderServiceServer) ConfirmOrder(ctx context.Context, in *omsclient.ConfirmOrderReq) (*omsclient.ConfirmOrderResp, error) {
	l := orderservicelogic.NewConfirmOrderLogic(ctx, s.svcCtx)
	return l.ConfirmOrder(in)
}

// 查询超时、未支付的订单及订单详情
func (s *OrderServiceServer) QueryTimeOutOrderList(ctx context.Context, in *omsclient.QueryTimeOutOrderListReq) (*omsclient.QueryOrderListResp, error) {
	l := orderservicelogic.NewQueryTimeOutOrderListLogic(ctx, s.svcCtx)
	return l.QueryTimeOutOrderList(in)
}
