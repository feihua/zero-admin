// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: rpc/cms/cms.proto

package cmsclient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加帮助
type AddHelpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	CategoryId int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //图标
	Title      string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                              //标题
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	ReadCount  int32  `protobuf:"varint,6,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`    //阅读量
	Content    string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`                          //内容
	CreateBy   string `protobuf:"bytes,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
}

func (x *AddHelpReq) Reset() {
	*x = AddHelpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHelpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHelpReq) ProtoMessage() {}

func (x *AddHelpReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHelpReq.ProtoReflect.Descriptor instead.
func (*AddHelpReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{0}
}

func (x *AddHelpReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddHelpReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddHelpReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddHelpReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddHelpReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddHelpReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *AddHelpReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddHelpReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type AddHelpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddHelpResp) Reset() {
	*x = AddHelpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHelpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHelpResp) ProtoMessage() {}

func (x *AddHelpResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHelpResp.ProtoReflect.Descriptor instead.
func (*AddHelpResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{1}
}

func (x *AddHelpResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除帮助
type DeleteHelpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteHelpReq) Reset() {
	*x = DeleteHelpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHelpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHelpReq) ProtoMessage() {}

func (x *DeleteHelpReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHelpReq.ProtoReflect.Descriptor instead.
func (*DeleteHelpReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteHelpReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteHelpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteHelpResp) Reset() {
	*x = DeleteHelpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHelpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHelpResp) ProtoMessage() {}

func (x *DeleteHelpResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHelpResp.ProtoReflect.Descriptor instead.
func (*DeleteHelpResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteHelpResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新帮助
type UpdateHelpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	CategoryId int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //图标
	Title      string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                              //标题
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	ReadCount  int32  `protobuf:"varint,6,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`    //阅读量
	Content    string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`                          //内容
	UpdateBy   string `protobuf:"bytes,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新者
}

func (x *UpdateHelpReq) Reset() {
	*x = UpdateHelpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpReq) ProtoMessage() {}

func (x *UpdateHelpReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpReq.ProtoReflect.Descriptor instead.
func (*UpdateHelpReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateHelpReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateHelpReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateHelpReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateHelpReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateHelpReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateHelpReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *UpdateHelpReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateHelpReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateHelpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateHelpResp) Reset() {
	*x = UpdateHelpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpResp) ProtoMessage() {}

func (x *UpdateHelpResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpResp.ProtoReflect.Descriptor instead.
func (*UpdateHelpResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHelpResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新帮助状态
type UpdateHelpStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                          //主键ID
	ShowStatus int32   `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	UpdateBy   string  `protobuf:"bytes,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新者
}

func (x *UpdateHelpStatusReq) Reset() {
	*x = UpdateHelpStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpStatusReq) ProtoMessage() {}

func (x *UpdateHelpStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateHelpStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHelpStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateHelpStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateHelpStatusReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateHelpStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateHelpStatusResp) Reset() {
	*x = UpdateHelpStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpStatusResp) ProtoMessage() {}

func (x *UpdateHelpStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateHelpStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHelpStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询帮助详情
type QueryHelpDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryHelpDetailReq) Reset() {
	*x = QueryHelpDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpDetailReq) ProtoMessage() {}

func (x *QueryHelpDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpDetailReq.ProtoReflect.Descriptor instead.
func (*QueryHelpDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{8}
}

func (x *QueryHelpDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryHelpDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	CategoryId int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //图标
	Title      string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                              //标题
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	ReadCount  int32  `protobuf:"varint,6,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`    //阅读量
	Content    string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`                          //内容
	CreateBy   string `protobuf:"bytes,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
	CreateTime string `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   string `protobuf:"bytes,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新者
	UpdateTime string `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *QueryHelpDetailResp) Reset() {
	*x = QueryHelpDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpDetailResp) ProtoMessage() {}

func (x *QueryHelpDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpDetailResp.ProtoReflect.Descriptor instead.
func (*QueryHelpDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{9}
}

func (x *QueryHelpDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryHelpDetailResp) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryHelpDetailResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryHelpDetailResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryHelpDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryHelpDetailResp) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *QueryHelpDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryHelpDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QueryHelpDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryHelpDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QueryHelpDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询帮助列表
type QueryHelpListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Icon       string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                //图标
	Title      string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                              //标题
	ShowStatus int32  `protobuf:"varint,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	ReadCount  int32  `protobuf:"varint,5,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`    //阅读量
	Content    string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`                          //内容
	PageNum    int32  `protobuf:"varint,7,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`          //第几页
	PageSize   int32  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       //每页的数量
}

func (x *QueryHelpListReq) Reset() {
	*x = QueryHelpListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpListReq) ProtoMessage() {}

func (x *QueryHelpListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpListReq.ProtoReflect.Descriptor instead.
func (*QueryHelpListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{10}
}

func (x *QueryHelpListReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryHelpListReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryHelpListReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryHelpListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryHelpListReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *QueryHelpListReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryHelpListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryHelpListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type HelpListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	CategoryId int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` //分类ID
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //图标
	Title      string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                              //标题
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	ReadCount  int32  `protobuf:"varint,6,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`    //阅读量
	Content    string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`                          //内容
	CreateBy   string `protobuf:"bytes,8,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
	CreateTime string `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   string `protobuf:"bytes,10,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`       //更新者
	UpdateTime string `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *HelpListData) Reset() {
	*x = HelpListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpListData) ProtoMessage() {}

func (x *HelpListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpListData.ProtoReflect.Descriptor instead.
func (*HelpListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{11}
}

func (x *HelpListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HelpListData) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *HelpListData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *HelpListData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HelpListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *HelpListData) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *HelpListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HelpListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *HelpListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *HelpListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *HelpListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryHelpListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*HelpListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryHelpListResp) Reset() {
	*x = QueryHelpListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpListResp) ProtoMessage() {}

func (x *QueryHelpListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpListResp.ProtoReflect.Descriptor instead.
func (*QueryHelpListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{12}
}

func (x *QueryHelpListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHelpListResp) GetList() []*HelpListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加帮助分类
type AddHelpCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //分类名称
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //分类图标
	HelpCount  int32  `protobuf:"varint,4,opt,name=help_count,json=helpCount,proto3" json:"help_count,omitempty"`    //专题数量
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	Sort       int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	CreateBy   string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
}

func (x *AddHelpCategoryReq) Reset() {
	*x = AddHelpCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHelpCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHelpCategoryReq) ProtoMessage() {}

func (x *AddHelpCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHelpCategoryReq.ProtoReflect.Descriptor instead.
func (*AddHelpCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{13}
}

func (x *AddHelpCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddHelpCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddHelpCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddHelpCategoryReq) GetHelpCount() int32 {
	if x != nil {
		return x.HelpCount
	}
	return 0
}

func (x *AddHelpCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddHelpCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddHelpCategoryReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type AddHelpCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddHelpCategoryResp) Reset() {
	*x = AddHelpCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHelpCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHelpCategoryResp) ProtoMessage() {}

func (x *AddHelpCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHelpCategoryResp.ProtoReflect.Descriptor instead.
func (*AddHelpCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{14}
}

func (x *AddHelpCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除帮助分类
type DeleteHelpCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteHelpCategoryReq) Reset() {
	*x = DeleteHelpCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHelpCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHelpCategoryReq) ProtoMessage() {}

func (x *DeleteHelpCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHelpCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteHelpCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteHelpCategoryReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteHelpCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteHelpCategoryResp) Reset() {
	*x = DeleteHelpCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHelpCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHelpCategoryResp) ProtoMessage() {}

func (x *DeleteHelpCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHelpCategoryResp.ProtoReflect.Descriptor instead.
func (*DeleteHelpCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteHelpCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新帮助分类
type UpdateHelpCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //分类名称
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //分类图标
	HelpCount  int32  `protobuf:"varint,4,opt,name=help_count,json=helpCount,proto3" json:"help_count,omitempty"`    //专题数量
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	Sort       int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	UpdateBy   string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
}

func (x *UpdateHelpCategoryReq) Reset() {
	*x = UpdateHelpCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpCategoryReq) ProtoMessage() {}

func (x *UpdateHelpCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateHelpCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateHelpCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateHelpCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateHelpCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateHelpCategoryReq) GetHelpCount() int32 {
	if x != nil {
		return x.HelpCount
	}
	return 0
}

func (x *UpdateHelpCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateHelpCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateHelpCategoryReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateHelpCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateHelpCategoryResp) Reset() {
	*x = UpdateHelpCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpCategoryResp) ProtoMessage() {}

func (x *UpdateHelpCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpCategoryResp.ProtoReflect.Descriptor instead.
func (*UpdateHelpCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateHelpCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新帮助分类状态
type UpdateHelpCategoryStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                          //主键ID
	ShowStatus int32   `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	UpdateBy   string  `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
}

func (x *UpdateHelpCategoryStatusReq) Reset() {
	*x = UpdateHelpCategoryStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpCategoryStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpCategoryStatusReq) ProtoMessage() {}

func (x *UpdateHelpCategoryStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpCategoryStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateHelpCategoryStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateHelpCategoryStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateHelpCategoryStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateHelpCategoryStatusReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateHelpCategoryStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateHelpCategoryStatusResp) Reset() {
	*x = UpdateHelpCategoryStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpCategoryStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpCategoryStatusResp) ProtoMessage() {}

func (x *UpdateHelpCategoryStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpCategoryStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateHelpCategoryStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateHelpCategoryStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询帮助分类详情
type QueryHelpCategoryDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryHelpCategoryDetailReq) Reset() {
	*x = QueryHelpCategoryDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpCategoryDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpCategoryDetailReq) ProtoMessage() {}

func (x *QueryHelpCategoryDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpCategoryDetailReq.ProtoReflect.Descriptor instead.
func (*QueryHelpCategoryDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{21}
}

func (x *QueryHelpCategoryDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryHelpCategoryDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //分类名称
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //分类图标
	HelpCount  int32  `protobuf:"varint,4,opt,name=help_count,json=helpCount,proto3" json:"help_count,omitempty"`    //专题数量
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	Sort       int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	CreateBy   string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
	UpdateTime string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *QueryHelpCategoryDetailResp) Reset() {
	*x = QueryHelpCategoryDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpCategoryDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpCategoryDetailResp) ProtoMessage() {}

func (x *QueryHelpCategoryDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpCategoryDetailResp.ProtoReflect.Descriptor instead.
func (*QueryHelpCategoryDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{22}
}

func (x *QueryHelpCategoryDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryHelpCategoryDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryHelpCategoryDetailResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryHelpCategoryDetailResp) GetHelpCount() int32 {
	if x != nil {
		return x.HelpCount
	}
	return 0
}

func (x *QueryHelpCategoryDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryHelpCategoryDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryHelpCategoryDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QueryHelpCategoryDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryHelpCategoryDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QueryHelpCategoryDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询帮助分类列表
type QueryHelpCategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                //分类名称
	Icon       string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                //分类图标
	HelpCount  int32  `protobuf:"varint,3,opt,name=help_count,json=helpCount,proto3" json:"help_count,omitempty"`    //专题数量
	ShowStatus int32  `protobuf:"varint,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	PageNum    int32  `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`          //第几页
	PageSize   int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       //每页的数量
}

func (x *QueryHelpCategoryListReq) Reset() {
	*x = QueryHelpCategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpCategoryListReq) ProtoMessage() {}

func (x *QueryHelpCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpCategoryListReq.ProtoReflect.Descriptor instead.
func (*QueryHelpCategoryListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{23}
}

func (x *QueryHelpCategoryListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryHelpCategoryListReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryHelpCategoryListReq) GetHelpCount() int32 {
	if x != nil {
		return x.HelpCount
	}
	return 0
}

func (x *QueryHelpCategoryListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryHelpCategoryListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryHelpCategoryListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type HelpCategoryListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //分类名称
	Icon       string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                //分类图标
	HelpCount  int32  `protobuf:"varint,4,opt,name=help_count,json=helpCount,proto3" json:"help_count,omitempty"`    //专题数量
	ShowStatus int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	Sort       int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	CreateBy   string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
	UpdateTime string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *HelpCategoryListData) Reset() {
	*x = HelpCategoryListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpCategoryListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpCategoryListData) ProtoMessage() {}

func (x *HelpCategoryListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpCategoryListData.ProtoReflect.Descriptor instead.
func (*HelpCategoryListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{24}
}

func (x *HelpCategoryListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HelpCategoryListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelpCategoryListData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *HelpCategoryListData) GetHelpCount() int32 {
	if x != nil {
		return x.HelpCount
	}
	return 0
}

func (x *HelpCategoryListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *HelpCategoryListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *HelpCategoryListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *HelpCategoryListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *HelpCategoryListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *HelpCategoryListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryHelpCategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*HelpCategoryListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryHelpCategoryListResp) Reset() {
	*x = QueryHelpCategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpCategoryListResp) ProtoMessage() {}

func (x *QueryHelpCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpCategoryListResp.ProtoReflect.Descriptor instead.
func (*QueryHelpCategoryListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{25}
}

func (x *QueryHelpCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryHelpCategoryListResp) GetList() []*HelpCategoryListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加用户举报
type AddMemberReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                      //编号
	ReportType       int32  `protobuf:"varint,2,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`                    //举报类型：0->商品评价；1->话题内容；2->用户评论
	ReportMemberName string `protobuf:"bytes,3,opt,name=report_member_name,json=reportMemberName,proto3" json:"report_member_name,omitempty"` //举报人
	ReportObject     string `protobuf:"bytes,4,opt,name=report_object,json=reportObject,proto3" json:"report_object,omitempty"`               //被举报对象
	ReportStatus     int32  `protobuf:"varint,5,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`              //举报状态：0->未处理；1->已处理
	HandleStatus     int32  `protobuf:"varint,6,opt,name=handle_status,json=handleStatus,proto3" json:"handle_status,omitempty"`              //处理结果：0->无效；1->有效；2->恶意
	Note             string `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`                                                   //备注
}

func (x *AddMemberReportReq) Reset() {
	*x = AddMemberReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemberReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemberReportReq) ProtoMessage() {}

func (x *AddMemberReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemberReportReq.ProtoReflect.Descriptor instead.
func (*AddMemberReportReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{26}
}

func (x *AddMemberReportReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddMemberReportReq) GetReportType() int32 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *AddMemberReportReq) GetReportMemberName() string {
	if x != nil {
		return x.ReportMemberName
	}
	return ""
}

func (x *AddMemberReportReq) GetReportObject() string {
	if x != nil {
		return x.ReportObject
	}
	return ""
}

func (x *AddMemberReportReq) GetReportStatus() int32 {
	if x != nil {
		return x.ReportStatus
	}
	return 0
}

func (x *AddMemberReportReq) GetHandleStatus() int32 {
	if x != nil {
		return x.HandleStatus
	}
	return 0
}

func (x *AddMemberReportReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AddMemberReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddMemberReportResp) Reset() {
	*x = AddMemberReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemberReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemberReportResp) ProtoMessage() {}

func (x *AddMemberReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemberReportResp.ProtoReflect.Descriptor instead.
func (*AddMemberReportResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{27}
}

func (x *AddMemberReportResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除用户举报
type DeleteMemberReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteMemberReportReq) Reset() {
	*x = DeleteMemberReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemberReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemberReportReq) ProtoMessage() {}

func (x *DeleteMemberReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemberReportReq.ProtoReflect.Descriptor instead.
func (*DeleteMemberReportReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteMemberReportReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteMemberReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteMemberReportResp) Reset() {
	*x = DeleteMemberReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemberReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemberReportResp) ProtoMessage() {}

func (x *DeleteMemberReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemberReportResp.ProtoReflect.Descriptor instead.
func (*DeleteMemberReportResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteMemberReportResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新用户举报
type UpdateMemberReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                      //编号
	ReportType       int32  `protobuf:"varint,2,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`                    //举报类型：0->商品评价；1->话题内容；2->用户评论
	ReportMemberName string `protobuf:"bytes,3,opt,name=report_member_name,json=reportMemberName,proto3" json:"report_member_name,omitempty"` //举报人
	ReportObject     string `protobuf:"bytes,4,opt,name=report_object,json=reportObject,proto3" json:"report_object,omitempty"`               //被举报对象
	ReportStatus     int32  `protobuf:"varint,5,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`              //举报状态：0->未处理；1->已处理
	HandleStatus     int32  `protobuf:"varint,6,opt,name=handle_status,json=handleStatus,proto3" json:"handle_status,omitempty"`              //处理结果：0->无效；1->有效；2->恶意
	Note             string `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`                                                   //备注
}

func (x *UpdateMemberReportReq) Reset() {
	*x = UpdateMemberReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberReportReq) ProtoMessage() {}

func (x *UpdateMemberReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberReportReq.ProtoReflect.Descriptor instead.
func (*UpdateMemberReportReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateMemberReportReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMemberReportReq) GetReportType() int32 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *UpdateMemberReportReq) GetReportMemberName() string {
	if x != nil {
		return x.ReportMemberName
	}
	return ""
}

func (x *UpdateMemberReportReq) GetReportObject() string {
	if x != nil {
		return x.ReportObject
	}
	return ""
}

func (x *UpdateMemberReportReq) GetReportStatus() int32 {
	if x != nil {
		return x.ReportStatus
	}
	return 0
}

func (x *UpdateMemberReportReq) GetHandleStatus() int32 {
	if x != nil {
		return x.HandleStatus
	}
	return 0
}

func (x *UpdateMemberReportReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type UpdateMemberReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateMemberReportResp) Reset() {
	*x = UpdateMemberReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberReportResp) ProtoMessage() {}

func (x *UpdateMemberReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberReportResp.ProtoReflect.Descriptor instead.
func (*UpdateMemberReportResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateMemberReportResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新用户举报状态
type UpdateMemberReportStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids          []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                                //编号
	ReportStatus int32   `protobuf:"varint,5,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"` //举报状态：0->未处理；1->已处理
	HandleStatus int32   `protobuf:"varint,6,opt,name=handle_status,json=handleStatus,proto3" json:"handle_status,omitempty"` //处理结果：0->无效；1->有效；2->恶意
}

func (x *UpdateMemberReportStatusReq) Reset() {
	*x = UpdateMemberReportStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberReportStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberReportStatusReq) ProtoMessage() {}

func (x *UpdateMemberReportStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberReportStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateMemberReportStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateMemberReportStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateMemberReportStatusReq) GetReportStatus() int32 {
	if x != nil {
		return x.ReportStatus
	}
	return 0
}

func (x *UpdateMemberReportStatusReq) GetHandleStatus() int32 {
	if x != nil {
		return x.HandleStatus
	}
	return 0
}

type UpdateMemberReportStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateMemberReportStatusResp) Reset() {
	*x = UpdateMemberReportStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberReportStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberReportStatusResp) ProtoMessage() {}

func (x *UpdateMemberReportStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberReportStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateMemberReportStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateMemberReportStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询用户举报详情
type QueryMemberReportDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryMemberReportDetailReq) Reset() {
	*x = QueryMemberReportDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberReportDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberReportDetailReq) ProtoMessage() {}

func (x *QueryMemberReportDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberReportDetailReq.ProtoReflect.Descriptor instead.
func (*QueryMemberReportDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{34}
}

func (x *QueryMemberReportDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryMemberReportDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                      //编号
	ReportType       int32  `protobuf:"varint,2,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`                    //举报类型：0->商品评价；1->话题内容；2->用户评论
	ReportMemberName string `protobuf:"bytes,3,opt,name=report_member_name,json=reportMemberName,proto3" json:"report_member_name,omitempty"` //举报人
	ReportObject     string `protobuf:"bytes,4,opt,name=report_object,json=reportObject,proto3" json:"report_object,omitempty"`               //被举报对象
	ReportStatus     int32  `protobuf:"varint,5,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`              //举报状态：0->未处理；1->已处理
	HandleStatus     int32  `protobuf:"varint,6,opt,name=handle_status,json=handleStatus,proto3" json:"handle_status,omitempty"`              //处理结果：0->无效；1->有效；2->恶意
	Note             string `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`                                                   //备注
	CreateTime       string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                     //创建时间
}

func (x *QueryMemberReportDetailResp) Reset() {
	*x = QueryMemberReportDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberReportDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberReportDetailResp) ProtoMessage() {}

func (x *QueryMemberReportDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberReportDetailResp.ProtoReflect.Descriptor instead.
func (*QueryMemberReportDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{35}
}

func (x *QueryMemberReportDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryMemberReportDetailResp) GetReportType() int32 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *QueryMemberReportDetailResp) GetReportMemberName() string {
	if x != nil {
		return x.ReportMemberName
	}
	return ""
}

func (x *QueryMemberReportDetailResp) GetReportObject() string {
	if x != nil {
		return x.ReportObject
	}
	return ""
}

func (x *QueryMemberReportDetailResp) GetReportStatus() int32 {
	if x != nil {
		return x.ReportStatus
	}
	return 0
}

func (x *QueryMemberReportDetailResp) GetHandleStatus() int32 {
	if x != nil {
		return x.HandleStatus
	}
	return 0
}

func (x *QueryMemberReportDetailResp) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *QueryMemberReportDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

// 分页查询用户举报列表
type QueryMemberReportListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportType       int32  `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`                    //举报类型：0->商品评价；1->话题内容；2->用户评论
	ReportMemberName string `protobuf:"bytes,2,opt,name=report_member_name,json=reportMemberName,proto3" json:"report_member_name,omitempty"` //举报人
	ReportObject     string `protobuf:"bytes,3,opt,name=report_object,json=reportObject,proto3" json:"report_object,omitempty"`               //被举报对象
	ReportStatus     int32  `protobuf:"varint,4,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`              //举报状态：0->未处理；1->已处理
	HandleStatus     int32  `protobuf:"varint,5,opt,name=handle_status,json=handleStatus,proto3" json:"handle_status,omitempty"`              //处理结果：0->无效；1->有效；2->恶意
	Note             string `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`                                                   //备注
	PageNum          int32  `protobuf:"varint,7,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                             //第几页
	PageSize         int32  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                          //每页的数量
}

func (x *QueryMemberReportListReq) Reset() {
	*x = QueryMemberReportListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberReportListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberReportListReq) ProtoMessage() {}

func (x *QueryMemberReportListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberReportListReq.ProtoReflect.Descriptor instead.
func (*QueryMemberReportListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{36}
}

func (x *QueryMemberReportListReq) GetReportType() int32 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *QueryMemberReportListReq) GetReportMemberName() string {
	if x != nil {
		return x.ReportMemberName
	}
	return ""
}

func (x *QueryMemberReportListReq) GetReportObject() string {
	if x != nil {
		return x.ReportObject
	}
	return ""
}

func (x *QueryMemberReportListReq) GetReportStatus() int32 {
	if x != nil {
		return x.ReportStatus
	}
	return 0
}

func (x *QueryMemberReportListReq) GetHandleStatus() int32 {
	if x != nil {
		return x.HandleStatus
	}
	return 0
}

func (x *QueryMemberReportListReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *QueryMemberReportListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryMemberReportListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MemberReportListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                      //编号
	ReportType       int32  `protobuf:"varint,2,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`                    //举报类型：0->商品评价；1->话题内容；2->用户评论
	ReportMemberName string `protobuf:"bytes,3,opt,name=report_member_name,json=reportMemberName,proto3" json:"report_member_name,omitempty"` //举报人
	ReportObject     string `protobuf:"bytes,4,opt,name=report_object,json=reportObject,proto3" json:"report_object,omitempty"`               //被举报对象
	ReportStatus     int32  `protobuf:"varint,5,opt,name=report_status,json=reportStatus,proto3" json:"report_status,omitempty"`              //举报状态：0->未处理；1->已处理
	HandleStatus     int32  `protobuf:"varint,6,opt,name=handle_status,json=handleStatus,proto3" json:"handle_status,omitempty"`              //处理结果：0->无效；1->有效；2->恶意
	Note             string `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`                                                   //备注
	CreateTime       string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                     //创建时间
}

func (x *MemberReportListData) Reset() {
	*x = MemberReportListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberReportListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberReportListData) ProtoMessage() {}

func (x *MemberReportListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberReportListData.ProtoReflect.Descriptor instead.
func (*MemberReportListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{37}
}

func (x *MemberReportListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberReportListData) GetReportType() int32 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *MemberReportListData) GetReportMemberName() string {
	if x != nil {
		return x.ReportMemberName
	}
	return ""
}

func (x *MemberReportListData) GetReportObject() string {
	if x != nil {
		return x.ReportObject
	}
	return ""
}

func (x *MemberReportListData) GetReportStatus() int32 {
	if x != nil {
		return x.ReportStatus
	}
	return 0
}

func (x *MemberReportListData) GetHandleStatus() int32 {
	if x != nil {
		return x.HandleStatus
	}
	return 0
}

func (x *MemberReportListData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *MemberReportListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type QueryMemberReportListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*MemberReportListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryMemberReportListResp) Reset() {
	*x = QueryMemberReportListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberReportListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberReportListResp) ProtoMessage() {}

func (x *QueryMemberReportListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberReportListResp.ProtoReflect.Descriptor instead.
func (*QueryMemberReportListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{38}
}

func (x *QueryMemberReportListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryMemberReportListResp) GetList() []*MemberReportListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加优选专区
type AddPreferredAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //专区名称
	SubTitle   string `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`        //子标题
	Pic        string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                  //展示图片
	Sort       int32  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	ShowStatus int32  `protobuf:"varint,6,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	CreateBy   string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
}

func (x *AddPreferredAreaReq) Reset() {
	*x = AddPreferredAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPreferredAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPreferredAreaReq) ProtoMessage() {}

func (x *AddPreferredAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPreferredAreaReq.ProtoReflect.Descriptor instead.
func (*AddPreferredAreaReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{39}
}

func (x *AddPreferredAreaReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddPreferredAreaReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPreferredAreaReq) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *AddPreferredAreaReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *AddPreferredAreaReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddPreferredAreaReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddPreferredAreaReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type AddPreferredAreaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddPreferredAreaResp) Reset() {
	*x = AddPreferredAreaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPreferredAreaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPreferredAreaResp) ProtoMessage() {}

func (x *AddPreferredAreaResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPreferredAreaResp.ProtoReflect.Descriptor instead.
func (*AddPreferredAreaResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{40}
}

func (x *AddPreferredAreaResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除优选专区
type DeletePreferredAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeletePreferredAreaReq) Reset() {
	*x = DeletePreferredAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePreferredAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePreferredAreaReq) ProtoMessage() {}

func (x *DeletePreferredAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePreferredAreaReq.ProtoReflect.Descriptor instead.
func (*DeletePreferredAreaReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{41}
}

func (x *DeletePreferredAreaReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeletePreferredAreaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeletePreferredAreaResp) Reset() {
	*x = DeletePreferredAreaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePreferredAreaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePreferredAreaResp) ProtoMessage() {}

func (x *DeletePreferredAreaResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePreferredAreaResp.ProtoReflect.Descriptor instead.
func (*DeletePreferredAreaResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{42}
}

func (x *DeletePreferredAreaResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优选专区
type UpdatePreferredAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //专区名称
	SubTitle   string `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`        //子标题
	Pic        string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                  //展示图片
	Sort       int32  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	ShowStatus int32  `protobuf:"varint,6,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	UpdateBy   string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
}

func (x *UpdatePreferredAreaReq) Reset() {
	*x = UpdatePreferredAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePreferredAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreferredAreaReq) ProtoMessage() {}

func (x *UpdatePreferredAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreferredAreaReq.ProtoReflect.Descriptor instead.
func (*UpdatePreferredAreaReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{43}
}

func (x *UpdatePreferredAreaReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePreferredAreaReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePreferredAreaReq) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *UpdatePreferredAreaReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *UpdatePreferredAreaReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdatePreferredAreaReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdatePreferredAreaReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdatePreferredAreaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdatePreferredAreaResp) Reset() {
	*x = UpdatePreferredAreaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePreferredAreaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreferredAreaResp) ProtoMessage() {}

func (x *UpdatePreferredAreaResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreferredAreaResp.ProtoReflect.Descriptor instead.
func (*UpdatePreferredAreaResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{44}
}

func (x *UpdatePreferredAreaResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新优选专区状态
type UpdatePreferredAreaStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                          //主键ID
	ShowStatus int32   `protobuf:"varint,6,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	UpdateBy   string  `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
}

func (x *UpdatePreferredAreaStatusReq) Reset() {
	*x = UpdatePreferredAreaStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePreferredAreaStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreferredAreaStatusReq) ProtoMessage() {}

func (x *UpdatePreferredAreaStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreferredAreaStatusReq.ProtoReflect.Descriptor instead.
func (*UpdatePreferredAreaStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{45}
}

func (x *UpdatePreferredAreaStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdatePreferredAreaStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdatePreferredAreaStatusReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdatePreferredAreaStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdatePreferredAreaStatusResp) Reset() {
	*x = UpdatePreferredAreaStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePreferredAreaStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreferredAreaStatusResp) ProtoMessage() {}

func (x *UpdatePreferredAreaStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreferredAreaStatusResp.ProtoReflect.Descriptor instead.
func (*UpdatePreferredAreaStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{46}
}

func (x *UpdatePreferredAreaStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询优选专区详情
type QueryPreferredAreaDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryPreferredAreaDetailReq) Reset() {
	*x = QueryPreferredAreaDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreferredAreaDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreferredAreaDetailReq) ProtoMessage() {}

func (x *QueryPreferredAreaDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreferredAreaDetailReq.ProtoReflect.Descriptor instead.
func (*QueryPreferredAreaDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{47}
}

func (x *QueryPreferredAreaDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryPreferredAreaDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //专区名称
	SubTitle   string `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`        //子标题
	Pic        string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                  //展示图片
	Sort       int32  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	ShowStatus int32  `protobuf:"varint,6,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	CreateBy   string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
	UpdateTime string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *QueryPreferredAreaDetailResp) Reset() {
	*x = QueryPreferredAreaDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreferredAreaDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreferredAreaDetailResp) ProtoMessage() {}

func (x *QueryPreferredAreaDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreferredAreaDetailResp.ProtoReflect.Descriptor instead.
func (*QueryPreferredAreaDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{48}
}

func (x *QueryPreferredAreaDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryPreferredAreaDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryPreferredAreaDetailResp) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *QueryPreferredAreaDetailResp) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *QueryPreferredAreaDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryPreferredAreaDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryPreferredAreaDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QueryPreferredAreaDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryPreferredAreaDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QueryPreferredAreaDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询优选专区列表
type QueryPreferredAreaListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                //专区名称
	SubTitle   string `protobuf:"bytes,2,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`        //子标题
	Pic        string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic,omitempty"`                                  //展示图片
	ShowStatus int32  `protobuf:"varint,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	PageNum    int64  `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`          //第几页
	PageSize   int64  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       //每页的数量
}

func (x *QueryPreferredAreaListReq) Reset() {
	*x = QueryPreferredAreaListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreferredAreaListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreferredAreaListReq) ProtoMessage() {}

func (x *QueryPreferredAreaListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreferredAreaListReq.ProtoReflect.Descriptor instead.
func (*QueryPreferredAreaListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{49}
}

func (x *QueryPreferredAreaListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryPreferredAreaListReq) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *QueryPreferredAreaListReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *QueryPreferredAreaListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryPreferredAreaListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryPreferredAreaListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PreferredAreaListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //主键ID
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //专区名称
	SubTitle   string `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`        //子标题
	Pic        string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                  //展示图片
	Sort       int32  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`                               //排序
	ShowStatus int32  `protobuf:"varint,6,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	CreateBy   string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`        //创建者
	CreateTime string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  //创建时间
	UpdateBy   string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
	UpdateTime string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //更新时间
}

func (x *PreferredAreaListData) Reset() {
	*x = PreferredAreaListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreferredAreaListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferredAreaListData) ProtoMessage() {}

func (x *PreferredAreaListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferredAreaListData.ProtoReflect.Descriptor instead.
func (*PreferredAreaListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{50}
}

func (x *PreferredAreaListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PreferredAreaListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PreferredAreaListData) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *PreferredAreaListData) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *PreferredAreaListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *PreferredAreaListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *PreferredAreaListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *PreferredAreaListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PreferredAreaListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *PreferredAreaListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryPreferredAreaListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*PreferredAreaListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryPreferredAreaListResp) Reset() {
	*x = QueryPreferredAreaListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreferredAreaListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreferredAreaListResp) ProtoMessage() {}

func (x *QueryPreferredAreaListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreferredAreaListResp.ProtoReflect.Descriptor instead.
func (*QueryPreferredAreaListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{51}
}

func (x *QueryPreferredAreaListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryPreferredAreaListResp) GetList() []*PreferredAreaListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加优选专区和产品关系表
type AddPreferredAreaProductRelationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreferredAreaId []int64 `protobuf:"varint,1,rep,packed,name=preferred_area_id,json=preferredAreaId,proto3" json:"preferred_area_id,omitempty"` //
	ProductId       int64   `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *AddPreferredAreaProductRelationReq) Reset() {
	*x = AddPreferredAreaProductRelationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPreferredAreaProductRelationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPreferredAreaProductRelationReq) ProtoMessage() {}

func (x *AddPreferredAreaProductRelationReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPreferredAreaProductRelationReq.ProtoReflect.Descriptor instead.
func (*AddPreferredAreaProductRelationReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{52}
}

func (x *AddPreferredAreaProductRelationReq) GetPreferredAreaId() []int64 {
	if x != nil {
		return x.PreferredAreaId
	}
	return nil
}

func (x *AddPreferredAreaProductRelationReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type AddPreferredAreaProductRelationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddPreferredAreaProductRelationResp) Reset() {
	*x = AddPreferredAreaProductRelationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPreferredAreaProductRelationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPreferredAreaProductRelationResp) ProtoMessage() {}

func (x *AddPreferredAreaProductRelationResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPreferredAreaProductRelationResp.ProtoReflect.Descriptor instead.
func (*AddPreferredAreaProductRelationResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{53}
}

func (x *AddPreferredAreaProductRelationResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询优选专区和产品关系表列表
type QueryPreferredAreaProductRelationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *QueryPreferredAreaProductRelationListReq) Reset() {
	*x = QueryPreferredAreaProductRelationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreferredAreaProductRelationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreferredAreaProductRelationListReq) ProtoMessage() {}

func (x *QueryPreferredAreaProductRelationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreferredAreaProductRelationListReq.ProtoReflect.Descriptor instead.
func (*QueryPreferredAreaProductRelationListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{54}
}

func (x *QueryPreferredAreaProductRelationListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type QueryPreferredAreaProductRelationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreferredAreaIds []int64 `protobuf:"varint,2,rep,packed,name=preferred_area_ids,json=preferredAreaIds,proto3" json:"preferred_area_ids,omitempty"` //
}

func (x *QueryPreferredAreaProductRelationListResp) Reset() {
	*x = QueryPreferredAreaProductRelationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreferredAreaProductRelationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreferredAreaProductRelationListResp) ProtoMessage() {}

func (x *QueryPreferredAreaProductRelationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreferredAreaProductRelationListResp.ProtoReflect.Descriptor instead.
func (*QueryPreferredAreaProductRelationListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{55}
}

func (x *QueryPreferredAreaProductRelationListResp) GetPreferredAreaIds() []int64 {
	if x != nil {
		return x.PreferredAreaIds
	}
	return nil
}

// 添加专题
type AddSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                  //专题id
	CategoryId      int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                //专题分类id
	Title           string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                             //专题标题
	Pic             string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                                 //专题主图
	ProductCount    int32  `protobuf:"varint,5,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`          //关联产品数量
	RecommendStatus int32  `protobuf:"varint,6,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态：0->不推荐；1->推荐
	CollectCount    int32  `protobuf:"varint,7,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`          //收藏数
	ReadCount       int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                   //阅读数
	CommentCount    int32  `protobuf:"varint,9,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`          //评论数
	AlbumPics       string `protobuf:"bytes,10,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                   //画册图片用逗号分割
	Description     string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                                //专题内容
	ShowStatus      int32  `protobuf:"varint,12,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`               //显示状态：0->不显示；1->显示
	Content         string `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`                                        //专题内容
	ForwardCount    int32  `protobuf:"varint,14,opt,name=forward_count,json=forwardCount,proto3" json:"forward_count,omitempty"`         //转发数
	CategoryName    string `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`          //专题分类名称
	CreateBy        string `protobuf:"bytes,16,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                      //创建者
	Sort            int32  `protobuf:"varint,17,opt,name=sort,proto3" json:"sort,omitempty"`                                             //排序
}

func (x *AddSubjectReq) Reset() {
	*x = AddSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectReq) ProtoMessage() {}

func (x *AddSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectReq.ProtoReflect.Descriptor instead.
func (*AddSubjectReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{56}
}

func (x *AddSubjectReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSubjectReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddSubjectReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddSubjectReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *AddSubjectReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *AddSubjectReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *AddSubjectReq) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *AddSubjectReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *AddSubjectReq) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *AddSubjectReq) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *AddSubjectReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddSubjectReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddSubjectReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddSubjectReq) GetForwardCount() int32 {
	if x != nil {
		return x.ForwardCount
	}
	return 0
}

func (x *AddSubjectReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *AddSubjectReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *AddSubjectReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type AddSubjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSubjectResp) Reset() {
	*x = AddSubjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectResp) ProtoMessage() {}

func (x *AddSubjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectResp.ProtoReflect.Descriptor instead.
func (*AddSubjectResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{57}
}

func (x *AddSubjectResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除专题
type DeleteSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSubjectReq) Reset() {
	*x = DeleteSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectReq) ProtoMessage() {}

func (x *DeleteSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectReq.ProtoReflect.Descriptor instead.
func (*DeleteSubjectReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteSubjectReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSubjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSubjectResp) Reset() {
	*x = DeleteSubjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectResp) ProtoMessage() {}

func (x *DeleteSubjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectResp.ProtoReflect.Descriptor instead.
func (*DeleteSubjectResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteSubjectResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题
type UpdateSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                  //专题id
	CategoryId      int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                //专题分类id
	Title           string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                             //专题标题
	Pic             string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                                 //专题主图
	ProductCount    int32  `protobuf:"varint,5,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`          //关联产品数量
	RecommendStatus int32  `protobuf:"varint,6,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态：0->不推荐；1->推荐
	CollectCount    int32  `protobuf:"varint,7,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`          //收藏数
	ReadCount       int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                   //阅读数
	CommentCount    int32  `protobuf:"varint,9,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`          //评论数
	AlbumPics       string `protobuf:"bytes,10,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                   //画册图片用逗号分割
	Description     string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                                //专题内容
	ShowStatus      int32  `protobuf:"varint,12,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`               //显示状态：0->不显示；1->显示
	Content         string `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`                                        //专题内容
	ForwardCount    int32  `protobuf:"varint,14,opt,name=forward_count,json=forwardCount,proto3" json:"forward_count,omitempty"`         //转发数
	CategoryName    string `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`          //专题分类名称
	UpdateBy        string `protobuf:"bytes,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                      //更新者
	Sort            int32  `protobuf:"varint,19,opt,name=sort,proto3" json:"sort,omitempty"`                                             //排序
}

func (x *UpdateSubjectReq) Reset() {
	*x = UpdateSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectReq) ProtoMessage() {}

func (x *UpdateSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateSubjectReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubjectReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateSubjectReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateSubjectReq) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *UpdateSubjectReq) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *UpdateSubjectReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *UpdateSubjectReq) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *UpdateSubjectReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *UpdateSubjectReq) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *UpdateSubjectReq) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *UpdateSubjectReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSubjectReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateSubjectReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateSubjectReq) GetForwardCount() int32 {
	if x != nil {
		return x.ForwardCount
	}
	return 0
}

func (x *UpdateSubjectReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *UpdateSubjectReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *UpdateSubjectReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type UpdateSubjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSubjectResp) Reset() {
	*x = UpdateSubjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectResp) ProtoMessage() {}

func (x *UpdateSubjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectResp.ProtoReflect.Descriptor instead.
func (*UpdateSubjectResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateSubjectResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题状态
type UpdateSubjectStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids             []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                                         //专题id
	RecommendStatus int32   `protobuf:"varint,6,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态：0->不推荐；1->推荐
	ShowStatus      int32   `protobuf:"varint,12,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`               //显示状态：0->不显示；1->显示
	UpdateBy        string  `protobuf:"bytes,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                      //更新者
}

func (x *UpdateSubjectStatusReq) Reset() {
	*x = UpdateSubjectStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectStatusReq) ProtoMessage() {}

func (x *UpdateSubjectStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateSubjectStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSubjectStatusReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *UpdateSubjectStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateSubjectStatusReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateSubjectStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSubjectStatusResp) Reset() {
	*x = UpdateSubjectStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectStatusResp) ProtoMessage() {}

func (x *UpdateSubjectStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSubjectStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateSubjectStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询专题详情
type QuerySubjectDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySubjectDetailReq) Reset() {
	*x = QuerySubjectDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectDetailReq) ProtoMessage() {}

func (x *QuerySubjectDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySubjectDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{64}
}

func (x *QuerySubjectDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySubjectDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                  //专题id
	CategoryId      int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                //专题分类id
	Title           string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                             //专题标题
	Pic             string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                                 //专题主图
	ProductCount    int32  `protobuf:"varint,5,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`          //关联产品数量
	RecommendStatus int32  `protobuf:"varint,6,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态：0->不推荐；1->推荐
	CollectCount    int32  `protobuf:"varint,7,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`          //收藏数
	ReadCount       int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                   //阅读数
	CommentCount    int32  `protobuf:"varint,9,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`          //评论数
	AlbumPics       string `protobuf:"bytes,10,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                   //画册图片用逗号分割
	Description     string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                                //专题内容
	ShowStatus      int32  `protobuf:"varint,12,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`               //显示状态：0->不显示；1->显示
	Content         string `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`                                        //专题内容
	ForwardCount    int32  `protobuf:"varint,14,opt,name=forward_count,json=forwardCount,proto3" json:"forward_count,omitempty"`         //转发数
	CategoryName    string `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`          //专题分类名称
	CreateBy        string `protobuf:"bytes,16,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                      //创建者
	CreateTime      string `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                //创建时间
	UpdateBy        string `protobuf:"bytes,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                      //更新者
	UpdateTime      string `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                //更新时间
	Sort            int32  `protobuf:"varint,20,opt,name=sort,proto3" json:"sort,omitempty"`                                             //排序
}

func (x *QuerySubjectDetailResp) Reset() {
	*x = QuerySubjectDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectDetailResp) ProtoMessage() {}

func (x *QuerySubjectDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySubjectDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{65}
}

func (x *QuerySubjectDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetForwardCount() int32 {
	if x != nil {
		return x.ForwardCount
	}
	return 0
}

func (x *QuerySubjectDetailResp) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QuerySubjectDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// 分页查询专题列表
type QuerySubjectListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId      int64  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                //专题分类id
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                             //专题标题
	RecommendStatus int32  `protobuf:"varint,3,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态：0->不推荐；1->推荐
	ShowStatus      int32  `protobuf:"varint,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`                //显示状态：0->不显示；1->显示
	CategoryName    string `protobuf:"bytes,5,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`           //专题分类名称
	PageNum         int64  `protobuf:"varint,6,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                         //第几页
	PageSize        int64  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                      //每页的数量
}

func (x *QuerySubjectListReq) Reset() {
	*x = QuerySubjectListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectListReq) ProtoMessage() {}

func (x *QuerySubjectListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectListReq.ProtoReflect.Descriptor instead.
func (*QuerySubjectListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{66}
}

func (x *QuerySubjectListReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QuerySubjectListReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuerySubjectListReq) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *QuerySubjectListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QuerySubjectListReq) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *QuerySubjectListReq) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QuerySubjectListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SubjectListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                  //专题id
	CategoryId      int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                //专题分类id
	Title           string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                             //专题标题
	Pic             string `protobuf:"bytes,4,opt,name=pic,proto3" json:"pic,omitempty"`                                                 //专题主图
	ProductCount    int32  `protobuf:"varint,5,opt,name=product_count,json=productCount,proto3" json:"product_count,omitempty"`          //关联产品数量
	RecommendStatus int32  `protobuf:"varint,6,opt,name=recommend_status,json=recommendStatus,proto3" json:"recommend_status,omitempty"` //推荐状态：0->不推荐；1->推荐
	CollectCount    int32  `protobuf:"varint,7,opt,name=collect_count,json=collectCount,proto3" json:"collect_count,omitempty"`          //收藏数
	ReadCount       int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                   //阅读数
	CommentCount    int32  `protobuf:"varint,9,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`          //评论数
	AlbumPics       string `protobuf:"bytes,10,opt,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                   //画册图片用逗号分割
	Description     string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                                //专题内容
	ShowStatus      int32  `protobuf:"varint,12,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`               //显示状态：0->不显示；1->显示
	Content         string `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`                                        //专题内容
	ForwardCount    int32  `protobuf:"varint,14,opt,name=forward_count,json=forwardCount,proto3" json:"forward_count,omitempty"`         //转发数
	CategoryName    string `protobuf:"bytes,15,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`          //专题分类名称
	CreateBy        string `protobuf:"bytes,16,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                      //创建者
	CreateTime      string `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                //创建时间
	UpdateBy        string `protobuf:"bytes,18,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                      //更新者
	UpdateTime      string `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                //更新时间
	Sort            int32  `protobuf:"varint,20,opt,name=sort,proto3" json:"sort,omitempty"`                                             //排序
}

func (x *SubjectListData) Reset() {
	*x = SubjectListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectListData) ProtoMessage() {}

func (x *SubjectListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectListData.ProtoReflect.Descriptor instead.
func (*SubjectListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{67}
}

func (x *SubjectListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectListData) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SubjectListData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SubjectListData) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *SubjectListData) GetProductCount() int32 {
	if x != nil {
		return x.ProductCount
	}
	return 0
}

func (x *SubjectListData) GetRecommendStatus() int32 {
	if x != nil {
		return x.RecommendStatus
	}
	return 0
}

func (x *SubjectListData) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *SubjectListData) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *SubjectListData) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *SubjectListData) GetAlbumPics() string {
	if x != nil {
		return x.AlbumPics
	}
	return ""
}

func (x *SubjectListData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubjectListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *SubjectListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SubjectListData) GetForwardCount() int32 {
	if x != nil {
		return x.ForwardCount
	}
	return 0
}

func (x *SubjectListData) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *SubjectListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *SubjectListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SubjectListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *SubjectListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *SubjectListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type QuerySubjectListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SubjectListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySubjectListResp) Reset() {
	*x = QuerySubjectListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectListResp) ProtoMessage() {}

func (x *QuerySubjectListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectListResp.ProtoReflect.Descriptor instead.
func (*QuerySubjectListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{68}
}

func (x *QuerySubjectListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySubjectListResp) GetList() []*SubjectListData {
	if x != nil {
		return x.List
	}
	return nil
}

type UpdateSubjectRecommendStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Status int32   `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *UpdateSubjectRecommendStatusReq) Reset() {
	*x = UpdateSubjectRecommendStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectRecommendStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectRecommendStatusReq) ProtoMessage() {}

func (x *UpdateSubjectRecommendStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectRecommendStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectRecommendStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{69}
}

func (x *UpdateSubjectRecommendStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSubjectRecommendStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UpdateSubjectRecommendStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSubjectRecommendStatusResp) Reset() {
	*x = UpdateSubjectRecommendStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectRecommendStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectRecommendStatusResp) ProtoMessage() {}

func (x *UpdateSubjectRecommendStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectRecommendStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSubjectRecommendStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateSubjectRecommendStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type SubjectListByIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SubjectListByIdsReq) Reset() {
	*x = SubjectListByIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectListByIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectListByIdsReq) ProtoMessage() {}

func (x *SubjectListByIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectListByIdsReq.ProtoReflect.Descriptor instead.
func (*SubjectListByIdsReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{71}
}

func (x *SubjectListByIdsReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UpdateSubjectSortReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sort int32 `protobuf:"varint,2,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (x *UpdateSubjectSortReq) Reset() {
	*x = UpdateSubjectSortReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectSortReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectSortReq) ProtoMessage() {}

func (x *UpdateSubjectSortReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectSortReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectSortReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateSubjectSortReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubjectSortReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// 添加专题分类
type AddSubjectCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //专题分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`              //创建者
}

func (x *AddSubjectCategoryReq) Reset() {
	*x = AddSubjectCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectCategoryReq) ProtoMessage() {}

func (x *AddSubjectCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectCategoryReq.ProtoReflect.Descriptor instead.
func (*AddSubjectCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{73}
}

func (x *AddSubjectCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSubjectCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddSubjectCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddSubjectCategoryReq) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *AddSubjectCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddSubjectCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddSubjectCategoryReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type AddSubjectCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSubjectCategoryResp) Reset() {
	*x = AddSubjectCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectCategoryResp) ProtoMessage() {}

func (x *AddSubjectCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectCategoryResp.ProtoReflect.Descriptor instead.
func (*AddSubjectCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{74}
}

func (x *AddSubjectCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除专题分类
type DeleteSubjectCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSubjectCategoryReq) Reset() {
	*x = DeleteSubjectCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectCategoryReq) ProtoMessage() {}

func (x *DeleteSubjectCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteSubjectCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteSubjectCategoryReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSubjectCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSubjectCategoryResp) Reset() {
	*x = DeleteSubjectCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectCategoryResp) ProtoMessage() {}

func (x *DeleteSubjectCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectCategoryResp.ProtoReflect.Descriptor instead.
func (*DeleteSubjectCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteSubjectCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题分类
type UpdateSubjectCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //专题分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	UpdateBy     string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`              //更新者
}

func (x *UpdateSubjectCategoryReq) Reset() {
	*x = UpdateSubjectCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCategoryReq) ProtoMessage() {}

func (x *UpdateSubjectCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateSubjectCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubjectCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSubjectCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateSubjectCategoryReq) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *UpdateSubjectCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateSubjectCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateSubjectCategoryReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateSubjectCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSubjectCategoryResp) Reset() {
	*x = UpdateSubjectCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCategoryResp) ProtoMessage() {}

func (x *UpdateSubjectCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCategoryResp.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateSubjectCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题分类状态
type UpdateSubjectCategoryStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                          //主键ID
	ShowStatus int32   `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	UpdateBy   string  `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
}

func (x *UpdateSubjectCategoryStatusReq) Reset() {
	*x = UpdateSubjectCategoryStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCategoryStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCategoryStatusReq) ProtoMessage() {}

func (x *UpdateSubjectCategoryStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCategoryStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCategoryStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateSubjectCategoryStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSubjectCategoryStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateSubjectCategoryStatusReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateSubjectCategoryStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSubjectCategoryStatusResp) Reset() {
	*x = UpdateSubjectCategoryStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCategoryStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCategoryStatusResp) ProtoMessage() {}

func (x *UpdateSubjectCategoryStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCategoryStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCategoryStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateSubjectCategoryStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询专题分类详情
type QuerySubjectCategoryDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySubjectCategoryDetailReq) Reset() {
	*x = QuerySubjectCategoryDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCategoryDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCategoryDetailReq) ProtoMessage() {}

func (x *QuerySubjectCategoryDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCategoryDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySubjectCategoryDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{81}
}

func (x *QuerySubjectCategoryDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySubjectCategoryDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //专题分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`              //创建者
	CreateTime   string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`              //更新者
	UpdateTime   string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
}

func (x *QuerySubjectCategoryDetailResp) Reset() {
	*x = QuerySubjectCategoryDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCategoryDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCategoryDetailResp) ProtoMessage() {}

func (x *QuerySubjectCategoryDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCategoryDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySubjectCategoryDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{82}
}

func (x *QuerySubjectCategoryDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySubjectCategoryDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuerySubjectCategoryDetailResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QuerySubjectCategoryDetailResp) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *QuerySubjectCategoryDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QuerySubjectCategoryDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QuerySubjectCategoryDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QuerySubjectCategoryDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuerySubjectCategoryDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QuerySubjectCategoryDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询专题分类列表
type QuerySubjectCategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                      //专题分类名称
	Icon         string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,3,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	PageNum      int32  `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                //第几页
	PageSize     int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`             //每页的数量
}

func (x *QuerySubjectCategoryListReq) Reset() {
	*x = QuerySubjectCategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCategoryListReq) ProtoMessage() {}

func (x *QuerySubjectCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCategoryListReq.ProtoReflect.Descriptor instead.
func (*QuerySubjectCategoryListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{83}
}

func (x *QuerySubjectCategoryListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuerySubjectCategoryListReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QuerySubjectCategoryListReq) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *QuerySubjectCategoryListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QuerySubjectCategoryListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QuerySubjectCategoryListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SubjectCategoryListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //专题分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`              //创建者
	CreateTime   string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`              //更新者
	UpdateTime   string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
}

func (x *SubjectCategoryListData) Reset() {
	*x = SubjectCategoryListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCategoryListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCategoryListData) ProtoMessage() {}

func (x *SubjectCategoryListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCategoryListData.ProtoReflect.Descriptor instead.
func (*SubjectCategoryListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{84}
}

func (x *SubjectCategoryListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectCategoryListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectCategoryListData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SubjectCategoryListData) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *SubjectCategoryListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *SubjectCategoryListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SubjectCategoryListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *SubjectCategoryListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SubjectCategoryListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *SubjectCategoryListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QuerySubjectCategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SubjectCategoryListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySubjectCategoryListResp) Reset() {
	*x = QuerySubjectCategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCategoryListResp) ProtoMessage() {}

func (x *QuerySubjectCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCategoryListResp.ProtoReflect.Descriptor instead.
func (*QuerySubjectCategoryListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{85}
}

func (x *QuerySubjectCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySubjectCategoryListResp) GetList() []*SubjectCategoryListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加专题评论
type AddSubjectCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //编号
	SubjectId      int64  `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`                 //关联专题id
	MemberNickName string `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //关联会员昵称
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //会员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *AddSubjectCommentReq) Reset() {
	*x = AddSubjectCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectCommentReq) ProtoMessage() {}

func (x *AddSubjectCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectCommentReq.ProtoReflect.Descriptor instead.
func (*AddSubjectCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{86}
}

func (x *AddSubjectCommentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddSubjectCommentReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *AddSubjectCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *AddSubjectCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *AddSubjectCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddSubjectCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type AddSubjectCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSubjectCommentResp) Reset() {
	*x = AddSubjectCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectCommentResp) ProtoMessage() {}

func (x *AddSubjectCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectCommentResp.ProtoReflect.Descriptor instead.
func (*AddSubjectCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{87}
}

func (x *AddSubjectCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除专题评论
type DeleteSubjectCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteSubjectCommentReq) Reset() {
	*x = DeleteSubjectCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectCommentReq) ProtoMessage() {}

func (x *DeleteSubjectCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectCommentReq.ProtoReflect.Descriptor instead.
func (*DeleteSubjectCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteSubjectCommentReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteSubjectCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteSubjectCommentResp) Reset() {
	*x = DeleteSubjectCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectCommentResp) ProtoMessage() {}

func (x *DeleteSubjectCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectCommentResp.ProtoReflect.Descriptor instead.
func (*DeleteSubjectCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{89}
}

func (x *DeleteSubjectCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题评论
type UpdateSubjectCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //编号
	SubjectId      int64  `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`                 //关联专题id
	MemberNickName string `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //关联会员昵称
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //会员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *UpdateSubjectCommentReq) Reset() {
	*x = UpdateSubjectCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCommentReq) ProtoMessage() {}

func (x *UpdateSubjectCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCommentReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateSubjectCommentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubjectCommentReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *UpdateSubjectCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *UpdateSubjectCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *UpdateSubjectCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateSubjectCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type UpdateSubjectCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSubjectCommentResp) Reset() {
	*x = UpdateSubjectCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCommentResp) ProtoMessage() {}

func (x *UpdateSubjectCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCommentResp.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateSubjectCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题评论状态
type UpdateSubjectCommentStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                          //编号
	ShowStatus int32   `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //是否显示，0->不显示；1->显示
}

func (x *UpdateSubjectCommentStatusReq) Reset() {
	*x = UpdateSubjectCommentStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCommentStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCommentStatusReq) ProtoMessage() {}

func (x *UpdateSubjectCommentStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCommentStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCommentStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{92}
}

func (x *UpdateSubjectCommentStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateSubjectCommentStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type UpdateSubjectCommentStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateSubjectCommentStatusResp) Reset() {
	*x = UpdateSubjectCommentStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubjectCommentStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectCommentStatusResp) ProtoMessage() {}

func (x *UpdateSubjectCommentStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectCommentStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateSubjectCommentStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateSubjectCommentStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询专题评论详情
type QuerySubjectCommentDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuerySubjectCommentDetailReq) Reset() {
	*x = QuerySubjectCommentDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCommentDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCommentDetailReq) ProtoMessage() {}

func (x *QuerySubjectCommentDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCommentDetailReq.ProtoReflect.Descriptor instead.
func (*QuerySubjectCommentDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{94}
}

func (x *QuerySubjectCommentDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuerySubjectCommentDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //编号
	SubjectId      int64  `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`                 //关联专题id
	MemberNickName string `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //关联会员昵称
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //会员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	CreateTime     string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //创建时间
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *QuerySubjectCommentDetailResp) Reset() {
	*x = QuerySubjectCommentDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCommentDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCommentDetailResp) ProtoMessage() {}

func (x *QuerySubjectCommentDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCommentDetailResp.ProtoReflect.Descriptor instead.
func (*QuerySubjectCommentDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{95}
}

func (x *QuerySubjectCommentDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuerySubjectCommentDetailResp) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *QuerySubjectCommentDetailResp) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QuerySubjectCommentDetailResp) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QuerySubjectCommentDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuerySubjectCommentDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QuerySubjectCommentDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

// 分页查询专题评论列表
type QuerySubjectCommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId      int64  `protobuf:"varint,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`                 //关联专题id
	MemberNickName string `protobuf:"bytes,2,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //关联会员昵称
	MemberIcon     string `protobuf:"bytes,3,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //会员头像
	Content        string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	ShowStatus     int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
	PageNum        int32  `protobuf:"varint,6,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                       //第几页
	PageSize       int32  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                    //每页的数量
}

func (x *QuerySubjectCommentListReq) Reset() {
	*x = QuerySubjectCommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCommentListReq) ProtoMessage() {}

func (x *QuerySubjectCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCommentListReq.ProtoReflect.Descriptor instead.
func (*QuerySubjectCommentListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{96}
}

func (x *QuerySubjectCommentListReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *QuerySubjectCommentListReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QuerySubjectCommentListReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QuerySubjectCommentListReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuerySubjectCommentListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QuerySubjectCommentListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QuerySubjectCommentListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SubjectCommentListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //编号
	SubjectId      int64  `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`                 //关联专题id
	MemberNickName string `protobuf:"bytes,3,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //关联会员昵称
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //会员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	CreateTime     string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //创建时间
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *SubjectCommentListData) Reset() {
	*x = SubjectCommentListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCommentListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCommentListData) ProtoMessage() {}

func (x *SubjectCommentListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCommentListData.ProtoReflect.Descriptor instead.
func (*SubjectCommentListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{97}
}

func (x *SubjectCommentListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubjectCommentListData) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *SubjectCommentListData) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *SubjectCommentListData) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *SubjectCommentListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SubjectCommentListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SubjectCommentListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type QuerySubjectCommentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*SubjectCommentListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QuerySubjectCommentListResp) Reset() {
	*x = QuerySubjectCommentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectCommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectCommentListResp) ProtoMessage() {}

func (x *QuerySubjectCommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectCommentListResp.ProtoReflect.Descriptor instead.
func (*QuerySubjectCommentListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{98}
}

func (x *QuerySubjectCommentListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QuerySubjectCommentListResp) GetList() []*SubjectCommentListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加专题商品关系表
type AddSubjectProductRelationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64   `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`        //
	SubjectId []int64 `protobuf:"varint,2,rep,packed,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"` //
}

func (x *AddSubjectProductRelationReq) Reset() {
	*x = AddSubjectProductRelationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectProductRelationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectProductRelationReq) ProtoMessage() {}

func (x *AddSubjectProductRelationReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectProductRelationReq.ProtoReflect.Descriptor instead.
func (*AddSubjectProductRelationReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{99}
}

func (x *AddSubjectProductRelationReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AddSubjectProductRelationReq) GetSubjectId() []int64 {
	if x != nil {
		return x.SubjectId
	}
	return nil
}

type AddSubjectProductRelationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddSubjectProductRelationResp) Reset() {
	*x = AddSubjectProductRelationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubjectProductRelationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubjectProductRelationResp) ProtoMessage() {}

func (x *AddSubjectProductRelationResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubjectProductRelationResp.ProtoReflect.Descriptor instead.
func (*AddSubjectProductRelationResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{100}
}

func (x *AddSubjectProductRelationResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 分页查询专题商品关系表列表
type QuerySubjectProductRelationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` //
}

func (x *QuerySubjectProductRelationListReq) Reset() {
	*x = QuerySubjectProductRelationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectProductRelationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectProductRelationListReq) ProtoMessage() {}

func (x *QuerySubjectProductRelationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectProductRelationListReq.ProtoReflect.Descriptor instead.
func (*QuerySubjectProductRelationListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{101}
}

func (x *QuerySubjectProductRelationListReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type QuerySubjectProductRelationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectIds []int64 `protobuf:"varint,1,rep,packed,name=subject_ids,json=subjectIds,proto3" json:"subject_ids,omitempty"` //
}

func (x *QuerySubjectProductRelationListResp) Reset() {
	*x = QuerySubjectProductRelationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubjectProductRelationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubjectProductRelationListResp) ProtoMessage() {}

func (x *QuerySubjectProductRelationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubjectProductRelationListResp.ProtoReflect.Descriptor instead.
func (*QuerySubjectProductRelationListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{102}
}

func (x *QuerySubjectProductRelationListResp) GetSubjectIds() []int64 {
	if x != nil {
		return x.SubjectIds
	}
	return nil
}

// 添加话题
type AddTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键ID
	CategoryId     int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`             //关联分类id
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            //话题名称
	StartTime      string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 //话题开始时间
	EndTime        string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       //话题结束时间
	AttendCount    int32  `protobuf:"varint,6,opt,name=attend_count,json=attendCount,proto3" json:"attend_count,omitempty"`          //参与人数
	AttentionCount int32  `protobuf:"varint,7,opt,name=attention_count,json=attentionCount,proto3" json:"attention_count,omitempty"` //关注人数
	ReadCount      int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                //阅读数
	AwardName      string `protobuf:"bytes,9,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`                 //奖品名称
	AttendType     string `protobuf:"bytes,10,opt,name=attend_type,json=attendType,proto3" json:"attend_type,omitempty"`             //参与方式
	Content        string `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`                                     //话题内容
	CreateBy       string `protobuf:"bytes,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                   //创建者
}

func (x *AddTopicReq) Reset() {
	*x = AddTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopicReq) ProtoMessage() {}

func (x *AddTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopicReq.ProtoReflect.Descriptor instead.
func (*AddTopicReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{103}
}

func (x *AddTopicReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddTopicReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *AddTopicReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTopicReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddTopicReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddTopicReq) GetAttendCount() int32 {
	if x != nil {
		return x.AttendCount
	}
	return 0
}

func (x *AddTopicReq) GetAttentionCount() int32 {
	if x != nil {
		return x.AttentionCount
	}
	return 0
}

func (x *AddTopicReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *AddTopicReq) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *AddTopicReq) GetAttendType() string {
	if x != nil {
		return x.AttendType
	}
	return ""
}

func (x *AddTopicReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddTopicReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type AddTopicResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddTopicResp) Reset() {
	*x = AddTopicResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopicResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopicResp) ProtoMessage() {}

func (x *AddTopicResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopicResp.ProtoReflect.Descriptor instead.
func (*AddTopicResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{104}
}

func (x *AddTopicResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除话题
type DeleteTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteTopicReq) Reset() {
	*x = DeleteTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicReq) ProtoMessage() {}

func (x *DeleteTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicReq.ProtoReflect.Descriptor instead.
func (*DeleteTopicReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{105}
}

func (x *DeleteTopicReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteTopicResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteTopicResp) Reset() {
	*x = DeleteTopicResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicResp) ProtoMessage() {}

func (x *DeleteTopicResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicResp.ProtoReflect.Descriptor instead.
func (*DeleteTopicResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{106}
}

func (x *DeleteTopicResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新话题
type UpdateTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键ID
	CategoryId     int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`             //关联分类id
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            //话题名称
	StartTime      string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 //话题开始时间
	EndTime        string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       //话题结束时间
	AttendCount    int32  `protobuf:"varint,6,opt,name=attend_count,json=attendCount,proto3" json:"attend_count,omitempty"`          //参与人数
	AttentionCount int32  `protobuf:"varint,7,opt,name=attention_count,json=attentionCount,proto3" json:"attention_count,omitempty"` //关注人数
	ReadCount      int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                //阅读数
	AwardName      string `protobuf:"bytes,9,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`                 //奖品名称
	AttendType     string `protobuf:"bytes,10,opt,name=attend_type,json=attendType,proto3" json:"attend_type,omitempty"`             //参与方式
	Content        string `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`                                     //话题内容
	UpdateBy       string `protobuf:"bytes,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                   //更新者
}

func (x *UpdateTopicReq) Reset() {
	*x = UpdateTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicReq) ProtoMessage() {}

func (x *UpdateTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicReq.ProtoReflect.Descriptor instead.
func (*UpdateTopicReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{107}
}

func (x *UpdateTopicReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTopicReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateTopicReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTopicReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateTopicReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateTopicReq) GetAttendCount() int32 {
	if x != nil {
		return x.AttendCount
	}
	return 0
}

func (x *UpdateTopicReq) GetAttentionCount() int32 {
	if x != nil {
		return x.AttentionCount
	}
	return 0
}

func (x *UpdateTopicReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *UpdateTopicReq) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *UpdateTopicReq) GetAttendType() string {
	if x != nil {
		return x.AttendType
	}
	return ""
}

func (x *UpdateTopicReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateTopicReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateTopicResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateTopicResp) Reset() {
	*x = UpdateTopicResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicResp) ProtoMessage() {}

func (x *UpdateTopicResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicResp.ProtoReflect.Descriptor instead.
func (*UpdateTopicResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateTopicResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新话题状态
type UpdateTopicStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids      []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                    //主键ID
	UpdateBy string  `protobuf:"bytes,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"` //更新者
}

func (x *UpdateTopicStatusReq) Reset() {
	*x = UpdateTopicStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicStatusReq) ProtoMessage() {}

func (x *UpdateTopicStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateTopicStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateTopicStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateTopicStatusReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateTopicStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateTopicStatusResp) Reset() {
	*x = UpdateTopicStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicStatusResp) ProtoMessage() {}

func (x *UpdateTopicStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateTopicStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{110}
}

func (x *UpdateTopicStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询话题详情
type QueryTopicDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryTopicDetailReq) Reset() {
	*x = QueryTopicDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicDetailReq) ProtoMessage() {}

func (x *QueryTopicDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicDetailReq.ProtoReflect.Descriptor instead.
func (*QueryTopicDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{111}
}

func (x *QueryTopicDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryTopicDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键ID
	CategoryId     int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`             //关联分类id
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            //话题名称
	StartTime      string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 //话题开始时间
	EndTime        string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       //话题结束时间
	AttendCount    int32  `protobuf:"varint,6,opt,name=attend_count,json=attendCount,proto3" json:"attend_count,omitempty"`          //参与人数
	AttentionCount int32  `protobuf:"varint,7,opt,name=attention_count,json=attentionCount,proto3" json:"attention_count,omitempty"` //关注人数
	ReadCount      int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                //阅读数
	AwardName      string `protobuf:"bytes,9,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`                 //奖品名称
	AttendType     string `protobuf:"bytes,10,opt,name=attend_type,json=attendType,proto3" json:"attend_type,omitempty"`             //参与方式
	Content        string `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`                                     //话题内容
	CreateBy       string `protobuf:"bytes,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                   //创建者
	CreateTime     string `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`             //创建时间
	UpdateBy       string `protobuf:"bytes,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                   //更新者
	UpdateTime     string `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`             //更新时间
}

func (x *QueryTopicDetailResp) Reset() {
	*x = QueryTopicDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicDetailResp) ProtoMessage() {}

func (x *QueryTopicDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicDetailResp.ProtoReflect.Descriptor instead.
func (*QueryTopicDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{112}
}

func (x *QueryTopicDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryTopicDetailResp) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryTopicDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryTopicDetailResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryTopicDetailResp) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryTopicDetailResp) GetAttendCount() int32 {
	if x != nil {
		return x.AttendCount
	}
	return 0
}

func (x *QueryTopicDetailResp) GetAttentionCount() int32 {
	if x != nil {
		return x.AttentionCount
	}
	return 0
}

func (x *QueryTopicDetailResp) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *QueryTopicDetailResp) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *QueryTopicDetailResp) GetAttendType() string {
	if x != nil {
		return x.AttendType
	}
	return ""
}

func (x *QueryTopicDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryTopicDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QueryTopicDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryTopicDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QueryTopicDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询话题列表
type QueryTopicListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId     int64  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`             //关联分类id
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            //话题名称
	StartTime      string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 //话题开始时间
	EndTime        string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       //话题结束时间
	AttendCount    int32  `protobuf:"varint,5,opt,name=attend_count,json=attendCount,proto3" json:"attend_count,omitempty"`          //参与人数
	AttentionCount int32  `protobuf:"varint,6,opt,name=attention_count,json=attentionCount,proto3" json:"attention_count,omitempty"` //关注人数
	ReadCount      int32  `protobuf:"varint,7,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                //阅读数
	AwardName      string `protobuf:"bytes,8,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`                 //奖品名称
	AttendType     string `protobuf:"bytes,9,opt,name=attend_type,json=attendType,proto3" json:"attend_type,omitempty"`              //参与方式
	Content        string `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`                                     //话题内容
	PageNum        int32  `protobuf:"varint,11,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                     //第几页
	PageSize       int32  `protobuf:"varint,12,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  //每页的数量
}

func (x *QueryTopicListReq) Reset() {
	*x = QueryTopicListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicListReq) ProtoMessage() {}

func (x *QueryTopicListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicListReq.ProtoReflect.Descriptor instead.
func (*QueryTopicListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{113}
}

func (x *QueryTopicListReq) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *QueryTopicListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryTopicListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryTopicListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryTopicListReq) GetAttendCount() int32 {
	if x != nil {
		return x.AttendCount
	}
	return 0
}

func (x *QueryTopicListReq) GetAttentionCount() int32 {
	if x != nil {
		return x.AttentionCount
	}
	return 0
}

func (x *QueryTopicListReq) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *QueryTopicListReq) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *QueryTopicListReq) GetAttendType() string {
	if x != nil {
		return x.AttendType
	}
	return ""
}

func (x *QueryTopicListReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryTopicListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryTopicListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TopicListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键ID
	CategoryId     int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`             //关联分类id
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            //话题名称
	StartTime      string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                 //话题开始时间
	EndTime        string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                       //话题结束时间
	AttendCount    int32  `protobuf:"varint,6,opt,name=attend_count,json=attendCount,proto3" json:"attend_count,omitempty"`          //参与人数
	AttentionCount int32  `protobuf:"varint,7,opt,name=attention_count,json=attentionCount,proto3" json:"attention_count,omitempty"` //关注人数
	ReadCount      int32  `protobuf:"varint,8,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`                //阅读数
	AwardName      string `protobuf:"bytes,9,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty"`                 //奖品名称
	AttendType     string `protobuf:"bytes,10,opt,name=attend_type,json=attendType,proto3" json:"attend_type,omitempty"`             //参与方式
	Content        string `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`                                     //话题内容
	CreateBy       string `protobuf:"bytes,12,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`                   //创建者
	CreateTime     string `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`             //创建时间
	UpdateBy       string `protobuf:"bytes,14,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`                   //更新者
	UpdateTime     string `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`             //更新时间
}

func (x *TopicListData) Reset() {
	*x = TopicListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicListData) ProtoMessage() {}

func (x *TopicListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicListData.ProtoReflect.Descriptor instead.
func (*TopicListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{114}
}

func (x *TopicListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TopicListData) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *TopicListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopicListData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TopicListData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TopicListData) GetAttendCount() int32 {
	if x != nil {
		return x.AttendCount
	}
	return 0
}

func (x *TopicListData) GetAttentionCount() int32 {
	if x != nil {
		return x.AttentionCount
	}
	return 0
}

func (x *TopicListData) GetReadCount() int32 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *TopicListData) GetAwardName() string {
	if x != nil {
		return x.AwardName
	}
	return ""
}

func (x *TopicListData) GetAttendType() string {
	if x != nil {
		return x.AttendType
	}
	return ""
}

func (x *TopicListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TopicListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TopicListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TopicListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *TopicListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryTopicListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TopicListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryTopicListResp) Reset() {
	*x = QueryTopicListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicListResp) ProtoMessage() {}

func (x *QueryTopicListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicListResp.ProtoReflect.Descriptor instead.
func (*QueryTopicListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{115}
}

func (x *QueryTopicListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryTopicListResp) GetList() []*TopicListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加话题分类
type AddTopicCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`              //创建者
}

func (x *AddTopicCategoryReq) Reset() {
	*x = AddTopicCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopicCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopicCategoryReq) ProtoMessage() {}

func (x *AddTopicCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopicCategoryReq.ProtoReflect.Descriptor instead.
func (*AddTopicCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{116}
}

func (x *AddTopicCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddTopicCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTopicCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddTopicCategoryReq) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *AddTopicCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddTopicCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddTopicCategoryReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type AddTopicCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddTopicCategoryResp) Reset() {
	*x = AddTopicCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopicCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopicCategoryResp) ProtoMessage() {}

func (x *AddTopicCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopicCategoryResp.ProtoReflect.Descriptor instead.
func (*AddTopicCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{117}
}

func (x *AddTopicCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除话题分类
type DeleteTopicCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteTopicCategoryReq) Reset() {
	*x = DeleteTopicCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicCategoryReq) ProtoMessage() {}

func (x *DeleteTopicCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteTopicCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{118}
}

func (x *DeleteTopicCategoryReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteTopicCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteTopicCategoryResp) Reset() {
	*x = DeleteTopicCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicCategoryResp) ProtoMessage() {}

func (x *DeleteTopicCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicCategoryResp.ProtoReflect.Descriptor instead.
func (*DeleteTopicCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{119}
}

func (x *DeleteTopicCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新话题分类
type UpdateTopicCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	UpdateBy     string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`              //更新者
}

func (x *UpdateTopicCategoryReq) Reset() {
	*x = UpdateTopicCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCategoryReq) ProtoMessage() {}

func (x *UpdateTopicCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateTopicCategoryReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{120}
}

func (x *UpdateTopicCategoryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTopicCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTopicCategoryReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateTopicCategoryReq) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *UpdateTopicCategoryReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateTopicCategoryReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateTopicCategoryReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateTopicCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateTopicCategoryResp) Reset() {
	*x = UpdateTopicCategoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCategoryResp) ProtoMessage() {}

func (x *UpdateTopicCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCategoryResp.ProtoReflect.Descriptor instead.
func (*UpdateTopicCategoryResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{121}
}

func (x *UpdateTopicCategoryResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新话题分类状态
type UpdateTopicCategoryStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                          //主键ID
	ShowStatus int32   `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //显示状态：0->不显示；1->显示
	UpdateBy   string  `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`        //更新者
}

func (x *UpdateTopicCategoryStatusReq) Reset() {
	*x = UpdateTopicCategoryStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCategoryStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCategoryStatusReq) ProtoMessage() {}

func (x *UpdateTopicCategoryStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCategoryStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateTopicCategoryStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{122}
}

func (x *UpdateTopicCategoryStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateTopicCategoryStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *UpdateTopicCategoryStatusReq) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type UpdateTopicCategoryStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateTopicCategoryStatusResp) Reset() {
	*x = UpdateTopicCategoryStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCategoryStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCategoryStatusResp) ProtoMessage() {}

func (x *UpdateTopicCategoryStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCategoryStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateTopicCategoryStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{123}
}

func (x *UpdateTopicCategoryStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询话题分类详情
type QueryTopicCategoryDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryTopicCategoryDetailReq) Reset() {
	*x = QueryTopicCategoryDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCategoryDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCategoryDetailReq) ProtoMessage() {}

func (x *QueryTopicCategoryDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCategoryDetailReq.ProtoReflect.Descriptor instead.
func (*QueryTopicCategoryDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{124}
}

func (x *QueryTopicCategoryDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryTopicCategoryDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`              //创建者
	CreateTime   string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`              //更新者
	UpdateTime   string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
}

func (x *QueryTopicCategoryDetailResp) Reset() {
	*x = QueryTopicCategoryDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCategoryDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCategoryDetailResp) ProtoMessage() {}

func (x *QueryTopicCategoryDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCategoryDetailResp.ProtoReflect.Descriptor instead.
func (*QueryTopicCategoryDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{125}
}

func (x *QueryTopicCategoryDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryTopicCategoryDetailResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryTopicCategoryDetailResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryTopicCategoryDetailResp) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *QueryTopicCategoryDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryTopicCategoryDetailResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *QueryTopicCategoryDetailResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *QueryTopicCategoryDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryTopicCategoryDetailResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *QueryTopicCategoryDetailResp) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 分页查询话题分类列表
type QueryTopicCategoryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                      //分类名称
	Icon         string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,3,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	PageNum      int32  `protobuf:"varint,5,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                //第几页
	PageSize     int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`             //每页的数量
}

func (x *QueryTopicCategoryListReq) Reset() {
	*x = QueryTopicCategoryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCategoryListReq) ProtoMessage() {}

func (x *QueryTopicCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCategoryListReq.ProtoReflect.Descriptor instead.
func (*QueryTopicCategoryListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{126}
}

func (x *QueryTopicCategoryListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryTopicCategoryListReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *QueryTopicCategoryListReq) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *QueryTopicCategoryListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryTopicCategoryListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryTopicCategoryListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TopicCategoryListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //主键ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                      //分类名称
	Icon         string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`                                      //分类图标
	SubjectCount int32  `protobuf:"varint,4,opt,name=subject_count,json=subjectCount,proto3" json:"subject_count,omitempty"` //专题数量
	ShowStatus   int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`       //显示状态：0->不显示；1->显示
	Sort         int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                     //排序
	CreateBy     string `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`              //创建者
	CreateTime   string `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`        //创建时间
	UpdateBy     string `protobuf:"bytes,9,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`              //更新者
	UpdateTime   string `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //更新时间
}

func (x *TopicCategoryListData) Reset() {
	*x = TopicCategoryListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicCategoryListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicCategoryListData) ProtoMessage() {}

func (x *TopicCategoryListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicCategoryListData.ProtoReflect.Descriptor instead.
func (*TopicCategoryListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{127}
}

func (x *TopicCategoryListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TopicCategoryListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopicCategoryListData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TopicCategoryListData) GetSubjectCount() int32 {
	if x != nil {
		return x.SubjectCount
	}
	return 0
}

func (x *TopicCategoryListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *TopicCategoryListData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TopicCategoryListData) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TopicCategoryListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TopicCategoryListData) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *TopicCategoryListData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type QueryTopicCategoryListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TopicCategoryListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryTopicCategoryListResp) Reset() {
	*x = QueryTopicCategoryListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCategoryListResp) ProtoMessage() {}

func (x *QueryTopicCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCategoryListResp.ProtoReflect.Descriptor instead.
func (*QueryTopicCategoryListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{128}
}

func (x *QueryTopicCategoryListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryTopicCategoryListResp) GetList() []*TopicCategoryListData {
	if x != nil {
		return x.List
	}
	return nil
}

// 添加专题评论
type AddTopicCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //主键ID
	MemberNickName string `protobuf:"bytes,2,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	TopicId        int64  `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                       //专题ID
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *AddTopicCommentReq) Reset() {
	*x = AddTopicCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopicCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopicCommentReq) ProtoMessage() {}

func (x *AddTopicCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopicCommentReq.ProtoReflect.Descriptor instead.
func (*AddTopicCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{129}
}

func (x *AddTopicCommentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddTopicCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *AddTopicCommentReq) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *AddTopicCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *AddTopicCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddTopicCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type AddTopicCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *AddTopicCommentResp) Reset() {
	*x = AddTopicCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopicCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopicCommentResp) ProtoMessage() {}

func (x *AddTopicCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopicCommentResp.ProtoReflect.Descriptor instead.
func (*AddTopicCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{130}
}

func (x *AddTopicCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 删除专题评论
type DeleteTopicCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteTopicCommentReq) Reset() {
	*x = DeleteTopicCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicCommentReq) ProtoMessage() {}

func (x *DeleteTopicCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicCommentReq.ProtoReflect.Descriptor instead.
func (*DeleteTopicCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{131}
}

func (x *DeleteTopicCommentReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteTopicCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *DeleteTopicCommentResp) Reset() {
	*x = DeleteTopicCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicCommentResp) ProtoMessage() {}

func (x *DeleteTopicCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicCommentResp.ProtoReflect.Descriptor instead.
func (*DeleteTopicCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{132}
}

func (x *DeleteTopicCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题评论
type UpdateTopicCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //主键ID
	MemberNickName string `protobuf:"bytes,2,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	TopicId        int64  `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                       //专题ID
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *UpdateTopicCommentReq) Reset() {
	*x = UpdateTopicCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCommentReq) ProtoMessage() {}

func (x *UpdateTopicCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCommentReq.ProtoReflect.Descriptor instead.
func (*UpdateTopicCommentReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{133}
}

func (x *UpdateTopicCommentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTopicCommentReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *UpdateTopicCommentReq) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *UpdateTopicCommentReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *UpdateTopicCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateTopicCommentReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type UpdateTopicCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateTopicCommentResp) Reset() {
	*x = UpdateTopicCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCommentResp) ProtoMessage() {}

func (x *UpdateTopicCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCommentResp.ProtoReflect.Descriptor instead.
func (*UpdateTopicCommentResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateTopicCommentResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 更新专题评论状态
type UpdateTopicCommentStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`                          //主键ID
	ShowStatus int32   `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` //是否显示，0->不显示；1->显示
}

func (x *UpdateTopicCommentStatusReq) Reset() {
	*x = UpdateTopicCommentStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCommentStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCommentStatusReq) ProtoMessage() {}

func (x *UpdateTopicCommentStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCommentStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateTopicCommentStatusReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{135}
}

func (x *UpdateTopicCommentStatusReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateTopicCommentStatusReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type UpdateTopicCommentStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *UpdateTopicCommentStatusResp) Reset() {
	*x = UpdateTopicCommentStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopicCommentStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicCommentStatusResp) ProtoMessage() {}

func (x *UpdateTopicCommentStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicCommentStatusResp.ProtoReflect.Descriptor instead.
func (*UpdateTopicCommentStatusResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{136}
}

func (x *UpdateTopicCommentStatusResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询专题评论详情
type QueryTopicCommentDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryTopicCommentDetailReq) Reset() {
	*x = QueryTopicCommentDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCommentDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCommentDetailReq) ProtoMessage() {}

func (x *QueryTopicCommentDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCommentDetailReq.ProtoReflect.Descriptor instead.
func (*QueryTopicCommentDetailReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{137}
}

func (x *QueryTopicCommentDetailReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryTopicCommentDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //主键ID
	MemberNickName string `protobuf:"bytes,2,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	TopicId        int64  `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                       //专题ID
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	CreateTime     string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //评论时间
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *QueryTopicCommentDetailResp) Reset() {
	*x = QueryTopicCommentDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCommentDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCommentDetailResp) ProtoMessage() {}

func (x *QueryTopicCommentDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCommentDetailResp.ProtoReflect.Descriptor instead.
func (*QueryTopicCommentDetailResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{138}
}

func (x *QueryTopicCommentDetailResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryTopicCommentDetailResp) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QueryTopicCommentDetailResp) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *QueryTopicCommentDetailResp) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QueryTopicCommentDetailResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryTopicCommentDetailResp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryTopicCommentDetailResp) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

// 分页查询专题评论列表
type QueryTopicCommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberNickName string `protobuf:"bytes,1,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	TopicId        int64  `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                       //专题ID
	MemberIcon     string `protobuf:"bytes,3,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	ShowStatus     int32  `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
	PageNum        int32  `protobuf:"varint,6,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                       //第几页
	PageSize       int32  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                    //每页的数量
}

func (x *QueryTopicCommentListReq) Reset() {
	*x = QueryTopicCommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCommentListReq) ProtoMessage() {}

func (x *QueryTopicCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCommentListReq.ProtoReflect.Descriptor instead.
func (*QueryTopicCommentListReq) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{139}
}

func (x *QueryTopicCommentListReq) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *QueryTopicCommentListReq) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *QueryTopicCommentListReq) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *QueryTopicCommentListReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QueryTopicCommentListReq) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *QueryTopicCommentListReq) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryTopicCommentListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TopicCommentListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                //主键ID
	MemberNickName string `protobuf:"bytes,2,opt,name=member_nick_name,json=memberNickName,proto3" json:"member_nick_name,omitempty"` //评论人员昵称
	TopicId        int64  `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                       //专题ID
	MemberIcon     string `protobuf:"bytes,4,opt,name=member_icon,json=memberIcon,proto3" json:"member_icon,omitempty"`               //评论人员头像
	Content        string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                       //评论内容
	CreateTime     string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`               //评论时间
	ShowStatus     int32  `protobuf:"varint,7,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`              //是否显示，0->不显示；1->显示
}

func (x *TopicCommentListData) Reset() {
	*x = TopicCommentListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicCommentListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicCommentListData) ProtoMessage() {}

func (x *TopicCommentListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicCommentListData.ProtoReflect.Descriptor instead.
func (*TopicCommentListData) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{140}
}

func (x *TopicCommentListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TopicCommentListData) GetMemberNickName() string {
	if x != nil {
		return x.MemberNickName
	}
	return ""
}

func (x *TopicCommentListData) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *TopicCommentListData) GetMemberIcon() string {
	if x != nil {
		return x.MemberIcon
	}
	return ""
}

func (x *TopicCommentListData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TopicCommentListData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TopicCommentListData) GetShowStatus() int32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

type QueryTopicCommentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TopicCommentListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QueryTopicCommentListResp) Reset() {
	*x = QueryTopicCommentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_cms_cms_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTopicCommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTopicCommentListResp) ProtoMessage() {}

func (x *QueryTopicCommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_cms_cms_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTopicCommentListResp.ProtoReflect.Descriptor instead.
func (*QueryTopicCommentListResp) Descriptor() ([]byte, []int) {
	return file_rpc_cms_cms_proto_rawDescGZIP(), []int{141}
}

func (x *QueryTopicCommentListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryTopicCommentListResp) GetList() []*TopicCommentListData {
	if x != nil {
		return x.List
	}
	return nil
}

var File_rpc_cms_cms_proto protoreflect.FileDescriptor

var file_rpc_cms_cms_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6d, 0x73, 0x2f, 0x63, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xde,
	0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22,
	0x21, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x21, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xe1, 0x01, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22,
	0x24, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x65, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x65, 0x6c, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2a, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x24, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x65, 0x6c, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc6,
	0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x0c, 0x48, 0x65,
	0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x48, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x22, 0x29, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x29,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68,
	0x65, 0x6c, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2c, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x32, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x1a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9e,
	0x02, 0x0a, 0x14, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x66, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x6c,
	0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x22, 0x29, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x29, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x22, 0x2c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x79,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x1c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa4,
	0x02, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x66, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2d,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xbd, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2d, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x6e, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x33, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0x2d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa2, 0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x9b, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x28, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x73, 0x22, 0x98, 0x04, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x22, 0x24, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x24, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x9b, 0x04, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x93, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x27, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x80,
	0x05, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf9, 0x04, 0x0a, 0x0f, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x36, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x27, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x3a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xc6, 0x01,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x2c, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x22, 0xc9, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22,
	0x2f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x70, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x22, 0x35, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2f, 0x0a, 0x1d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x1e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xa7, 0x02, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x1c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x52, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x1c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf5, 0x01, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xee, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x6a, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a,
	0x1c, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x1d, 0x41,
	0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x22, 0x43, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xee, 0x02,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22, 0x22,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xf1, 0x02,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x22, 0x25, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x22,
	0x2b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x25, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xd6, 0x03, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xff, 0x02, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcf,
	0x03, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x58, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2a, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x22, 0x6e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x22, 0x33, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x15, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x68, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x29, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x50, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x32, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x2c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x14,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32, 0xcc,
	0x03, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x18, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65,
	0x6c, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x65, 0x6c, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x65, 0x6c, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x65, 0x6c, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xe4, 0x04,
	0x0a, 0x13, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x26, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65,
	0x6c, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x32, 0xe4, 0x04, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xf7, 0x04, 0x0a, 0x14,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xc1, 0x02, 0x0a, 0x23, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x1f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x2e, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x34, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xad, 0x06, 0x0a, 0x0e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x9d, 0x05, 0x0a, 0x16, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x63, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x8a, 0x05, 0x0a, 0x15, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x96, 0x02, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32,
	0xdf, 0x03, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x32, 0xf7, 0x04, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x26, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xe4, 0x04, 0x0a, 0x13,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63,
	0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e,
	0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x6d,
	0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6d, 0x73,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x63, 0x6d, 0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_cms_cms_proto_rawDescOnce sync.Once
	file_rpc_cms_cms_proto_rawDescData = file_rpc_cms_cms_proto_rawDesc
)

func file_rpc_cms_cms_proto_rawDescGZIP() []byte {
	file_rpc_cms_cms_proto_rawDescOnce.Do(func() {
		file_rpc_cms_cms_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_cms_cms_proto_rawDescData)
	})
	return file_rpc_cms_cms_proto_rawDescData
}

var file_rpc_cms_cms_proto_msgTypes = make([]protoimpl.MessageInfo, 142)
var file_rpc_cms_cms_proto_goTypes = []interface{}{
	(*AddHelpReq)(nil),                                // 0: cmsclient.AddHelpReq
	(*AddHelpResp)(nil),                               // 1: cmsclient.AddHelpResp
	(*DeleteHelpReq)(nil),                             // 2: cmsclient.DeleteHelpReq
	(*DeleteHelpResp)(nil),                            // 3: cmsclient.DeleteHelpResp
	(*UpdateHelpReq)(nil),                             // 4: cmsclient.UpdateHelpReq
	(*UpdateHelpResp)(nil),                            // 5: cmsclient.UpdateHelpResp
	(*UpdateHelpStatusReq)(nil),                       // 6: cmsclient.UpdateHelpStatusReq
	(*UpdateHelpStatusResp)(nil),                      // 7: cmsclient.UpdateHelpStatusResp
	(*QueryHelpDetailReq)(nil),                        // 8: cmsclient.QueryHelpDetailReq
	(*QueryHelpDetailResp)(nil),                       // 9: cmsclient.QueryHelpDetailResp
	(*QueryHelpListReq)(nil),                          // 10: cmsclient.QueryHelpListReq
	(*HelpListData)(nil),                              // 11: cmsclient.HelpListData
	(*QueryHelpListResp)(nil),                         // 12: cmsclient.QueryHelpListResp
	(*AddHelpCategoryReq)(nil),                        // 13: cmsclient.AddHelpCategoryReq
	(*AddHelpCategoryResp)(nil),                       // 14: cmsclient.AddHelpCategoryResp
	(*DeleteHelpCategoryReq)(nil),                     // 15: cmsclient.DeleteHelpCategoryReq
	(*DeleteHelpCategoryResp)(nil),                    // 16: cmsclient.DeleteHelpCategoryResp
	(*UpdateHelpCategoryReq)(nil),                     // 17: cmsclient.UpdateHelpCategoryReq
	(*UpdateHelpCategoryResp)(nil),                    // 18: cmsclient.UpdateHelpCategoryResp
	(*UpdateHelpCategoryStatusReq)(nil),               // 19: cmsclient.UpdateHelpCategoryStatusReq
	(*UpdateHelpCategoryStatusResp)(nil),              // 20: cmsclient.UpdateHelpCategoryStatusResp
	(*QueryHelpCategoryDetailReq)(nil),                // 21: cmsclient.QueryHelpCategoryDetailReq
	(*QueryHelpCategoryDetailResp)(nil),               // 22: cmsclient.QueryHelpCategoryDetailResp
	(*QueryHelpCategoryListReq)(nil),                  // 23: cmsclient.QueryHelpCategoryListReq
	(*HelpCategoryListData)(nil),                      // 24: cmsclient.HelpCategoryListData
	(*QueryHelpCategoryListResp)(nil),                 // 25: cmsclient.QueryHelpCategoryListResp
	(*AddMemberReportReq)(nil),                        // 26: cmsclient.AddMemberReportReq
	(*AddMemberReportResp)(nil),                       // 27: cmsclient.AddMemberReportResp
	(*DeleteMemberReportReq)(nil),                     // 28: cmsclient.DeleteMemberReportReq
	(*DeleteMemberReportResp)(nil),                    // 29: cmsclient.DeleteMemberReportResp
	(*UpdateMemberReportReq)(nil),                     // 30: cmsclient.UpdateMemberReportReq
	(*UpdateMemberReportResp)(nil),                    // 31: cmsclient.UpdateMemberReportResp
	(*UpdateMemberReportStatusReq)(nil),               // 32: cmsclient.UpdateMemberReportStatusReq
	(*UpdateMemberReportStatusResp)(nil),              // 33: cmsclient.UpdateMemberReportStatusResp
	(*QueryMemberReportDetailReq)(nil),                // 34: cmsclient.QueryMemberReportDetailReq
	(*QueryMemberReportDetailResp)(nil),               // 35: cmsclient.QueryMemberReportDetailResp
	(*QueryMemberReportListReq)(nil),                  // 36: cmsclient.QueryMemberReportListReq
	(*MemberReportListData)(nil),                      // 37: cmsclient.MemberReportListData
	(*QueryMemberReportListResp)(nil),                 // 38: cmsclient.QueryMemberReportListResp
	(*AddPreferredAreaReq)(nil),                       // 39: cmsclient.AddPreferredAreaReq
	(*AddPreferredAreaResp)(nil),                      // 40: cmsclient.AddPreferredAreaResp
	(*DeletePreferredAreaReq)(nil),                    // 41: cmsclient.DeletePreferredAreaReq
	(*DeletePreferredAreaResp)(nil),                   // 42: cmsclient.DeletePreferredAreaResp
	(*UpdatePreferredAreaReq)(nil),                    // 43: cmsclient.UpdatePreferredAreaReq
	(*UpdatePreferredAreaResp)(nil),                   // 44: cmsclient.UpdatePreferredAreaResp
	(*UpdatePreferredAreaStatusReq)(nil),              // 45: cmsclient.UpdatePreferredAreaStatusReq
	(*UpdatePreferredAreaStatusResp)(nil),             // 46: cmsclient.UpdatePreferredAreaStatusResp
	(*QueryPreferredAreaDetailReq)(nil),               // 47: cmsclient.QueryPreferredAreaDetailReq
	(*QueryPreferredAreaDetailResp)(nil),              // 48: cmsclient.QueryPreferredAreaDetailResp
	(*QueryPreferredAreaListReq)(nil),                 // 49: cmsclient.QueryPreferredAreaListReq
	(*PreferredAreaListData)(nil),                     // 50: cmsclient.PreferredAreaListData
	(*QueryPreferredAreaListResp)(nil),                // 51: cmsclient.QueryPreferredAreaListResp
	(*AddPreferredAreaProductRelationReq)(nil),        // 52: cmsclient.AddPreferredAreaProductRelationReq
	(*AddPreferredAreaProductRelationResp)(nil),       // 53: cmsclient.AddPreferredAreaProductRelationResp
	(*QueryPreferredAreaProductRelationListReq)(nil),  // 54: cmsclient.QueryPreferredAreaProductRelationListReq
	(*QueryPreferredAreaProductRelationListResp)(nil), // 55: cmsclient.QueryPreferredAreaProductRelationListResp
	(*AddSubjectReq)(nil),                             // 56: cmsclient.AddSubjectReq
	(*AddSubjectResp)(nil),                            // 57: cmsclient.AddSubjectResp
	(*DeleteSubjectReq)(nil),                          // 58: cmsclient.DeleteSubjectReq
	(*DeleteSubjectResp)(nil),                         // 59: cmsclient.DeleteSubjectResp
	(*UpdateSubjectReq)(nil),                          // 60: cmsclient.UpdateSubjectReq
	(*UpdateSubjectResp)(nil),                         // 61: cmsclient.UpdateSubjectResp
	(*UpdateSubjectStatusReq)(nil),                    // 62: cmsclient.UpdateSubjectStatusReq
	(*UpdateSubjectStatusResp)(nil),                   // 63: cmsclient.UpdateSubjectStatusResp
	(*QuerySubjectDetailReq)(nil),                     // 64: cmsclient.QuerySubjectDetailReq
	(*QuerySubjectDetailResp)(nil),                    // 65: cmsclient.QuerySubjectDetailResp
	(*QuerySubjectListReq)(nil),                       // 66: cmsclient.QuerySubjectListReq
	(*SubjectListData)(nil),                           // 67: cmsclient.SubjectListData
	(*QuerySubjectListResp)(nil),                      // 68: cmsclient.QuerySubjectListResp
	(*UpdateSubjectRecommendStatusReq)(nil),           // 69: cmsclient.UpdateSubjectRecommendStatusReq
	(*UpdateSubjectRecommendStatusResp)(nil),          // 70: cmsclient.UpdateSubjectRecommendStatusResp
	(*SubjectListByIdsReq)(nil),                       // 71: cmsclient.SubjectListByIdsReq
	(*UpdateSubjectSortReq)(nil),                      // 72: cmsclient.UpdateSubjectSortReq
	(*AddSubjectCategoryReq)(nil),                     // 73: cmsclient.AddSubjectCategoryReq
	(*AddSubjectCategoryResp)(nil),                    // 74: cmsclient.AddSubjectCategoryResp
	(*DeleteSubjectCategoryReq)(nil),                  // 75: cmsclient.DeleteSubjectCategoryReq
	(*DeleteSubjectCategoryResp)(nil),                 // 76: cmsclient.DeleteSubjectCategoryResp
	(*UpdateSubjectCategoryReq)(nil),                  // 77: cmsclient.UpdateSubjectCategoryReq
	(*UpdateSubjectCategoryResp)(nil),                 // 78: cmsclient.UpdateSubjectCategoryResp
	(*UpdateSubjectCategoryStatusReq)(nil),            // 79: cmsclient.UpdateSubjectCategoryStatusReq
	(*UpdateSubjectCategoryStatusResp)(nil),           // 80: cmsclient.UpdateSubjectCategoryStatusResp
	(*QuerySubjectCategoryDetailReq)(nil),             // 81: cmsclient.QuerySubjectCategoryDetailReq
	(*QuerySubjectCategoryDetailResp)(nil),            // 82: cmsclient.QuerySubjectCategoryDetailResp
	(*QuerySubjectCategoryListReq)(nil),               // 83: cmsclient.QuerySubjectCategoryListReq
	(*SubjectCategoryListData)(nil),                   // 84: cmsclient.SubjectCategoryListData
	(*QuerySubjectCategoryListResp)(nil),              // 85: cmsclient.QuerySubjectCategoryListResp
	(*AddSubjectCommentReq)(nil),                      // 86: cmsclient.AddSubjectCommentReq
	(*AddSubjectCommentResp)(nil),                     // 87: cmsclient.AddSubjectCommentResp
	(*DeleteSubjectCommentReq)(nil),                   // 88: cmsclient.DeleteSubjectCommentReq
	(*DeleteSubjectCommentResp)(nil),                  // 89: cmsclient.DeleteSubjectCommentResp
	(*UpdateSubjectCommentReq)(nil),                   // 90: cmsclient.UpdateSubjectCommentReq
	(*UpdateSubjectCommentResp)(nil),                  // 91: cmsclient.UpdateSubjectCommentResp
	(*UpdateSubjectCommentStatusReq)(nil),             // 92: cmsclient.UpdateSubjectCommentStatusReq
	(*UpdateSubjectCommentStatusResp)(nil),            // 93: cmsclient.UpdateSubjectCommentStatusResp
	(*QuerySubjectCommentDetailReq)(nil),              // 94: cmsclient.QuerySubjectCommentDetailReq
	(*QuerySubjectCommentDetailResp)(nil),             // 95: cmsclient.QuerySubjectCommentDetailResp
	(*QuerySubjectCommentListReq)(nil),                // 96: cmsclient.QuerySubjectCommentListReq
	(*SubjectCommentListData)(nil),                    // 97: cmsclient.SubjectCommentListData
	(*QuerySubjectCommentListResp)(nil),               // 98: cmsclient.QuerySubjectCommentListResp
	(*AddSubjectProductRelationReq)(nil),              // 99: cmsclient.AddSubjectProductRelationReq
	(*AddSubjectProductRelationResp)(nil),             // 100: cmsclient.AddSubjectProductRelationResp
	(*QuerySubjectProductRelationListReq)(nil),        // 101: cmsclient.QuerySubjectProductRelationListReq
	(*QuerySubjectProductRelationListResp)(nil),       // 102: cmsclient.QuerySubjectProductRelationListResp
	(*AddTopicReq)(nil),                               // 103: cmsclient.AddTopicReq
	(*AddTopicResp)(nil),                              // 104: cmsclient.AddTopicResp
	(*DeleteTopicReq)(nil),                            // 105: cmsclient.DeleteTopicReq
	(*DeleteTopicResp)(nil),                           // 106: cmsclient.DeleteTopicResp
	(*UpdateTopicReq)(nil),                            // 107: cmsclient.UpdateTopicReq
	(*UpdateTopicResp)(nil),                           // 108: cmsclient.UpdateTopicResp
	(*UpdateTopicStatusReq)(nil),                      // 109: cmsclient.UpdateTopicStatusReq
	(*UpdateTopicStatusResp)(nil),                     // 110: cmsclient.UpdateTopicStatusResp
	(*QueryTopicDetailReq)(nil),                       // 111: cmsclient.QueryTopicDetailReq
	(*QueryTopicDetailResp)(nil),                      // 112: cmsclient.QueryTopicDetailResp
	(*QueryTopicListReq)(nil),                         // 113: cmsclient.QueryTopicListReq
	(*TopicListData)(nil),                             // 114: cmsclient.TopicListData
	(*QueryTopicListResp)(nil),                        // 115: cmsclient.QueryTopicListResp
	(*AddTopicCategoryReq)(nil),                       // 116: cmsclient.AddTopicCategoryReq
	(*AddTopicCategoryResp)(nil),                      // 117: cmsclient.AddTopicCategoryResp
	(*DeleteTopicCategoryReq)(nil),                    // 118: cmsclient.DeleteTopicCategoryReq
	(*DeleteTopicCategoryResp)(nil),                   // 119: cmsclient.DeleteTopicCategoryResp
	(*UpdateTopicCategoryReq)(nil),                    // 120: cmsclient.UpdateTopicCategoryReq
	(*UpdateTopicCategoryResp)(nil),                   // 121: cmsclient.UpdateTopicCategoryResp
	(*UpdateTopicCategoryStatusReq)(nil),              // 122: cmsclient.UpdateTopicCategoryStatusReq
	(*UpdateTopicCategoryStatusResp)(nil),             // 123: cmsclient.UpdateTopicCategoryStatusResp
	(*QueryTopicCategoryDetailReq)(nil),               // 124: cmsclient.QueryTopicCategoryDetailReq
	(*QueryTopicCategoryDetailResp)(nil),              // 125: cmsclient.QueryTopicCategoryDetailResp
	(*QueryTopicCategoryListReq)(nil),                 // 126: cmsclient.QueryTopicCategoryListReq
	(*TopicCategoryListData)(nil),                     // 127: cmsclient.TopicCategoryListData
	(*QueryTopicCategoryListResp)(nil),                // 128: cmsclient.QueryTopicCategoryListResp
	(*AddTopicCommentReq)(nil),                        // 129: cmsclient.AddTopicCommentReq
	(*AddTopicCommentResp)(nil),                       // 130: cmsclient.AddTopicCommentResp
	(*DeleteTopicCommentReq)(nil),                     // 131: cmsclient.DeleteTopicCommentReq
	(*DeleteTopicCommentResp)(nil),                    // 132: cmsclient.DeleteTopicCommentResp
	(*UpdateTopicCommentReq)(nil),                     // 133: cmsclient.UpdateTopicCommentReq
	(*UpdateTopicCommentResp)(nil),                    // 134: cmsclient.UpdateTopicCommentResp
	(*UpdateTopicCommentStatusReq)(nil),               // 135: cmsclient.UpdateTopicCommentStatusReq
	(*UpdateTopicCommentStatusResp)(nil),              // 136: cmsclient.UpdateTopicCommentStatusResp
	(*QueryTopicCommentDetailReq)(nil),                // 137: cmsclient.QueryTopicCommentDetailReq
	(*QueryTopicCommentDetailResp)(nil),               // 138: cmsclient.QueryTopicCommentDetailResp
	(*QueryTopicCommentListReq)(nil),                  // 139: cmsclient.QueryTopicCommentListReq
	(*TopicCommentListData)(nil),                      // 140: cmsclient.TopicCommentListData
	(*QueryTopicCommentListResp)(nil),                 // 141: cmsclient.QueryTopicCommentListResp
}
var file_rpc_cms_cms_proto_depIdxs = []int32{
	11,  // 0: cmsclient.QueryHelpListResp.list:type_name -> cmsclient.HelpListData
	24,  // 1: cmsclient.QueryHelpCategoryListResp.list:type_name -> cmsclient.HelpCategoryListData
	37,  // 2: cmsclient.QueryMemberReportListResp.list:type_name -> cmsclient.MemberReportListData
	50,  // 3: cmsclient.QueryPreferredAreaListResp.list:type_name -> cmsclient.PreferredAreaListData
	67,  // 4: cmsclient.QuerySubjectListResp.list:type_name -> cmsclient.SubjectListData
	84,  // 5: cmsclient.QuerySubjectCategoryListResp.list:type_name -> cmsclient.SubjectCategoryListData
	97,  // 6: cmsclient.QuerySubjectCommentListResp.list:type_name -> cmsclient.SubjectCommentListData
	114, // 7: cmsclient.QueryTopicListResp.list:type_name -> cmsclient.TopicListData
	127, // 8: cmsclient.QueryTopicCategoryListResp.list:type_name -> cmsclient.TopicCategoryListData
	140, // 9: cmsclient.QueryTopicCommentListResp.list:type_name -> cmsclient.TopicCommentListData
	0,   // 10: cmsclient.HelpService.AddHelp:input_type -> cmsclient.AddHelpReq
	2,   // 11: cmsclient.HelpService.DeleteHelp:input_type -> cmsclient.DeleteHelpReq
	4,   // 12: cmsclient.HelpService.UpdateHelp:input_type -> cmsclient.UpdateHelpReq
	6,   // 13: cmsclient.HelpService.UpdateHelpStatus:input_type -> cmsclient.UpdateHelpStatusReq
	8,   // 14: cmsclient.HelpService.QueryHelpDetail:input_type -> cmsclient.QueryHelpDetailReq
	10,  // 15: cmsclient.HelpService.QueryHelpList:input_type -> cmsclient.QueryHelpListReq
	13,  // 16: cmsclient.HelpCategoryService.AddHelpCategory:input_type -> cmsclient.AddHelpCategoryReq
	15,  // 17: cmsclient.HelpCategoryService.DeleteHelpCategory:input_type -> cmsclient.DeleteHelpCategoryReq
	17,  // 18: cmsclient.HelpCategoryService.UpdateHelpCategory:input_type -> cmsclient.UpdateHelpCategoryReq
	19,  // 19: cmsclient.HelpCategoryService.UpdateHelpCategoryStatus:input_type -> cmsclient.UpdateHelpCategoryStatusReq
	21,  // 20: cmsclient.HelpCategoryService.QueryHelpCategoryDetail:input_type -> cmsclient.QueryHelpCategoryDetailReq
	23,  // 21: cmsclient.HelpCategoryService.QueryHelpCategoryList:input_type -> cmsclient.QueryHelpCategoryListReq
	26,  // 22: cmsclient.MemberReportService.AddMemberReport:input_type -> cmsclient.AddMemberReportReq
	28,  // 23: cmsclient.MemberReportService.DeleteMemberReport:input_type -> cmsclient.DeleteMemberReportReq
	30,  // 24: cmsclient.MemberReportService.UpdateMemberReport:input_type -> cmsclient.UpdateMemberReportReq
	32,  // 25: cmsclient.MemberReportService.UpdateMemberReportStatus:input_type -> cmsclient.UpdateMemberReportStatusReq
	34,  // 26: cmsclient.MemberReportService.QueryMemberReportDetail:input_type -> cmsclient.QueryMemberReportDetailReq
	36,  // 27: cmsclient.MemberReportService.QueryMemberReportList:input_type -> cmsclient.QueryMemberReportListReq
	39,  // 28: cmsclient.PreferredAreaService.AddPreferredArea:input_type -> cmsclient.AddPreferredAreaReq
	41,  // 29: cmsclient.PreferredAreaService.DeletePreferredArea:input_type -> cmsclient.DeletePreferredAreaReq
	43,  // 30: cmsclient.PreferredAreaService.UpdatePreferredArea:input_type -> cmsclient.UpdatePreferredAreaReq
	45,  // 31: cmsclient.PreferredAreaService.UpdatePreferredAreaStatus:input_type -> cmsclient.UpdatePreferredAreaStatusReq
	47,  // 32: cmsclient.PreferredAreaService.QueryPreferredAreaDetail:input_type -> cmsclient.QueryPreferredAreaDetailReq
	49,  // 33: cmsclient.PreferredAreaService.QueryPreferredAreaList:input_type -> cmsclient.QueryPreferredAreaListReq
	52,  // 34: cmsclient.PreferredAreaProductRelationService.AddPreferredAreaProductRelation:input_type -> cmsclient.AddPreferredAreaProductRelationReq
	54,  // 35: cmsclient.PreferredAreaProductRelationService.QueryPreferredAreaProductRelationList:input_type -> cmsclient.QueryPreferredAreaProductRelationListReq
	56,  // 36: cmsclient.SubjectService.AddSubject:input_type -> cmsclient.AddSubjectReq
	58,  // 37: cmsclient.SubjectService.DeleteSubject:input_type -> cmsclient.DeleteSubjectReq
	60,  // 38: cmsclient.SubjectService.UpdateSubject:input_type -> cmsclient.UpdateSubjectReq
	62,  // 39: cmsclient.SubjectService.UpdateSubjectStatus:input_type -> cmsclient.UpdateSubjectStatusReq
	64,  // 40: cmsclient.SubjectService.QuerySubjectDetail:input_type -> cmsclient.QuerySubjectDetailReq
	66,  // 41: cmsclient.SubjectService.QuerySubjectList:input_type -> cmsclient.QuerySubjectListReq
	71,  // 42: cmsclient.SubjectService.SubjectListByIds:input_type -> cmsclient.SubjectListByIdsReq
	69,  // 43: cmsclient.SubjectService.UpdateSubjectRecommendStatus:input_type -> cmsclient.UpdateSubjectRecommendStatusReq
	72,  // 44: cmsclient.SubjectService.UpdateSubjectSort:input_type -> cmsclient.UpdateSubjectSortReq
	73,  // 45: cmsclient.SubjectCategoryService.AddSubjectCategory:input_type -> cmsclient.AddSubjectCategoryReq
	75,  // 46: cmsclient.SubjectCategoryService.DeleteSubjectCategory:input_type -> cmsclient.DeleteSubjectCategoryReq
	77,  // 47: cmsclient.SubjectCategoryService.UpdateSubjectCategory:input_type -> cmsclient.UpdateSubjectCategoryReq
	79,  // 48: cmsclient.SubjectCategoryService.UpdateSubjectCategoryStatus:input_type -> cmsclient.UpdateSubjectCategoryStatusReq
	81,  // 49: cmsclient.SubjectCategoryService.QuerySubjectCategoryDetail:input_type -> cmsclient.QuerySubjectCategoryDetailReq
	83,  // 50: cmsclient.SubjectCategoryService.QuerySubjectCategoryList:input_type -> cmsclient.QuerySubjectCategoryListReq
	86,  // 51: cmsclient.SubjectCommentService.AddSubjectComment:input_type -> cmsclient.AddSubjectCommentReq
	88,  // 52: cmsclient.SubjectCommentService.DeleteSubjectComment:input_type -> cmsclient.DeleteSubjectCommentReq
	90,  // 53: cmsclient.SubjectCommentService.UpdateSubjectComment:input_type -> cmsclient.UpdateSubjectCommentReq
	92,  // 54: cmsclient.SubjectCommentService.UpdateSubjectCommentStatus:input_type -> cmsclient.UpdateSubjectCommentStatusReq
	94,  // 55: cmsclient.SubjectCommentService.QuerySubjectCommentDetail:input_type -> cmsclient.QuerySubjectCommentDetailReq
	96,  // 56: cmsclient.SubjectCommentService.QuerySubjectCommentList:input_type -> cmsclient.QuerySubjectCommentListReq
	99,  // 57: cmsclient.SubjectProductRelationService.AddSubjectProductRelation:input_type -> cmsclient.AddSubjectProductRelationReq
	101, // 58: cmsclient.SubjectProductRelationService.QuerySubjectProductRelationList:input_type -> cmsclient.QuerySubjectProductRelationListReq
	103, // 59: cmsclient.TopicService.AddTopic:input_type -> cmsclient.AddTopicReq
	105, // 60: cmsclient.TopicService.DeleteTopic:input_type -> cmsclient.DeleteTopicReq
	107, // 61: cmsclient.TopicService.UpdateTopic:input_type -> cmsclient.UpdateTopicReq
	109, // 62: cmsclient.TopicService.UpdateTopicStatus:input_type -> cmsclient.UpdateTopicStatusReq
	111, // 63: cmsclient.TopicService.QueryTopicDetail:input_type -> cmsclient.QueryTopicDetailReq
	113, // 64: cmsclient.TopicService.QueryTopicList:input_type -> cmsclient.QueryTopicListReq
	116, // 65: cmsclient.TopicCategoryService.AddTopicCategory:input_type -> cmsclient.AddTopicCategoryReq
	118, // 66: cmsclient.TopicCategoryService.DeleteTopicCategory:input_type -> cmsclient.DeleteTopicCategoryReq
	120, // 67: cmsclient.TopicCategoryService.UpdateTopicCategory:input_type -> cmsclient.UpdateTopicCategoryReq
	122, // 68: cmsclient.TopicCategoryService.UpdateTopicCategoryStatus:input_type -> cmsclient.UpdateTopicCategoryStatusReq
	124, // 69: cmsclient.TopicCategoryService.QueryTopicCategoryDetail:input_type -> cmsclient.QueryTopicCategoryDetailReq
	126, // 70: cmsclient.TopicCategoryService.QueryTopicCategoryList:input_type -> cmsclient.QueryTopicCategoryListReq
	129, // 71: cmsclient.TopicCommentService.AddTopicComment:input_type -> cmsclient.AddTopicCommentReq
	131, // 72: cmsclient.TopicCommentService.DeleteTopicComment:input_type -> cmsclient.DeleteTopicCommentReq
	133, // 73: cmsclient.TopicCommentService.UpdateTopicComment:input_type -> cmsclient.UpdateTopicCommentReq
	135, // 74: cmsclient.TopicCommentService.UpdateTopicCommentStatus:input_type -> cmsclient.UpdateTopicCommentStatusReq
	137, // 75: cmsclient.TopicCommentService.QueryTopicCommentDetail:input_type -> cmsclient.QueryTopicCommentDetailReq
	139, // 76: cmsclient.TopicCommentService.QueryTopicCommentList:input_type -> cmsclient.QueryTopicCommentListReq
	1,   // 77: cmsclient.HelpService.AddHelp:output_type -> cmsclient.AddHelpResp
	3,   // 78: cmsclient.HelpService.DeleteHelp:output_type -> cmsclient.DeleteHelpResp
	5,   // 79: cmsclient.HelpService.UpdateHelp:output_type -> cmsclient.UpdateHelpResp
	7,   // 80: cmsclient.HelpService.UpdateHelpStatus:output_type -> cmsclient.UpdateHelpStatusResp
	9,   // 81: cmsclient.HelpService.QueryHelpDetail:output_type -> cmsclient.QueryHelpDetailResp
	12,  // 82: cmsclient.HelpService.QueryHelpList:output_type -> cmsclient.QueryHelpListResp
	14,  // 83: cmsclient.HelpCategoryService.AddHelpCategory:output_type -> cmsclient.AddHelpCategoryResp
	16,  // 84: cmsclient.HelpCategoryService.DeleteHelpCategory:output_type -> cmsclient.DeleteHelpCategoryResp
	18,  // 85: cmsclient.HelpCategoryService.UpdateHelpCategory:output_type -> cmsclient.UpdateHelpCategoryResp
	20,  // 86: cmsclient.HelpCategoryService.UpdateHelpCategoryStatus:output_type -> cmsclient.UpdateHelpCategoryStatusResp
	22,  // 87: cmsclient.HelpCategoryService.QueryHelpCategoryDetail:output_type -> cmsclient.QueryHelpCategoryDetailResp
	25,  // 88: cmsclient.HelpCategoryService.QueryHelpCategoryList:output_type -> cmsclient.QueryHelpCategoryListResp
	27,  // 89: cmsclient.MemberReportService.AddMemberReport:output_type -> cmsclient.AddMemberReportResp
	29,  // 90: cmsclient.MemberReportService.DeleteMemberReport:output_type -> cmsclient.DeleteMemberReportResp
	31,  // 91: cmsclient.MemberReportService.UpdateMemberReport:output_type -> cmsclient.UpdateMemberReportResp
	33,  // 92: cmsclient.MemberReportService.UpdateMemberReportStatus:output_type -> cmsclient.UpdateMemberReportStatusResp
	35,  // 93: cmsclient.MemberReportService.QueryMemberReportDetail:output_type -> cmsclient.QueryMemberReportDetailResp
	38,  // 94: cmsclient.MemberReportService.QueryMemberReportList:output_type -> cmsclient.QueryMemberReportListResp
	40,  // 95: cmsclient.PreferredAreaService.AddPreferredArea:output_type -> cmsclient.AddPreferredAreaResp
	42,  // 96: cmsclient.PreferredAreaService.DeletePreferredArea:output_type -> cmsclient.DeletePreferredAreaResp
	44,  // 97: cmsclient.PreferredAreaService.UpdatePreferredArea:output_type -> cmsclient.UpdatePreferredAreaResp
	46,  // 98: cmsclient.PreferredAreaService.UpdatePreferredAreaStatus:output_type -> cmsclient.UpdatePreferredAreaStatusResp
	48,  // 99: cmsclient.PreferredAreaService.QueryPreferredAreaDetail:output_type -> cmsclient.QueryPreferredAreaDetailResp
	51,  // 100: cmsclient.PreferredAreaService.QueryPreferredAreaList:output_type -> cmsclient.QueryPreferredAreaListResp
	53,  // 101: cmsclient.PreferredAreaProductRelationService.AddPreferredAreaProductRelation:output_type -> cmsclient.AddPreferredAreaProductRelationResp
	55,  // 102: cmsclient.PreferredAreaProductRelationService.QueryPreferredAreaProductRelationList:output_type -> cmsclient.QueryPreferredAreaProductRelationListResp
	57,  // 103: cmsclient.SubjectService.AddSubject:output_type -> cmsclient.AddSubjectResp
	59,  // 104: cmsclient.SubjectService.DeleteSubject:output_type -> cmsclient.DeleteSubjectResp
	61,  // 105: cmsclient.SubjectService.UpdateSubject:output_type -> cmsclient.UpdateSubjectResp
	63,  // 106: cmsclient.SubjectService.UpdateSubjectStatus:output_type -> cmsclient.UpdateSubjectStatusResp
	65,  // 107: cmsclient.SubjectService.QuerySubjectDetail:output_type -> cmsclient.QuerySubjectDetailResp
	68,  // 108: cmsclient.SubjectService.QuerySubjectList:output_type -> cmsclient.QuerySubjectListResp
	68,  // 109: cmsclient.SubjectService.SubjectListByIds:output_type -> cmsclient.QuerySubjectListResp
	70,  // 110: cmsclient.SubjectService.UpdateSubjectRecommendStatus:output_type -> cmsclient.UpdateSubjectRecommendStatusResp
	61,  // 111: cmsclient.SubjectService.UpdateSubjectSort:output_type -> cmsclient.UpdateSubjectResp
	74,  // 112: cmsclient.SubjectCategoryService.AddSubjectCategory:output_type -> cmsclient.AddSubjectCategoryResp
	76,  // 113: cmsclient.SubjectCategoryService.DeleteSubjectCategory:output_type -> cmsclient.DeleteSubjectCategoryResp
	78,  // 114: cmsclient.SubjectCategoryService.UpdateSubjectCategory:output_type -> cmsclient.UpdateSubjectCategoryResp
	80,  // 115: cmsclient.SubjectCategoryService.UpdateSubjectCategoryStatus:output_type -> cmsclient.UpdateSubjectCategoryStatusResp
	82,  // 116: cmsclient.SubjectCategoryService.QuerySubjectCategoryDetail:output_type -> cmsclient.QuerySubjectCategoryDetailResp
	85,  // 117: cmsclient.SubjectCategoryService.QuerySubjectCategoryList:output_type -> cmsclient.QuerySubjectCategoryListResp
	87,  // 118: cmsclient.SubjectCommentService.AddSubjectComment:output_type -> cmsclient.AddSubjectCommentResp
	89,  // 119: cmsclient.SubjectCommentService.DeleteSubjectComment:output_type -> cmsclient.DeleteSubjectCommentResp
	91,  // 120: cmsclient.SubjectCommentService.UpdateSubjectComment:output_type -> cmsclient.UpdateSubjectCommentResp
	93,  // 121: cmsclient.SubjectCommentService.UpdateSubjectCommentStatus:output_type -> cmsclient.UpdateSubjectCommentStatusResp
	95,  // 122: cmsclient.SubjectCommentService.QuerySubjectCommentDetail:output_type -> cmsclient.QuerySubjectCommentDetailResp
	98,  // 123: cmsclient.SubjectCommentService.QuerySubjectCommentList:output_type -> cmsclient.QuerySubjectCommentListResp
	100, // 124: cmsclient.SubjectProductRelationService.AddSubjectProductRelation:output_type -> cmsclient.AddSubjectProductRelationResp
	102, // 125: cmsclient.SubjectProductRelationService.QuerySubjectProductRelationList:output_type -> cmsclient.QuerySubjectProductRelationListResp
	104, // 126: cmsclient.TopicService.AddTopic:output_type -> cmsclient.AddTopicResp
	106, // 127: cmsclient.TopicService.DeleteTopic:output_type -> cmsclient.DeleteTopicResp
	108, // 128: cmsclient.TopicService.UpdateTopic:output_type -> cmsclient.UpdateTopicResp
	110, // 129: cmsclient.TopicService.UpdateTopicStatus:output_type -> cmsclient.UpdateTopicStatusResp
	112, // 130: cmsclient.TopicService.QueryTopicDetail:output_type -> cmsclient.QueryTopicDetailResp
	115, // 131: cmsclient.TopicService.QueryTopicList:output_type -> cmsclient.QueryTopicListResp
	117, // 132: cmsclient.TopicCategoryService.AddTopicCategory:output_type -> cmsclient.AddTopicCategoryResp
	119, // 133: cmsclient.TopicCategoryService.DeleteTopicCategory:output_type -> cmsclient.DeleteTopicCategoryResp
	121, // 134: cmsclient.TopicCategoryService.UpdateTopicCategory:output_type -> cmsclient.UpdateTopicCategoryResp
	123, // 135: cmsclient.TopicCategoryService.UpdateTopicCategoryStatus:output_type -> cmsclient.UpdateTopicCategoryStatusResp
	125, // 136: cmsclient.TopicCategoryService.QueryTopicCategoryDetail:output_type -> cmsclient.QueryTopicCategoryDetailResp
	128, // 137: cmsclient.TopicCategoryService.QueryTopicCategoryList:output_type -> cmsclient.QueryTopicCategoryListResp
	130, // 138: cmsclient.TopicCommentService.AddTopicComment:output_type -> cmsclient.AddTopicCommentResp
	132, // 139: cmsclient.TopicCommentService.DeleteTopicComment:output_type -> cmsclient.DeleteTopicCommentResp
	134, // 140: cmsclient.TopicCommentService.UpdateTopicComment:output_type -> cmsclient.UpdateTopicCommentResp
	136, // 141: cmsclient.TopicCommentService.UpdateTopicCommentStatus:output_type -> cmsclient.UpdateTopicCommentStatusResp
	138, // 142: cmsclient.TopicCommentService.QueryTopicCommentDetail:output_type -> cmsclient.QueryTopicCommentDetailResp
	141, // 143: cmsclient.TopicCommentService.QueryTopicCommentList:output_type -> cmsclient.QueryTopicCommentListResp
	77,  // [77:144] is the sub-list for method output_type
	10,  // [10:77] is the sub-list for method input_type
	10,  // [10:10] is the sub-list for extension type_name
	10,  // [10:10] is the sub-list for extension extendee
	0,   // [0:10] is the sub-list for field type_name
}

func init() { file_rpc_cms_cms_proto_init() }
func file_rpc_cms_cms_proto_init() {
	if File_rpc_cms_cms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_cms_cms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHelpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHelpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHelpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHelpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHelpCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHelpCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHelpCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHelpCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpCategoryStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpCategoryStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpCategoryDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpCategoryDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpCategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpCategoryListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpCategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemberReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemberReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemberReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMemberReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberReportStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemberReportStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberReportDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberReportDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberReportListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberReportListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberReportListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPreferredAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPreferredAreaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePreferredAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePreferredAreaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePreferredAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePreferredAreaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePreferredAreaStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePreferredAreaStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreferredAreaDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreferredAreaDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreferredAreaListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreferredAreaListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreferredAreaListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPreferredAreaProductRelationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPreferredAreaProductRelationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreferredAreaProductRelationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreferredAreaProductRelationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectRecommendStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectRecommendStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectListByIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectSortReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCategoryStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCategoryStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCategoryDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCategoryDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCategoryListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCommentStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubjectCommentStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCommentDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCommentDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCommentListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectCommentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectProductRelationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubjectProductRelationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectProductRelationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubjectProductRelationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopicResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopicCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopicCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCategoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCategoryStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCategoryStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCategoryDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCategoryDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCategoryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicCategoryListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCategoryListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopicCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopicCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCommentStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopicCommentStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCommentDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCommentDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicCommentListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_cms_cms_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTopicCommentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_cms_cms_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   142,
			NumExtensions: 0,
			NumServices:   12,
		},
		GoTypes:           file_rpc_cms_cms_proto_goTypes,
		DependencyIndexes: file_rpc_cms_cms_proto_depIdxs,
		MessageInfos:      file_rpc_cms_cms_proto_msgTypes,
	}.Build()
	File_rpc_cms_cms_proto = out.File
	file_rpc_cms_cms_proto_rawDesc = nil
	file_rpc_cms_cms_proto_goTypes = nil
	file_rpc_cms_cms_proto_depIdxs = nil
}
