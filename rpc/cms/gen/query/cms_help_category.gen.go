// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsHelpCategory(db *gorm.DB, opts ...gen.DOOption) cmsHelpCategory {
	_cmsHelpCategory := cmsHelpCategory{}

	_cmsHelpCategory.cmsHelpCategoryDo.UseDB(db, opts...)
	_cmsHelpCategory.cmsHelpCategoryDo.UseModel(&model.CmsHelpCategory{})

	tableName := _cmsHelpCategory.cmsHelpCategoryDo.TableName()
	_cmsHelpCategory.ALL = field.NewAsterisk(tableName)
	_cmsHelpCategory.ID = field.NewInt64(tableName, "id")
	_cmsHelpCategory.Name = field.NewString(tableName, "name")
	_cmsHelpCategory.Icon = field.NewString(tableName, "icon")
	_cmsHelpCategory.HelpCount = field.NewInt32(tableName, "help_count")
	_cmsHelpCategory.ShowStatus = field.NewInt32(tableName, "show_status")
	_cmsHelpCategory.Sort = field.NewInt32(tableName, "sort")
	_cmsHelpCategory.CreateBy = field.NewString(tableName, "create_by")
	_cmsHelpCategory.CreateTime = field.NewTime(tableName, "create_time")
	_cmsHelpCategory.UpdateBy = field.NewString(tableName, "update_by")
	_cmsHelpCategory.UpdateTime = field.NewTime(tableName, "update_time")

	_cmsHelpCategory.fillFieldMap()

	return _cmsHelpCategory
}

// cmsHelpCategory 帮助分类表
type cmsHelpCategory struct {
	cmsHelpCategoryDo cmsHelpCategoryDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键ID
	Name       field.String // 分类名称
	Icon       field.String // 分类图标
	HelpCount  field.Int32  // 专题数量
	ShowStatus field.Int32  // 显示状态：0->不显示；1->显示
	Sort       field.Int32  // 排序
	CreateBy   field.String // 创建者
	CreateTime field.Time   // 创建时间
	UpdateBy   field.String // 更新者
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c cmsHelpCategory) Table(newTableName string) *cmsHelpCategory {
	c.cmsHelpCategoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsHelpCategory) As(alias string) *cmsHelpCategory {
	c.cmsHelpCategoryDo.DO = *(c.cmsHelpCategoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsHelpCategory) updateTableName(table string) *cmsHelpCategory {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.Icon = field.NewString(table, "icon")
	c.HelpCount = field.NewInt32(table, "help_count")
	c.ShowStatus = field.NewInt32(table, "show_status")
	c.Sort = field.NewInt32(table, "sort")
	c.CreateBy = field.NewString(table, "create_by")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateBy = field.NewString(table, "update_by")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *cmsHelpCategory) WithContext(ctx context.Context) ICmsHelpCategoryDo {
	return c.cmsHelpCategoryDo.WithContext(ctx)
}

func (c cmsHelpCategory) TableName() string { return c.cmsHelpCategoryDo.TableName() }

func (c cmsHelpCategory) Alias() string { return c.cmsHelpCategoryDo.Alias() }

func (c cmsHelpCategory) Columns(cols ...field.Expr) gen.Columns {
	return c.cmsHelpCategoryDo.Columns(cols...)
}

func (c *cmsHelpCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsHelpCategory) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["icon"] = c.Icon
	c.fieldMap["help_count"] = c.HelpCount
	c.fieldMap["show_status"] = c.ShowStatus
	c.fieldMap["sort"] = c.Sort
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c cmsHelpCategory) clone(db *gorm.DB) cmsHelpCategory {
	c.cmsHelpCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsHelpCategory) replaceDB(db *gorm.DB) cmsHelpCategory {
	c.cmsHelpCategoryDo.ReplaceDB(db)
	return c
}

type cmsHelpCategoryDo struct{ gen.DO }

type ICmsHelpCategoryDo interface {
	gen.SubQuery
	Debug() ICmsHelpCategoryDo
	WithContext(ctx context.Context) ICmsHelpCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsHelpCategoryDo
	WriteDB() ICmsHelpCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsHelpCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsHelpCategoryDo
	Not(conds ...gen.Condition) ICmsHelpCategoryDo
	Or(conds ...gen.Condition) ICmsHelpCategoryDo
	Select(conds ...field.Expr) ICmsHelpCategoryDo
	Where(conds ...gen.Condition) ICmsHelpCategoryDo
	Order(conds ...field.Expr) ICmsHelpCategoryDo
	Distinct(cols ...field.Expr) ICmsHelpCategoryDo
	Omit(cols ...field.Expr) ICmsHelpCategoryDo
	Join(table schema.Tabler, on ...field.Expr) ICmsHelpCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsHelpCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsHelpCategoryDo
	Group(cols ...field.Expr) ICmsHelpCategoryDo
	Having(conds ...gen.Condition) ICmsHelpCategoryDo
	Limit(limit int) ICmsHelpCategoryDo
	Offset(offset int) ICmsHelpCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsHelpCategoryDo
	Unscoped() ICmsHelpCategoryDo
	Create(values ...*model.CmsHelpCategory) error
	CreateInBatches(values []*model.CmsHelpCategory, batchSize int) error
	Save(values ...*model.CmsHelpCategory) error
	First() (*model.CmsHelpCategory, error)
	Take() (*model.CmsHelpCategory, error)
	Last() (*model.CmsHelpCategory, error)
	Find() ([]*model.CmsHelpCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsHelpCategory, err error)
	FindInBatches(result *[]*model.CmsHelpCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsHelpCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsHelpCategoryDo
	Assign(attrs ...field.AssignExpr) ICmsHelpCategoryDo
	Joins(fields ...field.RelationField) ICmsHelpCategoryDo
	Preload(fields ...field.RelationField) ICmsHelpCategoryDo
	FirstOrInit() (*model.CmsHelpCategory, error)
	FirstOrCreate() (*model.CmsHelpCategory, error)
	FindByPage(offset int, limit int) (result []*model.CmsHelpCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsHelpCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsHelpCategoryDo) Debug() ICmsHelpCategoryDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsHelpCategoryDo) WithContext(ctx context.Context) ICmsHelpCategoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsHelpCategoryDo) ReadDB() ICmsHelpCategoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsHelpCategoryDo) WriteDB() ICmsHelpCategoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsHelpCategoryDo) Session(config *gorm.Session) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsHelpCategoryDo) Clauses(conds ...clause.Expression) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsHelpCategoryDo) Returning(value interface{}, columns ...string) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsHelpCategoryDo) Not(conds ...gen.Condition) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsHelpCategoryDo) Or(conds ...gen.Condition) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsHelpCategoryDo) Select(conds ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsHelpCategoryDo) Where(conds ...gen.Condition) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsHelpCategoryDo) Order(conds ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsHelpCategoryDo) Distinct(cols ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsHelpCategoryDo) Omit(cols ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsHelpCategoryDo) Join(table schema.Tabler, on ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsHelpCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsHelpCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsHelpCategoryDo) Group(cols ...field.Expr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsHelpCategoryDo) Having(conds ...gen.Condition) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsHelpCategoryDo) Limit(limit int) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsHelpCategoryDo) Offset(offset int) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsHelpCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsHelpCategoryDo) Unscoped() ICmsHelpCategoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsHelpCategoryDo) Create(values ...*model.CmsHelpCategory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsHelpCategoryDo) CreateInBatches(values []*model.CmsHelpCategory, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsHelpCategoryDo) Save(values ...*model.CmsHelpCategory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsHelpCategoryDo) First() (*model.CmsHelpCategory, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelpCategory), nil
	}
}

func (c cmsHelpCategoryDo) Take() (*model.CmsHelpCategory, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelpCategory), nil
	}
}

func (c cmsHelpCategoryDo) Last() (*model.CmsHelpCategory, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelpCategory), nil
	}
}

func (c cmsHelpCategoryDo) Find() ([]*model.CmsHelpCategory, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsHelpCategory), err
}

func (c cmsHelpCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsHelpCategory, err error) {
	buf := make([]*model.CmsHelpCategory, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsHelpCategoryDo) FindInBatches(result *[]*model.CmsHelpCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsHelpCategoryDo) Attrs(attrs ...field.AssignExpr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsHelpCategoryDo) Assign(attrs ...field.AssignExpr) ICmsHelpCategoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsHelpCategoryDo) Joins(fields ...field.RelationField) ICmsHelpCategoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsHelpCategoryDo) Preload(fields ...field.RelationField) ICmsHelpCategoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsHelpCategoryDo) FirstOrInit() (*model.CmsHelpCategory, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelpCategory), nil
	}
}

func (c cmsHelpCategoryDo) FirstOrCreate() (*model.CmsHelpCategory, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelpCategory), nil
	}
}

func (c cmsHelpCategoryDo) FindByPage(offset int, limit int) (result []*model.CmsHelpCategory, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsHelpCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsHelpCategoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsHelpCategoryDo) Delete(models ...*model.CmsHelpCategory) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsHelpCategoryDo) withDO(do gen.Dao) *cmsHelpCategoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
