// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsTopic(db *gorm.DB, opts ...gen.DOOption) cmsTopic {
	_cmsTopic := cmsTopic{}

	_cmsTopic.cmsTopicDo.UseDB(db, opts...)
	_cmsTopic.cmsTopicDo.UseModel(&model.CmsTopic{})

	tableName := _cmsTopic.cmsTopicDo.TableName()
	_cmsTopic.ALL = field.NewAsterisk(tableName)
	_cmsTopic.ID = field.NewInt64(tableName, "id")
	_cmsTopic.CategoryID = field.NewInt64(tableName, "category_id")
	_cmsTopic.Name = field.NewString(tableName, "name")
	_cmsTopic.StartTime = field.NewTime(tableName, "start_time")
	_cmsTopic.EndTime = field.NewTime(tableName, "end_time")
	_cmsTopic.AttendCount = field.NewInt32(tableName, "attend_count")
	_cmsTopic.AttentionCount = field.NewInt32(tableName, "attention_count")
	_cmsTopic.ReadCount = field.NewInt32(tableName, "read_count")
	_cmsTopic.AwardName = field.NewString(tableName, "award_name")
	_cmsTopic.AttendType = field.NewString(tableName, "attend_type")
	_cmsTopic.Content = field.NewString(tableName, "content")
	_cmsTopic.CreateBy = field.NewString(tableName, "create_by")
	_cmsTopic.CreateTime = field.NewTime(tableName, "create_time")
	_cmsTopic.UpdateBy = field.NewString(tableName, "update_by")
	_cmsTopic.UpdateTime = field.NewTime(tableName, "update_time")

	_cmsTopic.fillFieldMap()

	return _cmsTopic
}

// cmsTopic 话题表
type cmsTopic struct {
	cmsTopicDo cmsTopicDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键ID
	CategoryID     field.Int64  // 关联分类id
	Name           field.String // 话题名称
	StartTime      field.Time   // 话题开始时间
	EndTime        field.Time   // 话题结束时间
	AttendCount    field.Int32  // 参与人数
	AttentionCount field.Int32  // 关注人数
	ReadCount      field.Int32  // 阅读数
	AwardName      field.String // 奖品名称
	AttendType     field.String // 参与方式
	Content        field.String // 话题内容
	CreateBy       field.String // 创建者
	CreateTime     field.Time   // 创建时间
	UpdateBy       field.String // 更新者
	UpdateTime     field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c cmsTopic) Table(newTableName string) *cmsTopic {
	c.cmsTopicDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsTopic) As(alias string) *cmsTopic {
	c.cmsTopicDo.DO = *(c.cmsTopicDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsTopic) updateTableName(table string) *cmsTopic {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CategoryID = field.NewInt64(table, "category_id")
	c.Name = field.NewString(table, "name")
	c.StartTime = field.NewTime(table, "start_time")
	c.EndTime = field.NewTime(table, "end_time")
	c.AttendCount = field.NewInt32(table, "attend_count")
	c.AttentionCount = field.NewInt32(table, "attention_count")
	c.ReadCount = field.NewInt32(table, "read_count")
	c.AwardName = field.NewString(table, "award_name")
	c.AttendType = field.NewString(table, "attend_type")
	c.Content = field.NewString(table, "content")
	c.CreateBy = field.NewString(table, "create_by")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateBy = field.NewString(table, "update_by")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *cmsTopic) WithContext(ctx context.Context) ICmsTopicDo { return c.cmsTopicDo.WithContext(ctx) }

func (c cmsTopic) TableName() string { return c.cmsTopicDo.TableName() }

func (c cmsTopic) Alias() string { return c.cmsTopicDo.Alias() }

func (c cmsTopic) Columns(cols ...field.Expr) gen.Columns { return c.cmsTopicDo.Columns(cols...) }

func (c *cmsTopic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsTopic) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["category_id"] = c.CategoryID
	c.fieldMap["name"] = c.Name
	c.fieldMap["start_time"] = c.StartTime
	c.fieldMap["end_time"] = c.EndTime
	c.fieldMap["attend_count"] = c.AttendCount
	c.fieldMap["attention_count"] = c.AttentionCount
	c.fieldMap["read_count"] = c.ReadCount
	c.fieldMap["award_name"] = c.AwardName
	c.fieldMap["attend_type"] = c.AttendType
	c.fieldMap["content"] = c.Content
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c cmsTopic) clone(db *gorm.DB) cmsTopic {
	c.cmsTopicDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsTopic) replaceDB(db *gorm.DB) cmsTopic {
	c.cmsTopicDo.ReplaceDB(db)
	return c
}

type cmsTopicDo struct{ gen.DO }

type ICmsTopicDo interface {
	gen.SubQuery
	Debug() ICmsTopicDo
	WithContext(ctx context.Context) ICmsTopicDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsTopicDo
	WriteDB() ICmsTopicDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsTopicDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsTopicDo
	Not(conds ...gen.Condition) ICmsTopicDo
	Or(conds ...gen.Condition) ICmsTopicDo
	Select(conds ...field.Expr) ICmsTopicDo
	Where(conds ...gen.Condition) ICmsTopicDo
	Order(conds ...field.Expr) ICmsTopicDo
	Distinct(cols ...field.Expr) ICmsTopicDo
	Omit(cols ...field.Expr) ICmsTopicDo
	Join(table schema.Tabler, on ...field.Expr) ICmsTopicDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsTopicDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsTopicDo
	Group(cols ...field.Expr) ICmsTopicDo
	Having(conds ...gen.Condition) ICmsTopicDo
	Limit(limit int) ICmsTopicDo
	Offset(offset int) ICmsTopicDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsTopicDo
	Unscoped() ICmsTopicDo
	Create(values ...*model.CmsTopic) error
	CreateInBatches(values []*model.CmsTopic, batchSize int) error
	Save(values ...*model.CmsTopic) error
	First() (*model.CmsTopic, error)
	Take() (*model.CmsTopic, error)
	Last() (*model.CmsTopic, error)
	Find() ([]*model.CmsTopic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsTopic, err error)
	FindInBatches(result *[]*model.CmsTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsTopic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsTopicDo
	Assign(attrs ...field.AssignExpr) ICmsTopicDo
	Joins(fields ...field.RelationField) ICmsTopicDo
	Preload(fields ...field.RelationField) ICmsTopicDo
	FirstOrInit() (*model.CmsTopic, error)
	FirstOrCreate() (*model.CmsTopic, error)
	FindByPage(offset int, limit int) (result []*model.CmsTopic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsTopicDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsTopicDo) Debug() ICmsTopicDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsTopicDo) WithContext(ctx context.Context) ICmsTopicDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsTopicDo) ReadDB() ICmsTopicDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsTopicDo) WriteDB() ICmsTopicDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsTopicDo) Session(config *gorm.Session) ICmsTopicDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsTopicDo) Clauses(conds ...clause.Expression) ICmsTopicDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsTopicDo) Returning(value interface{}, columns ...string) ICmsTopicDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsTopicDo) Not(conds ...gen.Condition) ICmsTopicDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsTopicDo) Or(conds ...gen.Condition) ICmsTopicDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsTopicDo) Select(conds ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsTopicDo) Where(conds ...gen.Condition) ICmsTopicDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsTopicDo) Order(conds ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsTopicDo) Distinct(cols ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsTopicDo) Omit(cols ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsTopicDo) Join(table schema.Tabler, on ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsTopicDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsTopicDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsTopicDo) Group(cols ...field.Expr) ICmsTopicDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsTopicDo) Having(conds ...gen.Condition) ICmsTopicDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsTopicDo) Limit(limit int) ICmsTopicDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsTopicDo) Offset(offset int) ICmsTopicDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsTopicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsTopicDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsTopicDo) Unscoped() ICmsTopicDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsTopicDo) Create(values ...*model.CmsTopic) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsTopicDo) CreateInBatches(values []*model.CmsTopic, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsTopicDo) Save(values ...*model.CmsTopic) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsTopicDo) First() (*model.CmsTopic, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopic), nil
	}
}

func (c cmsTopicDo) Take() (*model.CmsTopic, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopic), nil
	}
}

func (c cmsTopicDo) Last() (*model.CmsTopic, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopic), nil
	}
}

func (c cmsTopicDo) Find() ([]*model.CmsTopic, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsTopic), err
}

func (c cmsTopicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsTopic, err error) {
	buf := make([]*model.CmsTopic, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsTopicDo) FindInBatches(result *[]*model.CmsTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsTopicDo) Attrs(attrs ...field.AssignExpr) ICmsTopicDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsTopicDo) Assign(attrs ...field.AssignExpr) ICmsTopicDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsTopicDo) Joins(fields ...field.RelationField) ICmsTopicDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsTopicDo) Preload(fields ...field.RelationField) ICmsTopicDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsTopicDo) FirstOrInit() (*model.CmsTopic, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopic), nil
	}
}

func (c cmsTopicDo) FirstOrCreate() (*model.CmsTopic, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopic), nil
	}
}

func (c cmsTopicDo) FindByPage(offset int, limit int) (result []*model.CmsTopic, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsTopicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsTopicDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsTopicDo) Delete(models ...*model.CmsTopic) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsTopicDo) withDO(do gen.Dao) *cmsTopicDo {
	c.DO = *do.(*gen.DO)
	return c
}
