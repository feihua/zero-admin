// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsSubjectProductRelation(db *gorm.DB, opts ...gen.DOOption) cmsSubjectProductRelation {
	_cmsSubjectProductRelation := cmsSubjectProductRelation{}

	_cmsSubjectProductRelation.cmsSubjectProductRelationDo.UseDB(db, opts...)
	_cmsSubjectProductRelation.cmsSubjectProductRelationDo.UseModel(&model.CmsSubjectProductRelation{})

	tableName := _cmsSubjectProductRelation.cmsSubjectProductRelationDo.TableName()
	_cmsSubjectProductRelation.ALL = field.NewAsterisk(tableName)
	_cmsSubjectProductRelation.ID = field.NewInt64(tableName, "id")
	_cmsSubjectProductRelation.SubjectID = field.NewInt64(tableName, "subject_id")
	_cmsSubjectProductRelation.ProductID = field.NewInt64(tableName, "product_id")

	_cmsSubjectProductRelation.fillFieldMap()

	return _cmsSubjectProductRelation
}

// cmsSubjectProductRelation 专题商品关系表
type cmsSubjectProductRelation struct {
	cmsSubjectProductRelationDo cmsSubjectProductRelationDo

	ALL       field.Asterisk
	ID        field.Int64 // 主键ID
	SubjectID field.Int64 // 专题ID
	ProductID field.Int64 // 商品ID

	fieldMap map[string]field.Expr
}

func (c cmsSubjectProductRelation) Table(newTableName string) *cmsSubjectProductRelation {
	c.cmsSubjectProductRelationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsSubjectProductRelation) As(alias string) *cmsSubjectProductRelation {
	c.cmsSubjectProductRelationDo.DO = *(c.cmsSubjectProductRelationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsSubjectProductRelation) updateTableName(table string) *cmsSubjectProductRelation {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.SubjectID = field.NewInt64(table, "subject_id")
	c.ProductID = field.NewInt64(table, "product_id")

	c.fillFieldMap()

	return c
}

func (c *cmsSubjectProductRelation) WithContext(ctx context.Context) ICmsSubjectProductRelationDo {
	return c.cmsSubjectProductRelationDo.WithContext(ctx)
}

func (c cmsSubjectProductRelation) TableName() string {
	return c.cmsSubjectProductRelationDo.TableName()
}

func (c cmsSubjectProductRelation) Alias() string { return c.cmsSubjectProductRelationDo.Alias() }

func (c cmsSubjectProductRelation) Columns(cols ...field.Expr) gen.Columns {
	return c.cmsSubjectProductRelationDo.Columns(cols...)
}

func (c *cmsSubjectProductRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsSubjectProductRelation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["subject_id"] = c.SubjectID
	c.fieldMap["product_id"] = c.ProductID
}

func (c cmsSubjectProductRelation) clone(db *gorm.DB) cmsSubjectProductRelation {
	c.cmsSubjectProductRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsSubjectProductRelation) replaceDB(db *gorm.DB) cmsSubjectProductRelation {
	c.cmsSubjectProductRelationDo.ReplaceDB(db)
	return c
}

type cmsSubjectProductRelationDo struct{ gen.DO }

type ICmsSubjectProductRelationDo interface {
	gen.SubQuery
	Debug() ICmsSubjectProductRelationDo
	WithContext(ctx context.Context) ICmsSubjectProductRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsSubjectProductRelationDo
	WriteDB() ICmsSubjectProductRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsSubjectProductRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsSubjectProductRelationDo
	Not(conds ...gen.Condition) ICmsSubjectProductRelationDo
	Or(conds ...gen.Condition) ICmsSubjectProductRelationDo
	Select(conds ...field.Expr) ICmsSubjectProductRelationDo
	Where(conds ...gen.Condition) ICmsSubjectProductRelationDo
	Order(conds ...field.Expr) ICmsSubjectProductRelationDo
	Distinct(cols ...field.Expr) ICmsSubjectProductRelationDo
	Omit(cols ...field.Expr) ICmsSubjectProductRelationDo
	Join(table schema.Tabler, on ...field.Expr) ICmsSubjectProductRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectProductRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectProductRelationDo
	Group(cols ...field.Expr) ICmsSubjectProductRelationDo
	Having(conds ...gen.Condition) ICmsSubjectProductRelationDo
	Limit(limit int) ICmsSubjectProductRelationDo
	Offset(offset int) ICmsSubjectProductRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsSubjectProductRelationDo
	Unscoped() ICmsSubjectProductRelationDo
	Create(values ...*model.CmsSubjectProductRelation) error
	CreateInBatches(values []*model.CmsSubjectProductRelation, batchSize int) error
	Save(values ...*model.CmsSubjectProductRelation) error
	First() (*model.CmsSubjectProductRelation, error)
	Take() (*model.CmsSubjectProductRelation, error)
	Last() (*model.CmsSubjectProductRelation, error)
	Find() ([]*model.CmsSubjectProductRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsSubjectProductRelation, err error)
	FindInBatches(result *[]*model.CmsSubjectProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsSubjectProductRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsSubjectProductRelationDo
	Assign(attrs ...field.AssignExpr) ICmsSubjectProductRelationDo
	Joins(fields ...field.RelationField) ICmsSubjectProductRelationDo
	Preload(fields ...field.RelationField) ICmsSubjectProductRelationDo
	FirstOrInit() (*model.CmsSubjectProductRelation, error)
	FirstOrCreate() (*model.CmsSubjectProductRelation, error)
	FindByPage(offset int, limit int) (result []*model.CmsSubjectProductRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsSubjectProductRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsSubjectProductRelationDo) Debug() ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsSubjectProductRelationDo) WithContext(ctx context.Context) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsSubjectProductRelationDo) ReadDB() ICmsSubjectProductRelationDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsSubjectProductRelationDo) WriteDB() ICmsSubjectProductRelationDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsSubjectProductRelationDo) Session(config *gorm.Session) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsSubjectProductRelationDo) Clauses(conds ...clause.Expression) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsSubjectProductRelationDo) Returning(value interface{}, columns ...string) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsSubjectProductRelationDo) Not(conds ...gen.Condition) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsSubjectProductRelationDo) Or(conds ...gen.Condition) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsSubjectProductRelationDo) Select(conds ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsSubjectProductRelationDo) Where(conds ...gen.Condition) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsSubjectProductRelationDo) Order(conds ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsSubjectProductRelationDo) Distinct(cols ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsSubjectProductRelationDo) Omit(cols ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsSubjectProductRelationDo) Join(table schema.Tabler, on ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsSubjectProductRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsSubjectProductRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsSubjectProductRelationDo) Group(cols ...field.Expr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsSubjectProductRelationDo) Having(conds ...gen.Condition) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsSubjectProductRelationDo) Limit(limit int) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsSubjectProductRelationDo) Offset(offset int) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsSubjectProductRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsSubjectProductRelationDo) Unscoped() ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsSubjectProductRelationDo) Create(values ...*model.CmsSubjectProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsSubjectProductRelationDo) CreateInBatches(values []*model.CmsSubjectProductRelation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsSubjectProductRelationDo) Save(values ...*model.CmsSubjectProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsSubjectProductRelationDo) First() (*model.CmsSubjectProductRelation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubjectProductRelation), nil
	}
}

func (c cmsSubjectProductRelationDo) Take() (*model.CmsSubjectProductRelation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubjectProductRelation), nil
	}
}

func (c cmsSubjectProductRelationDo) Last() (*model.CmsSubjectProductRelation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubjectProductRelation), nil
	}
}

func (c cmsSubjectProductRelationDo) Find() ([]*model.CmsSubjectProductRelation, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsSubjectProductRelation), err
}

func (c cmsSubjectProductRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsSubjectProductRelation, err error) {
	buf := make([]*model.CmsSubjectProductRelation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsSubjectProductRelationDo) FindInBatches(result *[]*model.CmsSubjectProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsSubjectProductRelationDo) Attrs(attrs ...field.AssignExpr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsSubjectProductRelationDo) Assign(attrs ...field.AssignExpr) ICmsSubjectProductRelationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsSubjectProductRelationDo) Joins(fields ...field.RelationField) ICmsSubjectProductRelationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsSubjectProductRelationDo) Preload(fields ...field.RelationField) ICmsSubjectProductRelationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsSubjectProductRelationDo) FirstOrInit() (*model.CmsSubjectProductRelation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubjectProductRelation), nil
	}
}

func (c cmsSubjectProductRelationDo) FirstOrCreate() (*model.CmsSubjectProductRelation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubjectProductRelation), nil
	}
}

func (c cmsSubjectProductRelationDo) FindByPage(offset int, limit int) (result []*model.CmsSubjectProductRelation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsSubjectProductRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsSubjectProductRelationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsSubjectProductRelationDo) Delete(models ...*model.CmsSubjectProductRelation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsSubjectProductRelationDo) withDO(do gen.Dao) *cmsSubjectProductRelationDo {
	c.DO = *do.(*gen.DO)
	return c
}
