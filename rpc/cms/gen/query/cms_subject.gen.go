// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsSubject(db *gorm.DB, opts ...gen.DOOption) cmsSubject {
	_cmsSubject := cmsSubject{}

	_cmsSubject.cmsSubjectDo.UseDB(db, opts...)
	_cmsSubject.cmsSubjectDo.UseModel(&model.CmsSubject{})

	tableName := _cmsSubject.cmsSubjectDo.TableName()
	_cmsSubject.ALL = field.NewAsterisk(tableName)
	_cmsSubject.ID = field.NewInt64(tableName, "id")
	_cmsSubject.CategoryID = field.NewInt64(tableName, "category_id")
	_cmsSubject.Title = field.NewString(tableName, "title")
	_cmsSubject.Pic = field.NewString(tableName, "pic")
	_cmsSubject.ProductCount = field.NewInt32(tableName, "product_count")
	_cmsSubject.RecommendStatus = field.NewInt32(tableName, "recommend_status")
	_cmsSubject.CollectCount = field.NewInt32(tableName, "collect_count")
	_cmsSubject.ReadCount = field.NewInt32(tableName, "read_count")
	_cmsSubject.CommentCount = field.NewInt32(tableName, "comment_count")
	_cmsSubject.AlbumPics = field.NewString(tableName, "album_pics")
	_cmsSubject.Description = field.NewString(tableName, "description")
	_cmsSubject.ShowStatus = field.NewInt32(tableName, "show_status")
	_cmsSubject.Content = field.NewString(tableName, "content")
	_cmsSubject.ForwardCount = field.NewInt32(tableName, "forward_count")
	_cmsSubject.CategoryName = field.NewString(tableName, "category_name")
	_cmsSubject.Sort = field.NewInt32(tableName, "sort")
	_cmsSubject.CreateBy = field.NewString(tableName, "create_by")
	_cmsSubject.CreateTime = field.NewTime(tableName, "create_time")
	_cmsSubject.UpdateBy = field.NewString(tableName, "update_by")
	_cmsSubject.UpdateTime = field.NewTime(tableName, "update_time")

	_cmsSubject.fillFieldMap()

	return _cmsSubject
}

// cmsSubject 专题表
type cmsSubject struct {
	cmsSubjectDo cmsSubjectDo

	ALL             field.Asterisk
	ID              field.Int64  // 专题id
	CategoryID      field.Int64  // 专题分类id
	Title           field.String // 专题标题
	Pic             field.String // 专题主图
	ProductCount    field.Int32  // 关联产品数量
	RecommendStatus field.Int32  // 推荐状态：0->不推荐；1->推荐
	CollectCount    field.Int32  // 收藏数
	ReadCount       field.Int32  // 阅读数
	CommentCount    field.Int32  // 评论数
	AlbumPics       field.String // 画册图片用逗号分割
	Description     field.String // 专题内容
	ShowStatus      field.Int32  // 显示状态：0->不显示；1->显示
	Content         field.String // 专题内容
	ForwardCount    field.Int32  // 转发数
	CategoryName    field.String // 专题分类名称
	Sort            field.Int32  // 排序
	CreateBy        field.String // 创建者
	CreateTime      field.Time   // 创建时间
	UpdateBy        field.String // 更新者
	UpdateTime      field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c cmsSubject) Table(newTableName string) *cmsSubject {
	c.cmsSubjectDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsSubject) As(alias string) *cmsSubject {
	c.cmsSubjectDo.DO = *(c.cmsSubjectDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsSubject) updateTableName(table string) *cmsSubject {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CategoryID = field.NewInt64(table, "category_id")
	c.Title = field.NewString(table, "title")
	c.Pic = field.NewString(table, "pic")
	c.ProductCount = field.NewInt32(table, "product_count")
	c.RecommendStatus = field.NewInt32(table, "recommend_status")
	c.CollectCount = field.NewInt32(table, "collect_count")
	c.ReadCount = field.NewInt32(table, "read_count")
	c.CommentCount = field.NewInt32(table, "comment_count")
	c.AlbumPics = field.NewString(table, "album_pics")
	c.Description = field.NewString(table, "description")
	c.ShowStatus = field.NewInt32(table, "show_status")
	c.Content = field.NewString(table, "content")
	c.ForwardCount = field.NewInt32(table, "forward_count")
	c.CategoryName = field.NewString(table, "category_name")
	c.Sort = field.NewInt32(table, "sort")
	c.CreateBy = field.NewString(table, "create_by")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateBy = field.NewString(table, "update_by")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *cmsSubject) WithContext(ctx context.Context) ICmsSubjectDo {
	return c.cmsSubjectDo.WithContext(ctx)
}

func (c cmsSubject) TableName() string { return c.cmsSubjectDo.TableName() }

func (c cmsSubject) Alias() string { return c.cmsSubjectDo.Alias() }

func (c cmsSubject) Columns(cols ...field.Expr) gen.Columns { return c.cmsSubjectDo.Columns(cols...) }

func (c *cmsSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsSubject) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 20)
	c.fieldMap["id"] = c.ID
	c.fieldMap["category_id"] = c.CategoryID
	c.fieldMap["title"] = c.Title
	c.fieldMap["pic"] = c.Pic
	c.fieldMap["product_count"] = c.ProductCount
	c.fieldMap["recommend_status"] = c.RecommendStatus
	c.fieldMap["collect_count"] = c.CollectCount
	c.fieldMap["read_count"] = c.ReadCount
	c.fieldMap["comment_count"] = c.CommentCount
	c.fieldMap["album_pics"] = c.AlbumPics
	c.fieldMap["description"] = c.Description
	c.fieldMap["show_status"] = c.ShowStatus
	c.fieldMap["content"] = c.Content
	c.fieldMap["forward_count"] = c.ForwardCount
	c.fieldMap["category_name"] = c.CategoryName
	c.fieldMap["sort"] = c.Sort
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c cmsSubject) clone(db *gorm.DB) cmsSubject {
	c.cmsSubjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsSubject) replaceDB(db *gorm.DB) cmsSubject {
	c.cmsSubjectDo.ReplaceDB(db)
	return c
}

type cmsSubjectDo struct{ gen.DO }

type ICmsSubjectDo interface {
	gen.SubQuery
	Debug() ICmsSubjectDo
	WithContext(ctx context.Context) ICmsSubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsSubjectDo
	WriteDB() ICmsSubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsSubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsSubjectDo
	Not(conds ...gen.Condition) ICmsSubjectDo
	Or(conds ...gen.Condition) ICmsSubjectDo
	Select(conds ...field.Expr) ICmsSubjectDo
	Where(conds ...gen.Condition) ICmsSubjectDo
	Order(conds ...field.Expr) ICmsSubjectDo
	Distinct(cols ...field.Expr) ICmsSubjectDo
	Omit(cols ...field.Expr) ICmsSubjectDo
	Join(table schema.Tabler, on ...field.Expr) ICmsSubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectDo
	Group(cols ...field.Expr) ICmsSubjectDo
	Having(conds ...gen.Condition) ICmsSubjectDo
	Limit(limit int) ICmsSubjectDo
	Offset(offset int) ICmsSubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsSubjectDo
	Unscoped() ICmsSubjectDo
	Create(values ...*model.CmsSubject) error
	CreateInBatches(values []*model.CmsSubject, batchSize int) error
	Save(values ...*model.CmsSubject) error
	First() (*model.CmsSubject, error)
	Take() (*model.CmsSubject, error)
	Last() (*model.CmsSubject, error)
	Find() ([]*model.CmsSubject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsSubject, err error)
	FindInBatches(result *[]*model.CmsSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsSubject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsSubjectDo
	Assign(attrs ...field.AssignExpr) ICmsSubjectDo
	Joins(fields ...field.RelationField) ICmsSubjectDo
	Preload(fields ...field.RelationField) ICmsSubjectDo
	FirstOrInit() (*model.CmsSubject, error)
	FirstOrCreate() (*model.CmsSubject, error)
	FindByPage(offset int, limit int) (result []*model.CmsSubject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsSubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsSubjectDo) Debug() ICmsSubjectDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsSubjectDo) WithContext(ctx context.Context) ICmsSubjectDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsSubjectDo) ReadDB() ICmsSubjectDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsSubjectDo) WriteDB() ICmsSubjectDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsSubjectDo) Session(config *gorm.Session) ICmsSubjectDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsSubjectDo) Clauses(conds ...clause.Expression) ICmsSubjectDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsSubjectDo) Returning(value interface{}, columns ...string) ICmsSubjectDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsSubjectDo) Not(conds ...gen.Condition) ICmsSubjectDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsSubjectDo) Or(conds ...gen.Condition) ICmsSubjectDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsSubjectDo) Select(conds ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsSubjectDo) Where(conds ...gen.Condition) ICmsSubjectDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsSubjectDo) Order(conds ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsSubjectDo) Distinct(cols ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsSubjectDo) Omit(cols ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsSubjectDo) Join(table schema.Tabler, on ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsSubjectDo) Group(cols ...field.Expr) ICmsSubjectDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsSubjectDo) Having(conds ...gen.Condition) ICmsSubjectDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsSubjectDo) Limit(limit int) ICmsSubjectDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsSubjectDo) Offset(offset int) ICmsSubjectDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsSubjectDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsSubjectDo) Unscoped() ICmsSubjectDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsSubjectDo) Create(values ...*model.CmsSubject) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsSubjectDo) CreateInBatches(values []*model.CmsSubject, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsSubjectDo) Save(values ...*model.CmsSubject) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsSubjectDo) First() (*model.CmsSubject, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubject), nil
	}
}

func (c cmsSubjectDo) Take() (*model.CmsSubject, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubject), nil
	}
}

func (c cmsSubjectDo) Last() (*model.CmsSubject, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubject), nil
	}
}

func (c cmsSubjectDo) Find() ([]*model.CmsSubject, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsSubject), err
}

func (c cmsSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsSubject, err error) {
	buf := make([]*model.CmsSubject, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsSubjectDo) FindInBatches(result *[]*model.CmsSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsSubjectDo) Attrs(attrs ...field.AssignExpr) ICmsSubjectDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsSubjectDo) Assign(attrs ...field.AssignExpr) ICmsSubjectDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsSubjectDo) Joins(fields ...field.RelationField) ICmsSubjectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsSubjectDo) Preload(fields ...field.RelationField) ICmsSubjectDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsSubjectDo) FirstOrInit() (*model.CmsSubject, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubject), nil
	}
}

func (c cmsSubjectDo) FirstOrCreate() (*model.CmsSubject, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsSubject), nil
	}
}

func (c cmsSubjectDo) FindByPage(offset int, limit int) (result []*model.CmsSubject, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsSubjectDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsSubjectDo) Delete(models ...*model.CmsSubject) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsSubjectDo) withDO(do gen.Dao) *cmsSubjectDo {
	c.DO = *do.(*gen.DO)
	return c
}
