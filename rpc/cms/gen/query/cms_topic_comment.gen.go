// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsTopicComment(db *gorm.DB, opts ...gen.DOOption) cmsTopicComment {
	_cmsTopicComment := cmsTopicComment{}

	_cmsTopicComment.cmsTopicCommentDo.UseDB(db, opts...)
	_cmsTopicComment.cmsTopicCommentDo.UseModel(&model.CmsTopicComment{})

	tableName := _cmsTopicComment.cmsTopicCommentDo.TableName()
	_cmsTopicComment.ALL = field.NewAsterisk(tableName)
	_cmsTopicComment.ID = field.NewInt64(tableName, "id")
	_cmsTopicComment.MemberNickName = field.NewString(tableName, "member_nick_name")
	_cmsTopicComment.TopicID = field.NewInt64(tableName, "topic_id")
	_cmsTopicComment.MemberIcon = field.NewString(tableName, "member_icon")
	_cmsTopicComment.Content = field.NewString(tableName, "content")
	_cmsTopicComment.CreateTime = field.NewTime(tableName, "create_time")
	_cmsTopicComment.ShowStatus = field.NewInt32(tableName, "show_status")

	_cmsTopicComment.fillFieldMap()

	return _cmsTopicComment
}

// cmsTopicComment 专题评论表
type cmsTopicComment struct {
	cmsTopicCommentDo cmsTopicCommentDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键ID
	MemberNickName field.String // 评论人员昵称
	TopicID        field.Int64  // 专题ID
	MemberIcon     field.String // 评论人员头像
	Content        field.String // 评论内容
	CreateTime     field.Time   // 评论时间
	ShowStatus     field.Int32  // 是否显示，0->不显示；1->显示

	fieldMap map[string]field.Expr
}

func (c cmsTopicComment) Table(newTableName string) *cmsTopicComment {
	c.cmsTopicCommentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsTopicComment) As(alias string) *cmsTopicComment {
	c.cmsTopicCommentDo.DO = *(c.cmsTopicCommentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsTopicComment) updateTableName(table string) *cmsTopicComment {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.MemberNickName = field.NewString(table, "member_nick_name")
	c.TopicID = field.NewInt64(table, "topic_id")
	c.MemberIcon = field.NewString(table, "member_icon")
	c.Content = field.NewString(table, "content")
	c.CreateTime = field.NewTime(table, "create_time")
	c.ShowStatus = field.NewInt32(table, "show_status")

	c.fillFieldMap()

	return c
}

func (c *cmsTopicComment) WithContext(ctx context.Context) ICmsTopicCommentDo {
	return c.cmsTopicCommentDo.WithContext(ctx)
}

func (c cmsTopicComment) TableName() string { return c.cmsTopicCommentDo.TableName() }

func (c cmsTopicComment) Alias() string { return c.cmsTopicCommentDo.Alias() }

func (c cmsTopicComment) Columns(cols ...field.Expr) gen.Columns {
	return c.cmsTopicCommentDo.Columns(cols...)
}

func (c *cmsTopicComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsTopicComment) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["member_nick_name"] = c.MemberNickName
	c.fieldMap["topic_id"] = c.TopicID
	c.fieldMap["member_icon"] = c.MemberIcon
	c.fieldMap["content"] = c.Content
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["show_status"] = c.ShowStatus
}

func (c cmsTopicComment) clone(db *gorm.DB) cmsTopicComment {
	c.cmsTopicCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsTopicComment) replaceDB(db *gorm.DB) cmsTopicComment {
	c.cmsTopicCommentDo.ReplaceDB(db)
	return c
}

type cmsTopicCommentDo struct{ gen.DO }

type ICmsTopicCommentDo interface {
	gen.SubQuery
	Debug() ICmsTopicCommentDo
	WithContext(ctx context.Context) ICmsTopicCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsTopicCommentDo
	WriteDB() ICmsTopicCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsTopicCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsTopicCommentDo
	Not(conds ...gen.Condition) ICmsTopicCommentDo
	Or(conds ...gen.Condition) ICmsTopicCommentDo
	Select(conds ...field.Expr) ICmsTopicCommentDo
	Where(conds ...gen.Condition) ICmsTopicCommentDo
	Order(conds ...field.Expr) ICmsTopicCommentDo
	Distinct(cols ...field.Expr) ICmsTopicCommentDo
	Omit(cols ...field.Expr) ICmsTopicCommentDo
	Join(table schema.Tabler, on ...field.Expr) ICmsTopicCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsTopicCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsTopicCommentDo
	Group(cols ...field.Expr) ICmsTopicCommentDo
	Having(conds ...gen.Condition) ICmsTopicCommentDo
	Limit(limit int) ICmsTopicCommentDo
	Offset(offset int) ICmsTopicCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsTopicCommentDo
	Unscoped() ICmsTopicCommentDo
	Create(values ...*model.CmsTopicComment) error
	CreateInBatches(values []*model.CmsTopicComment, batchSize int) error
	Save(values ...*model.CmsTopicComment) error
	First() (*model.CmsTopicComment, error)
	Take() (*model.CmsTopicComment, error)
	Last() (*model.CmsTopicComment, error)
	Find() ([]*model.CmsTopicComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsTopicComment, err error)
	FindInBatches(result *[]*model.CmsTopicComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsTopicComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsTopicCommentDo
	Assign(attrs ...field.AssignExpr) ICmsTopicCommentDo
	Joins(fields ...field.RelationField) ICmsTopicCommentDo
	Preload(fields ...field.RelationField) ICmsTopicCommentDo
	FirstOrInit() (*model.CmsTopicComment, error)
	FirstOrCreate() (*model.CmsTopicComment, error)
	FindByPage(offset int, limit int) (result []*model.CmsTopicComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsTopicCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsTopicCommentDo) Debug() ICmsTopicCommentDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsTopicCommentDo) WithContext(ctx context.Context) ICmsTopicCommentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsTopicCommentDo) ReadDB() ICmsTopicCommentDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsTopicCommentDo) WriteDB() ICmsTopicCommentDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsTopicCommentDo) Session(config *gorm.Session) ICmsTopicCommentDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsTopicCommentDo) Clauses(conds ...clause.Expression) ICmsTopicCommentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsTopicCommentDo) Returning(value interface{}, columns ...string) ICmsTopicCommentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsTopicCommentDo) Not(conds ...gen.Condition) ICmsTopicCommentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsTopicCommentDo) Or(conds ...gen.Condition) ICmsTopicCommentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsTopicCommentDo) Select(conds ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsTopicCommentDo) Where(conds ...gen.Condition) ICmsTopicCommentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsTopicCommentDo) Order(conds ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsTopicCommentDo) Distinct(cols ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsTopicCommentDo) Omit(cols ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsTopicCommentDo) Join(table schema.Tabler, on ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsTopicCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsTopicCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsTopicCommentDo) Group(cols ...field.Expr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsTopicCommentDo) Having(conds ...gen.Condition) ICmsTopicCommentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsTopicCommentDo) Limit(limit int) ICmsTopicCommentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsTopicCommentDo) Offset(offset int) ICmsTopicCommentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsTopicCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsTopicCommentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsTopicCommentDo) Unscoped() ICmsTopicCommentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsTopicCommentDo) Create(values ...*model.CmsTopicComment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsTopicCommentDo) CreateInBatches(values []*model.CmsTopicComment, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsTopicCommentDo) Save(values ...*model.CmsTopicComment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsTopicCommentDo) First() (*model.CmsTopicComment, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopicComment), nil
	}
}

func (c cmsTopicCommentDo) Take() (*model.CmsTopicComment, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopicComment), nil
	}
}

func (c cmsTopicCommentDo) Last() (*model.CmsTopicComment, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopicComment), nil
	}
}

func (c cmsTopicCommentDo) Find() ([]*model.CmsTopicComment, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsTopicComment), err
}

func (c cmsTopicCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsTopicComment, err error) {
	buf := make([]*model.CmsTopicComment, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsTopicCommentDo) FindInBatches(result *[]*model.CmsTopicComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsTopicCommentDo) Attrs(attrs ...field.AssignExpr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsTopicCommentDo) Assign(attrs ...field.AssignExpr) ICmsTopicCommentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsTopicCommentDo) Joins(fields ...field.RelationField) ICmsTopicCommentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsTopicCommentDo) Preload(fields ...field.RelationField) ICmsTopicCommentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsTopicCommentDo) FirstOrInit() (*model.CmsTopicComment, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopicComment), nil
	}
}

func (c cmsTopicCommentDo) FirstOrCreate() (*model.CmsTopicComment, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsTopicComment), nil
	}
}

func (c cmsTopicCommentDo) FindByPage(offset int, limit int) (result []*model.CmsTopicComment, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsTopicCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsTopicCommentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsTopicCommentDo) Delete(models ...*model.CmsTopicComment) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsTopicCommentDo) withDO(do gen.Dao) *cmsTopicCommentDo {
	c.DO = *do.(*gen.DO)
	return c
}
