// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsHelp(db *gorm.DB, opts ...gen.DOOption) cmsHelp {
	_cmsHelp := cmsHelp{}

	_cmsHelp.cmsHelpDo.UseDB(db, opts...)
	_cmsHelp.cmsHelpDo.UseModel(&model.CmsHelp{})

	tableName := _cmsHelp.cmsHelpDo.TableName()
	_cmsHelp.ALL = field.NewAsterisk(tableName)
	_cmsHelp.ID = field.NewInt64(tableName, "id")
	_cmsHelp.CategoryID = field.NewInt64(tableName, "category_id")
	_cmsHelp.Icon = field.NewString(tableName, "icon")
	_cmsHelp.Title = field.NewString(tableName, "title")
	_cmsHelp.ShowStatus = field.NewInt32(tableName, "show_status")
	_cmsHelp.ReadCount = field.NewInt32(tableName, "read_count")
	_cmsHelp.Content = field.NewString(tableName, "content")
	_cmsHelp.CreateBy = field.NewString(tableName, "create_by")
	_cmsHelp.CreateTime = field.NewTime(tableName, "create_time")
	_cmsHelp.UpdateBy = field.NewString(tableName, "update_by")
	_cmsHelp.UpdateTime = field.NewTime(tableName, "update_time")

	_cmsHelp.fillFieldMap()

	return _cmsHelp
}

// cmsHelp 帮助表
type cmsHelp struct {
	cmsHelpDo cmsHelpDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键ID
	CategoryID field.Int64  // 分类ID
	Icon       field.String // 图标
	Title      field.String // 标题
	ShowStatus field.Int32  // 显示状态：0->不显示；1->显示
	ReadCount  field.Int32  // 阅读量
	Content    field.String // 内容
	CreateBy   field.String // 创建者
	CreateTime field.Time   // 创建时间
	UpdateBy   field.String // 更新者
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c cmsHelp) Table(newTableName string) *cmsHelp {
	c.cmsHelpDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsHelp) As(alias string) *cmsHelp {
	c.cmsHelpDo.DO = *(c.cmsHelpDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsHelp) updateTableName(table string) *cmsHelp {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CategoryID = field.NewInt64(table, "category_id")
	c.Icon = field.NewString(table, "icon")
	c.Title = field.NewString(table, "title")
	c.ShowStatus = field.NewInt32(table, "show_status")
	c.ReadCount = field.NewInt32(table, "read_count")
	c.Content = field.NewString(table, "content")
	c.CreateBy = field.NewString(table, "create_by")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateBy = field.NewString(table, "update_by")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *cmsHelp) WithContext(ctx context.Context) ICmsHelpDo { return c.cmsHelpDo.WithContext(ctx) }

func (c cmsHelp) TableName() string { return c.cmsHelpDo.TableName() }

func (c cmsHelp) Alias() string { return c.cmsHelpDo.Alias() }

func (c cmsHelp) Columns(cols ...field.Expr) gen.Columns { return c.cmsHelpDo.Columns(cols...) }

func (c *cmsHelp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsHelp) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["category_id"] = c.CategoryID
	c.fieldMap["icon"] = c.Icon
	c.fieldMap["title"] = c.Title
	c.fieldMap["show_status"] = c.ShowStatus
	c.fieldMap["read_count"] = c.ReadCount
	c.fieldMap["content"] = c.Content
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c cmsHelp) clone(db *gorm.DB) cmsHelp {
	c.cmsHelpDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsHelp) replaceDB(db *gorm.DB) cmsHelp {
	c.cmsHelpDo.ReplaceDB(db)
	return c
}

type cmsHelpDo struct{ gen.DO }

type ICmsHelpDo interface {
	gen.SubQuery
	Debug() ICmsHelpDo
	WithContext(ctx context.Context) ICmsHelpDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsHelpDo
	WriteDB() ICmsHelpDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsHelpDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsHelpDo
	Not(conds ...gen.Condition) ICmsHelpDo
	Or(conds ...gen.Condition) ICmsHelpDo
	Select(conds ...field.Expr) ICmsHelpDo
	Where(conds ...gen.Condition) ICmsHelpDo
	Order(conds ...field.Expr) ICmsHelpDo
	Distinct(cols ...field.Expr) ICmsHelpDo
	Omit(cols ...field.Expr) ICmsHelpDo
	Join(table schema.Tabler, on ...field.Expr) ICmsHelpDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsHelpDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsHelpDo
	Group(cols ...field.Expr) ICmsHelpDo
	Having(conds ...gen.Condition) ICmsHelpDo
	Limit(limit int) ICmsHelpDo
	Offset(offset int) ICmsHelpDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsHelpDo
	Unscoped() ICmsHelpDo
	Create(values ...*model.CmsHelp) error
	CreateInBatches(values []*model.CmsHelp, batchSize int) error
	Save(values ...*model.CmsHelp) error
	First() (*model.CmsHelp, error)
	Take() (*model.CmsHelp, error)
	Last() (*model.CmsHelp, error)
	Find() ([]*model.CmsHelp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsHelp, err error)
	FindInBatches(result *[]*model.CmsHelp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsHelp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsHelpDo
	Assign(attrs ...field.AssignExpr) ICmsHelpDo
	Joins(fields ...field.RelationField) ICmsHelpDo
	Preload(fields ...field.RelationField) ICmsHelpDo
	FirstOrInit() (*model.CmsHelp, error)
	FirstOrCreate() (*model.CmsHelp, error)
	FindByPage(offset int, limit int) (result []*model.CmsHelp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsHelpDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsHelpDo) Debug() ICmsHelpDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsHelpDo) WithContext(ctx context.Context) ICmsHelpDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsHelpDo) ReadDB() ICmsHelpDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsHelpDo) WriteDB() ICmsHelpDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsHelpDo) Session(config *gorm.Session) ICmsHelpDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsHelpDo) Clauses(conds ...clause.Expression) ICmsHelpDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsHelpDo) Returning(value interface{}, columns ...string) ICmsHelpDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsHelpDo) Not(conds ...gen.Condition) ICmsHelpDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsHelpDo) Or(conds ...gen.Condition) ICmsHelpDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsHelpDo) Select(conds ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsHelpDo) Where(conds ...gen.Condition) ICmsHelpDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsHelpDo) Order(conds ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsHelpDo) Distinct(cols ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsHelpDo) Omit(cols ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsHelpDo) Join(table schema.Tabler, on ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsHelpDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsHelpDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsHelpDo) Group(cols ...field.Expr) ICmsHelpDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsHelpDo) Having(conds ...gen.Condition) ICmsHelpDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsHelpDo) Limit(limit int) ICmsHelpDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsHelpDo) Offset(offset int) ICmsHelpDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsHelpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsHelpDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsHelpDo) Unscoped() ICmsHelpDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsHelpDo) Create(values ...*model.CmsHelp) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsHelpDo) CreateInBatches(values []*model.CmsHelp, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsHelpDo) Save(values ...*model.CmsHelp) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsHelpDo) First() (*model.CmsHelp, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelp), nil
	}
}

func (c cmsHelpDo) Take() (*model.CmsHelp, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelp), nil
	}
}

func (c cmsHelpDo) Last() (*model.CmsHelp, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelp), nil
	}
}

func (c cmsHelpDo) Find() ([]*model.CmsHelp, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsHelp), err
}

func (c cmsHelpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsHelp, err error) {
	buf := make([]*model.CmsHelp, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsHelpDo) FindInBatches(result *[]*model.CmsHelp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsHelpDo) Attrs(attrs ...field.AssignExpr) ICmsHelpDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsHelpDo) Assign(attrs ...field.AssignExpr) ICmsHelpDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsHelpDo) Joins(fields ...field.RelationField) ICmsHelpDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsHelpDo) Preload(fields ...field.RelationField) ICmsHelpDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsHelpDo) FirstOrInit() (*model.CmsHelp, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelp), nil
	}
}

func (c cmsHelpDo) FirstOrCreate() (*model.CmsHelp, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsHelp), nil
	}
}

func (c cmsHelpDo) FindByPage(offset int, limit int) (result []*model.CmsHelp, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsHelpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsHelpDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsHelpDo) Delete(models ...*model.CmsHelp) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsHelpDo) withDO(do gen.Dao) *cmsHelpDo {
	c.DO = *do.(*gen.DO)
	return c
}
