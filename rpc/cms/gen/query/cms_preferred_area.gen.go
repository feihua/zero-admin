// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/cms/gen/model"
)

func newCmsPreferredArea(db *gorm.DB, opts ...gen.DOOption) cmsPreferredArea {
	_cmsPreferredArea := cmsPreferredArea{}

	_cmsPreferredArea.cmsPreferredAreaDo.UseDB(db, opts...)
	_cmsPreferredArea.cmsPreferredAreaDo.UseModel(&model.CmsPreferredArea{})

	tableName := _cmsPreferredArea.cmsPreferredAreaDo.TableName()
	_cmsPreferredArea.ALL = field.NewAsterisk(tableName)
	_cmsPreferredArea.ID = field.NewInt64(tableName, "id")
	_cmsPreferredArea.Name = field.NewString(tableName, "name")
	_cmsPreferredArea.SubTitle = field.NewString(tableName, "sub_title")
	_cmsPreferredArea.Pic = field.NewString(tableName, "pic")
	_cmsPreferredArea.Sort = field.NewInt32(tableName, "sort")
	_cmsPreferredArea.ShowStatus = field.NewInt32(tableName, "show_status")
	_cmsPreferredArea.CreateBy = field.NewString(tableName, "create_by")
	_cmsPreferredArea.CreateTime = field.NewTime(tableName, "create_time")
	_cmsPreferredArea.UpdateBy = field.NewString(tableName, "update_by")
	_cmsPreferredArea.UpdateTime = field.NewTime(tableName, "update_time")

	_cmsPreferredArea.fillFieldMap()

	return _cmsPreferredArea
}

// cmsPreferredArea 优选专区
type cmsPreferredArea struct {
	cmsPreferredAreaDo cmsPreferredAreaDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键ID
	Name       field.String // 专区名称
	SubTitle   field.String // 子标题
	Pic        field.String // 展示图片
	Sort       field.Int32  // 排序
	ShowStatus field.Int32  // 显示状态：0->不显示；1->显示
	CreateBy   field.String // 创建者
	CreateTime field.Time   // 创建时间
	UpdateBy   field.String // 更新者
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c cmsPreferredArea) Table(newTableName string) *cmsPreferredArea {
	c.cmsPreferredAreaDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cmsPreferredArea) As(alias string) *cmsPreferredArea {
	c.cmsPreferredAreaDo.DO = *(c.cmsPreferredAreaDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cmsPreferredArea) updateTableName(table string) *cmsPreferredArea {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.SubTitle = field.NewString(table, "sub_title")
	c.Pic = field.NewString(table, "pic")
	c.Sort = field.NewInt32(table, "sort")
	c.ShowStatus = field.NewInt32(table, "show_status")
	c.CreateBy = field.NewString(table, "create_by")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateBy = field.NewString(table, "update_by")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *cmsPreferredArea) WithContext(ctx context.Context) ICmsPreferredAreaDo {
	return c.cmsPreferredAreaDo.WithContext(ctx)
}

func (c cmsPreferredArea) TableName() string { return c.cmsPreferredAreaDo.TableName() }

func (c cmsPreferredArea) Alias() string { return c.cmsPreferredAreaDo.Alias() }

func (c cmsPreferredArea) Columns(cols ...field.Expr) gen.Columns {
	return c.cmsPreferredAreaDo.Columns(cols...)
}

func (c *cmsPreferredArea) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cmsPreferredArea) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["sub_title"] = c.SubTitle
	c.fieldMap["pic"] = c.Pic
	c.fieldMap["sort"] = c.Sort
	c.fieldMap["show_status"] = c.ShowStatus
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c cmsPreferredArea) clone(db *gorm.DB) cmsPreferredArea {
	c.cmsPreferredAreaDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cmsPreferredArea) replaceDB(db *gorm.DB) cmsPreferredArea {
	c.cmsPreferredAreaDo.ReplaceDB(db)
	return c
}

type cmsPreferredAreaDo struct{ gen.DO }

type ICmsPreferredAreaDo interface {
	gen.SubQuery
	Debug() ICmsPreferredAreaDo
	WithContext(ctx context.Context) ICmsPreferredAreaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICmsPreferredAreaDo
	WriteDB() ICmsPreferredAreaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICmsPreferredAreaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICmsPreferredAreaDo
	Not(conds ...gen.Condition) ICmsPreferredAreaDo
	Or(conds ...gen.Condition) ICmsPreferredAreaDo
	Select(conds ...field.Expr) ICmsPreferredAreaDo
	Where(conds ...gen.Condition) ICmsPreferredAreaDo
	Order(conds ...field.Expr) ICmsPreferredAreaDo
	Distinct(cols ...field.Expr) ICmsPreferredAreaDo
	Omit(cols ...field.Expr) ICmsPreferredAreaDo
	Join(table schema.Tabler, on ...field.Expr) ICmsPreferredAreaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICmsPreferredAreaDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICmsPreferredAreaDo
	Group(cols ...field.Expr) ICmsPreferredAreaDo
	Having(conds ...gen.Condition) ICmsPreferredAreaDo
	Limit(limit int) ICmsPreferredAreaDo
	Offset(offset int) ICmsPreferredAreaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsPreferredAreaDo
	Unscoped() ICmsPreferredAreaDo
	Create(values ...*model.CmsPreferredArea) error
	CreateInBatches(values []*model.CmsPreferredArea, batchSize int) error
	Save(values ...*model.CmsPreferredArea) error
	First() (*model.CmsPreferredArea, error)
	Take() (*model.CmsPreferredArea, error)
	Last() (*model.CmsPreferredArea, error)
	Find() ([]*model.CmsPreferredArea, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsPreferredArea, err error)
	FindInBatches(result *[]*model.CmsPreferredArea, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CmsPreferredArea) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICmsPreferredAreaDo
	Assign(attrs ...field.AssignExpr) ICmsPreferredAreaDo
	Joins(fields ...field.RelationField) ICmsPreferredAreaDo
	Preload(fields ...field.RelationField) ICmsPreferredAreaDo
	FirstOrInit() (*model.CmsPreferredArea, error)
	FirstOrCreate() (*model.CmsPreferredArea, error)
	FindByPage(offset int, limit int) (result []*model.CmsPreferredArea, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICmsPreferredAreaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cmsPreferredAreaDo) Debug() ICmsPreferredAreaDo {
	return c.withDO(c.DO.Debug())
}

func (c cmsPreferredAreaDo) WithContext(ctx context.Context) ICmsPreferredAreaDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cmsPreferredAreaDo) ReadDB() ICmsPreferredAreaDo {
	return c.Clauses(dbresolver.Read)
}

func (c cmsPreferredAreaDo) WriteDB() ICmsPreferredAreaDo {
	return c.Clauses(dbresolver.Write)
}

func (c cmsPreferredAreaDo) Session(config *gorm.Session) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Session(config))
}

func (c cmsPreferredAreaDo) Clauses(conds ...clause.Expression) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cmsPreferredAreaDo) Returning(value interface{}, columns ...string) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cmsPreferredAreaDo) Not(conds ...gen.Condition) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cmsPreferredAreaDo) Or(conds ...gen.Condition) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cmsPreferredAreaDo) Select(conds ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cmsPreferredAreaDo) Where(conds ...gen.Condition) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cmsPreferredAreaDo) Order(conds ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cmsPreferredAreaDo) Distinct(cols ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cmsPreferredAreaDo) Omit(cols ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cmsPreferredAreaDo) Join(table schema.Tabler, on ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cmsPreferredAreaDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cmsPreferredAreaDo) RightJoin(table schema.Tabler, on ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cmsPreferredAreaDo) Group(cols ...field.Expr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cmsPreferredAreaDo) Having(conds ...gen.Condition) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cmsPreferredAreaDo) Limit(limit int) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cmsPreferredAreaDo) Offset(offset int) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cmsPreferredAreaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cmsPreferredAreaDo) Unscoped() ICmsPreferredAreaDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cmsPreferredAreaDo) Create(values ...*model.CmsPreferredArea) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cmsPreferredAreaDo) CreateInBatches(values []*model.CmsPreferredArea, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cmsPreferredAreaDo) Save(values ...*model.CmsPreferredArea) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cmsPreferredAreaDo) First() (*model.CmsPreferredArea, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPreferredArea), nil
	}
}

func (c cmsPreferredAreaDo) Take() (*model.CmsPreferredArea, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPreferredArea), nil
	}
}

func (c cmsPreferredAreaDo) Last() (*model.CmsPreferredArea, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPreferredArea), nil
	}
}

func (c cmsPreferredAreaDo) Find() ([]*model.CmsPreferredArea, error) {
	result, err := c.DO.Find()
	return result.([]*model.CmsPreferredArea), err
}

func (c cmsPreferredAreaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CmsPreferredArea, err error) {
	buf := make([]*model.CmsPreferredArea, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cmsPreferredAreaDo) FindInBatches(result *[]*model.CmsPreferredArea, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cmsPreferredAreaDo) Attrs(attrs ...field.AssignExpr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cmsPreferredAreaDo) Assign(attrs ...field.AssignExpr) ICmsPreferredAreaDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cmsPreferredAreaDo) Joins(fields ...field.RelationField) ICmsPreferredAreaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cmsPreferredAreaDo) Preload(fields ...field.RelationField) ICmsPreferredAreaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cmsPreferredAreaDo) FirstOrInit() (*model.CmsPreferredArea, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPreferredArea), nil
	}
}

func (c cmsPreferredAreaDo) FirstOrCreate() (*model.CmsPreferredArea, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CmsPreferredArea), nil
	}
}

func (c cmsPreferredAreaDo) FindByPage(offset int, limit int) (result []*model.CmsPreferredArea, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cmsPreferredAreaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cmsPreferredAreaDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cmsPreferredAreaDo) Delete(models ...*model.CmsPreferredArea) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cmsPreferredAreaDo) withDO(do gen.Dao) *cmsPreferredAreaDo {
	c.DO = *do.(*gen.DO)
	return c
}
